/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={22:(t,e,r)=>{"use strict";const n=r(341).v4,i=r(289),o=function(t,e){if(!(this instanceof o))return new o(t,e);e||(e={}),this.options={reviver:void 0!==e.reviver?e.reviver:null,replacer:void 0!==e.replacer?e.replacer:null,generator:void 0!==e.generator?e.generator:function(){return n()},version:void 0!==e.version?e.version:2,notificationIdNull:"boolean"==typeof e.notificationIdNull&&e.notificationIdNull},this.callServer=t};t.exports=o,o.prototype.request=function(t,e,r,n){const o=this;let s=null;const a=Array.isArray(t)&&"function"==typeof e;if(1===this.options.version&&a)throw new TypeError("JSON-RPC 1.0 does not support batching");if(a||!a&&t&&"object"==typeof t&&"function"==typeof e)n=e,s=t;else{"function"==typeof r&&(n=r,r=void 0);const o="function"==typeof n;try{s=i(t,e,r,{generator:this.options.generator,version:this.options.version,notificationIdNull:this.options.notificationIdNull})}catch(t){if(o)return n(t);throw t}if(!o)return s}let c;try{c=JSON.stringify(s,this.options.replacer)}catch(t){return n(t)}return this.callServer(c,(function(t,e){o._parseResponse(t,e,n)})),s},o.prototype._parseResponse=function(t,e,r){if(t)return void r(t);if(!e)return r();let n;try{n=JSON.parse(e,this.options.reviver)}catch(t){return r(t)}if(3===r.length){if(Array.isArray(n)){const t=function(t){return void 0!==t.error},e=function(e){return!t(e)};return r(null,n.filter(t),n.filter(e))}return r(null,n.error,n.result)}r(null,n)}},184:(t,e)=>{"use strict";e.k5=function(t){{const e=Buffer.from(t);e.reverse();const r=e.toString("hex");return 0===r.length?BigInt(0):BigInt(`0x${r}`)}},e.Bq=function(t,e){{const r=t.toString(16),n=Buffer.from(r.padStart(2*e,"0").slice(0,2*e),"hex");return n.reverse(),n}}},228:t=>{"use strict";var e=Object.prototype.hasOwnProperty,r="~";function n(){}function i(t,e,r){this.fn=t,this.context=e,this.once=r||!1}function o(t,e,n,o,s){if("function"!=typeof n)throw new TypeError("The listener must be a function");var a=new i(n,o||t,s),c=r?r+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],a]:t._events[c].push(a):(t._events[c]=a,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function a(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(r=!1)),a.prototype.eventNames=function(){var t,n,i=[];if(0===this._eventsCount)return i;for(n in t=this._events)e.call(t,n)&&i.push(r?n.slice(1):n);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},a.prototype.listeners=function(t){var e=r?r+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var i=0,o=n.length,s=new Array(o);i<o;i++)s[i]=n[i].fn;return s},a.prototype.listenerCount=function(t){var e=r?r+t:t,n=this._events[e];return n?n.fn?1:n.length:0},a.prototype.emit=function(t,e,n,i,o,s){var a=r?r+t:t;if(!this._events[a])return!1;var c,u,h=this._events[a],l=arguments.length;if(h.fn){switch(h.once&&this.removeListener(t,h.fn,void 0,!0),l){case 1:return h.fn.call(h.context),!0;case 2:return h.fn.call(h.context,e),!0;case 3:return h.fn.call(h.context,e,n),!0;case 4:return h.fn.call(h.context,e,n,i),!0;case 5:return h.fn.call(h.context,e,n,i,o),!0;case 6:return h.fn.call(h.context,e,n,i,o,s),!0}for(u=1,c=new Array(l-1);u<l;u++)c[u-1]=arguments[u];h.fn.apply(h.context,c)}else{var d,f=h.length;for(u=0;u<f;u++)switch(h[u].once&&this.removeListener(t,h[u].fn,void 0,!0),l){case 1:h[u].fn.call(h[u].context);break;case 2:h[u].fn.call(h[u].context,e);break;case 3:h[u].fn.call(h[u].context,e,n);break;case 4:h[u].fn.call(h[u].context,e,n,i);break;default:if(!c)for(d=1,c=new Array(l-1);d<l;d++)c[d-1]=arguments[d];h[u].fn.apply(h[u].context,c)}}return!0},a.prototype.on=function(t,e,r){return o(this,t,e,r,!1)},a.prototype.once=function(t,e,r){return o(this,t,e,r,!0)},a.prototype.removeListener=function(t,e,n,i){var o=r?r+t:t;if(!this._events[o])return this;if(!e)return s(this,o),this;var a=this._events[o];if(a.fn)a.fn!==e||i&&!a.once||n&&a.context!==n||s(this,o);else{for(var c=0,u=[],h=a.length;c<h;c++)(a[c].fn!==e||i&&!a[c].once||n&&a[c].context!==n)&&u.push(a[c]);u.length?this._events[o]=1===u.length?u[0]:u:s(this,o)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=r?r+t:t,this._events[e]&&s(this,e)):(this._events=new n,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=r,a.EventEmitter=a,t.exports=a},251:(t,e)=>{e.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,c=(1<<a)-1,u=c>>1,h=-7,l=r?i-1:0,d=r?-1:1,f=t[e+l];for(l+=d,o=f&(1<<-h)-1,f>>=-h,h+=a;h>0;o=256*o+t[e+l],l+=d,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=n;h>0;s=256*s+t[e+l],l+=d,h-=8);if(0===o)o=1-u;else{if(o===c)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,n),o-=u}return(f?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,a,c,u=8*o-i-1,h=(1<<u)-1,l=h>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:o-1,p=n?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-s))<1&&(s--,c*=2),(e+=s+l>=1?d/c:d*Math.pow(2,1-l))*c>=2&&(s++,c/=2),s+l>=h?(a=0,s=h):s+l>=1?(a=(e*c-1)*Math.pow(2,i),s+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,i),s=0));i>=8;t[r+f]=255&a,f+=p,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;t[r+f]=255&s,f+=p,s/=256,u-=8);t[r+f-p]|=128*g}},281:(t,e)=>{"use strict";function r(t,e,r){return e<=t&&t<=r}function n(t){if(void 0===t)return{};if(t===Object(t))return t;throw TypeError("Could not convert argument to dictionary")}function i(t){this.tokens=[].slice.call(t)}i.prototype={endOfStream:function(){return!this.tokens.length},read:function(){return this.tokens.length?this.tokens.shift():-1},prepend:function(t){if(Array.isArray(t))for(var e=t;e.length;)this.tokens.unshift(e.pop());else this.tokens.unshift(t)},push:function(t){if(Array.isArray(t))for(var e=t;e.length;)this.tokens.push(e.shift());else this.tokens.push(t)}};var o=-1;function s(t,e){if(t)throw TypeError("Decoder error");return e||65533}var a="utf-8";function c(t,e){if(!(this instanceof c))return new c(t,e);if((t=void 0!==t?String(t).toLowerCase():a)!==a)throw new Error("Encoding not supported. Only utf-8 is supported");e=n(e),this._streaming=!1,this._BOMseen=!1,this._decoder=null,this._fatal=Boolean(e.fatal),this._ignoreBOM=Boolean(e.ignoreBOM),Object.defineProperty(this,"encoding",{value:"utf-8"}),Object.defineProperty(this,"fatal",{value:this._fatal}),Object.defineProperty(this,"ignoreBOM",{value:this._ignoreBOM})}function u(t,e){if(!(this instanceof u))return new u(t,e);if((t=void 0!==t?String(t).toLowerCase():a)!==a)throw new Error("Encoding not supported. Only utf-8 is supported");e=n(e),this._streaming=!1,this._encoder=null,this._options={fatal:Boolean(e.fatal)},Object.defineProperty(this,"encoding",{value:"utf-8"})}function h(t){var e=t.fatal,n=0,i=0,a=0,c=128,u=191;this.handler=function(t,h){if(-1===h&&0!==a)return a=0,s(e);if(-1===h)return o;if(0===a){if(r(h,0,127))return h;if(r(h,194,223))a=1,n=h-192;else if(r(h,224,239))224===h&&(c=160),237===h&&(u=159),a=2,n=h-224;else{if(!r(h,240,244))return s(e);240===h&&(c=144),244===h&&(u=143),a=3,n=h-240}return n<<=6*a,null}if(!r(h,c,u))return n=a=i=0,c=128,u=191,t.prepend(h),s(e);if(c=128,u=191,n+=h-128<<6*(a-(i+=1)),i!==a)return null;var l=n;return n=a=i=0,l}}function l(t){t.fatal,this.handler=function(t,e){if(-1===e)return o;if(r(e,0,127))return e;var n,i;r(e,128,2047)?(n=1,i=192):r(e,2048,65535)?(n=2,i=224):r(e,65536,1114111)&&(n=3,i=240);for(var s=[(e>>6*n)+i];n>0;){var a=e>>6*(n-1);s.push(128|63&a),n-=1}return s}}c.prototype={decode:function(t,e){var r;r="object"==typeof t&&t instanceof ArrayBuffer?new Uint8Array(t):"object"==typeof t&&"buffer"in t&&t.buffer instanceof ArrayBuffer?new Uint8Array(t.buffer,t.byteOffset,t.byteLength):new Uint8Array(0),e=n(e),this._streaming||(this._decoder=new h({fatal:this._fatal}),this._BOMseen=!1),this._streaming=Boolean(e.stream);for(var s,a=new i(r),c=[];!a.endOfStream()&&(s=this._decoder.handler(a,a.read()))!==o;)null!==s&&(Array.isArray(s)?c.push.apply(c,s):c.push(s));if(!this._streaming){do{if((s=this._decoder.handler(a,a.read()))===o)break;null!==s&&(Array.isArray(s)?c.push.apply(c,s):c.push(s))}while(!a.endOfStream());this._decoder=null}return c.length&&(-1===["utf-8"].indexOf(this.encoding)||this._ignoreBOM||this._BOMseen||(65279===c[0]?(this._BOMseen=!0,c.shift()):this._BOMseen=!0)),function(t){for(var e="",r=0;r<t.length;++r){var n=t[r];n<=65535?e+=String.fromCharCode(n):(n-=65536,e+=String.fromCharCode(55296+(n>>10),56320+(1023&n)))}return e}(c)}},u.prototype={encode:function(t,e){t=t?String(t):"",e=n(e),this._streaming||(this._encoder=new l(this._options)),this._streaming=Boolean(e.stream);for(var r,s=[],a=new i(function(t){for(var e=String(t),r=e.length,n=0,i=[];n<r;){var o=e.charCodeAt(n);if(o<55296||o>57343)i.push(o);else if(56320<=o&&o<=57343)i.push(65533);else if(55296<=o&&o<=56319)if(n===r-1)i.push(65533);else{var s=t.charCodeAt(n+1);if(56320<=s&&s<=57343){var a=1023&o,c=1023&s;i.push(65536+(a<<10)+c),n+=1}else i.push(65533)}n+=1}return i}(t));!a.endOfStream()&&(r=this._encoder.handler(a,a.read()))!==o;)Array.isArray(r)?s.push.apply(s,r):s.push(r);if(!this._streaming){for(;(r=this._encoder.handler(a,a.read()))!==o;)Array.isArray(r)?s.push.apply(s,r):s.push(r);this._encoder=null}return new Uint8Array(s)}},e.TextEncoder=u,e.TextDecoder=c},287:(t,e,r)=>{"use strict";const n=r(526),i=r(251),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=c,e.SlowBuffer=function(t){return+t!=t&&(t=0),c.alloc(+t)},e.INSPECT_MAX_BYTES=50;const s=2147483647;function a(t){if(t>s)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,c.prototype),e}function c(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return l(t)}return u(t,e,r)}function u(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!c.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const r=0|g(t,e);let n=a(r);const i=n.write(t,e);return i!==r&&(n=n.slice(0,i)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(G(t,Uint8Array)){const e=new Uint8Array(t);return f(e.buffer,e.byteOffset,e.byteLength)}return d(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(G(t,ArrayBuffer)||t&&G(t.buffer,ArrayBuffer))return f(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(G(t,SharedArrayBuffer)||t&&G(t.buffer,SharedArrayBuffer)))return f(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return c.from(n,e,r);const i=function(t){if(c.isBuffer(t)){const e=0|p(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||Z(t.length)?a(0):d(t):"Buffer"===t.type&&Array.isArray(t.data)?d(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return c.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function l(t){return h(t),a(t<0?0:0|p(t))}function d(t){const e=t.length<0?0:0|p(t.length),r=a(e);for(let n=0;n<e;n+=1)r[n]=255&t[n];return r}function f(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,c.prototype),n}function p(t){if(t>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|t}function g(t,e){if(c.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||G(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return j(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return V(t).length;default:if(i)return n?-1:j(t).length;e=(""+e).toLowerCase(),i=!0}}function m(t,e,r){let n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,r);case"utf8":case"utf-8":return E(this,e,r);case"ascii":return x(this,e,r);case"latin1":case"binary":return M(this,e,r);case"base64":return _(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function y(t,e,r){const n=t[e];t[e]=t[r],t[r]=n}function b(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),Z(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=c.from(e,n)),c.isBuffer(e))return 0===e.length?-1:w(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):w(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function w(t,e,r,n,i){let o,s=1,a=t.length,c=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,c/=2,r/=2}function u(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){let n=-1;for(o=r;o<a;o++)if(u(t,o)===u(e,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===c)return n*s}else-1!==n&&(o-=o-n),n=-1}else for(r+c>a&&(r=a-c),o=r;o>=0;o--){let r=!0;for(let n=0;n<c;n++)if(u(t,o+n)!==u(e,n)){r=!1;break}if(r)return o}return-1}function k(t,e,r,n){r=Number(r)||0;const i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=e.length;let s;for(n>o/2&&(n=o/2),s=0;s<n;++s){const n=parseInt(e.substr(2*s,2),16);if(Z(n))return s;t[r+s]=n}return s}function v(t,e,r,n){return Y(j(e,t.length-r),t,r,n)}function S(t,e,r,n){return Y(function(t){const e=[];for(let r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function I(t,e,r,n){return Y(V(e),t,r,n)}function A(t,e,r,n){return Y(function(t,e){let r,n,i;const o=[];for(let s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function _(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function E(t,e,r){r=Math.min(t.length,r);const n=[];let i=e;for(;i<r;){const e=t[i];let o=null,s=e>239?4:e>223?3:e>191?2:1;if(i+s<=r){let r,n,a,c;switch(s){case 1:e<128&&(o=e);break;case 2:r=t[i+1],128==(192&r)&&(c=(31&e)<<6|63&r,c>127&&(o=c));break;case 3:r=t[i+1],n=t[i+2],128==(192&r)&&128==(192&n)&&(c=(15&e)<<12|(63&r)<<6|63&n,c>2047&&(c<55296||c>57343)&&(o=c));break;case 4:r=t[i+1],n=t[i+2],a=t[i+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(c=(15&e)<<18|(63&r)<<12|(63&n)<<6|63&a,c>65535&&c<1114112&&(o=c))}}null===o?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=s}return function(t){const e=t.length;if(e<=B)return String.fromCharCode.apply(String,t);let r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=B));return r}(n)}e.kMaxLength=s,c.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(t,e,r){return u(t,e,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(t,e,r){return function(t,e,r){return h(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},c.allocUnsafe=function(t){return l(t)},c.allocUnsafeSlow=function(t){return l(t)},c.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==c.prototype},c.compare=function(t,e){if(G(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),G(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let r=t.length,n=e.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);let r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;const n=c.allocUnsafe(e);let i=0;for(r=0;r<t.length;++r){let e=t[r];if(G(e,Uint8Array))i+e.length>n.length?(c.isBuffer(e)||(e=c.from(e)),e.copy(n,i)):Uint8Array.prototype.set.call(n,e,i);else{if(!c.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(n,i)}i+=e.length}return n},c.byteLength=g,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)y(this,e,e+1);return this},c.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},c.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},c.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?E(this,0,t):m.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){let t="";const r=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},o&&(c.prototype[o]=c.prototype.inspect),c.prototype.compare=function(t,e,r,n,i){if(G(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;let o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0);const a=Math.min(o,s),u=this.slice(n,i),h=t.slice(e,r);for(let t=0;t<a;++t)if(u[t]!==h[t]){o=u[t],s=h[t];break}return o<s?-1:s<o?1:0},c.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},c.prototype.indexOf=function(t,e,r){return b(this,t,e,r,!0)},c.prototype.lastIndexOf=function(t,e,r){return b(this,t,e,r,!1)},c.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return k(this,t,e,r);case"utf8":case"utf-8":return v(this,t,e,r);case"ascii":case"latin1":case"binary":return S(this,t,e,r);case"base64":return I(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const B=4096;function x(t,e,r){let n="";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function M(t,e,r){let n="";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function P(t,e,r){const n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=e;n<r;++n)i+=J[t[n]];return i}function R(t,e,r){const n=t.slice(e,r);let i="";for(let t=0;t<n.length-1;t+=2)i+=String.fromCharCode(n[t]+256*n[t+1]);return i}function T(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function L(t,e,r,n,i,o){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function O(t,e,r,n,i){q(e,n,i,t,r,7);let o=Number(e&BigInt(4294967295));t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,r}function C(t,e,r,n,i){q(e,n,i,t,r,7);let o=Number(e&BigInt(4294967295));t[r+7]=o,o>>=8,t[r+6]=o,o>>=8,t[r+5]=o,o>>=8,t[r+4]=o;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[r+3]=s,s>>=8,t[r+2]=s,s>>=8,t[r+1]=s,s>>=8,t[r]=s,r+8}function z(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function N(t,e,r,n,o){return e=+e,r>>>=0,o||z(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function U(t,e,r,n,o){return e=+e,r>>>=0,o||z(t,0,r,8),i.write(t,e,r,n,52,8),r+8}c.prototype.slice=function(t,e){const r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);const n=this.subarray(t,e);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUintLE=c.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||T(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return n},c.prototype.readUintBE=c.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||T(t,e,this.length);let n=this[t+--e],i=1;for(;e>0&&(i*=256);)n+=this[t+--e]*i;return n},c.prototype.readUint8=c.prototype.readUInt8=function(t,e){return t>>>=0,e||T(t,1,this.length),this[t]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(t,e){return t>>>=0,e||T(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(t,e){return t>>>=0,e||T(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(t,e){return t>>>=0,e||T(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(t,e){return t>>>=0,e||T(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readBigUInt64LE=X((function(t){D(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||F(t,this.length-8);const n=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,i=this[++t]+256*this[++t]+65536*this[++t]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),c.prototype.readBigUInt64BE=X((function(t){D(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||F(t,this.length-8);const n=e*2**24+65536*this[++t]+256*this[++t]+this[++t],i=this[++t]*2**24+65536*this[++t]+256*this[++t]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),c.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||T(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*e)),n},c.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||T(t,e,this.length);let n=e,i=1,o=this[t+--n];for(;n>0&&(i*=256);)o+=this[t+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*e)),o},c.prototype.readInt8=function(t,e){return t>>>=0,e||T(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){t>>>=0,e||T(t,2,this.length);const r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(t,e){t>>>=0,e||T(t,2,this.length);const r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(t,e){return t>>>=0,e||T(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return t>>>=0,e||T(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readBigInt64LE=X((function(t){D(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||F(t,this.length-8);const n=this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),c.prototype.readBigInt64BE=X((function(t){D(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||F(t,this.length-8);const n=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(n)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+r)})),c.prototype.readFloatLE=function(t,e){return t>>>=0,e||T(t,4,this.length),i.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return t>>>=0,e||T(t,4,this.length),i.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return t>>>=0,e||T(t,8,this.length),i.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return t>>>=0,e||T(t,8,this.length),i.read(this,t,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);let i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||L(this,t,e,r,Math.pow(2,8*r)-1,0);let i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},c.prototype.writeUint8=c.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,255,0),this[e]=255&t,e+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeBigUInt64LE=X((function(t,e=0){return O(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=X((function(t,e=0){return C(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);L(this,t,e,r,n-1,-n)}let i=0,o=1,s=0;for(this[e]=255&t;++i<r&&(o*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/o|0)-s&255;return e+r},c.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);L(this,t,e,r,n-1,-n)}let i=r-1,o=1,s=0;for(this[e+i]=255&t;--i>=0&&(o*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/o|0)-s&255;return e+r},c.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},c.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||L(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeBigInt64LE=X((function(t,e=0){return O(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=X((function(t,e=0){return C(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(t,e,r){return N(this,t,e,!0,r)},c.prototype.writeFloatBE=function(t,e,r){return N(this,t,e,!1,r)},c.prototype.writeDoubleLE=function(t,e,r){return U(this,t,e,!0,r)},c.prototype.writeDoubleBE=function(t,e,r){return U(this,t,e,!1,r)},c.prototype.copy=function(t,e,r,n){if(!c.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);const i=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},c.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){const e=t.charCodeAt(0);("utf8"===n&&e<128||"latin1"===n)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;let i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{const o=c.isBuffer(t)?t:c.from(t,n),s=o.length;if(0===s)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(i=0;i<r-e;++i)this[i+e]=o[i%s]}return this};const W={};function K(t,e,r){W[t]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function H(t){let e="",r=t.length;const n="-"===t[0]?1:0;for(;r>=n+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return`${t.slice(0,r)}${e}`}function q(t,e,r,n,i,o){if(t>r||t<e){const n="bigint"==typeof e?"n":"";let i;throw i=o>3?0===e||e===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${e}${n} and <= ${r}${n}`,new W.ERR_OUT_OF_RANGE("value",i,t)}!function(t,e,r){D(e,"offset"),void 0!==t[e]&&void 0!==t[e+r]||F(e,t.length-(r+1))}(n,i,o)}function D(t,e){if("number"!=typeof t)throw new W.ERR_INVALID_ARG_TYPE(e,"number",t)}function F(t,e,r){if(Math.floor(t)!==t)throw D(t,r),new W.ERR_OUT_OF_RANGE(r||"offset","an integer",t);if(e<0)throw new W.ERR_BUFFER_OUT_OF_BOUNDS;throw new W.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${e}`,t)}K("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),K("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),K("ERR_OUT_OF_RANGE",(function(t,e,r){let n=`The value of "${t}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=H(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=H(i)),i+="n"),n+=` It must be ${e}. Received ${i}`,n}),RangeError);const $=/[^+/0-9A-Za-z-_]/g;function j(t,e){let r;e=e||1/0;const n=t.length;let i=null;const o=[];for(let s=0;s<n;++s){if(r=t.charCodeAt(s),r>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function V(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace($,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Y(t,e,r,n){let i;for(i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function G(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function Z(t){return t!=t}const J=function(){const t="0123456789abcdef",e=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)e[n+i]=t[r]+t[i]}return e}();function X(t){return"undefined"==typeof BigInt?Q:t}function Q(){throw new Error("BigInt not supported")}},289:(t,e,r)=>{"use strict";const n=r(341).v4;t.exports=function(t,e,r,i){if("string"!=typeof t)throw new TypeError(t+" must be a string");const o="number"==typeof(i=i||{}).version?i.version:2;if(1!==o&&2!==o)throw new TypeError(o+" must be 1 or 2");const s={method:t};if(2===o&&(s.jsonrpc="2.0"),e){if("object"!=typeof e&&!Array.isArray(e))throw new TypeError(e+" must be an object, array or omitted");s.params=e}if(void 0===r){const t="function"==typeof i.generator?i.generator:function(){return n()};s.id=t(s,i)}else 2===o&&null===r?i.notificationIdNull&&(s.id=null):s.id=r;return s}},317:(t,e,r)=>{const{Connection:n,PublicKey:i,Keypair:o,LAMPORTS_PER_SOL:s}=r(343);t.exports={getBalance:async function(t,e){try{return`Баланс: ${await t.getBalance(e)/s} SOL`}catch(t){return console.error("Ошибка при проверке баланса:",t),0}},getAccountInfo:async function(t,e){try{const r=await t.getAccountInfo(e);let n="";return n=r?`Владелец: ${r.owner.toString()}<br>Исполняемый: ${r.executable}<br>Размер данных: ${r.data.length} байт`:"Аккаунт не найден или не содержит данных",n}catch(t){return console.error("Ошибка при получении информации об аккаунте:",t),null}},getRecentTransactions:async function(t,e,r=30){try{const n=await t.getSignaturesForAddress(e,{limit:r});if(0===n.length)return[];const i=await Promise.all(n.map((async e=>{const r=await t.getTransaction(e.signature);return{signature:e.signature,timestamp:new Date(1e3*e.blockTime).toLocaleString(),successful:"finalized"===e.confirmationStatus,details:r}})));let o=[];return i.forEach(((t,e)=>{const r=`\n          <div class="transactions__item">\n            <p class="transactions__value">\n              <span class="transactions__description">Транзакция ${e+1}: </span>\n            </p>\n            <p class="transactions__value">\n              <span class="transactions__description">Сигнатура: </span>\n              ${t.signature}\n            </p>\n            <p class="transactions__value">\n              <span class="transactions__description">Время: </span>\n              ${t.timestamp}\n            </p>\n            <p class="transactions__value">\n              <span class="transactions__description">Статус: </span>\n              ${t.successful?"Успешно":"В обработке"}\n            </p>\n          </div>\n        `;o.push(r)})),o.reverse()}catch(t){return console.error("Ошибка при получении транзакций:",t),[]}},getNetworkInfo:async function(t){try{const e=await t.getVersion(),r=await t.getBlockHeight(),n=await t.getSlot(),i=await t.getLatestBlockhash();return await t.get,`Версия: ${e["solana-core"]}<br>Высота блокчейна: ${r}<br>Текущий слот: ${n}<br>Текущий хеш блока: ${i.blockhash}`}catch(t){return console.error("Ошибка при получении информации о сети:",t),null}}}},341:(t,e,r)=>{"use strict";var n;r.d(e,{v4:()=>h});var i=new Uint8Array(16);function o(){if(!n&&!(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(i)}const s=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var a=[],c=0;c<256;++c)a.push((c+256).toString(16).substr(1));const u=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(a[t[e+0]]+a[t[e+1]]+a[t[e+2]]+a[t[e+3]]+"-"+a[t[e+4]]+a[t[e+5]]+"-"+a[t[e+6]]+a[t[e+7]]+"-"+a[t[e+8]]+a[t[e+9]]+"-"+a[t[e+10]]+a[t[e+11]]+a[t[e+12]]+a[t[e+13]]+a[t[e+14]]+a[t[e+15]]).toLowerCase();if(!function(t){return"string"==typeof t&&s.test(t)}(r))throw TypeError("Stringified UUID is invalid");return r},h=function(t,e,r){var n=(t=t||{}).random||(t.rng||o)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,e){r=r||0;for(var i=0;i<16;++i)e[r+i]=n[i];return e}return u(n)}},343:(t,e,r)=>{"use strict";r.r(e),r.d(e,{Account:()=>Kr,AddressLookupTableAccount:()=>Qn,AddressLookupTableInstruction:()=>Zo,AddressLookupTableProgram:()=>Jo,Authorized:()=>cs,BLOCKHASH_CACHE_TIMEOUT_MS:()=>oi,BPF_LOADER_DEPRECATED_PROGRAM_ID:()=>Hr,BPF_LOADER_PROGRAM_ID:()=>qn,BpfLoader:()=>Dn,COMPUTE_BUDGET_INSTRUCTION_LAYOUTS:()=>Qo,ComputeBudgetInstruction:()=>Xo,ComputeBudgetProgram:()=>ts,Connection:()=>Vo,Ed25519Program:()=>rs,Enum:()=>Lr,EpochSchedule:()=>Zn,FeeCalculatorLayout:()=>Tn,Keypair:()=>Yo,LAMPORTS_PER_SOL:()=>Rs,LOOKUP_TABLE_INSTRUCTION_LAYOUTS:()=>Go,Loader:()=>Hn,Lockup:()=>us,MAX_SEED_LENGTH:()=>zr,Message:()=>an,MessageAccountKeys:()=>Yr,MessageV0:()=>cn,NONCE_ACCOUNT_LENGTH:()=>On,NonceAccount:()=>Cn,PACKET_DATA_SIZE:()=>qr,PUBLIC_KEY_LENGTH:()=>Nr,PublicKey:()=>Wr,SIGNATURE_LENGTH_IN_BYTES:()=>Fr,SOLANA_SCHEMA:()=>Or,STAKE_CONFIG_ID:()=>as,STAKE_INSTRUCTION_LAYOUTS:()=>ls,SYSTEM_INSTRUCTION_LAYOUTS:()=>Un,SYSVAR_CLOCK_PUBKEY:()=>mn,SYSVAR_EPOCH_SCHEDULE_PUBKEY:()=>yn,SYSVAR_INSTRUCTIONS_PUBKEY:()=>bn,SYSVAR_RECENT_BLOCKHASHES_PUBKEY:()=>wn,SYSVAR_RENT_PUBKEY:()=>kn,SYSVAR_REWARDS_PUBKEY:()=>vn,SYSVAR_SLOT_HASHES_PUBKEY:()=>Sn,SYSVAR_SLOT_HISTORY_PUBKEY:()=>In,SYSVAR_STAKE_HISTORY_PUBKEY:()=>An,Secp256k1Program:()=>os,SendTransactionError:()=>_n,SolanaJSONRPCError:()=>Bn,SolanaJSONRPCErrorCode:()=>En,StakeAuthorizationLayout:()=>ds,StakeInstruction:()=>hs,StakeProgram:()=>fs,Struct:()=>Tr,SystemInstruction:()=>Nn,SystemProgram:()=>Wn,Transaction:()=>fn,TransactionExpiredBlockheightExceededError:()=>$r,TransactionExpiredNonceInvalidError:()=>Vr,TransactionExpiredTimeoutError:()=>jr,TransactionInstruction:()=>dn,TransactionMessage:()=>pn,TransactionStatus:()=>hn,VALIDATOR_INFO_KEY:()=>ws,VERSION_PREFIX_MASK:()=>Dr,VOTE_PROGRAM_ID:()=>Ss,ValidatorInfo:()=>vs,VersionedMessage:()=>un,VersionedTransaction:()=>gn,VoteAccount:()=>As,VoteAuthorizationLayout:()=>ys,VoteInit:()=>ps,VoteInstruction:()=>gs,VoteProgram:()=>bs,clusterApiUrl:()=>Ms,sendAndConfirmRawTransaction:()=>Ps,sendAndConfirmTransaction:()=>xn});var n={};r.r(n),r.d(n,{aK:()=>rt,e8:()=>K,DO:()=>W,dJ:()=>nt,OG:()=>it,My:()=>q,Ph:()=>Y,lX:()=>G,Id:()=>Q,fg:()=>at,qj:()=>X,aT:()=>V,r4:()=>et,aY:()=>U,x:()=>ht,lq:()=>Z,z:()=>J,zW:()=>D,Q5:()=>ut});var i=r(287);function o(t){if(!Number.isSafeInteger(t)||t<0)throw new Error("positive integer expected, got "+t)}function s(t,...e){if(!((r=t)instanceof Uint8Array||ArrayBuffer.isView(r)&&"Uint8Array"===r.constructor.name))throw new Error("Uint8Array expected");var r;if(e.length>0&&!e.includes(t.length))throw new Error("Uint8Array expected of length "+e+", got length="+t.length)}function a(t,e=!0){if(t.destroyed)throw new Error("Hash instance has been destroyed");if(e&&t.finished)throw new Error("Hash#digest() has already been called")}function c(t,e){s(t);const r=e.outputLen;if(t.length<r)throw new Error("digestInto() expects output buffer of length at least "+r)}const u="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0;function h(t){return new DataView(t.buffer,t.byteOffset,t.byteLength)}function l(t,e){return t<<32-e|t>>>e}const d=(()=>68===new Uint8Array(new Uint32Array([287454020]).buffer)[0])();function f(t){for(let r=0;r<t.length;r++)t[r]=(e=t[r])<<24&4278190080|e<<8&16711680|e>>>8&65280|e>>>24&255;var e}function p(t){return"string"==typeof t&&(t=function(t){if("string"!=typeof t)throw new Error("utf8ToBytes expected string, got "+typeof t);return new Uint8Array((new TextEncoder).encode(t))}(t)),s(t),t}class g{clone(){return this._cloneInto()}}function m(t){const e=e=>t().update(p(e)).digest(),r=t();return e.outputLen=r.outputLen,e.blockLen=r.blockLen,e.create=()=>t(),e}function y(t=32){if(u&&"function"==typeof u.getRandomValues)return u.getRandomValues(new Uint8Array(t));if(u&&"function"==typeof u.randomBytes)return u.randomBytes(t);throw new Error("crypto.getRandomValues must be defined")}function b(t,e,r){return t&e^t&r^e&r}class w extends g{constructor(t,e,r,n){super(),this.blockLen=t,this.outputLen=e,this.padOffset=r,this.isLE=n,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(t),this.view=h(this.buffer)}update(t){a(this);const{view:e,buffer:r,blockLen:n}=this,i=(t=p(t)).length;for(let o=0;o<i;){const s=Math.min(n-this.pos,i-o);if(s!==n)r.set(t.subarray(o,o+s),this.pos),this.pos+=s,o+=s,this.pos===n&&(this.process(e,0),this.pos=0);else{const e=h(t);for(;n<=i-o;o+=n)this.process(e,o)}}return this.length+=t.length,this.roundClean(),this}digestInto(t){a(this),c(t,this),this.finished=!0;const{buffer:e,view:r,blockLen:n,isLE:i}=this;let{pos:o}=this;e[o++]=128,this.buffer.subarray(o).fill(0),this.padOffset>n-o&&(this.process(r,0),o=0);for(let t=o;t<n;t++)e[t]=0;!function(t,e,r,n){if("function"==typeof t.setBigUint64)return t.setBigUint64(e,r,n);const i=BigInt(32),o=BigInt(4294967295),s=Number(r>>i&o),a=Number(r&o),c=n?4:0,u=n?0:4;t.setUint32(e+c,s,n),t.setUint32(e+u,a,n)}(r,n-8,BigInt(8*this.length),i),this.process(r,0);const s=h(t),u=this.outputLen;if(u%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const l=u/4,d=this.get();if(l>d.length)throw new Error("_sha2: outputLen bigger than state");for(let t=0;t<l;t++)s.setUint32(4*t,d[t],i)}digest(){const{buffer:t,outputLen:e}=this;this.digestInto(t);const r=t.slice(0,e);return this.destroy(),r}_cloneInto(t){t||(t=new this.constructor),t.set(...this.get());const{blockLen:e,buffer:r,length:n,finished:i,destroyed:o,pos:s}=this;return t.length=n,t.pos=s,t.finished=i,t.destroyed=o,n%e&&t.buffer.set(r),t}}const k=BigInt(2**32-1),v=BigInt(32);function S(t,e=!1){return e?{h:Number(t&k),l:Number(t>>v&k)}:{h:0|Number(t>>v&k),l:0|Number(t&k)}}function I(t,e=!1){let r=new Uint32Array(t.length),n=new Uint32Array(t.length);for(let i=0;i<t.length;i++){const{h:o,l:s}=S(t[i],e);[r[i],n[i]]=[o,s]}return[r,n]}const A=(t,e,r)=>t<<r|e>>>32-r,_=(t,e,r)=>e<<r|t>>>32-r,E=(t,e,r)=>e<<r-32|t>>>64-r,B=(t,e,r)=>t<<r-32|e>>>64-r,x={fromBig:S,split:I,toBig:(t,e)=>BigInt(t>>>0)<<v|BigInt(e>>>0),shrSH:(t,e,r)=>t>>>r,shrSL:(t,e,r)=>t<<32-r|e>>>r,rotrSH:(t,e,r)=>t>>>r|e<<32-r,rotrSL:(t,e,r)=>t<<32-r|e>>>r,rotrBH:(t,e,r)=>t<<64-r|e>>>r-32,rotrBL:(t,e,r)=>t>>>r-32|e<<64-r,rotr32H:(t,e)=>e,rotr32L:(t,e)=>t,rotlSH:A,rotlSL:_,rotlBH:E,rotlBL:B,add:function(t,e,r,n){const i=(e>>>0)+(n>>>0);return{h:t+r+(i/2**32|0)|0,l:0|i}},add3L:(t,e,r)=>(t>>>0)+(e>>>0)+(r>>>0),add3H:(t,e,r,n)=>e+r+n+(t/2**32|0)|0,add4L:(t,e,r,n)=>(t>>>0)+(e>>>0)+(r>>>0)+(n>>>0),add4H:(t,e,r,n,i)=>e+r+n+i+(t/2**32|0)|0,add5H:(t,e,r,n,i,o)=>e+r+n+i+o+(t/2**32|0)|0,add5L:(t,e,r,n,i)=>(t>>>0)+(e>>>0)+(r>>>0)+(n>>>0)+(i>>>0)},[M,P]=(()=>x.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map((t=>BigInt(t)))))(),R=new Uint32Array(80),T=new Uint32Array(80);class L extends w{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:t,Al:e,Bh:r,Bl:n,Ch:i,Cl:o,Dh:s,Dl:a,Eh:c,El:u,Fh:h,Fl:l,Gh:d,Gl:f,Hh:p,Hl:g}=this;return[t,e,r,n,i,o,s,a,c,u,h,l,d,f,p,g]}set(t,e,r,n,i,o,s,a,c,u,h,l,d,f,p,g){this.Ah=0|t,this.Al=0|e,this.Bh=0|r,this.Bl=0|n,this.Ch=0|i,this.Cl=0|o,this.Dh=0|s,this.Dl=0|a,this.Eh=0|c,this.El=0|u,this.Fh=0|h,this.Fl=0|l,this.Gh=0|d,this.Gl=0|f,this.Hh=0|p,this.Hl=0|g}process(t,e){for(let r=0;r<16;r++,e+=4)R[r]=t.getUint32(e),T[r]=t.getUint32(e+=4);for(let t=16;t<80;t++){const e=0|R[t-15],r=0|T[t-15],n=x.rotrSH(e,r,1)^x.rotrSH(e,r,8)^x.shrSH(e,r,7),i=x.rotrSL(e,r,1)^x.rotrSL(e,r,8)^x.shrSL(e,r,7),o=0|R[t-2],s=0|T[t-2],a=x.rotrSH(o,s,19)^x.rotrBH(o,s,61)^x.shrSH(o,s,6),c=x.rotrSL(o,s,19)^x.rotrBL(o,s,61)^x.shrSL(o,s,6),u=x.add4L(i,c,T[t-7],T[t-16]),h=x.add4H(u,n,a,R[t-7],R[t-16]);R[t]=0|h,T[t]=0|u}let{Ah:r,Al:n,Bh:i,Bl:o,Ch:s,Cl:a,Dh:c,Dl:u,Eh:h,El:l,Fh:d,Fl:f,Gh:p,Gl:g,Hh:m,Hl:y}=this;for(let t=0;t<80;t++){const e=x.rotrSH(h,l,14)^x.rotrSH(h,l,18)^x.rotrBH(h,l,41),b=x.rotrSL(h,l,14)^x.rotrSL(h,l,18)^x.rotrBL(h,l,41),w=h&d^~h&p,k=l&f^~l&g,v=x.add5L(y,b,k,P[t],T[t]),S=x.add5H(v,m,e,w,M[t],R[t]),I=0|v,A=x.rotrSH(r,n,28)^x.rotrBH(r,n,34)^x.rotrBH(r,n,39),_=x.rotrSL(r,n,28)^x.rotrBL(r,n,34)^x.rotrBL(r,n,39),E=r&i^r&s^i&s,B=n&o^n&a^o&a;m=0|p,y=0|g,p=0|d,g=0|f,d=0|h,f=0|l,({h,l}=x.add(0|c,0|u,0|S,0|I)),c=0|s,u=0|a,s=0|i,a=0|o,i=0|r,o=0|n;const L=x.add3L(I,_,B);r=x.add3H(L,S,A,E),n=0|L}({h:r,l:n}=x.add(0|this.Ah,0|this.Al,0|r,0|n)),({h:i,l:o}=x.add(0|this.Bh,0|this.Bl,0|i,0|o)),({h:s,l:a}=x.add(0|this.Ch,0|this.Cl,0|s,0|a)),({h:c,l:u}=x.add(0|this.Dh,0|this.Dl,0|c,0|u)),({h,l}=x.add(0|this.Eh,0|this.El,0|h,0|l)),({h:d,l:f}=x.add(0|this.Fh,0|this.Fl,0|d,0|f)),({h:p,l:g}=x.add(0|this.Gh,0|this.Gl,0|p,0|g)),({h:m,l:y}=x.add(0|this.Hh,0|this.Hl,0|m,0|y)),this.set(r,n,i,o,s,a,c,u,h,l,d,f,p,g,m,y)}roundClean(){R.fill(0),T.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}const O=m((()=>new L)),C=BigInt(0),z=BigInt(1),N=BigInt(2);function U(t){return t instanceof Uint8Array||ArrayBuffer.isView(t)&&"Uint8Array"===t.constructor.name}function W(t){if(!U(t))throw new Error("Uint8Array expected")}function K(t,e){if("boolean"!=typeof e)throw new Error(t+" boolean expected, got "+e)}const H=Array.from({length:256},((t,e)=>e.toString(16).padStart(2,"0")));function q(t){W(t);let e="";for(let r=0;r<t.length;r++)e+=H[t[r]];return e}function D(t){const e=t.toString(16);return 1&e.length?"0"+e:e}function F(t){if("string"!=typeof t)throw new Error("hex string expected, got "+typeof t);return""===t?C:BigInt("0x"+t)}const $={_0:48,_9:57,A:65,F:70,a:97,f:102};function j(t){return t>=$._0&&t<=$._9?t-$._0:t>=$.A&&t<=$.F?t-($.A-10):t>=$.a&&t<=$.f?t-($.a-10):void 0}function V(t){if("string"!=typeof t)throw new Error("hex string expected, got "+typeof t);const e=t.length,r=e/2;if(e%2)throw new Error("hex string expected, got unpadded hex of length "+e);const n=new Uint8Array(r);for(let e=0,i=0;e<r;e++,i+=2){const r=j(t.charCodeAt(i)),o=j(t.charCodeAt(i+1));if(void 0===r||void 0===o){const e=t[i]+t[i+1];throw new Error('hex string expected, got non-hex character "'+e+'" at index '+i)}n[e]=16*r+o}return n}function Y(t){return F(q(t))}function G(t){return W(t),F(q(Uint8Array.from(t).reverse()))}function Z(t,e){return V(t.toString(16).padStart(2*e,"0"))}function J(t,e){return Z(t,e).reverse()}function X(t,e,r){let n;if("string"==typeof e)try{n=V(e)}catch(e){throw new Error(t+" must be hex string or Uint8Array, cause: "+e)}else{if(!U(e))throw new Error(t+" must be hex string or Uint8Array");n=Uint8Array.from(e)}const i=n.length;if("number"==typeof r&&i!==r)throw new Error(t+" of length "+r+" expected, got "+i);return n}function Q(...t){let e=0;for(let r=0;r<t.length;r++){const n=t[r];W(n),e+=n.length}const r=new Uint8Array(e);for(let e=0,n=0;e<t.length;e++){const i=t[e];r.set(i,n),n+=i.length}return r}const tt=t=>"bigint"==typeof t&&C<=t;function et(t,e,r){return tt(t)&&tt(e)&&tt(r)&&e<=t&&t<r}function rt(t,e,r,n){if(!et(e,r,n))throw new Error("expected valid "+t+": "+r+" <= n < "+n+", got "+e)}function nt(t){let e;for(e=0;t>C;t>>=z,e+=1);return e}const it=t=>(N<<BigInt(t-1))-z,ot=t=>new Uint8Array(t),st=t=>Uint8Array.from(t);function at(t,e,r){if("number"!=typeof t||t<2)throw new Error("hashLen must be a number");if("number"!=typeof e||e<2)throw new Error("qByteLen must be a number");if("function"!=typeof r)throw new Error("hmacFn must be a function");let n=ot(t),i=ot(t),o=0;const s=()=>{n.fill(1),i.fill(0),o=0},a=(...t)=>r(i,n,...t),c=(t=ot())=>{i=a(st([0]),t),n=a(),0!==t.length&&(i=a(st([1]),t),n=a())},u=()=>{if(o++>=1e3)throw new Error("drbg: tried 1000 values");let t=0;const r=[];for(;t<e;){n=a();const e=n.slice();r.push(e),t+=n.length}return Q(...r)};return(t,e)=>{let r;for(s(),c(t);!(r=e(u()));)c();return s(),r}}const ct={bigint:t=>"bigint"==typeof t,function:t=>"function"==typeof t,boolean:t=>"boolean"==typeof t,string:t=>"string"==typeof t,stringOrUint8Array:t=>"string"==typeof t||U(t),isSafeInteger:t=>Number.isSafeInteger(t),array:t=>Array.isArray(t),field:(t,e)=>e.Fp.isValid(t),hash:t=>"function"==typeof t&&Number.isSafeInteger(t.outputLen)};function ut(t,e,r={}){const n=(e,r,n)=>{const i=ct[r];if("function"!=typeof i)throw new Error("invalid validator function");const o=t[e];if(!(n&&void 0===o||i(o,t)))throw new Error("param "+String(e)+" is invalid. Expected "+r+", got "+o)};for(const[t,r]of Object.entries(e))n(t,r,!1);for(const[t,e]of Object.entries(r))n(t,e,!0);return t}function ht(t){const e=new WeakMap;return(r,...n)=>{const i=e.get(r);if(void 0!==i)return i;const o=t(r,...n);return e.set(r,o),o}}const lt=BigInt(0),dt=BigInt(1),ft=BigInt(2),pt=BigInt(3),gt=BigInt(4),mt=BigInt(5),yt=BigInt(8);function bt(t,e){const r=t%e;return r>=lt?r:e+r}function wt(t,e,r){if(e<lt)throw new Error("invalid exponent, negatives unsupported");if(r<=lt)throw new Error("invalid modulus");if(r===dt)return lt;let n=dt;for(;e>lt;)e&dt&&(n=n*t%r),t=t*t%r,e>>=dt;return n}function kt(t,e,r){let n=t;for(;e-- >lt;)n*=n,n%=r;return n}function vt(t,e){if(t===lt)throw new Error("invert: expected non-zero number");if(e<=lt)throw new Error("invert: expected positive modulus, got "+e);let r=bt(t,e),n=e,i=lt,o=dt,s=dt,a=lt;for(;r!==lt;){const t=n/r,e=n%r,c=i-s*t,u=o-a*t;n=r,r=e,i=s,o=a,s=c,a=u}if(n!==dt)throw new Error("invert: does not exist");return bt(i,e)}const St=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function It(t,e){const r=void 0!==e?e:t.toString(2).length;return{nBitLength:r,nByteLength:Math.ceil(r/8)}}function At(t,e,r=!1,n={}){if(t<=lt)throw new Error("invalid field: expected ORDER > 0, got "+t);const{nBitLength:i,nByteLength:o}=It(t,e);if(o>2048)throw new Error("invalid field: expected ORDER of <= 2048 bytes");let s;const a=Object.freeze({ORDER:t,isLE:r,BITS:i,BYTES:o,MASK:it(i),ZERO:lt,ONE:dt,create:e=>bt(e,t),isValid:e=>{if("bigint"!=typeof e)throw new Error("invalid field element: expected bigint, got "+typeof e);return lt<=e&&e<t},is0:t=>t===lt,isOdd:t=>(t&dt)===dt,neg:e=>bt(-e,t),eql:(t,e)=>t===e,sqr:e=>bt(e*e,t),add:(e,r)=>bt(e+r,t),sub:(e,r)=>bt(e-r,t),mul:(e,r)=>bt(e*r,t),pow:(t,e)=>function(t,e,r){if(r<lt)throw new Error("invalid exponent, negatives unsupported");if(r===lt)return t.ONE;if(r===dt)return e;let n=t.ONE,i=e;for(;r>lt;)r&dt&&(n=t.mul(n,i)),i=t.sqr(i),r>>=dt;return n}(a,t,e),div:(e,r)=>bt(e*vt(r,t),t),sqrN:t=>t*t,addN:(t,e)=>t+e,subN:(t,e)=>t-e,mulN:(t,e)=>t*e,inv:e=>vt(e,t),sqrt:n.sqrt||(e=>(s||(s=function(t){if(t%gt===pt){const e=(t+dt)/gt;return function(t,r){const n=t.pow(r,e);if(!t.eql(t.sqr(n),r))throw new Error("Cannot find square root");return n}}if(t%yt===mt){const e=(t-mt)/yt;return function(t,r){const n=t.mul(r,ft),i=t.pow(n,e),o=t.mul(r,i),s=t.mul(t.mul(o,ft),i),a=t.mul(o,t.sub(s,t.ONE));if(!t.eql(t.sqr(a),r))throw new Error("Cannot find square root");return a}}return function(t){const e=(t-dt)/ft;let r,n,i;for(r=t-dt,n=0;r%ft===lt;r/=ft,n++);for(i=ft;i<t&&wt(i,e,t)!==t-dt;i++)if(i>1e3)throw new Error("Cannot find square root: likely non-prime P");if(1===n){const e=(t+dt)/gt;return function(t,r){const n=t.pow(r,e);if(!t.eql(t.sqr(n),r))throw new Error("Cannot find square root");return n}}const o=(r+dt)/ft;return function(t,s){if(t.pow(s,e)===t.neg(t.ONE))throw new Error("Cannot find square root");let a=n,c=t.pow(t.mul(t.ONE,i),r),u=t.pow(s,o),h=t.pow(s,r);for(;!t.eql(h,t.ONE);){if(t.eql(h,t.ZERO))return t.ZERO;let e=1;for(let r=t.sqr(h);e<a&&!t.eql(r,t.ONE);e++)r=t.sqr(r);const r=t.pow(c,dt<<BigInt(a-e-1));c=t.sqr(r),u=t.mul(u,r),h=t.mul(h,c),a=e}return u}}(t)}(t)),s(a,e))),invertBatch:t=>function(t,e){const r=new Array(e.length),n=e.reduce(((e,n,i)=>t.is0(n)?e:(r[i]=e,t.mul(e,n))),t.ONE),i=t.inv(n);return e.reduceRight(((e,n,i)=>t.is0(n)?e:(r[i]=t.mul(e,r[i]),t.mul(e,n))),i),r}(a,t),cmov:(t,e,r)=>r?e:t,toBytes:t=>r?J(t,o):Z(t,o),fromBytes:t=>{if(t.length!==o)throw new Error("Field.fromBytes: expected "+o+" bytes, got "+t.length);return r?G(t):Y(t)}});return Object.freeze(a)}function _t(t){if("bigint"!=typeof t)throw new Error("field order must be bigint");const e=t.toString(2).length;return Math.ceil(e/8)}function Et(t){const e=_t(t);return e+Math.ceil(e/2)}const Bt=BigInt(0),xt=BigInt(1);function Mt(t,e){const r=e.negate();return t?r:e}function Pt(t,e){if(!Number.isSafeInteger(t)||t<=0||t>e)throw new Error("invalid window size, expected [1.."+e+"], got W="+t)}function Rt(t,e){return Pt(t,e),{windows:Math.ceil(e/t)+1,windowSize:2**(t-1)}}const Tt=new WeakMap,Lt=new WeakMap;function Ot(t){return Lt.get(t)||1}function Ct(t,e){return{constTimeNegate:Mt,hasPrecomputes:t=>1!==Ot(t),unsafeLadder(e,r,n=t.ZERO){let i=e;for(;r>Bt;)r&xt&&(n=n.add(i)),i=i.double(),r>>=xt;return n},precomputeWindow(t,r){const{windows:n,windowSize:i}=Rt(r,e),o=[];let s=t,a=s;for(let t=0;t<n;t++){a=s,o.push(a);for(let t=1;t<i;t++)a=a.add(s),o.push(a);s=a.double()}return o},wNAF(r,n,i){const{windows:o,windowSize:s}=Rt(r,e);let a=t.ZERO,c=t.BASE;const u=BigInt(2**r-1),h=2**r,l=BigInt(r);for(let t=0;t<o;t++){const e=t*s;let r=Number(i&u);i>>=l,r>s&&(r-=h,i+=xt);const o=e,d=e+Math.abs(r)-1,f=t%2!=0,p=r<0;0===r?c=c.add(Mt(f,n[o])):a=a.add(Mt(p,n[d]))}return{p:a,f:c}},wNAFUnsafe(r,n,i,o=t.ZERO){const{windows:s,windowSize:a}=Rt(r,e),c=BigInt(2**r-1),u=2**r,h=BigInt(r);for(let t=0;t<s;t++){const e=t*a;if(i===Bt)break;let r=Number(i&c);if(i>>=h,r>a&&(r-=u,i+=xt),0===r)continue;let s=n[e+Math.abs(r)-1];r<0&&(s=s.negate()),o=o.add(s)}return o},getPrecomputes(t,e,r){let n=Tt.get(e);return n||(n=this.precomputeWindow(e,t),1!==t&&Tt.set(e,r(n))),n},wNAFCached(t,e,r){const n=Ot(t);return this.wNAF(n,this.getPrecomputes(n,t,r),e)},wNAFCachedUnsafe(t,e,r,n){const i=Ot(t);return 1===i?this.unsafeLadder(t,e,n):this.wNAFUnsafe(i,this.getPrecomputes(i,t,r),e,n)},setWindowSize(t,r){Pt(r,e),Lt.set(t,r),Tt.delete(t)}}}function zt(t,e,r,n){if(function(t,e){if(!Array.isArray(t))throw new Error("array expected");t.forEach(((t,r)=>{if(!(t instanceof e))throw new Error("invalid point at index "+r)}))}(r,t),function(t,e){if(!Array.isArray(t))throw new Error("array of scalars expected");t.forEach(((t,r)=>{if(!e.isValid(t))throw new Error("invalid scalar at index "+r)}))}(n,e),r.length!==n.length)throw new Error("arrays of points and scalars must have equal length");const i=t.ZERO,o=nt(BigInt(r.length)),s=o>12?o-3:o>4?o-2:o?2:1,a=(1<<s)-1,c=new Array(a+1).fill(i);let u=i;for(let t=Math.floor((e.BITS-1)/s)*s;t>=0;t-=s){c.fill(i);for(let e=0;e<n.length;e++){const i=n[e],o=Number(i>>BigInt(t)&BigInt(a));c[o]=c[o].add(r[e])}let e=i;for(let t=c.length-1,r=i;t>0;t--)r=r.add(c[t]),e=e.add(r);if(u=u.add(e),0!==t)for(let t=0;t<s;t++)u=u.double()}return u}function Nt(t){return ut(t.Fp,St.reduce(((t,e)=>(t[e]="function",t)),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"})),ut(t,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...It(t.n,t.nBitLength),...t,p:t.Fp.ORDER})}const Ut=BigInt(0),Wt=BigInt(1),Kt=BigInt(2),Ht=BigInt(8),qt={zip215:!0};const Dt=BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949"),Ft=BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752"),$t=(BigInt(0),BigInt(1)),jt=BigInt(2),Vt=(BigInt(3),BigInt(5)),Yt=BigInt(8);function Gt(t){return t[0]&=248,t[31]&=127,t[31]|=64,t}function Zt(t,e){const r=Dt,n=bt(e*e*e,r),i=bt(n*n*e,r);let o=bt(t*n*function(t){const e=BigInt(10),r=BigInt(20),n=BigInt(40),i=BigInt(80),o=Dt,s=t*t%o*t%o,a=kt(s,jt,o)*s%o,c=kt(a,$t,o)*t%o,u=kt(c,Vt,o)*c%o,h=kt(u,e,o)*u%o,l=kt(h,r,o)*h%o,d=kt(l,n,o)*l%o,f=kt(d,i,o)*d%o,p=kt(f,i,o)*d%o,g=kt(p,e,o)*u%o;return{pow_p_5_8:kt(g,jt,o)*t%o,b2:s}}(t*i).pow_p_5_8,r);const s=bt(e*o*o,r),a=o,c=bt(o*Ft,r),u=s===t,h=s===bt(-t,r),l=s===bt(-t*Ft,r);return u&&(o=a),(h||l)&&(o=c),(bt(o,r)&dt)===dt&&(o=bt(-o,r)),{isValid:u||h,value:o}}const Jt=(()=>At(Dt,void 0,!0))(),Xt=(()=>({a:BigInt(-1),d:BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),Fp:Jt,n:BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),h:Yt,Gx:BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),Gy:BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),hash:O,randomBytes:y,adjustScalarBytes:Gt,uvRatio:Zt}))(),Qt=(()=>function(t){const e=function(t){const e=Nt(t);return ut(t,{hash:"function",a:"bigint",d:"bigint",randomBytes:"function"},{adjustScalarBytes:"function",domain:"function",uvRatio:"function",mapToCurve:"function"}),Object.freeze({...e})}(t),{Fp:r,n,prehash:i,hash:o,randomBytes:s,nByteLength:a,h:c}=e,u=Kt<<BigInt(8*a)-Wt,h=r.create,l=At(e.n,e.nBitLength),d=e.uvRatio||((t,e)=>{try{return{isValid:!0,value:r.sqrt(t*r.inv(e))}}catch(t){return{isValid:!1,value:Ut}}}),f=e.adjustScalarBytes||(t=>t),p=e.domain||((t,e,r)=>{if(K("phflag",r),e.length||r)throw new Error("Contexts/pre-hash are not supported");return t});function g(t,e){rt("coordinate "+t,e,Ut,u)}function m(t){if(!(t instanceof w))throw new Error("ExtendedPoint expected")}const y=ht(((t,e)=>{const{ex:n,ey:i,ez:o}=t,s=t.is0();null==e&&(e=s?Ht:r.inv(o));const a=h(n*e),c=h(i*e),u=h(o*e);if(s)return{x:Ut,y:Wt};if(u!==Wt)throw new Error("invZ was invalid");return{x:a,y:c}})),b=ht((t=>{const{a:r,d:n}=e;if(t.is0())throw new Error("bad point: ZERO");const{ex:i,ey:o,ez:s,et:a}=t,c=h(i*i),u=h(o*o),l=h(s*s),d=h(l*l),f=h(c*r);if(h(l*h(f+u))!==h(d+h(n*h(c*u))))throw new Error("bad point: equation left != right (1)");if(h(i*o)!==h(s*a))throw new Error("bad point: equation left != right (2)");return!0}));class w{constructor(t,e,r,n){this.ex=t,this.ey=e,this.ez=r,this.et=n,g("x",t),g("y",e),g("z",r),g("t",n),Object.freeze(this)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static fromAffine(t){if(t instanceof w)throw new Error("extended point not allowed");const{x:e,y:r}=t||{};return g("x",e),g("y",r),new w(e,r,Wt,h(e*r))}static normalizeZ(t){const e=r.invertBatch(t.map((t=>t.ez)));return t.map(((t,r)=>t.toAffine(e[r]))).map(w.fromAffine)}static msm(t,e){return zt(w,l,t,e)}_setWindowSize(t){S.setWindowSize(this,t)}assertValidity(){b(this)}equals(t){m(t);const{ex:e,ey:r,ez:n}=this,{ex:i,ey:o,ez:s}=t,a=h(e*s),c=h(i*n),u=h(r*s),l=h(o*n);return a===c&&u===l}is0(){return this.equals(w.ZERO)}negate(){return new w(h(-this.ex),this.ey,this.ez,h(-this.et))}double(){const{a:t}=e,{ex:r,ey:n,ez:i}=this,o=h(r*r),s=h(n*n),a=h(Kt*h(i*i)),c=h(t*o),u=r+n,l=h(h(u*u)-o-s),d=c+s,f=d-a,p=c-s,g=h(l*f),m=h(d*p),y=h(l*p),b=h(f*d);return new w(g,m,b,y)}add(t){m(t);const{a:r,d:n}=e,{ex:i,ey:o,ez:s,et:a}=this,{ex:c,ey:u,ez:l,et:d}=t;if(r===BigInt(-1)){const t=h((o-i)*(u+c)),e=h((o+i)*(u-c)),r=h(e-t);if(r===Ut)return this.double();const n=h(s*Kt*d),f=h(a*Kt*l),p=f+n,g=e+t,m=f-n,y=h(p*r),b=h(g*m),k=h(p*m),v=h(r*g);return new w(y,b,v,k)}const f=h(i*c),p=h(o*u),g=h(a*n*d),y=h(s*l),b=h((i+o)*(c+u)-f-p),k=y-g,v=y+g,S=h(p-r*f),I=h(b*k),A=h(v*S),_=h(b*S),E=h(k*v);return new w(I,A,E,_)}subtract(t){return this.add(t.negate())}wNAF(t){return S.wNAFCached(this,t,w.normalizeZ)}multiply(t){const e=t;rt("scalar",e,Wt,n);const{p:r,f:i}=this.wNAF(e);return w.normalizeZ([r,i])[0]}multiplyUnsafe(t,e=w.ZERO){const r=t;return rt("scalar",r,Ut,n),r===Ut?v:this.is0()||r===Wt?this:S.wNAFCachedUnsafe(this,r,w.normalizeZ,e)}isSmallOrder(){return this.multiplyUnsafe(c).is0()}isTorsionFree(){return S.unsafeLadder(this,n).is0()}toAffine(t){return y(this,t)}clearCofactor(){const{h:t}=e;return t===Wt?this:this.multiplyUnsafe(t)}static fromHex(t,n=!1){const{d:i,a:o}=e,s=r.BYTES;t=X("pointHex",t,s),K("zip215",n);const a=t.slice(),c=t[s-1];a[s-1]=-129&c;const l=G(a),f=n?u:r.ORDER;rt("pointHex.y",l,Ut,f);const p=h(l*l),g=h(p-Wt),m=h(i*p-o);let{isValid:y,value:b}=d(g,m);if(!y)throw new Error("Point.fromHex: invalid y coordinate");const k=(b&Wt)===Wt,v=!!(128&c);if(!n&&b===Ut&&v)throw new Error("Point.fromHex: x=0 and x_0=1");return v!==k&&(b=h(-b)),w.fromAffine({x:b,y:l})}static fromPrivateKey(t){return _(t).point}toRawBytes(){const{x:t,y:e}=this.toAffine(),n=J(e,r.BYTES);return n[n.length-1]|=t&Wt?128:0,n}toHex(){return q(this.toRawBytes())}}w.BASE=new w(e.Gx,e.Gy,Wt,h(e.Gx*e.Gy)),w.ZERO=new w(Ut,Wt,Wt,Ut);const{BASE:k,ZERO:v}=w,S=Ct(w,8*a);function I(t){return bt(t,n)}function A(t){return I(G(t))}function _(t){const e=r.BYTES;t=X("private key",t,e);const n=X("hashed private key",o(t),2*e),i=f(n.slice(0,e)),s=n.slice(e,2*e),a=A(i),c=k.multiply(a),u=c.toRawBytes();return{head:i,prefix:s,scalar:a,point:c,pointBytes:u}}function E(t=new Uint8Array,...e){const r=Q(...e);return A(o(p(r,X("context",t),!!i)))}const B=qt;return k._setWindowSize(8),{CURVE:e,getPublicKey:function(t){return _(t).pointBytes},sign:function(t,e,o={}){t=X("message",t),i&&(t=i(t));const{prefix:s,scalar:a,pointBytes:c}=_(e),u=E(o.context,s,t),h=k.multiply(u).toRawBytes(),l=I(u+E(o.context,h,c,t)*a);return rt("signature.s",l,Ut,n),X("result",Q(h,J(l,r.BYTES)),2*r.BYTES)},verify:function(t,e,n,o=B){const{context:s,zip215:a}=o,c=r.BYTES;t=X("signature",t,2*c),e=X("message",e),n=X("publicKey",n,c),void 0!==a&&K("zip215",a),i&&(e=i(e));const u=G(t.slice(c,2*c));let h,l,d;try{h=w.fromHex(n,a),l=w.fromHex(t.slice(0,c),a),d=k.multiplyUnsafe(u)}catch(t){return!1}if(!a&&h.isSmallOrder())return!1;const f=E(s,l.toRawBytes(),h.toRawBytes(),e);return l.add(h.multiplyUnsafe(f)).subtract(d).clearCofactor().equals(w.ZERO)},ExtendedPoint:w,utils:{getExtendedPublicKey:_,randomPrivateKey:()=>s(r.BYTES),precompute:(t=8,e=w.BASE)=>(e._setWindowSize(t),e.multiply(BigInt(3)),e)}}}(Xt))();var te=r(404),ee=r.n(te),re=r(466),ne=r.n(re);const ie=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),oe=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),se=new Uint32Array(64);class ae extends w{constructor(){super(64,32,8,!1),this.A=0|oe[0],this.B=0|oe[1],this.C=0|oe[2],this.D=0|oe[3],this.E=0|oe[4],this.F=0|oe[5],this.G=0|oe[6],this.H=0|oe[7]}get(){const{A:t,B:e,C:r,D:n,E:i,F:o,G:s,H:a}=this;return[t,e,r,n,i,o,s,a]}set(t,e,r,n,i,o,s,a){this.A=0|t,this.B=0|e,this.C=0|r,this.D=0|n,this.E=0|i,this.F=0|o,this.G=0|s,this.H=0|a}process(t,e){for(let r=0;r<16;r++,e+=4)se[r]=t.getUint32(e,!1);for(let t=16;t<64;t++){const e=se[t-15],r=se[t-2],n=l(e,7)^l(e,18)^e>>>3,i=l(r,17)^l(r,19)^r>>>10;se[t]=i+se[t-7]+n+se[t-16]|0}let{A:r,B:n,C:i,D:o,E:s,F:a,G:c,H:u}=this;for(let t=0;t<64;t++){const e=u+(l(s,6)^l(s,11)^l(s,25))+((h=s)&a^~h&c)+ie[t]+se[t]|0,d=(l(r,2)^l(r,13)^l(r,22))+b(r,n,i)|0;u=c,c=a,a=s,s=o+e|0,o=i,i=n,n=r,r=e+d|0}var h;r=r+this.A|0,n=n+this.B|0,i=i+this.C|0,o=o+this.D|0,s=s+this.E|0,a=a+this.F|0,c=c+this.G|0,u=u+this.H|0,this.set(r,n,i,o,s,a,c,u)}roundClean(){se.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const ce=m((()=>new ae));var ue=r(755),he=r(601),le=r(184);class de extends TypeError{constructor(t,e){let r;const{message:n,explanation:i,...o}=t,{path:s}=t,a=0===s.length?n:`At path: ${s.join(".")} -- ${n}`;super(i??a),null!=i&&(this.cause=a),Object.assign(this,o),this.name=this.constructor.name,this.failures=()=>r??(r=[t,...e()])}}function fe(t){return"object"==typeof t&&null!=t}function pe(t){return fe(t)&&!Array.isArray(t)}function ge(t){return"symbol"==typeof t?t.toString():"string"==typeof t?JSON.stringify(t):`${t}`}function me(t,e,r,n){if(!0===t)return;!1===t?t={}:"string"==typeof t&&(t={message:t});const{path:i,branch:o}=e,{type:s}=r,{refinement:a,message:c=`Expected a value of type \`${s}\`${a?` with refinement \`${a}\``:""}, but received: \`${ge(n)}\``}=t;return{value:n,type:s,refinement:a,key:i[i.length-1],path:i,branch:o,...t,message:c}}function*ye(t,e,r,n){var i;fe(i=t)&&"function"==typeof i[Symbol.iterator]||(t=[t]);for(const i of t){const t=me(i,e,r,n);t&&(yield t)}}function*be(t,e,r={}){const{path:n=[],branch:i=[t],coerce:o=!1,mask:s=!1}=r,a={path:n,branch:i,mask:s};o&&(t=e.coercer(t,a));let c="valid";for(const n of e.validator(t,a))n.explanation=r.message,c="not_valid",yield[n,void 0];for(let[u,h,l]of e.entries(t,a)){const e=be(h,l,{path:void 0===u?n:[...n,u],branch:void 0===u?i:[...i,h],coerce:o,mask:s,message:r.message});for(const r of e)r[0]?(c=null!=r[0].refinement?"not_refined":"not_valid",yield[r[0],void 0]):o&&(h=r[1],void 0===u?t=h:t instanceof Map?t.set(u,h):t instanceof Set?t.add(h):fe(t)&&(void 0!==h||u in t)&&(t[u]=h))}if("not_valid"!==c)for(const n of e.refiner(t,a))n.explanation=r.message,c="not_refined",yield[n,void 0];"valid"===c&&(yield[void 0,t])}class we{constructor(t){const{type:e,schema:r,validator:n,refiner:i,coercer:o=t=>t,entries:s=function*(){}}=t;this.type=e,this.schema=r,this.entries=s,this.coercer=o,this.validator=n?(t,e)=>ye(n(t,e),e,this,t):()=>[],this.refiner=i?(t,e)=>ye(i(t,e),e,this,t):()=>[]}assert(t,e){return ke(t,this,e)}create(t,e){return ve(t,this,e)}is(t){return Se(t,this)}mask(t,e){return function(t,e,r){const n=Ie(t,e,{coerce:!0,mask:!0,message:r});if(n[0])throw n[0];return n[1]}(t,this,e)}validate(t,e={}){return Ie(t,this,e)}}function ke(t,e,r){const n=Ie(t,e,{message:r});if(n[0])throw n[0]}function ve(t,e,r){const n=Ie(t,e,{coerce:!0,message:r});if(n[0])throw n[0];return n[1]}function Se(t,e){return!Ie(t,e)[0]}function Ie(t,e,r={}){const n=be(t,e,r),i=function(t){const{done:e,value:r}=t.next();return e?void 0:r}(n);return i[0]?[new de(i[0],(function*(){for(const t of n)t[0]&&(yield t[0])})),void 0]:[void 0,i[1]]}function Ae(t,e){return new we({type:t,schema:null,validator:e})}function _e(t){return new we({type:"array",schema:t,*entries(e){if(t&&Array.isArray(e))for(const[r,n]of e.entries())yield[r,n,t]},coercer:t=>Array.isArray(t)?t.slice():t,validator:t=>Array.isArray(t)||`Expected an array value, but received: ${ge(t)}`})}function Ee(){return Ae("boolean",(t=>"boolean"==typeof t))}function Be(t){return Ae("instance",(e=>e instanceof t||`Expected a \`${t.name}\` instance, but received: ${ge(e)}`))}function xe(t){const e=ge(t),r=typeof t;return new we({type:"literal",schema:"string"===r||"number"===r||"boolean"===r?t:null,validator:r=>r===t||`Expected the literal \`${e}\`, but received: ${ge(r)}`})}function Me(t){return new we({...t,validator:(e,r)=>null===e||t.validator(e,r),refiner:(e,r)=>null===e||t.refiner(e,r)})}function Pe(){return Ae("number",(t=>"number"==typeof t&&!isNaN(t)||`Expected a number, but received: ${ge(t)}`))}function Re(t){return new we({...t,validator:(e,r)=>void 0===e||t.validator(e,r),refiner:(e,r)=>void 0===e||t.refiner(e,r)})}function Te(t,e){return new we({type:"record",schema:null,*entries(r){if(fe(r))for(const n in r){const i=r[n];yield[n,n,t],yield[n,i,e]}},validator:t=>pe(t)||`Expected an object, but received: ${ge(t)}`,coercer:t=>pe(t)?{...t}:t})}function Le(){return Ae("string",(t=>"string"==typeof t||`Expected a string, but received: ${ge(t)}`))}function Oe(t){const e=Ae("never",(()=>!1));return new we({type:"tuple",schema:null,*entries(r){if(Array.isArray(r)){const n=Math.max(t.length,r.length);for(let i=0;i<n;i++)yield[i,r[i],t[i]||e]}},validator:t=>Array.isArray(t)||`Expected an array, but received: ${ge(t)}`,coercer:t=>Array.isArray(t)?t.slice():t})}function Ce(t){const e=Object.keys(t);return new we({type:"type",schema:t,*entries(r){if(fe(r))for(const n of e)yield[n,r[n],t[n]]},validator:t=>pe(t)||`Expected an object, but received: ${ge(t)}`,coercer:t=>pe(t)?{...t}:t})}function ze(t){const e=t.map((t=>t.type)).join(" | ");return new we({type:"union",schema:null,coercer(e,r){for(const n of t){const[t,i]=n.validate(e,{coerce:!0,mask:r.mask});if(!t)return i}return e},validator(r,n){const i=[];for(const e of t){const[...t]=be(r,e,n),[o]=t;if(!o[0])return[];for(const[e]of t)e&&i.push(e)}return[`Expected the value to satisfy a union of \`${e}\`, but received: ${ge(r)}`,...i]}})}function Ne(){return Ae("unknown",(()=>!0))}function Ue(t,e,r){return new we({...t,coercer:(n,i)=>Se(n,e)?t.coercer(r(n,i),i):t.coercer(n,i)})}var We=r(22),Ke=r.n(We),He=r(228),qe=class extends He{socket;constructor(t,e,r){super(),this.socket=new window.WebSocket(t,r),this.socket.onopen=()=>this.emit("open"),this.socket.onmessage=t=>this.emit("message",t.data),this.socket.onerror=t=>this.emit("error",t),this.socket.onclose=t=>{this.emit("close",t.code,t.reason)}}send(t,e,r){const n=r||e;try{this.socket.send(t),n()}catch(t){n(t)}}close(t,e){this.socket.close(t,e)}addEventListener(t,e,r){this.socket.addEventListener(t,e,r)}};var De=class{encode(t){return JSON.stringify(t)}decode(t){return JSON.parse(t)}},Fe=class extends He{address;rpc_id;queue;options;autoconnect;ready;reconnect;reconnect_timer_id;reconnect_interval;max_reconnects;rest_options;current_reconnects;generate_request_id;socket;webSocketFactory;dataPack;constructor(t,e="ws://localhost:8080",{autoconnect:r=!0,reconnect:n=!0,reconnect_interval:i=1e3,max_reconnects:o=5,...s}={},a,c){super(),this.webSocketFactory=t,this.queue={},this.rpc_id=0,this.address=e,this.autoconnect=r,this.ready=!1,this.reconnect=n,this.reconnect_timer_id=void 0,this.reconnect_interval=i,this.max_reconnects=o,this.rest_options=s,this.current_reconnects=0,this.generate_request_id=a||(()=>"number"==typeof this.rpc_id?++this.rpc_id:Number(this.rpc_id)+1),this.dataPack=c||new De,this.autoconnect&&this._connect(this.address,{autoconnect:this.autoconnect,reconnect:this.reconnect,reconnect_interval:this.reconnect_interval,max_reconnects:this.max_reconnects,...this.rest_options})}connect(){this.socket||this._connect(this.address,{autoconnect:this.autoconnect,reconnect:this.reconnect,reconnect_interval:this.reconnect_interval,max_reconnects:this.max_reconnects,...this.rest_options})}call(t,e,r,n){return n||"object"!=typeof r||(n=r,r=null),new Promise(((i,o)=>{if(!this.ready)return o(new Error("socket not ready"));const s=this.generate_request_id(t,e),a={jsonrpc:"2.0",method:t,params:e||void 0,id:s};this.socket.send(this.dataPack.encode(a),n,(t=>{if(t)return o(t);this.queue[s]={promise:[i,o]},r&&(this.queue[s].timeout=setTimeout((()=>{delete this.queue[s],o(new Error("reply timeout"))}),r))}))}))}async login(t){const e=await this.call("rpc.login",t);if(!e)throw new Error("authentication failed");return e}async listMethods(){return await this.call("__listMethods")}notify(t,e){return new Promise(((r,n)=>{if(!this.ready)return n(new Error("socket not ready"));const i={jsonrpc:"2.0",method:t,params:e};this.socket.send(this.dataPack.encode(i),(t=>{if(t)return n(t);r()}))}))}async subscribe(t){"string"==typeof t&&(t=[t]);const e=await this.call("rpc.on",t);if("string"==typeof t&&"ok"!==e[t])throw new Error("Failed subscribing to an event '"+t+"' with: "+e[t]);return e}async unsubscribe(t){"string"==typeof t&&(t=[t]);const e=await this.call("rpc.off",t);if("string"==typeof t&&"ok"!==e[t])throw new Error("Failed unsubscribing from an event with: "+e);return e}close(t,e){this.socket.close(t||1e3,e)}setAutoReconnect(t){this.reconnect=t}setReconnectInterval(t){this.reconnect_interval=t}setMaxReconnects(t){this.max_reconnects=t}_connect(t,e){clearTimeout(this.reconnect_timer_id),this.socket=this.webSocketFactory(t,e),this.socket.addEventListener("open",(()=>{this.ready=!0,this.emit("open"),this.current_reconnects=0})),this.socket.addEventListener("message",(({data:t})=>{t instanceof ArrayBuffer&&(t=i.Buffer.from(t).toString());try{t=this.dataPack.decode(t)}catch(t){return}if(t.notification&&this.listeners(t.notification).length){if(!Object.keys(t.params).length)return this.emit(t.notification);const e=[t.notification];if(t.params.constructor===Object)e.push(t.params);else for(let r=0;r<t.params.length;r++)e.push(t.params[r]);return Promise.resolve().then((()=>{this.emit.apply(this,e)}))}if(!this.queue[t.id])return t.method?Promise.resolve().then((()=>{this.emit(t.method,t?.params)})):void 0;"error"in t=="result"in t&&this.queue[t.id].promise[1](new Error('Server response malformed. Response must include either "result" or "error", but not both.')),this.queue[t.id].timeout&&clearTimeout(this.queue[t.id].timeout),t.error?this.queue[t.id].promise[1](t.error):this.queue[t.id].promise[0](t.result),delete this.queue[t.id]})),this.socket.addEventListener("error",(t=>this.emit("error",t))),this.socket.addEventListener("close",(({code:r,reason:n})=>{this.ready&&setTimeout((()=>this.emit("close",r,n)),0),this.ready=!1,this.socket=void 0,1e3!==r&&(this.current_reconnects++,this.reconnect&&(this.max_reconnects>this.current_reconnects||0===this.max_reconnects)&&(this.reconnect_timer_id=setTimeout((()=>this._connect(t,e)),this.reconnect_interval)))}))}};const $e=[],je=[],Ve=[],Ye=BigInt(0),Ge=BigInt(1),Ze=BigInt(2),Je=BigInt(7),Xe=BigInt(256),Qe=BigInt(113);for(let t=0,e=Ge,r=1,n=0;t<24;t++){[r,n]=[n,(2*r+3*n)%5],$e.push(2*(5*n+r)),je.push((t+1)*(t+2)/2%64);let i=Ye;for(let t=0;t<7;t++)e=(e<<Ge^(e>>Je)*Qe)%Xe,e&Ze&&(i^=Ge<<(Ge<<BigInt(t))-Ge);Ve.push(i)}const[tr,er]=I(Ve,!0),rr=(t,e,r)=>r>32?E(t,e,r):A(t,e,r),nr=(t,e,r)=>r>32?B(t,e,r):_(t,e,r);class ir extends g{constructor(t,e,r,n=!1,i=24){if(super(),this.blockLen=t,this.suffix=e,this.outputLen=r,this.enableXOF=n,this.rounds=i,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,o(r),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");var s;this.state=new Uint8Array(200),this.state32=(s=this.state,new Uint32Array(s.buffer,s.byteOffset,Math.floor(s.byteLength/4)))}keccak(){d||f(this.state32),function(t,e=24){const r=new Uint32Array(10);for(let n=24-e;n<24;n++){for(let e=0;e<10;e++)r[e]=t[e]^t[e+10]^t[e+20]^t[e+30]^t[e+40];for(let e=0;e<10;e+=2){const n=(e+8)%10,i=(e+2)%10,o=r[i],s=r[i+1],a=rr(o,s,1)^r[n],c=nr(o,s,1)^r[n+1];for(let r=0;r<50;r+=10)t[e+r]^=a,t[e+r+1]^=c}let e=t[2],i=t[3];for(let r=0;r<24;r++){const n=je[r],o=rr(e,i,n),s=nr(e,i,n),a=$e[r];e=t[a],i=t[a+1],t[a]=o,t[a+1]=s}for(let e=0;e<50;e+=10){for(let n=0;n<10;n++)r[n]=t[e+n];for(let n=0;n<10;n++)t[e+n]^=~r[(n+2)%10]&r[(n+4)%10]}t[0]^=tr[n],t[1]^=er[n]}r.fill(0)}(this.state32,this.rounds),d||f(this.state32),this.posOut=0,this.pos=0}update(t){a(this);const{blockLen:e,state:r}=this,n=(t=p(t)).length;for(let i=0;i<n;){const o=Math.min(e-this.pos,n-i);for(let e=0;e<o;e++)r[this.pos++]^=t[i++];this.pos===e&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:t,suffix:e,pos:r,blockLen:n}=this;t[r]^=e,128&e&&r===n-1&&this.keccak(),t[n-1]^=128,this.keccak()}writeInto(t){a(this,!1),s(t),this.finish();const e=this.state,{blockLen:r}=this;for(let n=0,i=t.length;n<i;){this.posOut>=r&&this.keccak();const o=Math.min(r-this.posOut,i-n);t.set(e.subarray(this.posOut,this.posOut+o),n),this.posOut+=o,n+=o}return t}xofInto(t){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(t)}xof(t){return o(t),this.xofInto(new Uint8Array(t))}digestInto(t){if(c(t,this),this.finished)throw new Error("digest() was already called");return this.writeInto(t),this.destroy(),t}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(t){const{blockLen:e,suffix:r,outputLen:n,rounds:i,enableXOF:o}=this;return t||(t=new ir(e,r,n,o,i)),t.state32.set(this.state32),t.pos=this.pos,t.posOut=this.posOut,t.finished=this.finished,t.rounds=i,t.suffix=r,t.outputLen=n,t.enableXOF=o,t.destroyed=this.destroyed,t}}const or=((t,e,r)=>m((()=>new ir(e,t,r))))(1,136,32);class sr extends g{constructor(t,e){super(),this.finished=!1,this.destroyed=!1,function(t){if("function"!=typeof t||"function"!=typeof t.create)throw new Error("Hash should be wrapped by utils.wrapConstructor");o(t.outputLen),o(t.blockLen)}(t);const r=p(e);if(this.iHash=t.create(),"function"!=typeof this.iHash.update)throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const n=this.blockLen,i=new Uint8Array(n);i.set(r.length>n?t.create().update(r).digest():r);for(let t=0;t<i.length;t++)i[t]^=54;this.iHash.update(i),this.oHash=t.create();for(let t=0;t<i.length;t++)i[t]^=106;this.oHash.update(i),i.fill(0)}update(t){return a(this),this.iHash.update(t),this}digestInto(t){a(this),s(t,this.outputLen),this.finished=!0,this.iHash.digestInto(t),this.oHash.update(t),this.oHash.digestInto(t),this.destroy()}digest(){const t=new Uint8Array(this.oHash.outputLen);return this.digestInto(t),t}_cloneInto(t){t||(t=Object.create(Object.getPrototypeOf(this),{}));const{oHash:e,iHash:r,finished:n,destroyed:i,blockLen:o,outputLen:s}=this;return t.finished=n,t.destroyed=i,t.blockLen=o,t.outputLen=s,t.oHash=e._cloneInto(t.oHash),t.iHash=r._cloneInto(t.iHash),t}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const ar=(t,e,r)=>new sr(t,e).update(r).digest();function cr(t){void 0!==t.lowS&&K("lowS",t.lowS),void 0!==t.prehash&&K("prehash",t.prehash)}ar.create=(t,e)=>new sr(t,e);const{Ph:ur,aT:hr}=n;class lr extends Error{constructor(t=""){super(t)}}const dr={Err:lr,_tlv:{encode:(t,e)=>{const{Err:r}=dr;if(t<0||t>256)throw new r("tlv.encode: wrong tag");if(1&e.length)throw new r("tlv.encode: unpadded data");const n=e.length/2,i=D(n);if(i.length/2&128)throw new r("tlv.encode: long form length too big");const o=n>127?D(i.length/2|128):"";return D(t)+o+i+e},decode(t,e){const{Err:r}=dr;let n=0;if(t<0||t>256)throw new r("tlv.encode: wrong tag");if(e.length<2||e[n++]!==t)throw new r("tlv.decode: wrong tlv");const i=e[n++];let o=0;if(128&i){const t=127&i;if(!t)throw new r("tlv.decode(long): indefinite length not supported");if(t>4)throw new r("tlv.decode(long): byte length is too big");const s=e.subarray(n,n+t);if(s.length!==t)throw new r("tlv.decode: length bytes not complete");if(0===s[0])throw new r("tlv.decode(long): zero leftmost byte");for(const t of s)o=o<<8|t;if(n+=t,o<128)throw new r("tlv.decode(long): not minimal encoding")}else o=i;const s=e.subarray(n,n+o);if(s.length!==o)throw new r("tlv.decode: wrong value length");return{v:s,l:e.subarray(n+o)}}},_int:{encode(t){const{Err:e}=dr;if(t<fr)throw new e("integer: negative integers are not allowed");let r=D(t);if(8&Number.parseInt(r[0],16)&&(r="00"+r),1&r.length)throw new e("unexpected DER parsing assertion: unpadded hex");return r},decode(t){const{Err:e}=dr;if(128&t[0])throw new e("invalid signature integer: negative");if(0===t[0]&&!(128&t[1]))throw new e("invalid signature integer: unnecessary leading zero");return ur(t)}},toSig(t){const{Err:e,_int:r,_tlv:n}=dr,i="string"==typeof t?hr(t):t;W(i);const{v:o,l:s}=n.decode(48,i);if(s.length)throw new e("invalid signature: left bytes after parsing");const{v:a,l:c}=n.decode(2,o),{v:u,l:h}=n.decode(2,c);if(h.length)throw new e("invalid signature: left bytes after parsing");return{r:r.decode(a),s:r.decode(u)}},hexFromSig(t){const{_tlv:e,_int:r}=dr,n=e.encode(2,r.encode(t.r))+e.encode(2,r.encode(t.s));return e.encode(48,n)}},fr=BigInt(0),pr=BigInt(1),gr=(BigInt(2),BigInt(3));function mr(t){const e=function(t){const e=Nt(t);return ut(e,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...e})}(t),{Fp:r,n}=e,i=r.BYTES+1,o=2*r.BYTES+1;function s(t){return bt(t,n)}function a(t){return vt(t,n)}const{ProjectivePoint:c,normPrivateKeyToScalar:u,weierstrassEquation:h,isWithinCurveOrder:l}=function(t){const e=function(t){const e=Nt(t);ut(e,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:r,Fp:n,a:i}=e;if(r){if(!n.eql(i,n.ZERO))throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");if("object"!=typeof r||"bigint"!=typeof r.beta||"function"!=typeof r.splitScalar)throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function")}return Object.freeze({...e})}(t),{Fp:r}=e,n=At(e.n,e.nBitLength),i=e.toBytes||((t,e,n)=>{const i=e.toAffine();return Q(Uint8Array.from([4]),r.toBytes(i.x),r.toBytes(i.y))}),o=e.fromBytes||(t=>{const e=t.subarray(1);return{x:r.fromBytes(e.subarray(0,r.BYTES)),y:r.fromBytes(e.subarray(r.BYTES,2*r.BYTES))}});function s(t){const{a:n,b:i}=e,o=r.sqr(t),s=r.mul(o,t);return r.add(r.add(s,r.mul(t,n)),i)}if(!r.eql(r.sqr(e.Gy),s(e.Gx)))throw new Error("bad generator point: equation left != right");function a(t){const{allowedPrivateKeyLengths:r,nByteLength:n,wrapPrivateKey:i,n:o}=e;if(r&&"bigint"!=typeof t){if(U(t)&&(t=q(t)),"string"!=typeof t||!r.includes(t.length))throw new Error("invalid private key");t=t.padStart(2*n,"0")}let s;try{s="bigint"==typeof t?t:Y(X("private key",t,n))}catch(e){throw new Error("invalid private key, expected hex or "+n+" bytes, got "+typeof t)}return i&&(s=bt(s,o)),rt("private key",s,pr,o),s}function c(t){if(!(t instanceof l))throw new Error("ProjectivePoint expected")}const u=ht(((t,e)=>{const{px:n,py:i,pz:o}=t;if(r.eql(o,r.ONE))return{x:n,y:i};const s=t.is0();null==e&&(e=s?r.ONE:r.inv(o));const a=r.mul(n,e),c=r.mul(i,e),u=r.mul(o,e);if(s)return{x:r.ZERO,y:r.ZERO};if(!r.eql(u,r.ONE))throw new Error("invZ was invalid");return{x:a,y:c}})),h=ht((t=>{if(t.is0()){if(e.allowInfinityPoint&&!r.is0(t.py))return;throw new Error("bad point: ZERO")}const{x:n,y:i}=t.toAffine();if(!r.isValid(n)||!r.isValid(i))throw new Error("bad point: x or y not FE");const o=r.sqr(i),a=s(n);if(!r.eql(o,a))throw new Error("bad point: equation left != right");if(!t.isTorsionFree())throw new Error("bad point: not in prime-order subgroup");return!0}));class l{constructor(t,e,n){if(this.px=t,this.py=e,this.pz=n,null==t||!r.isValid(t))throw new Error("x required");if(null==e||!r.isValid(e))throw new Error("y required");if(null==n||!r.isValid(n))throw new Error("z required");Object.freeze(this)}static fromAffine(t){const{x:e,y:n}=t||{};if(!t||!r.isValid(e)||!r.isValid(n))throw new Error("invalid affine point");if(t instanceof l)throw new Error("projective point not allowed");const i=t=>r.eql(t,r.ZERO);return i(e)&&i(n)?l.ZERO:new l(e,n,r.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(t){const e=r.invertBatch(t.map((t=>t.pz)));return t.map(((t,r)=>t.toAffine(e[r]))).map(l.fromAffine)}static fromHex(t){const e=l.fromAffine(o(X("pointHex",t)));return e.assertValidity(),e}static fromPrivateKey(t){return l.BASE.multiply(a(t))}static msm(t,e){return zt(l,n,t,e)}_setWindowSize(t){f.setWindowSize(this,t)}assertValidity(){h(this)}hasEvenY(){const{y:t}=this.toAffine();if(r.isOdd)return!r.isOdd(t);throw new Error("Field doesn't support isOdd")}equals(t){c(t);const{px:e,py:n,pz:i}=this,{px:o,py:s,pz:a}=t,u=r.eql(r.mul(e,a),r.mul(o,i)),h=r.eql(r.mul(n,a),r.mul(s,i));return u&&h}negate(){return new l(this.px,r.neg(this.py),this.pz)}double(){const{a:t,b:n}=e,i=r.mul(n,gr),{px:o,py:s,pz:a}=this;let c=r.ZERO,u=r.ZERO,h=r.ZERO,d=r.mul(o,o),f=r.mul(s,s),p=r.mul(a,a),g=r.mul(o,s);return g=r.add(g,g),h=r.mul(o,a),h=r.add(h,h),c=r.mul(t,h),u=r.mul(i,p),u=r.add(c,u),c=r.sub(f,u),u=r.add(f,u),u=r.mul(c,u),c=r.mul(g,c),h=r.mul(i,h),p=r.mul(t,p),g=r.sub(d,p),g=r.mul(t,g),g=r.add(g,h),h=r.add(d,d),d=r.add(h,d),d=r.add(d,p),d=r.mul(d,g),u=r.add(u,d),p=r.mul(s,a),p=r.add(p,p),d=r.mul(p,g),c=r.sub(c,d),h=r.mul(p,f),h=r.add(h,h),h=r.add(h,h),new l(c,u,h)}add(t){c(t);const{px:n,py:i,pz:o}=this,{px:s,py:a,pz:u}=t;let h=r.ZERO,d=r.ZERO,f=r.ZERO;const p=e.a,g=r.mul(e.b,gr);let m=r.mul(n,s),y=r.mul(i,a),b=r.mul(o,u),w=r.add(n,i),k=r.add(s,a);w=r.mul(w,k),k=r.add(m,y),w=r.sub(w,k),k=r.add(n,o);let v=r.add(s,u);return k=r.mul(k,v),v=r.add(m,b),k=r.sub(k,v),v=r.add(i,o),h=r.add(a,u),v=r.mul(v,h),h=r.add(y,b),v=r.sub(v,h),f=r.mul(p,k),h=r.mul(g,b),f=r.add(h,f),h=r.sub(y,f),f=r.add(y,f),d=r.mul(h,f),y=r.add(m,m),y=r.add(y,m),b=r.mul(p,b),k=r.mul(g,k),y=r.add(y,b),b=r.sub(m,b),b=r.mul(p,b),k=r.add(k,b),m=r.mul(y,k),d=r.add(d,m),m=r.mul(v,k),h=r.mul(w,h),h=r.sub(h,m),m=r.mul(w,y),f=r.mul(v,f),f=r.add(f,m),new l(h,d,f)}subtract(t){return this.add(t.negate())}is0(){return this.equals(l.ZERO)}wNAF(t){return f.wNAFCached(this,t,l.normalizeZ)}multiplyUnsafe(t){const{endo:n,n:i}=e;rt("scalar",t,fr,i);const o=l.ZERO;if(t===fr)return o;if(this.is0()||t===pr)return this;if(!n||f.hasPrecomputes(this))return f.wNAFCachedUnsafe(this,t,l.normalizeZ);let{k1neg:s,k1:a,k2neg:c,k2:u}=n.splitScalar(t),h=o,d=o,p=this;for(;a>fr||u>fr;)a&pr&&(h=h.add(p)),u&pr&&(d=d.add(p)),p=p.double(),a>>=pr,u>>=pr;return s&&(h=h.negate()),c&&(d=d.negate()),d=new l(r.mul(d.px,n.beta),d.py,d.pz),h.add(d)}multiply(t){const{endo:n,n:i}=e;let o,s;if(rt("scalar",t,pr,i),n){const{k1neg:e,k1:i,k2neg:a,k2:c}=n.splitScalar(t);let{p:u,f:h}=this.wNAF(i),{p:d,f:p}=this.wNAF(c);u=f.constTimeNegate(e,u),d=f.constTimeNegate(a,d),d=new l(r.mul(d.px,n.beta),d.py,d.pz),o=u.add(d),s=h.add(p)}else{const{p:e,f:r}=this.wNAF(t);o=e,s=r}return l.normalizeZ([o,s])[0]}multiplyAndAddUnsafe(t,e,r){const n=l.BASE,i=(t,e)=>e!==fr&&e!==pr&&t.equals(n)?t.multiply(e):t.multiplyUnsafe(e),o=i(this,e).add(i(t,r));return o.is0()?void 0:o}toAffine(t){return u(this,t)}isTorsionFree(){const{h:t,isTorsionFree:r}=e;if(t===pr)return!0;if(r)return r(l,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:t,clearCofactor:r}=e;return t===pr?this:r?r(l,this):this.multiplyUnsafe(e.h)}toRawBytes(t=!0){return K("isCompressed",t),this.assertValidity(),i(l,this,t)}toHex(t=!0){return K("isCompressed",t),q(this.toRawBytes(t))}}l.BASE=new l(e.Gx,e.Gy,r.ONE),l.ZERO=new l(r.ZERO,r.ONE,r.ZERO);const d=e.nBitLength,f=Ct(l,e.endo?Math.ceil(d/2):d);return{CURVE:e,ProjectivePoint:l,normPrivateKeyToScalar:a,weierstrassEquation:s,isWithinCurveOrder:function(t){return et(t,pr,e.n)}}}({...e,toBytes(t,e,n){const i=e.toAffine(),o=r.toBytes(i.x),s=Q;return K("isCompressed",n),n?s(Uint8Array.from([e.hasEvenY()?2:3]),o):s(Uint8Array.from([4]),o,r.toBytes(i.y))},fromBytes(t){const e=t.length,n=t[0],s=t.subarray(1);if(e!==i||2!==n&&3!==n){if(e===o&&4===n)return{x:r.fromBytes(s.subarray(0,r.BYTES)),y:r.fromBytes(s.subarray(r.BYTES,2*r.BYTES))};throw new Error("invalid Point, expected length of "+i+", or uncompressed "+o+", got "+e)}{const t=Y(s);if(!et(t,pr,r.ORDER))throw new Error("Point is not on curve");const e=h(t);let i;try{i=r.sqrt(e)}catch(t){const e=t instanceof Error?": "+t.message:"";throw new Error("Point is not on curve"+e)}return!(1&~n)!=((i&pr)===pr)&&(i=r.neg(i)),{x:t,y:i}}}}),d=t=>q(Z(t,e.nByteLength));function f(t){return t>n>>pr}const p=(t,e,r)=>Y(t.slice(e,r));class g{constructor(t,e,r){this.r=t,this.s=e,this.recovery=r,this.assertValidity()}static fromCompact(t){const r=e.nByteLength;return t=X("compactSignature",t,2*r),new g(p(t,0,r),p(t,r,2*r))}static fromDER(t){const{r:e,s:r}=dr.toSig(X("DER",t));return new g(e,r)}assertValidity(){rt("r",this.r,pr,n),rt("s",this.s,pr,n)}addRecoveryBit(t){return new g(this.r,this.s,t)}recoverPublicKey(t){const{r:n,s:i,recovery:o}=this,u=w(X("msgHash",t));if(null==o||![0,1,2,3].includes(o))throw new Error("recovery id invalid");const h=2===o||3===o?n+e.n:n;if(h>=r.ORDER)throw new Error("recovery id 2 or 3 invalid");const l=1&o?"03":"02",f=c.fromHex(l+d(h)),p=a(h),g=s(-u*p),m=s(i*p),y=c.BASE.multiplyAndAddUnsafe(f,g,m);if(!y)throw new Error("point at infinify");return y.assertValidity(),y}hasHighS(){return f(this.s)}normalizeS(){return this.hasHighS()?new g(this.r,s(-this.s),this.recovery):this}toDERRawBytes(){return V(this.toDERHex())}toDERHex(){return dr.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return V(this.toCompactHex())}toCompactHex(){return d(this.r)+d(this.s)}}const m={isValidPrivateKey(t){try{return u(t),!0}catch(t){return!1}},normPrivateKeyToScalar:u,randomPrivateKey:()=>{const t=Et(e.n);return function(t,e,r=!1){const n=t.length,i=_t(e),o=Et(e);if(n<16||n<o||n>1024)throw new Error("expected "+o+"-1024 bytes of input, got "+n);const s=bt(r?G(t):Y(t),e-dt)+dt;return r?J(s,i):Z(s,i)}(e.randomBytes(t),e.n)},precompute:(t=8,e=c.BASE)=>(e._setWindowSize(t),e.multiply(BigInt(3)),e)};function y(t){const e=U(t),r="string"==typeof t,n=(e||r)&&t.length;return e?n===i||n===o:r?n===2*i||n===2*o:t instanceof c}const b=e.bits2int||function(t){if(t.length>8192)throw new Error("input is too large");const r=Y(t),n=8*t.length-e.nBitLength;return n>0?r>>BigInt(n):r},w=e.bits2int_modN||function(t){return s(b(t))},k=it(e.nBitLength);function v(t){return rt("num < 2^"+e.nBitLength,t,fr,k),Z(t,e.nByteLength)}const S={lowS:e.lowS,prehash:!1},I={lowS:e.lowS,prehash:!1};return c.BASE._setWindowSize(8),{CURVE:e,getPublicKey:function(t,e=!0){return c.fromPrivateKey(t).toRawBytes(e)},getSharedSecret:function(t,e,r=!0){if(y(t))throw new Error("first arg must be private key");if(!y(e))throw new Error("second arg must be public key");return c.fromHex(e).multiply(u(t)).toRawBytes(r)},sign:function(t,n,i=S){const{seed:o,k2sig:h}=function(t,n,i=S){if(["recovered","canonical"].some((t=>t in i)))throw new Error("sign() legacy options not supported");const{hash:o,randomBytes:h}=e;let{lowS:d,prehash:p,extraEntropy:m}=i;null==d&&(d=!0),t=X("msgHash",t),cr(i),p&&(t=X("prehashed msgHash",o(t)));const y=w(t),k=u(n),I=[v(k),v(y)];if(null!=m&&!1!==m){const t=!0===m?h(r.BYTES):m;I.push(X("extraEntropy",t))}const A=Q(...I),_=y;return{seed:A,k2sig:function(t){const e=b(t);if(!l(e))return;const r=a(e),n=c.BASE.multiply(e).toAffine(),i=s(n.x);if(i===fr)return;const o=s(r*s(_+i*k));if(o===fr)return;let u=(n.x===i?0:2)|Number(n.y&pr),h=o;return d&&f(o)&&(h=function(t){return f(t)?s(-t):t}(o),u^=1),new g(i,h,u)}}}(t,n,i),d=e;return at(d.hash.outputLen,d.nByteLength,d.hmac)(o,h)},verify:function(t,r,n,i=I){const o=t;r=X("msgHash",r),n=X("publicKey",n);const{lowS:u,prehash:h,format:l}=i;if(cr(i),"strict"in i)throw new Error("options.strict was renamed to lowS");if(void 0!==l&&"compact"!==l&&"der"!==l)throw new Error("format must be compact or der");const d="string"==typeof o||U(o),f=!d&&!l&&"object"==typeof o&&null!==o&&"bigint"==typeof o.r&&"bigint"==typeof o.s;if(!d&&!f)throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");let p,m;try{if(f&&(p=new g(o.r,o.s)),d){try{"compact"!==l&&(p=g.fromDER(o))}catch(t){if(!(t instanceof dr.Err))throw t}p||"der"===l||(p=g.fromCompact(o))}m=c.fromHex(n)}catch(t){return!1}if(!p)return!1;if(u&&p.hasHighS())return!1;h&&(r=e.hash(r));const{r:y,s:b}=p,k=w(r),v=a(b),S=s(k*v),A=s(y*v),_=c.BASE.multiplyAndAddUnsafe(m,S,A)?.toAffine();return!!_&&s(_.x)===y},ProjectivePoint:c,Signature:g,utils:m}}function yr(t){return{hash:t,hmac:(e,...r)=>ar(t,e,function(...t){let e=0;for(let r=0;r<t.length;r++){const n=t[r];s(n),e+=n.length}const r=new Uint8Array(e);for(let e=0,n=0;e<t.length;e++){const i=t[e];r.set(i,n),n+=i.length}return r}(...r)),randomBytes:y}}BigInt(4);const br=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),wr=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),kr=BigInt(1),vr=BigInt(2),Sr=(t,e)=>(t+e/vr)/e;const Ir=At(br,void 0,void 0,{sqrt:function(t){const e=br,r=BigInt(3),n=BigInt(6),i=BigInt(11),o=BigInt(22),s=BigInt(23),a=BigInt(44),c=BigInt(88),u=t*t*t%e,h=u*u*t%e,l=kt(h,r,e)*h%e,d=kt(l,r,e)*h%e,f=kt(d,vr,e)*u%e,p=kt(f,i,e)*f%e,g=kt(p,o,e)*p%e,m=kt(g,a,e)*g%e,y=kt(m,c,e)*m%e,b=kt(y,a,e)*g%e,w=kt(b,r,e)*h%e,k=kt(w,s,e)*p%e,v=kt(k,n,e)*u%e,S=kt(v,vr,e);if(!Ir.eql(Ir.sqr(S),t))throw new Error("Cannot find square root");return S}}),Ar=function(t,e){const r=e=>mr({...t,...yr(e)});return{...r(e),create:r}}({a:BigInt(0),b:BigInt(7),Fp:Ir,n:wr,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:t=>{const e=wr,r=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),n=-kr*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),i=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),o=r,s=BigInt("0x100000000000000000000000000000000"),a=Sr(o*t,e),c=Sr(-n*t,e);let u=bt(t-a*r-c*i,e),h=bt(-a*n-c*o,e);const l=u>s,d=h>s;if(l&&(u=e-u),d&&(h=e-h),u>s||h>s)throw new Error("splitScalar: Endomorphism failed, k="+t);return{k1neg:l,k1:u,k2neg:d,k2:h}}}},ce);BigInt(0),Ar.ProjectivePoint;const _r=Qt.utils.randomPrivateKey,Er=()=>{const t=Qt.utils.randomPrivateKey(),e=Br(t),r=new Uint8Array(64);return r.set(t),r.set(e,32),{publicKey:e,secretKey:r}},Br=Qt.getPublicKey;function xr(t){try{return Qt.ExtendedPoint.fromHex(t),!0}catch{return!1}}const Mr=(t,e)=>Qt.sign(t,e.slice(0,32)),Pr=Qt.verify,Rr=t=>i.Buffer.isBuffer(t)?t:t instanceof Uint8Array?i.Buffer.from(t.buffer,t.byteOffset,t.byteLength):i.Buffer.from(t);class Tr{constructor(t){Object.assign(this,t)}encode(){return i.Buffer.from((0,ue.serialize)(Or,this))}static decode(t){return(0,ue.deserialize)(Or,this,t)}static decodeUnchecked(t){return(0,ue.deserializeUnchecked)(Or,this,t)}}class Lr extends Tr{constructor(t){if(super(t),this.enum="",1!==Object.keys(t).length)throw new Error("Enum can only take single value");Object.keys(t).map((t=>{this.enum=t}))}}const Or=new Map;var Cr;const zr=32,Nr=32;let Ur=1;class Wr extends Tr{constructor(t){if(super({}),this._bn=void 0,function(t){return void 0!==t._bn}(t))this._bn=t._bn;else{if("string"==typeof t){const e=ne().decode(t);if(e.length!=Nr)throw new Error("Invalid public key input");this._bn=new(ee())(e)}else this._bn=new(ee())(t);if(this._bn.byteLength()>Nr)throw new Error("Invalid public key input")}}static unique(){const t=new Wr(Ur);return Ur+=1,new Wr(t.toBuffer())}equals(t){return this._bn.eq(t._bn)}toBase58(){return ne().encode(this.toBytes())}toJSON(){return this.toBase58()}toBytes(){const t=this.toBuffer();return new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}toBuffer(){const t=this._bn.toArrayLike(i.Buffer);if(t.length===Nr)return t;const e=i.Buffer.alloc(32);return t.copy(e,32-t.length),e}get[Symbol.toStringTag](){return`PublicKey(${this.toString()})`}toString(){return this.toBase58()}static async createWithSeed(t,e,r){const n=i.Buffer.concat([t.toBuffer(),i.Buffer.from(e),r.toBuffer()]),o=ce(n);return new Wr(o)}static createProgramAddressSync(t,e){let r=i.Buffer.alloc(0);t.forEach((function(t){if(t.length>zr)throw new TypeError("Max seed length exceeded");r=i.Buffer.concat([r,Rr(t)])})),r=i.Buffer.concat([r,e.toBuffer(),i.Buffer.from("ProgramDerivedAddress")]);const n=ce(r);if(xr(n))throw new Error("Invalid seeds, address must fall off the curve");return new Wr(n)}static async createProgramAddress(t,e){return this.createProgramAddressSync(t,e)}static findProgramAddressSync(t,e){let r,n=255;for(;0!=n;){try{const o=t.concat(i.Buffer.from([n]));r=this.createProgramAddressSync(o,e)}catch(t){if(t instanceof TypeError)throw t;n--;continue}return[r,n]}throw new Error("Unable to find a viable program address nonce")}static async findProgramAddress(t,e){return this.findProgramAddressSync(t,e)}static isOnCurve(t){return xr(new Wr(t).toBytes())}}Cr=Wr,Wr.default=new Cr("11111111111111111111111111111111"),Or.set(Wr,{kind:"struct",fields:[["_bn","u256"]]});class Kr{constructor(t){if(this._publicKey=void 0,this._secretKey=void 0,t){const e=Rr(t);if(64!==t.length)throw new Error("bad secret key size");this._publicKey=e.slice(32,64),this._secretKey=e.slice(0,32)}else this._secretKey=Rr(_r()),this._publicKey=Rr(Br(this._secretKey))}get publicKey(){return new Wr(this._publicKey)}get secretKey(){return i.Buffer.concat([this._secretKey,this._publicKey],64)}}const Hr=new Wr("BPFLoader1111111111111111111111111111111111"),qr=1232,Dr=127,Fr=64;class $r extends Error{constructor(t){super(`Signature ${t} has expired: block height exceeded.`),this.signature=void 0,this.signature=t}}Object.defineProperty($r.prototype,"name",{value:"TransactionExpiredBlockheightExceededError"});class jr extends Error{constructor(t,e){super(`Transaction was not confirmed in ${e.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${t} using the Solana Explorer or CLI tools.`),this.signature=void 0,this.signature=t}}Object.defineProperty(jr.prototype,"name",{value:"TransactionExpiredTimeoutError"});class Vr extends Error{constructor(t){super(`Signature ${t} has expired: the nonce is no longer valid.`),this.signature=void 0,this.signature=t}}Object.defineProperty(Vr.prototype,"name",{value:"TransactionExpiredNonceInvalidError"});class Yr{constructor(t,e){this.staticAccountKeys=void 0,this.accountKeysFromLookups=void 0,this.staticAccountKeys=t,this.accountKeysFromLookups=e}keySegments(){const t=[this.staticAccountKeys];return this.accountKeysFromLookups&&(t.push(this.accountKeysFromLookups.writable),t.push(this.accountKeysFromLookups.readonly)),t}get(t){for(const e of this.keySegments()){if(t<e.length)return e[t];t-=e.length}}get length(){return this.keySegments().flat().length}compileInstructions(t){if(this.length>256)throw new Error("Account index overflow encountered during compilation");const e=new Map;this.keySegments().flat().forEach(((t,r)=>{e.set(t.toBase58(),r)}));const r=t=>{const r=e.get(t.toBase58());if(void 0===r)throw new Error("Encountered an unknown instruction account key during compilation");return r};return t.map((t=>({programIdIndex:r(t.programId),accountKeyIndexes:t.keys.map((t=>r(t.pubkey))),data:t.data})))}}const Gr=(t="publicKey")=>he.av(32,t),Zr=(t="signature")=>he.av(64,t),Jr=(t="string")=>{const e=he.w3([he.DH("length"),he.DH("lengthPadding"),he.av(he.cY(he.DH(),-8),"chars")],t),r=e.decode.bind(e),n=e.encode.bind(e),o=e;return o.decode=(t,e)=>r(t,e).chars.toString(),o.encode=(t,e,r)=>{const o={chars:i.Buffer.from(t,"utf8")};return n(o,e,r)},o.alloc=t=>he.DH().span+he.DH().span+i.Buffer.from(t,"utf8").length,o};function Xr(t,e){const r=t=>{if(t.span>=0)return t.span;if("function"==typeof t.alloc)return t.alloc(e[t.property]);if("count"in t&&"elementLayout"in t){const n=e[t.property];if(Array.isArray(n))return n.length*r(t.elementLayout)}else if("fields"in t)return Xr({layout:t},e[t.property]);return 0};let n=0;return t.layout.fields.forEach((t=>{n+=r(t)})),n}function Qr(t){let e=0,r=0;for(;;){let n=t.shift();if(e|=(127&n)<<7*r,r+=1,!(128&n))break}return e}function tn(t,e){let r=e;for(;;){let e=127&r;if(r>>=7,0==r){t.push(e);break}e|=128,t.push(e)}}function en(t,e){if(!t)throw new Error(e||"Assertion failed")}class rn{constructor(t,e){this.payer=void 0,this.keyMetaMap=void 0,this.payer=t,this.keyMetaMap=e}static compile(t,e){const r=new Map,n=t=>{const e=t.toBase58();let n=r.get(e);return void 0===n&&(n={isSigner:!1,isWritable:!1,isInvoked:!1},r.set(e,n)),n},i=n(e);i.isSigner=!0,i.isWritable=!0;for(const e of t){n(e.programId).isInvoked=!0;for(const t of e.keys){const e=n(t.pubkey);e.isSigner||=t.isSigner,e.isWritable||=t.isWritable}}return new rn(e,r)}getMessageComponents(){const t=[...this.keyMetaMap.entries()];en(t.length<=256,"Max static account keys length exceeded");const e=t.filter((([,t])=>t.isSigner&&t.isWritable)),r=t.filter((([,t])=>t.isSigner&&!t.isWritable)),n=t.filter((([,t])=>!t.isSigner&&t.isWritable)),i=t.filter((([,t])=>!t.isSigner&&!t.isWritable)),o={numRequiredSignatures:e.length+r.length,numReadonlySignedAccounts:r.length,numReadonlyUnsignedAccounts:i.length};{en(e.length>0,"Expected at least one writable signer key");const[t]=e[0];en(t===this.payer.toBase58(),"Expected first writable signer key to be the fee payer")}return[o,[...e.map((([t])=>new Wr(t))),...r.map((([t])=>new Wr(t))),...n.map((([t])=>new Wr(t))),...i.map((([t])=>new Wr(t)))]]}extractTableLookup(t){const[e,r]=this.drainKeysFoundInLookupTable(t.state.addresses,(t=>!t.isSigner&&!t.isInvoked&&t.isWritable)),[n,i]=this.drainKeysFoundInLookupTable(t.state.addresses,(t=>!t.isSigner&&!t.isInvoked&&!t.isWritable));if(0!==e.length||0!==n.length)return[{accountKey:t.key,writableIndexes:e,readonlyIndexes:n},{writable:r,readonly:i}]}drainKeysFoundInLookupTable(t,e){const r=new Array,n=new Array;for(const[i,o]of this.keyMetaMap.entries())if(e(o)){const e=new Wr(i),o=t.findIndex((t=>t.equals(e)));o>=0&&(en(o<256,"Max lookup table index exceeded"),r.push(o),n.push(e),this.keyMetaMap.delete(i))}return[r,n]}}const nn="Reached end of buffer unexpectedly";function on(t){if(0===t.length)throw new Error(nn);return t.shift()}function sn(t,...e){const[r]=e;if(2===e.length?r+(e[1]??0)>t.length:r>=t.length)throw new Error(nn);return t.splice(...e)}class an{constructor(t){this.header=void 0,this.accountKeys=void 0,this.recentBlockhash=void 0,this.instructions=void 0,this.indexToProgramIds=new Map,this.header=t.header,this.accountKeys=t.accountKeys.map((t=>new Wr(t))),this.recentBlockhash=t.recentBlockhash,this.instructions=t.instructions,this.instructions.forEach((t=>this.indexToProgramIds.set(t.programIdIndex,this.accountKeys[t.programIdIndex])))}get version(){return"legacy"}get staticAccountKeys(){return this.accountKeys}get compiledInstructions(){return this.instructions.map((t=>({programIdIndex:t.programIdIndex,accountKeyIndexes:t.accounts,data:ne().decode(t.data)})))}get addressTableLookups(){return[]}getAccountKeys(){return new Yr(this.staticAccountKeys)}static compile(t){const e=rn.compile(t.instructions,t.payerKey),[r,n]=e.getMessageComponents(),i=new Yr(n).compileInstructions(t.instructions).map((t=>({programIdIndex:t.programIdIndex,accounts:t.accountKeyIndexes,data:ne().encode(t.data)})));return new an({header:r,accountKeys:n,recentBlockhash:t.recentBlockhash,instructions:i})}isAccountSigner(t){return t<this.header.numRequiredSignatures}isAccountWritable(t){const e=this.header.numRequiredSignatures;return t>=this.header.numRequiredSignatures?t-e<this.accountKeys.length-e-this.header.numReadonlyUnsignedAccounts:t<e-this.header.numReadonlySignedAccounts}isProgramId(t){return this.indexToProgramIds.has(t)}programIds(){return[...this.indexToProgramIds.values()]}nonProgramIds(){return this.accountKeys.filter(((t,e)=>!this.isProgramId(e)))}serialize(){const t=this.accountKeys.length;let e=[];tn(e,t);const r=this.instructions.map((t=>{const{accounts:e,programIdIndex:r}=t,n=Array.from(ne().decode(t.data));let o=[];tn(o,e.length);let s=[];return tn(s,n.length),{programIdIndex:r,keyIndicesCount:i.Buffer.from(o),keyIndices:e,dataLength:i.Buffer.from(s),data:n}}));let n=[];tn(n,r.length);let o=i.Buffer.alloc(qr);i.Buffer.from(n).copy(o);let s=n.length;r.forEach((t=>{const e=he.w3([he.u8("programIdIndex"),he.av(t.keyIndicesCount.length,"keyIndicesCount"),he.O6(he.u8("keyIndex"),t.keyIndices.length,"keyIndices"),he.av(t.dataLength.length,"dataLength"),he.O6(he.u8("userdatum"),t.data.length,"data")]).encode(t,o,s);s+=e})),o=o.slice(0,s);const a=he.w3([he.av(1,"numRequiredSignatures"),he.av(1,"numReadonlySignedAccounts"),he.av(1,"numReadonlyUnsignedAccounts"),he.av(e.length,"keyCount"),he.O6(Gr("key"),t,"keys"),Gr("recentBlockhash")]),c={numRequiredSignatures:i.Buffer.from([this.header.numRequiredSignatures]),numReadonlySignedAccounts:i.Buffer.from([this.header.numReadonlySignedAccounts]),numReadonlyUnsignedAccounts:i.Buffer.from([this.header.numReadonlyUnsignedAccounts]),keyCount:i.Buffer.from(e),keys:this.accountKeys.map((t=>Rr(t.toBytes()))),recentBlockhash:ne().decode(this.recentBlockhash)};let u=i.Buffer.alloc(2048);const h=a.encode(c,u);return o.copy(u,h),u.slice(0,h+o.length)}static from(t){let e=[...t];const r=on(e);if(r!==(r&Dr))throw new Error("Versioned messages must be deserialized with VersionedMessage.deserialize()");const n=on(e),o=on(e),s=Qr(e);let a=[];for(let t=0;t<s;t++){const t=sn(e,0,Nr);a.push(new Wr(i.Buffer.from(t)))}const c=sn(e,0,Nr),u=Qr(e);let h=[];for(let t=0;t<u;t++){const t=on(e),r=sn(e,0,Qr(e)),n=sn(e,0,Qr(e)),o=ne().encode(i.Buffer.from(n));h.push({programIdIndex:t,accounts:r,data:o})}const l={header:{numRequiredSignatures:r,numReadonlySignedAccounts:n,numReadonlyUnsignedAccounts:o},recentBlockhash:ne().encode(i.Buffer.from(c)),accountKeys:a,instructions:h};return new an(l)}}class cn{constructor(t){this.header=void 0,this.staticAccountKeys=void 0,this.recentBlockhash=void 0,this.compiledInstructions=void 0,this.addressTableLookups=void 0,this.header=t.header,this.staticAccountKeys=t.staticAccountKeys,this.recentBlockhash=t.recentBlockhash,this.compiledInstructions=t.compiledInstructions,this.addressTableLookups=t.addressTableLookups}get version(){return 0}get numAccountKeysFromLookups(){let t=0;for(const e of this.addressTableLookups)t+=e.readonlyIndexes.length+e.writableIndexes.length;return t}getAccountKeys(t){let e;if(t&&"accountKeysFromLookups"in t&&t.accountKeysFromLookups){if(this.numAccountKeysFromLookups!=t.accountKeysFromLookups.writable.length+t.accountKeysFromLookups.readonly.length)throw new Error("Failed to get account keys because of a mismatch in the number of account keys from lookups");e=t.accountKeysFromLookups}else if(t&&"addressLookupTableAccounts"in t&&t.addressLookupTableAccounts)e=this.resolveAddressTableLookups(t.addressLookupTableAccounts);else if(this.addressTableLookups.length>0)throw new Error("Failed to get account keys because address table lookups were not resolved");return new Yr(this.staticAccountKeys,e)}isAccountSigner(t){return t<this.header.numRequiredSignatures}isAccountWritable(t){const e=this.header.numRequiredSignatures,r=this.staticAccountKeys.length;return t>=r?t-r<this.addressTableLookups.reduce(((t,e)=>t+e.writableIndexes.length),0):t>=this.header.numRequiredSignatures?t-e<r-e-this.header.numReadonlyUnsignedAccounts:t<e-this.header.numReadonlySignedAccounts}resolveAddressTableLookups(t){const e={writable:[],readonly:[]};for(const r of this.addressTableLookups){const n=t.find((t=>t.key.equals(r.accountKey)));if(!n)throw new Error(`Failed to find address lookup table account for table key ${r.accountKey.toBase58()}`);for(const t of r.writableIndexes){if(!(t<n.state.addresses.length))throw new Error(`Failed to find address for index ${t} in address lookup table ${r.accountKey.toBase58()}`);e.writable.push(n.state.addresses[t])}for(const t of r.readonlyIndexes){if(!(t<n.state.addresses.length))throw new Error(`Failed to find address for index ${t} in address lookup table ${r.accountKey.toBase58()}`);e.readonly.push(n.state.addresses[t])}}return e}static compile(t){const e=rn.compile(t.instructions,t.payerKey),r=new Array,n={writable:new Array,readonly:new Array},i=t.addressLookupTableAccounts||[];for(const t of i){const i=e.extractTableLookup(t);if(void 0!==i){const[t,{writable:e,readonly:o}]=i;r.push(t),n.writable.push(...e),n.readonly.push(...o)}}const[o,s]=e.getMessageComponents(),a=new Yr(s,n).compileInstructions(t.instructions);return new cn({header:o,staticAccountKeys:s,recentBlockhash:t.recentBlockhash,compiledInstructions:a,addressTableLookups:r})}serialize(){const t=Array();tn(t,this.staticAccountKeys.length);const e=this.serializeInstructions(),r=Array();tn(r,this.compiledInstructions.length);const n=this.serializeAddressTableLookups(),i=Array();tn(i,this.addressTableLookups.length);const o=he.w3([he.u8("prefix"),he.w3([he.u8("numRequiredSignatures"),he.u8("numReadonlySignedAccounts"),he.u8("numReadonlyUnsignedAccounts")],"header"),he.av(t.length,"staticAccountKeysLength"),he.O6(Gr(),this.staticAccountKeys.length,"staticAccountKeys"),Gr("recentBlockhash"),he.av(r.length,"instructionsLength"),he.av(e.length,"serializedInstructions"),he.av(i.length,"addressTableLookupsLength"),he.av(n.length,"serializedAddressTableLookups")]),s=new Uint8Array(qr),a=o.encode({prefix:128,header:this.header,staticAccountKeysLength:new Uint8Array(t),staticAccountKeys:this.staticAccountKeys.map((t=>t.toBytes())),recentBlockhash:ne().decode(this.recentBlockhash),instructionsLength:new Uint8Array(r),serializedInstructions:e,addressTableLookupsLength:new Uint8Array(i),serializedAddressTableLookups:n},s);return s.slice(0,a)}serializeInstructions(){let t=0;const e=new Uint8Array(qr);for(const r of this.compiledInstructions){const n=Array();tn(n,r.accountKeyIndexes.length);const i=Array();tn(i,r.data.length),t+=he.w3([he.u8("programIdIndex"),he.av(n.length,"encodedAccountKeyIndexesLength"),he.O6(he.u8(),r.accountKeyIndexes.length,"accountKeyIndexes"),he.av(i.length,"encodedDataLength"),he.av(r.data.length,"data")]).encode({programIdIndex:r.programIdIndex,encodedAccountKeyIndexesLength:new Uint8Array(n),accountKeyIndexes:r.accountKeyIndexes,encodedDataLength:new Uint8Array(i),data:r.data},e,t)}return e.slice(0,t)}serializeAddressTableLookups(){let t=0;const e=new Uint8Array(qr);for(const r of this.addressTableLookups){const n=Array();tn(n,r.writableIndexes.length);const i=Array();tn(i,r.readonlyIndexes.length),t+=he.w3([Gr("accountKey"),he.av(n.length,"encodedWritableIndexesLength"),he.O6(he.u8(),r.writableIndexes.length,"writableIndexes"),he.av(i.length,"encodedReadonlyIndexesLength"),he.O6(he.u8(),r.readonlyIndexes.length,"readonlyIndexes")]).encode({accountKey:r.accountKey.toBytes(),encodedWritableIndexesLength:new Uint8Array(n),writableIndexes:r.writableIndexes,encodedReadonlyIndexesLength:new Uint8Array(i),readonlyIndexes:r.readonlyIndexes},e,t)}return e.slice(0,t)}static deserialize(t){let e=[...t];const r=on(e),n=r&Dr;en(r!==n,"Expected versioned message but received legacy message"),en(0===n,`Expected versioned message with version 0 but found version ${n}`);const i={numRequiredSignatures:on(e),numReadonlySignedAccounts:on(e),numReadonlyUnsignedAccounts:on(e)},o=[],s=Qr(e);for(let t=0;t<s;t++)o.push(new Wr(sn(e,0,Nr)));const a=ne().encode(sn(e,0,Nr)),c=Qr(e),u=[];for(let t=0;t<c;t++){const t=on(e),r=sn(e,0,Qr(e)),n=Qr(e),i=new Uint8Array(sn(e,0,n));u.push({programIdIndex:t,accountKeyIndexes:r,data:i})}const h=Qr(e),l=[];for(let t=0;t<h;t++){const t=new Wr(sn(e,0,Nr)),r=sn(e,0,Qr(e)),n=sn(e,0,Qr(e));l.push({accountKey:t,writableIndexes:r,readonlyIndexes:n})}return new cn({header:i,staticAccountKeys:o,recentBlockhash:a,compiledInstructions:u,addressTableLookups:l})}}const un={deserializeMessageVersion(t){const e=t[0],r=e&Dr;return r===e?"legacy":r},deserialize:t=>{const e=un.deserializeMessageVersion(t);if("legacy"===e)return an.from(t);if(0===e)return cn.deserialize(t);throw new Error(`Transaction message version ${e} deserialization is not supported`)}};let hn=function(t){return t[t.BLOCKHEIGHT_EXCEEDED=0]="BLOCKHEIGHT_EXCEEDED",t[t.PROCESSED=1]="PROCESSED",t[t.TIMED_OUT=2]="TIMED_OUT",t[t.NONCE_INVALID=3]="NONCE_INVALID",t}({});const ln=i.Buffer.alloc(Fr).fill(0);class dn{constructor(t){this.keys=void 0,this.programId=void 0,this.data=i.Buffer.alloc(0),this.programId=t.programId,this.keys=t.keys,t.data&&(this.data=t.data)}toJSON(){return{keys:this.keys.map((({pubkey:t,isSigner:e,isWritable:r})=>({pubkey:t.toJSON(),isSigner:e,isWritable:r}))),programId:this.programId.toJSON(),data:[...this.data]}}}class fn{get signature(){return this.signatures.length>0?this.signatures[0].signature:null}constructor(t){if(this.signatures=[],this.feePayer=void 0,this.instructions=[],this.recentBlockhash=void 0,this.lastValidBlockHeight=void 0,this.nonceInfo=void 0,this.minNonceContextSlot=void 0,this._message=void 0,this._json=void 0,t)if(t.feePayer&&(this.feePayer=t.feePayer),t.signatures&&(this.signatures=t.signatures),Object.prototype.hasOwnProperty.call(t,"nonceInfo")){const{minContextSlot:e,nonceInfo:r}=t;this.minNonceContextSlot=e,this.nonceInfo=r}else if(Object.prototype.hasOwnProperty.call(t,"lastValidBlockHeight")){const{blockhash:e,lastValidBlockHeight:r}=t;this.recentBlockhash=e,this.lastValidBlockHeight=r}else{const{recentBlockhash:e,nonceInfo:r}=t;r&&(this.nonceInfo=r),this.recentBlockhash=e}}toJSON(){return{recentBlockhash:this.recentBlockhash||null,feePayer:this.feePayer?this.feePayer.toJSON():null,nonceInfo:this.nonceInfo?{nonce:this.nonceInfo.nonce,nonceInstruction:this.nonceInfo.nonceInstruction.toJSON()}:null,instructions:this.instructions.map((t=>t.toJSON())),signers:this.signatures.map((({publicKey:t})=>t.toJSON()))}}add(...t){if(0===t.length)throw new Error("No instructions");return t.forEach((t=>{"instructions"in t?this.instructions=this.instructions.concat(t.instructions):"data"in t&&"programId"in t&&"keys"in t?this.instructions.push(t):this.instructions.push(new dn(t))})),this}compileMessage(){if(this._message&&JSON.stringify(this.toJSON())===JSON.stringify(this._json))return this._message;let t,e,r;if(this.nonceInfo?(t=this.nonceInfo.nonce,e=this.instructions[0]!=this.nonceInfo.nonceInstruction?[this.nonceInfo.nonceInstruction,...this.instructions]:this.instructions):(t=this.recentBlockhash,e=this.instructions),!t)throw new Error("Transaction recentBlockhash required");if(e.length<1&&console.warn("No instructions provided"),this.feePayer)r=this.feePayer;else{if(!(this.signatures.length>0&&this.signatures[0].publicKey))throw new Error("Transaction fee payer required");r=this.signatures[0].publicKey}for(let t=0;t<e.length;t++)if(void 0===e[t].programId)throw new Error(`Transaction instruction index ${t} has undefined program id`);const n=[],i=[];e.forEach((t=>{t.keys.forEach((t=>{i.push({...t})}));const e=t.programId.toString();n.includes(e)||n.push(e)})),n.forEach((t=>{i.push({pubkey:new Wr(t),isSigner:!1,isWritable:!1})}));const o=[];i.forEach((t=>{const e=t.pubkey.toString(),r=o.findIndex((t=>t.pubkey.toString()===e));r>-1?(o[r].isWritable=o[r].isWritable||t.isWritable,o[r].isSigner=o[r].isSigner||t.isSigner):o.push(t)})),o.sort((function(t,e){return t.isSigner!==e.isSigner?t.isSigner?-1:1:t.isWritable!==e.isWritable?t.isWritable?-1:1:t.pubkey.toBase58().localeCompare(e.pubkey.toBase58(),"en",{localeMatcher:"best fit",usage:"sort",sensitivity:"variant",ignorePunctuation:!1,numeric:!1,caseFirst:"lower"})}));const s=o.findIndex((t=>t.pubkey.equals(r)));if(s>-1){const[t]=o.splice(s,1);t.isSigner=!0,t.isWritable=!0,o.unshift(t)}else o.unshift({pubkey:r,isSigner:!0,isWritable:!0});for(const t of this.signatures){const e=o.findIndex((e=>e.pubkey.equals(t.publicKey)));if(!(e>-1))throw new Error(`unknown signer: ${t.publicKey.toString()}`);o[e].isSigner||(o[e].isSigner=!0,console.warn("Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release."))}let a=0,c=0,u=0;const h=[],l=[];o.forEach((({pubkey:t,isSigner:e,isWritable:r})=>{e?(h.push(t.toString()),a+=1,r||(c+=1)):(l.push(t.toString()),r||(u+=1))}));const d=h.concat(l),f=e.map((t=>{const{data:e,programId:r}=t;return{programIdIndex:d.indexOf(r.toString()),accounts:t.keys.map((t=>d.indexOf(t.pubkey.toString()))),data:ne().encode(e)}}));return f.forEach((t=>{en(t.programIdIndex>=0),t.accounts.forEach((t=>en(t>=0)))})),new an({header:{numRequiredSignatures:a,numReadonlySignedAccounts:c,numReadonlyUnsignedAccounts:u},accountKeys:d,recentBlockhash:t,instructions:f})}_compile(){const t=this.compileMessage(),e=t.accountKeys.slice(0,t.header.numRequiredSignatures);return this.signatures.length===e.length&&this.signatures.every(((t,r)=>e[r].equals(t.publicKey)))||(this.signatures=e.map((t=>({signature:null,publicKey:t})))),t}serializeMessage(){return this._compile().serialize()}async getEstimatedFee(t){return(await t.getFeeForMessage(this.compileMessage())).value}setSigners(...t){if(0===t.length)throw new Error("No signers");const e=new Set;this.signatures=t.filter((t=>{const r=t.toString();return!e.has(r)&&(e.add(r),!0)})).map((t=>({signature:null,publicKey:t})))}sign(...t){if(0===t.length)throw new Error("No signers");const e=new Set,r=[];for(const n of t){const t=n.publicKey.toString();e.has(t)||(e.add(t),r.push(n))}this.signatures=r.map((t=>({signature:null,publicKey:t.publicKey})));const n=this._compile();this._partialSign(n,...r)}partialSign(...t){if(0===t.length)throw new Error("No signers");const e=new Set,r=[];for(const n of t){const t=n.publicKey.toString();e.has(t)||(e.add(t),r.push(n))}const n=this._compile();this._partialSign(n,...r)}_partialSign(t,...e){const r=t.serialize();e.forEach((t=>{const e=Mr(r,t.secretKey);this._addSignature(t.publicKey,Rr(e))}))}addSignature(t,e){this._compile(),this._addSignature(t,e)}_addSignature(t,e){en(64===e.length);const r=this.signatures.findIndex((e=>t.equals(e.publicKey)));if(r<0)throw new Error(`unknown signer: ${t.toString()}`);this.signatures[r].signature=i.Buffer.from(e)}verifySignatures(t=!0){return!this._getMessageSignednessErrors(this.serializeMessage(),t)}_getMessageSignednessErrors(t,e){const r={};for(const{signature:n,publicKey:i}of this.signatures)null===n?e&&(r.missing||=[]).push(i):Pr(n,t,i.toBytes())||(r.invalid||=[]).push(i);return r.invalid||r.missing?r:void 0}serialize(t){const{requireAllSignatures:e,verifySignatures:r}=Object.assign({requireAllSignatures:!0,verifySignatures:!0},t),n=this.serializeMessage();if(r){const t=this._getMessageSignednessErrors(n,e);if(t){let e="Signature verification failed.";throw t.invalid&&(e+=`\nInvalid signature for public key${1===t.invalid.length?"":"(s)"} [\`${t.invalid.map((t=>t.toBase58())).join("`, `")}\`].`),t.missing&&(e+=`\nMissing signature for public key${1===t.missing.length?"":"(s)"} [\`${t.missing.map((t=>t.toBase58())).join("`, `")}\`].`),new Error(e)}}return this._serialize(n)}_serialize(t){const{signatures:e}=this,r=[];tn(r,e.length);const n=r.length+64*e.length+t.length,o=i.Buffer.alloc(n);return en(e.length<256),i.Buffer.from(r).copy(o,0),e.forEach((({signature:t},e)=>{null!==t&&(en(64===t.length,"signature has invalid length"),i.Buffer.from(t).copy(o,r.length+64*e))})),t.copy(o,r.length+64*e.length),en(o.length<=qr,`Transaction too large: ${o.length} > ${qr}`),o}get keys(){return en(1===this.instructions.length),this.instructions[0].keys.map((t=>t.pubkey))}get programId(){return en(1===this.instructions.length),this.instructions[0].programId}get data(){return en(1===this.instructions.length),this.instructions[0].data}static from(t){let e=[...t];const r=Qr(e);let n=[];for(let t=0;t<r;t++){const t=sn(e,0,Fr);n.push(ne().encode(i.Buffer.from(t)))}return fn.populate(an.from(e),n)}static populate(t,e=[]){const r=new fn;return r.recentBlockhash=t.recentBlockhash,t.header.numRequiredSignatures>0&&(r.feePayer=t.accountKeys[0]),e.forEach(((e,n)=>{const i={signature:e==ne().encode(ln)?null:ne().decode(e),publicKey:t.accountKeys[n]};r.signatures.push(i)})),t.instructions.forEach((e=>{const n=e.accounts.map((e=>{const n=t.accountKeys[e];return{pubkey:n,isSigner:r.signatures.some((t=>t.publicKey.toString()===n.toString()))||t.isAccountSigner(e),isWritable:t.isAccountWritable(e)}}));r.instructions.push(new dn({keys:n,programId:t.accountKeys[e.programIdIndex],data:ne().decode(e.data)}))})),r._message=t,r._json=r.toJSON(),r}}class pn{constructor(t){this.payerKey=void 0,this.instructions=void 0,this.recentBlockhash=void 0,this.payerKey=t.payerKey,this.instructions=t.instructions,this.recentBlockhash=t.recentBlockhash}static decompile(t,e){const{header:r,compiledInstructions:n,recentBlockhash:i}=t,{numRequiredSignatures:o,numReadonlySignedAccounts:s,numReadonlyUnsignedAccounts:a}=r,c=o-s;en(c>0,"Message header is invalid");const u=t.staticAccountKeys.length-o-a;en(u>=0,"Message header is invalid");const h=t.getAccountKeys(e),l=h.get(0);if(void 0===l)throw new Error("Failed to decompile message because no account keys were found");const d=[];for(const t of n){const e=[];for(const n of t.accountKeyIndexes){const t=h.get(n);if(void 0===t)throw new Error(`Failed to find key for account key index ${n}`);let i;i=n<o?n<c:n<h.staticAccountKeys.length?n-o<u:n-h.staticAccountKeys.length<h.accountKeysFromLookups.writable.length,e.push({pubkey:t,isSigner:n<r.numRequiredSignatures,isWritable:i})}const n=h.get(t.programIdIndex);if(void 0===n)throw new Error(`Failed to find program id for program id index ${t.programIdIndex}`);d.push(new dn({programId:n,data:Rr(t.data),keys:e}))}return new pn({payerKey:l,instructions:d,recentBlockhash:i})}compileToLegacyMessage(){return an.compile({payerKey:this.payerKey,recentBlockhash:this.recentBlockhash,instructions:this.instructions})}compileToV0Message(t){return cn.compile({payerKey:this.payerKey,recentBlockhash:this.recentBlockhash,instructions:this.instructions,addressLookupTableAccounts:t})}}class gn{get version(){return this.message.version}constructor(t,e){if(this.signatures=void 0,this.message=void 0,void 0!==e)en(e.length===t.header.numRequiredSignatures,"Expected signatures length to be equal to the number of required signatures"),this.signatures=e;else{const e=[];for(let r=0;r<t.header.numRequiredSignatures;r++)e.push(new Uint8Array(Fr));this.signatures=e}this.message=t}serialize(){const t=this.message.serialize(),e=Array();tn(e,this.signatures.length);const r=he.w3([he.av(e.length,"encodedSignaturesLength"),he.O6(Zr(),this.signatures.length,"signatures"),he.av(t.length,"serializedMessage")]),n=new Uint8Array(2048),i=r.encode({encodedSignaturesLength:new Uint8Array(e),signatures:this.signatures,serializedMessage:t},n);return n.slice(0,i)}static deserialize(t){let e=[...t];const r=[],n=Qr(e);for(let t=0;t<n;t++)r.push(new Uint8Array(sn(e,0,Fr)));const i=un.deserialize(new Uint8Array(e));return new gn(i,r)}sign(t){const e=this.message.serialize(),r=this.message.staticAccountKeys.slice(0,this.message.header.numRequiredSignatures);for(const n of t){const t=r.findIndex((t=>t.equals(n.publicKey)));en(t>=0,`Cannot sign with non signer key ${n.publicKey.toBase58()}`),this.signatures[t]=Mr(e,n.secretKey)}}addSignature(t,e){en(64===e.byteLength,"Signature must be 64 bytes long");const r=this.message.staticAccountKeys.slice(0,this.message.header.numRequiredSignatures).findIndex((e=>e.equals(t)));en(r>=0,`Can not add signature; \`${t.toBase58()}\` is not required to sign this transaction`),this.signatures[r]=e}}const mn=new Wr("SysvarC1ock11111111111111111111111111111111"),yn=new Wr("SysvarEpochSchedu1e111111111111111111111111"),bn=new Wr("Sysvar1nstructions1111111111111111111111111"),wn=new Wr("SysvarRecentB1ockHashes11111111111111111111"),kn=new Wr("SysvarRent111111111111111111111111111111111"),vn=new Wr("SysvarRewards111111111111111111111111111111"),Sn=new Wr("SysvarS1otHashes111111111111111111111111111"),In=new Wr("SysvarS1otHistory11111111111111111111111111"),An=new Wr("SysvarStakeHistory1111111111111111111111111");class _n extends Error{constructor({action:t,signature:e,transactionMessage:r,logs:n}){const i=n?`Logs: \n${JSON.stringify(n.slice(-10),null,2)}. `:"",o="\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.";let s;switch(t){case"send":s=`Transaction ${e} resulted in an error. \n${r}. `+i+o;break;case"simulate":s=`Simulation failed. \nMessage: ${r}. \n`+i+o;break;default:s=`Unknown action '${t}'`}super(s),this.signature=void 0,this.transactionMessage=void 0,this.transactionLogs=void 0,this.signature=e,this.transactionMessage=r,this.transactionLogs=n||void 0}get transactionError(){return{message:this.transactionMessage,logs:Array.isArray(this.transactionLogs)?this.transactionLogs:void 0}}get logs(){const t=this.transactionLogs;if(null==t||"object"!=typeof t||!("then"in t))return t}async getLogs(t){return Array.isArray(this.transactionLogs)||(this.transactionLogs=new Promise(((e,r)=>{t.getTransaction(this.signature).then((t=>{if(t&&t.meta&&t.meta.logMessages){const r=t.meta.logMessages;this.transactionLogs=r,e(r)}else r(new Error("Log messages not found"))})).catch(r)}))),await this.transactionLogs}}const En={JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP:-32001,JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE:-32002,JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE:-32003,JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE:-32004,JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY:-32005,JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE:-32006,JSON_RPC_SERVER_ERROR_SLOT_SKIPPED:-32007,JSON_RPC_SERVER_ERROR_NO_SNAPSHOT:-32008,JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED:-32009,JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX:-32010,JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE:-32011,JSON_RPC_SCAN_ERROR:-32012,JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH:-32013,JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET:-32014,JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION:-32015,JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED:-32016};class Bn extends Error{constructor({code:t,message:e,data:r},n){super(null!=n?`${n}: ${e}`:e),this.code=void 0,this.data=void 0,this.code=t,this.data=r,this.name="SolanaJSONRPCError"}}async function xn(t,e,r,n){const i=n&&{skipPreflight:n.skipPreflight,preflightCommitment:n.preflightCommitment||n.commitment,maxRetries:n.maxRetries,minContextSlot:n.minContextSlot},o=await t.sendTransaction(e,r,i);let s;if(null!=e.recentBlockhash&&null!=e.lastValidBlockHeight)s=(await t.confirmTransaction({abortSignal:n?.abortSignal,signature:o,blockhash:e.recentBlockhash,lastValidBlockHeight:e.lastValidBlockHeight},n&&n.commitment)).value;else if(null!=e.minNonceContextSlot&&null!=e.nonceInfo){const{nonceInstruction:r}=e.nonceInfo,i=r.keys[0].pubkey;s=(await t.confirmTransaction({abortSignal:n?.abortSignal,minContextSlot:e.minNonceContextSlot,nonceAccountPubkey:i,nonceValue:e.nonceInfo.nonce,signature:o},n&&n.commitment)).value}else null!=n?.abortSignal&&console.warn("sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` or a combination of `nonceInfo` and `minNonceContextSlot` are abortable."),s=(await t.confirmTransaction(o,n&&n.commitment)).value;if(s.err){if(null!=o)throw new _n({action:"send",signature:o,transactionMessage:`Status: (${JSON.stringify(s)})`});throw new Error(`Transaction ${o} failed (${JSON.stringify(s)})`)}return o}function Mn(t){return new Promise((e=>setTimeout(e,t)))}function Pn(t,e){const r=t.layout.span>=0?t.layout.span:Xr(t,e),n=i.Buffer.alloc(r),o=Object.assign({instruction:t.index},e);return t.layout.encode(o,n),n}function Rn(t,e){let r;try{r=t.layout.decode(e)}catch(t){throw new Error("invalid instruction; "+t)}if(r.instruction!==t.index)throw new Error(`invalid instruction; instruction index mismatch ${r.instruction} != ${t.index}`);return r}const Tn=he.I0("lamportsPerSignature"),Ln=he.w3([he.DH("version"),he.DH("state"),Gr("authorizedPubkey"),Gr("nonce"),he.w3([Tn],"feeCalculator")]),On=Ln.span;class Cn{constructor(t){this.authorizedPubkey=void 0,this.nonce=void 0,this.feeCalculator=void 0,this.authorizedPubkey=t.authorizedPubkey,this.nonce=t.nonce,this.feeCalculator=t.feeCalculator}static fromAccountData(t){const e=Ln.decode(Rr(t),0);return new Cn({authorizedPubkey:new Wr(e.authorizedPubkey),nonce:new Wr(e.nonce).toString(),feeCalculator:e.feeCalculator})}}const zn=t=>{const e=(0,he.av)(8,t),{encode:r,decode:n}=(t=>({decode:t.decode.bind(t),encode:t.encode.bind(t)}))(e),o=e;return o.decode=(t,e)=>{const r=n(t,e);return(0,le.k5)(i.Buffer.from(r))},o.encode=(t,e,n)=>{const i=(0,le.Bq)(t,8);return r(i,e,n)},o};class Nn{constructor(){}static decodeInstructionType(t){this.checkProgramId(t.programId);const e=he.DH("instruction").decode(t.data);let r;for(const[t,n]of Object.entries(Un))if(n.index==e){r=t;break}if(!r)throw new Error("Instruction type incorrect; not a SystemInstruction");return r}static decodeCreateAccount(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,2);const{lamports:e,space:r,programId:n}=Rn(Un.Create,t.data);return{fromPubkey:t.keys[0].pubkey,newAccountPubkey:t.keys[1].pubkey,lamports:e,space:r,programId:new Wr(n)}}static decodeTransfer(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,2);const{lamports:e}=Rn(Un.Transfer,t.data);return{fromPubkey:t.keys[0].pubkey,toPubkey:t.keys[1].pubkey,lamports:e}}static decodeTransferWithSeed(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,3);const{lamports:e,seed:r,programId:n}=Rn(Un.TransferWithSeed,t.data);return{fromPubkey:t.keys[0].pubkey,basePubkey:t.keys[1].pubkey,toPubkey:t.keys[2].pubkey,lamports:e,seed:r,programId:new Wr(n)}}static decodeAllocate(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,1);const{space:e}=Rn(Un.Allocate,t.data);return{accountPubkey:t.keys[0].pubkey,space:e}}static decodeAllocateWithSeed(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,1);const{base:e,seed:r,space:n,programId:i}=Rn(Un.AllocateWithSeed,t.data);return{accountPubkey:t.keys[0].pubkey,basePubkey:new Wr(e),seed:r,space:n,programId:new Wr(i)}}static decodeAssign(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,1);const{programId:e}=Rn(Un.Assign,t.data);return{accountPubkey:t.keys[0].pubkey,programId:new Wr(e)}}static decodeAssignWithSeed(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,1);const{base:e,seed:r,programId:n}=Rn(Un.AssignWithSeed,t.data);return{accountPubkey:t.keys[0].pubkey,basePubkey:new Wr(e),seed:r,programId:new Wr(n)}}static decodeCreateWithSeed(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,2);const{base:e,seed:r,lamports:n,space:i,programId:o}=Rn(Un.CreateWithSeed,t.data);return{fromPubkey:t.keys[0].pubkey,newAccountPubkey:t.keys[1].pubkey,basePubkey:new Wr(e),seed:r,lamports:n,space:i,programId:new Wr(o)}}static decodeNonceInitialize(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,3);const{authorized:e}=Rn(Un.InitializeNonceAccount,t.data);return{noncePubkey:t.keys[0].pubkey,authorizedPubkey:new Wr(e)}}static decodeNonceAdvance(t){return this.checkProgramId(t.programId),this.checkKeyLength(t.keys,3),Rn(Un.AdvanceNonceAccount,t.data),{noncePubkey:t.keys[0].pubkey,authorizedPubkey:t.keys[2].pubkey}}static decodeNonceWithdraw(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,5);const{lamports:e}=Rn(Un.WithdrawNonceAccount,t.data);return{noncePubkey:t.keys[0].pubkey,toPubkey:t.keys[1].pubkey,authorizedPubkey:t.keys[4].pubkey,lamports:e}}static decodeNonceAuthorize(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,2);const{authorized:e}=Rn(Un.AuthorizeNonceAccount,t.data);return{noncePubkey:t.keys[0].pubkey,authorizedPubkey:t.keys[1].pubkey,newAuthorizedPubkey:new Wr(e)}}static checkProgramId(t){if(!t.equals(Wn.programId))throw new Error("invalid instruction; programId is not SystemProgram")}static checkKeyLength(t,e){if(t.length<e)throw new Error(`invalid instruction; found ${t.length} keys, expected at least ${e}`)}}const Un=Object.freeze({Create:{index:0,layout:he.w3([he.DH("instruction"),he.Wg("lamports"),he.Wg("space"),Gr("programId")])},Assign:{index:1,layout:he.w3([he.DH("instruction"),Gr("programId")])},Transfer:{index:2,layout:he.w3([he.DH("instruction"),zn("lamports")])},CreateWithSeed:{index:3,layout:he.w3([he.DH("instruction"),Gr("base"),Jr("seed"),he.Wg("lamports"),he.Wg("space"),Gr("programId")])},AdvanceNonceAccount:{index:4,layout:he.w3([he.DH("instruction")])},WithdrawNonceAccount:{index:5,layout:he.w3([he.DH("instruction"),he.Wg("lamports")])},InitializeNonceAccount:{index:6,layout:he.w3([he.DH("instruction"),Gr("authorized")])},AuthorizeNonceAccount:{index:7,layout:he.w3([he.DH("instruction"),Gr("authorized")])},Allocate:{index:8,layout:he.w3([he.DH("instruction"),he.Wg("space")])},AllocateWithSeed:{index:9,layout:he.w3([he.DH("instruction"),Gr("base"),Jr("seed"),he.Wg("space"),Gr("programId")])},AssignWithSeed:{index:10,layout:he.w3([he.DH("instruction"),Gr("base"),Jr("seed"),Gr("programId")])},TransferWithSeed:{index:11,layout:he.w3([he.DH("instruction"),zn("lamports"),Jr("seed"),Gr("programId")])},UpgradeNonceAccount:{index:12,layout:he.w3([he.DH("instruction")])}});class Wn{constructor(){}static createAccount(t){const e=Pn(Un.Create,{lamports:t.lamports,space:t.space,programId:Rr(t.programId.toBuffer())});return new dn({keys:[{pubkey:t.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:t.newAccountPubkey,isSigner:!0,isWritable:!0}],programId:this.programId,data:e})}static transfer(t){let e,r;return"basePubkey"in t?(e=Pn(Un.TransferWithSeed,{lamports:BigInt(t.lamports),seed:t.seed,programId:Rr(t.programId.toBuffer())}),r=[{pubkey:t.fromPubkey,isSigner:!1,isWritable:!0},{pubkey:t.basePubkey,isSigner:!0,isWritable:!1},{pubkey:t.toPubkey,isSigner:!1,isWritable:!0}]):(e=Pn(Un.Transfer,{lamports:BigInt(t.lamports)}),r=[{pubkey:t.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:t.toPubkey,isSigner:!1,isWritable:!0}]),new dn({keys:r,programId:this.programId,data:e})}static assign(t){let e,r;return"basePubkey"in t?(e=Pn(Un.AssignWithSeed,{base:Rr(t.basePubkey.toBuffer()),seed:t.seed,programId:Rr(t.programId.toBuffer())}),r=[{pubkey:t.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:t.basePubkey,isSigner:!0,isWritable:!1}]):(e=Pn(Un.Assign,{programId:Rr(t.programId.toBuffer())}),r=[{pubkey:t.accountPubkey,isSigner:!0,isWritable:!0}]),new dn({keys:r,programId:this.programId,data:e})}static createAccountWithSeed(t){const e=Pn(Un.CreateWithSeed,{base:Rr(t.basePubkey.toBuffer()),seed:t.seed,lamports:t.lamports,space:t.space,programId:Rr(t.programId.toBuffer())});let r=[{pubkey:t.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:t.newAccountPubkey,isSigner:!1,isWritable:!0}];return t.basePubkey.equals(t.fromPubkey)||r.push({pubkey:t.basePubkey,isSigner:!0,isWritable:!1}),new dn({keys:r,programId:this.programId,data:e})}static createNonceAccount(t){const e=new fn;"basePubkey"in t&&"seed"in t?e.add(Wn.createAccountWithSeed({fromPubkey:t.fromPubkey,newAccountPubkey:t.noncePubkey,basePubkey:t.basePubkey,seed:t.seed,lamports:t.lamports,space:On,programId:this.programId})):e.add(Wn.createAccount({fromPubkey:t.fromPubkey,newAccountPubkey:t.noncePubkey,lamports:t.lamports,space:On,programId:this.programId}));const r={noncePubkey:t.noncePubkey,authorizedPubkey:t.authorizedPubkey};return e.add(this.nonceInitialize(r)),e}static nonceInitialize(t){const e=Pn(Un.InitializeNonceAccount,{authorized:Rr(t.authorizedPubkey.toBuffer())}),r={keys:[{pubkey:t.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:wn,isSigner:!1,isWritable:!1},{pubkey:kn,isSigner:!1,isWritable:!1}],programId:this.programId,data:e};return new dn(r)}static nonceAdvance(t){const e=Pn(Un.AdvanceNonceAccount),r={keys:[{pubkey:t.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:wn,isSigner:!1,isWritable:!1},{pubkey:t.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:e};return new dn(r)}static nonceWithdraw(t){const e=Pn(Un.WithdrawNonceAccount,{lamports:t.lamports});return new dn({keys:[{pubkey:t.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:t.toPubkey,isSigner:!1,isWritable:!0},{pubkey:wn,isSigner:!1,isWritable:!1},{pubkey:kn,isSigner:!1,isWritable:!1},{pubkey:t.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:e})}static nonceAuthorize(t){const e=Pn(Un.AuthorizeNonceAccount,{authorized:Rr(t.newAuthorizedPubkey.toBuffer())});return new dn({keys:[{pubkey:t.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:t.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:e})}static allocate(t){let e,r;return"basePubkey"in t?(e=Pn(Un.AllocateWithSeed,{base:Rr(t.basePubkey.toBuffer()),seed:t.seed,space:t.space,programId:Rr(t.programId.toBuffer())}),r=[{pubkey:t.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:t.basePubkey,isSigner:!0,isWritable:!1}]):(e=Pn(Un.Allocate,{space:t.space}),r=[{pubkey:t.accountPubkey,isSigner:!0,isWritable:!0}]),new dn({keys:r,programId:this.programId,data:e})}}Wn.programId=new Wr("11111111111111111111111111111111");const Kn=qr-300;class Hn{constructor(){}static getMinNumSignatures(t){return 2*(Math.ceil(t/Hn.chunkSize)+1+1)}static async load(t,e,r,n,o){{const i=await t.getMinimumBalanceForRentExemption(o.length),s=await t.getAccountInfo(r.publicKey,"confirmed");let a=null;if(null!==s){if(s.executable)return console.error("Program load failed, account is already executable"),!1;s.data.length!==o.length&&(a=a||new fn,a.add(Wn.allocate({accountPubkey:r.publicKey,space:o.length}))),s.owner.equals(n)||(a=a||new fn,a.add(Wn.assign({accountPubkey:r.publicKey,programId:n}))),s.lamports<i&&(a=a||new fn,a.add(Wn.transfer({fromPubkey:e.publicKey,toPubkey:r.publicKey,lamports:i-s.lamports})))}else a=(new fn).add(Wn.createAccount({fromPubkey:e.publicKey,newAccountPubkey:r.publicKey,lamports:i>0?i:1,space:o.length,programId:n}));null!==a&&await xn(t,a,[e,r],{commitment:"confirmed"})}const s=he.w3([he.DH("instruction"),he.DH("offset"),he.DH("bytesLength"),he.DH("bytesLengthPadding"),he.O6(he.u8("byte"),he.cY(he.DH(),-8),"bytes")]),a=Hn.chunkSize;let c=0,u=o,h=[];for(;u.length>0;){const o=u.slice(0,a),l=i.Buffer.alloc(a+16);s.encode({instruction:0,offset:c,bytes:o,bytesLength:0,bytesLengthPadding:0},l);const d=(new fn).add({keys:[{pubkey:r.publicKey,isSigner:!0,isWritable:!0}],programId:n,data:l});if(h.push(xn(t,d,[e,r],{commitment:"confirmed"})),t._rpcEndpoint.includes("solana.com")){const t=4;await Mn(1e3/t)}c+=a,u=u.slice(a)}await Promise.all(h);{const o=he.w3([he.DH("instruction")]),s=i.Buffer.alloc(o.span);o.encode({instruction:1},s);const a=(new fn).add({keys:[{pubkey:r.publicKey,isSigner:!0,isWritable:!0},{pubkey:kn,isSigner:!1,isWritable:!1}],programId:n,data:s}),c="processed",u=await t.sendTransaction(a,[e,r],{preflightCommitment:c}),{context:h,value:l}=await t.confirmTransaction({signature:u,lastValidBlockHeight:a.lastValidBlockHeight,blockhash:a.recentBlockhash},c);if(l.err)throw new Error(`Transaction ${u} failed (${JSON.stringify(l)})`);for(;;){try{if(await t.getSlot({commitment:c})>h.slot)break}catch{}await new Promise((t=>setTimeout(t,Math.round(200))))}}return!0}}Hn.chunkSize=Kn;const qn=new Wr("BPFLoader2111111111111111111111111111111111");class Dn{static getMinNumSignatures(t){return Hn.getMinNumSignatures(t)}static load(t,e,r,n,i){return Hn.load(t,e,r,i,n)}}function Fn(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var $n,jn;function Vn(){if(jn)return $n;jn=1;var t=Object.prototype.toString,e=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};function r(n,i){var o,s,a,c,u,h,l;if(!0===n)return"true";if(!1===n)return"false";switch(typeof n){case"object":if(null===n)return null;if(n.toJSON&&"function"==typeof n.toJSON)return r(n.toJSON(),i);if("[object Array]"===(l=t.call(n))){for(a="[",s=n.length-1,o=0;o<s;o++)a+=r(n[o],!0)+",";return s>-1&&(a+=r(n[o],!0)),a+"]"}if("[object Object]"===l){for(s=(c=e(n).sort()).length,a="",o=0;o<s;)void 0!==(h=r(n[u=c[o]],!1))&&(a&&(a+=","),a+=JSON.stringify(u)+":"+h),o++;return"{"+a+"}"}return JSON.stringify(n);case"function":case"undefined":return i?null:void 0;case"string":return JSON.stringify(n);default:return isFinite(n)?n:null}}return $n=function(t){var e=r(t,!1);if(void 0!==e)return""+e}}var Yn=Fn(Vn());function Gn(t){let e=0;for(;t>1;)t/=2,e++;return e}class Zn{constructor(t,e,r,n,i){this.slotsPerEpoch=void 0,this.leaderScheduleSlotOffset=void 0,this.warmup=void 0,this.firstNormalEpoch=void 0,this.firstNormalSlot=void 0,this.slotsPerEpoch=t,this.leaderScheduleSlotOffset=e,this.warmup=r,this.firstNormalEpoch=n,this.firstNormalSlot=i}getEpoch(t){return this.getEpochAndSlotIndex(t)[0]}getEpochAndSlotIndex(t){if(t<this.firstNormalSlot){const r=Gn(0===(e=t+32+1)?1:(e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,e|=e>>16,1+(e|=e>>32)))-Gn(32)-1;return[r,t-(this.getSlotsInEpoch(r)-32)]}{const e=t-this.firstNormalSlot,r=Math.floor(e/this.slotsPerEpoch);return[this.firstNormalEpoch+r,e%this.slotsPerEpoch]}var e}getFirstSlotInEpoch(t){return t<=this.firstNormalEpoch?32*(Math.pow(2,t)-1):(t-this.firstNormalEpoch)*this.slotsPerEpoch+this.firstNormalSlot}getLastSlotInEpoch(t){return this.getFirstSlotInEpoch(t)+this.getSlotsInEpoch(t)-1}getSlotsInEpoch(t){return t<this.firstNormalEpoch?Math.pow(2,t+Gn(32)):this.slotsPerEpoch}}var Jn=globalThis.fetch;class Xn extends Fe{constructor(t,e,r){super((t=>{const r=function(t,e){return new qe(t,e)}(t,{autoconnect:!0,max_reconnects:5,reconnect:!0,reconnect_interval:1e3,...e});return this.underlyingSocket="socket"in r?r.socket:r,r}),t,e,r),this.underlyingSocket=void 0}call(...t){const e=this.underlyingSocket?.readyState;return 1===e?super.call(...t):Promise.reject(new Error("Tried to call a JSON-RPC method `"+t[0]+"` but the socket was not `CONNECTING` or `OPEN` (`readyState` was "+e+")"))}notify(...t){const e=this.underlyingSocket?.readyState;return 1===e?super.notify(...t):Promise.reject(new Error("Tried to send a JSON-RPC notification `"+t[0]+"` but the socket was not `CONNECTING` or `OPEN` (`readyState` was "+e+")"))}}class Qn{constructor(t){this.key=void 0,this.state=void 0,this.key=t.key,this.state=t.state}isActive(){const t=BigInt("0xffffffffffffffff");return this.state.deactivationSlot===t}static deserialize(t){const e=function(t,e){let r;try{r=t.layout.decode(e)}catch(t){throw new Error("invalid instruction; "+t)}if(r.typeIndex!==t.index)throw new Error(`invalid account data; account type mismatch ${r.typeIndex} != ${t.index}`);return r}(ti,t),r=t.length-56;en(r>=0,"lookup table is invalid"),en(r%32==0,"lookup table is invalid");const n=r/32,{addresses:i}=he.w3([he.O6(Gr(),n,"addresses")]).decode(t.slice(56));return{deactivationSlot:e.deactivationSlot,lastExtendedSlot:e.lastExtendedSlot,lastExtendedSlotStartIndex:e.lastExtendedStartIndex,authority:0!==e.authority.length?new Wr(e.authority[0]):void 0,addresses:i.map((t=>new Wr(t)))}}}const ti={index:1,layout:he.w3([he.DH("typeIndex"),zn("deactivationSlot"),he.I0("lastExtendedSlot"),he.u8("lastExtendedStartIndex"),he.u8(),he.O6(Gr(),he.cY(he.u8(),-1),"authority")])},ei=/^[^:]+:\/\/([^:[]+|\[[^\]]+\])(:\d+)?(.*)/i,ri=Ue(Be(Wr),Le(),(t=>new Wr(t))),ni=Oe([Le(),xe("base64")]),ii=Ue(Be(i.Buffer),ni,(t=>i.Buffer.from(t[0],"base64"))),oi=3e4;function si(t){let e,r;if("string"==typeof t)e=t;else if(t){const{commitment:n,...i}=t;e=n,r=i}return{commitment:e,config:r}}function ai(t){return t.map((t=>"memcmp"in t?{...t,memcmp:{...t.memcmp,encoding:t.memcmp.encoding??"base58"}}:t))}function ci(t){return ze([Ce({jsonrpc:xe("2.0"),id:Le(),result:t}),Ce({jsonrpc:xe("2.0"),id:Le(),error:Ce({code:Ne(),message:Le(),data:Re(Ae("any",(()=>!0)))})})])}const ui=ci(Ne());function hi(t){return Ue(ci(t),ui,(e=>"error"in e?e:{...e,result:ve(e.result,t)}))}function li(t){return hi(Ce({context:Ce({slot:Pe()}),value:t}))}function di(t){return Ce({context:Ce({slot:Pe()}),value:t})}function fi(t,e){return 0===t?new cn({header:e.header,staticAccountKeys:e.accountKeys.map((t=>new Wr(t))),recentBlockhash:e.recentBlockhash,compiledInstructions:e.instructions.map((t=>({programIdIndex:t.programIdIndex,accountKeyIndexes:t.accounts,data:ne().decode(t.data)}))),addressTableLookups:e.addressTableLookups}):new an(e)}const pi=Ce({foundation:Pe(),foundationTerm:Pe(),initial:Pe(),taper:Pe(),terminal:Pe()}),gi=hi(_e(Me(Ce({epoch:Pe(),effectiveSlot:Pe(),amount:Pe(),postBalance:Pe(),commission:Re(Me(Pe()))})))),mi=_e(Ce({slot:Pe(),prioritizationFee:Pe()})),yi=Ce({total:Pe(),validator:Pe(),foundation:Pe(),epoch:Pe()}),bi=Ce({epoch:Pe(),slotIndex:Pe(),slotsInEpoch:Pe(),absoluteSlot:Pe(),blockHeight:Re(Pe()),transactionCount:Re(Pe())}),wi=Ce({slotsPerEpoch:Pe(),leaderScheduleSlotOffset:Pe(),warmup:Ee(),firstNormalEpoch:Pe(),firstNormalSlot:Pe()}),ki=Te(Le(),_e(Pe())),vi=Me(ze([Ce({}),Le()])),Si=Ce({err:vi}),Ii=xe("receivedSignature"),Ai=Ce({"solana-core":Le(),"feature-set":Re(Pe())}),_i=Ce({program:Le(),programId:ri,parsed:Ne()}),Ei=Ce({programId:ri,accounts:_e(ri),data:Le()}),Bi=li(Ce({err:Me(ze([Ce({}),Le()])),logs:Me(_e(Le())),accounts:Re(Me(_e(Me(Ce({executable:Ee(),owner:Le(),lamports:Pe(),data:_e(Le()),rentEpoch:Re(Pe())}))))),unitsConsumed:Re(Pe()),returnData:Re(Me(Ce({programId:Le(),data:Oe([Le(),xe("base64")])}))),innerInstructions:Re(Me(_e(Ce({index:Pe(),instructions:_e(ze([_i,Ei]))}))))})),xi=li(Ce({byIdentity:Te(Le(),_e(Pe())),range:Ce({firstSlot:Pe(),lastSlot:Pe()})})),Mi=hi(pi),Pi=hi(yi),Ri=hi(mi),Ti=hi(bi),Li=hi(wi),Oi=hi(ki),Ci=hi(Pe()),zi=li(Ce({total:Pe(),circulating:Pe(),nonCirculating:Pe(),nonCirculatingAccounts:_e(ri)})),Ni=Ce({amount:Le(),uiAmount:Me(Pe()),decimals:Pe(),uiAmountString:Re(Le())}),Ui=li(_e(Ce({address:ri,amount:Le(),uiAmount:Me(Pe()),decimals:Pe(),uiAmountString:Re(Le())}))),Wi=li(_e(Ce({pubkey:ri,account:Ce({executable:Ee(),owner:ri,lamports:Pe(),data:ii,rentEpoch:Pe()})}))),Ki=Ce({program:Le(),parsed:Ne(),space:Pe()}),Hi=li(_e(Ce({pubkey:ri,account:Ce({executable:Ee(),owner:ri,lamports:Pe(),data:Ki,rentEpoch:Pe()})}))),qi=li(_e(Ce({lamports:Pe(),address:ri}))),Di=Ce({executable:Ee(),owner:ri,lamports:Pe(),data:ii,rentEpoch:Pe()}),Fi=Ce({pubkey:ri,account:Di}),$i=Ue(ze([Be(i.Buffer),Ki]),ze([ni,Ki]),(t=>Array.isArray(t)?ve(t,ii):t)),ji=Ce({executable:Ee(),owner:ri,lamports:Pe(),data:$i,rentEpoch:Pe()}),Vi=Ce({pubkey:ri,account:ji}),Yi=Ce({state:ze([xe("active"),xe("inactive"),xe("activating"),xe("deactivating")]),active:Pe(),inactive:Pe()}),Gi=hi(_e(Ce({signature:Le(),slot:Pe(),err:vi,memo:Me(Le()),blockTime:Re(Me(Pe()))}))),Zi=hi(_e(Ce({signature:Le(),slot:Pe(),err:vi,memo:Me(Le()),blockTime:Re(Me(Pe()))}))),Ji=Ce({subscription:Pe(),result:di(Di)}),Xi=Ce({pubkey:ri,account:Di}),Qi=Ce({subscription:Pe(),result:di(Xi)}),to=Ce({parent:Pe(),slot:Pe(),root:Pe()}),eo=Ce({subscription:Pe(),result:to}),ro=ze([Ce({type:ze([xe("firstShredReceived"),xe("completed"),xe("optimisticConfirmation"),xe("root")]),slot:Pe(),timestamp:Pe()}),Ce({type:xe("createdBank"),parent:Pe(),slot:Pe(),timestamp:Pe()}),Ce({type:xe("frozen"),slot:Pe(),timestamp:Pe(),stats:Ce({numTransactionEntries:Pe(),numSuccessfulTransactions:Pe(),numFailedTransactions:Pe(),maxTransactionsPerEntry:Pe()})}),Ce({type:xe("dead"),slot:Pe(),timestamp:Pe(),err:Le()})]),no=Ce({subscription:Pe(),result:ro}),io=Ce({subscription:Pe(),result:di(ze([Si,Ii]))}),oo=Ce({subscription:Pe(),result:Pe()}),so=Ce({pubkey:Le(),gossip:Me(Le()),tpu:Me(Le()),rpc:Me(Le()),version:Me(Le())}),ao=Ce({votePubkey:Le(),nodePubkey:Le(),activatedStake:Pe(),epochVoteAccount:Ee(),epochCredits:_e(Oe([Pe(),Pe(),Pe()])),commission:Pe(),lastVote:Pe(),rootSlot:Me(Pe())}),co=hi(Ce({current:_e(ao),delinquent:_e(ao)})),uo=ze([xe("processed"),xe("confirmed"),xe("finalized")]),ho=Ce({slot:Pe(),confirmations:Me(Pe()),err:vi,confirmationStatus:Re(uo)}),lo=li(_e(Me(ho))),fo=hi(Pe()),po=Ce({accountKey:ri,writableIndexes:_e(Pe()),readonlyIndexes:_e(Pe())}),go=Ce({signatures:_e(Le()),message:Ce({accountKeys:_e(Le()),header:Ce({numRequiredSignatures:Pe(),numReadonlySignedAccounts:Pe(),numReadonlyUnsignedAccounts:Pe()}),instructions:_e(Ce({accounts:_e(Pe()),data:Le(),programIdIndex:Pe()})),recentBlockhash:Le(),addressTableLookups:Re(_e(po))})}),mo=Ce({pubkey:ri,signer:Ee(),writable:Ee(),source:Re(ze([xe("transaction"),xe("lookupTable")]))}),yo=Ce({accountKeys:_e(mo),signatures:_e(Le())}),bo=Ce({parsed:Ne(),program:Le(),programId:ri}),wo=Ce({accounts:_e(ri),data:Le(),programId:ri}),ko=Ue(ze([wo,bo]),ze([Ce({parsed:Ne(),program:Le(),programId:Le()}),Ce({accounts:_e(Le()),data:Le(),programId:Le()})]),(t=>ve(t,"accounts"in t?wo:bo))),vo=Ce({signatures:_e(Le()),message:Ce({accountKeys:_e(mo),instructions:_e(ko),recentBlockhash:Le(),addressTableLookups:Re(Me(_e(po)))})}),So=Ce({accountIndex:Pe(),mint:Le(),owner:Re(Le()),programId:Re(Le()),uiTokenAmount:Ni}),Io=Ce({writable:_e(ri),readonly:_e(ri)}),Ao=Ce({err:vi,fee:Pe(),innerInstructions:Re(Me(_e(Ce({index:Pe(),instructions:_e(Ce({accounts:_e(Pe()),data:Le(),programIdIndex:Pe()}))})))),preBalances:_e(Pe()),postBalances:_e(Pe()),logMessages:Re(Me(_e(Le()))),preTokenBalances:Re(Me(_e(So))),postTokenBalances:Re(Me(_e(So))),loadedAddresses:Re(Io),computeUnitsConsumed:Re(Pe())}),_o=Ce({err:vi,fee:Pe(),innerInstructions:Re(Me(_e(Ce({index:Pe(),instructions:_e(ko)})))),preBalances:_e(Pe()),postBalances:_e(Pe()),logMessages:Re(Me(_e(Le()))),preTokenBalances:Re(Me(_e(So))),postTokenBalances:Re(Me(_e(So))),loadedAddresses:Re(Io),computeUnitsConsumed:Re(Pe())}),Eo=ze([xe(0),xe("legacy")]),Bo=Ce({pubkey:Le(),lamports:Pe(),postBalance:Me(Pe()),rewardType:Me(Le()),commission:Re(Me(Pe()))}),xo=hi(Me(Ce({blockhash:Le(),previousBlockhash:Le(),parentSlot:Pe(),transactions:_e(Ce({transaction:go,meta:Me(Ao),version:Re(Eo)})),rewards:Re(_e(Bo)),blockTime:Me(Pe()),blockHeight:Me(Pe())}))),Mo=hi(Me(Ce({blockhash:Le(),previousBlockhash:Le(),parentSlot:Pe(),rewards:Re(_e(Bo)),blockTime:Me(Pe()),blockHeight:Me(Pe())}))),Po=hi(Me(Ce({blockhash:Le(),previousBlockhash:Le(),parentSlot:Pe(),transactions:_e(Ce({transaction:yo,meta:Me(Ao),version:Re(Eo)})),rewards:Re(_e(Bo)),blockTime:Me(Pe()),blockHeight:Me(Pe())}))),Ro=hi(Me(Ce({blockhash:Le(),previousBlockhash:Le(),parentSlot:Pe(),transactions:_e(Ce({transaction:vo,meta:Me(_o),version:Re(Eo)})),rewards:Re(_e(Bo)),blockTime:Me(Pe()),blockHeight:Me(Pe())}))),To=hi(Me(Ce({blockhash:Le(),previousBlockhash:Le(),parentSlot:Pe(),transactions:_e(Ce({transaction:yo,meta:Me(_o),version:Re(Eo)})),rewards:Re(_e(Bo)),blockTime:Me(Pe()),blockHeight:Me(Pe())}))),Lo=hi(Me(Ce({blockhash:Le(),previousBlockhash:Le(),parentSlot:Pe(),rewards:Re(_e(Bo)),blockTime:Me(Pe()),blockHeight:Me(Pe())}))),Oo=hi(Me(Ce({blockhash:Le(),previousBlockhash:Le(),parentSlot:Pe(),transactions:_e(Ce({transaction:go,meta:Me(Ao)})),rewards:Re(_e(Bo)),blockTime:Me(Pe())}))),Co=hi(Me(Ce({blockhash:Le(),previousBlockhash:Le(),parentSlot:Pe(),signatures:_e(Le()),blockTime:Me(Pe())}))),zo=hi(Me(Ce({slot:Pe(),meta:Me(Ao),blockTime:Re(Me(Pe())),transaction:go,version:Re(Eo)}))),No=hi(Me(Ce({slot:Pe(),transaction:vo,meta:Me(_o),blockTime:Re(Me(Pe())),version:Re(Eo)}))),Uo=li(Ce({blockhash:Le(),lastValidBlockHeight:Pe()})),Wo=li(Ee()),Ko=hi(_e(Ce({slot:Pe(),numTransactions:Pe(),numSlots:Pe(),samplePeriodSecs:Pe()}))),Ho=li(Me(Ce({feeCalculator:Ce({lamportsPerSignature:Pe()})}))),qo=hi(Le()),Do=hi(Le()),Fo=Ce({err:vi,logs:_e(Le()),signature:Le()}),$o=Ce({result:di(Fo),subscription:Pe()}),jo={"solana-client":"js/1.0.0-maintenance"};class Vo{constructor(t,e){let r,n,i,o,s,a;var c;this._commitment=void 0,this._confirmTransactionInitialTimeout=void 0,this._rpcEndpoint=void 0,this._rpcWsEndpoint=void 0,this._rpcClient=void 0,this._rpcRequest=void 0,this._rpcBatchRequest=void 0,this._rpcWebSocket=void 0,this._rpcWebSocketConnected=!1,this._rpcWebSocketHeartbeat=null,this._rpcWebSocketIdleTimeout=null,this._rpcWebSocketGeneration=0,this._disableBlockhashCaching=!1,this._pollingBlockhash=!1,this._blockhashInfo={latestBlockhash:null,lastFetch:0,transactionSignatures:[],simulatedSignatures:[]},this._nextClientSubscriptionId=0,this._subscriptionDisposeFunctionsByClientSubscriptionId={},this._subscriptionHashByClientSubscriptionId={},this._subscriptionStateChangeCallbacksByHash={},this._subscriptionCallbacksByServerSubscriptionId={},this._subscriptionsByHash={},this._subscriptionsAutoDisposedByRpc=new Set,this.getBlockHeight=(()=>{const t={};return async e=>{const{commitment:r,config:n}=si(e),i=this._buildArgs([],r,void 0,n),o=Yn(i);return t[o]=t[o]??(async()=>{try{const t=ve(await this._rpcRequest("getBlockHeight",i),hi(Pe()));if("error"in t)throw new Bn(t.error,"failed to get block height information");return t.result}finally{delete t[o]}})(),await t[o]}})(),e&&"string"==typeof e?this._commitment=e:e&&(this._commitment=e.commitment,this._confirmTransactionInitialTimeout=e.confirmTransactionInitialTimeout,r=e.wsEndpoint,n=e.httpHeaders,i=e.fetch,o=e.fetchMiddleware,s=e.disableRetryOnRateLimit,a=e.httpAgent),this._rpcEndpoint=function(t){if(!1===/^https?:/.test(t))throw new TypeError("Endpoint URL must start with `http:` or `https:`.");return t}(t),this._rpcWsEndpoint=r||function(t){const e=t.match(ei);if(null==e)throw TypeError(`Failed to validate endpoint URL \`${t}\``);const[r,n,i,o]=e,s=t.startsWith("https:")?"wss:":"ws:",a=null==i?null:parseInt(i.slice(1),10);return`${s}//${n}${null==a?"":`:${a+1}`}${o}`}(t),this._rpcClient=function(t,e,r,n,i,o){const s=r||Jn;let a;return null!=o&&console.warn("You have supplied an `httpAgent` when creating a `Connection` in a browser environment.It has been ignored; `httpAgent` is only used in Node environments."),n&&(a=async(t,e)=>{const r=await new Promise(((r,i)=>{try{n(t,e,((t,e)=>r([t,e])))}catch(t){i(t)}}));return await s(...r)}),new(Ke())((async(r,n)=>{const o={method:"POST",body:r,agent:void 0,headers:Object.assign({"Content-Type":"application/json"},e||{},jo)};try{let e,r=5,c=500;for(;e=a?await a(t,o):await s(t,o),429===e.status&&!0!==i&&(r-=1,0!==r);)console.error(`Server responded with ${e.status} ${e.statusText}.  Retrying after ${c}ms delay...`),await Mn(c),c*=2;const u=await e.text();e.ok?n(null,u):n(new Error(`${e.status} ${e.statusText}: ${u}`))}catch(t){t instanceof Error&&n(t)}}),{})}(t,n,i,o,s,a),this._rpcRequest=(c=this._rpcClient,(t,e)=>new Promise(((r,n)=>{c.request(t,e,((t,e)=>{t?n(t):r(e)}))}))),this._rpcBatchRequest=function(t){return e=>new Promise(((r,n)=>{0===e.length&&r([]);const i=e.map((e=>t.request(e.methodName,e.args)));t.request(i,((t,e)=>{t?n(t):r(e)}))}))}(this._rpcClient),this._rpcWebSocket=new Xn(this._rpcWsEndpoint,{autoconnect:!1,max_reconnects:1/0}),this._rpcWebSocket.on("open",this._wsOnOpen.bind(this)),this._rpcWebSocket.on("error",this._wsOnError.bind(this)),this._rpcWebSocket.on("close",this._wsOnClose.bind(this)),this._rpcWebSocket.on("accountNotification",this._wsOnAccountNotification.bind(this)),this._rpcWebSocket.on("programNotification",this._wsOnProgramAccountNotification.bind(this)),this._rpcWebSocket.on("slotNotification",this._wsOnSlotNotification.bind(this)),this._rpcWebSocket.on("slotsUpdatesNotification",this._wsOnSlotUpdatesNotification.bind(this)),this._rpcWebSocket.on("signatureNotification",this._wsOnSignatureNotification.bind(this)),this._rpcWebSocket.on("rootNotification",this._wsOnRootNotification.bind(this)),this._rpcWebSocket.on("logsNotification",this._wsOnLogsNotification.bind(this))}get commitment(){return this._commitment}get rpcEndpoint(){return this._rpcEndpoint}async getBalanceAndContext(t,e){const{commitment:r,config:n}=si(e),i=this._buildArgs([t.toBase58()],r,void 0,n),o=ve(await this._rpcRequest("getBalance",i),li(Pe()));if("error"in o)throw new Bn(o.error,`failed to get balance for ${t.toBase58()}`);return o.result}async getBalance(t,e){return await this.getBalanceAndContext(t,e).then((t=>t.value)).catch((e=>{throw new Error("failed to get balance of account "+t.toBase58()+": "+e)}))}async getBlockTime(t){const e=ve(await this._rpcRequest("getBlockTime",[t]),hi(Me(Pe())));if("error"in e)throw new Bn(e.error,`failed to get block time for slot ${t}`);return e.result}async getMinimumLedgerSlot(){const t=ve(await this._rpcRequest("minimumLedgerSlot",[]),hi(Pe()));if("error"in t)throw new Bn(t.error,"failed to get minimum ledger slot");return t.result}async getFirstAvailableBlock(){const t=ve(await this._rpcRequest("getFirstAvailableBlock",[]),Ci);if("error"in t)throw new Bn(t.error,"failed to get first available block");return t.result}async getSupply(t){let e={};e="string"==typeof t?{commitment:t}:t?{...t,commitment:t&&t.commitment||this.commitment}:{commitment:this.commitment};const r=ve(await this._rpcRequest("getSupply",[e]),zi);if("error"in r)throw new Bn(r.error,"failed to get supply");return r.result}async getTokenSupply(t,e){const r=this._buildArgs([t.toBase58()],e),n=ve(await this._rpcRequest("getTokenSupply",r),li(Ni));if("error"in n)throw new Bn(n.error,"failed to get token supply");return n.result}async getTokenAccountBalance(t,e){const r=this._buildArgs([t.toBase58()],e),n=ve(await this._rpcRequest("getTokenAccountBalance",r),li(Ni));if("error"in n)throw new Bn(n.error,"failed to get token account balance");return n.result}async getTokenAccountsByOwner(t,e,r){const{commitment:n,config:i}=si(r);let o=[t.toBase58()];"mint"in e?o.push({mint:e.mint.toBase58()}):o.push({programId:e.programId.toBase58()});const s=this._buildArgs(o,n,"base64",i),a=ve(await this._rpcRequest("getTokenAccountsByOwner",s),Wi);if("error"in a)throw new Bn(a.error,`failed to get token accounts owned by account ${t.toBase58()}`);return a.result}async getParsedTokenAccountsByOwner(t,e,r){let n=[t.toBase58()];"mint"in e?n.push({mint:e.mint.toBase58()}):n.push({programId:e.programId.toBase58()});const i=this._buildArgs(n,r,"jsonParsed"),o=ve(await this._rpcRequest("getTokenAccountsByOwner",i),Hi);if("error"in o)throw new Bn(o.error,`failed to get token accounts owned by account ${t.toBase58()}`);return o.result}async getLargestAccounts(t){const e={...t,commitment:t&&t.commitment||this.commitment},r=e.filter||e.commitment?[e]:[],n=ve(await this._rpcRequest("getLargestAccounts",r),qi);if("error"in n)throw new Bn(n.error,"failed to get largest accounts");return n.result}async getTokenLargestAccounts(t,e){const r=this._buildArgs([t.toBase58()],e),n=ve(await this._rpcRequest("getTokenLargestAccounts",r),Ui);if("error"in n)throw new Bn(n.error,"failed to get token largest accounts");return n.result}async getAccountInfoAndContext(t,e){const{commitment:r,config:n}=si(e),i=this._buildArgs([t.toBase58()],r,"base64",n),o=ve(await this._rpcRequest("getAccountInfo",i),li(Me(Di)));if("error"in o)throw new Bn(o.error,`failed to get info about account ${t.toBase58()}`);return o.result}async getParsedAccountInfo(t,e){const{commitment:r,config:n}=si(e),i=this._buildArgs([t.toBase58()],r,"jsonParsed",n),o=ve(await this._rpcRequest("getAccountInfo",i),li(Me(ji)));if("error"in o)throw new Bn(o.error,`failed to get info about account ${t.toBase58()}`);return o.result}async getAccountInfo(t,e){try{return(await this.getAccountInfoAndContext(t,e)).value}catch(e){throw new Error("failed to get info about account "+t.toBase58()+": "+e)}}async getMultipleParsedAccounts(t,e){const{commitment:r,config:n}=si(e),i=t.map((t=>t.toBase58())),o=this._buildArgs([i],r,"jsonParsed",n),s=ve(await this._rpcRequest("getMultipleAccounts",o),li(_e(Me(ji))));if("error"in s)throw new Bn(s.error,`failed to get info for accounts ${i}`);return s.result}async getMultipleAccountsInfoAndContext(t,e){const{commitment:r,config:n}=si(e),i=t.map((t=>t.toBase58())),o=this._buildArgs([i],r,"base64",n),s=ve(await this._rpcRequest("getMultipleAccounts",o),li(_e(Me(Di))));if("error"in s)throw new Bn(s.error,`failed to get info for accounts ${i}`);return s.result}async getMultipleAccountsInfo(t,e){return(await this.getMultipleAccountsInfoAndContext(t,e)).value}async getStakeActivation(t,e,r){const{commitment:n,config:i}=si(e),o=this._buildArgs([t.toBase58()],n,void 0,{...i,epoch:null!=r?r:i?.epoch}),s=ve(await this._rpcRequest("getStakeActivation",o),hi(Yi));if("error"in s)throw new Bn(s.error,`failed to get Stake Activation ${t.toBase58()}`);return s.result}async getProgramAccounts(t,e){const{commitment:r,config:n}=si(e),{encoding:i,...o}=n||{},s=this._buildArgs([t.toBase58()],r,i||"base64",{...o,...o.filters?{filters:ai(o.filters)}:null}),a=await this._rpcRequest("getProgramAccounts",s),c=_e(Fi),u=!0===o.withContext?ve(a,li(c)):ve(a,hi(c));if("error"in u)throw new Bn(u.error,`failed to get accounts owned by program ${t.toBase58()}`);return u.result}async getParsedProgramAccounts(t,e){const{commitment:r,config:n}=si(e),i=this._buildArgs([t.toBase58()],r,"jsonParsed",n),o=ve(await this._rpcRequest("getProgramAccounts",i),hi(_e(Vi)));if("error"in o)throw new Bn(o.error,`failed to get accounts owned by program ${t.toBase58()}`);return o.result}async confirmTransaction(t,e){let r,n;if("string"==typeof t)r=t;else{const e=t;if(e.abortSignal?.aborted)return Promise.reject(e.abortSignal.reason);r=e.signature}try{n=ne().decode(r)}catch(t){throw new Error("signature must be base58 encoded: "+r)}return en(64===n.length,"signature has invalid length"),"string"==typeof t?await this.confirmTransactionUsingLegacyTimeoutStrategy({commitment:e||this.commitment,signature:r}):"lastValidBlockHeight"in t?await this.confirmTransactionUsingBlockHeightExceedanceStrategy({commitment:e||this.commitment,strategy:t}):await this.confirmTransactionUsingDurableNonceStrategy({commitment:e||this.commitment,strategy:t})}getCancellationPromise(t){return new Promise(((e,r)=>{null!=t&&(t.aborted?r(t.reason):t.addEventListener("abort",(()=>{r(t.reason)})))}))}getTransactionConfirmationPromise({commitment:t,signature:e}){let r,n,i=!1;return{abortConfirmation:()=>{n&&(n(),n=void 0),null!=r&&(this.removeSignatureListener(r),r=void 0)},confirmationPromise:new Promise(((o,s)=>{try{r=this.onSignature(e,((t,e)=>{r=void 0;const n={context:e,value:t};o({__type:hn.PROCESSED,response:n})}),t);const a=new Promise((t=>{null==r?t():n=this._onSubscriptionStateChange(r,(e=>{"subscribed"===e&&t()}))}));(async()=>{if(await a,i)return;const r=await this.getSignatureStatus(e);if(i)return;if(null==r)return;const{context:n,value:c}=r;if(null!=c)if(c?.err)s(c.err);else{switch(t){case"confirmed":case"single":case"singleGossip":if("processed"===c.confirmationStatus)return;break;case"finalized":case"max":case"root":if("processed"===c.confirmationStatus||"confirmed"===c.confirmationStatus)return}i=!0,o({__type:hn.PROCESSED,response:{context:n,value:c}})}})()}catch(t){s(t)}}))}}async confirmTransactionUsingBlockHeightExceedanceStrategy({commitment:t,strategy:{abortSignal:e,lastValidBlockHeight:r,signature:n}}){let i=!1;const o=new Promise((e=>{const n=async()=>{try{return await this.getBlockHeight(t)}catch(t){return-1}};(async()=>{let t=await n();if(!i){for(;t<=r;){if(await Mn(1e3),i)return;if(t=await n(),i)return}e({__type:hn.BLOCKHEIGHT_EXCEEDED})}})()})),{abortConfirmation:s,confirmationPromise:a}=this.getTransactionConfirmationPromise({commitment:t,signature:n}),c=this.getCancellationPromise(e);let u;try{const t=await Promise.race([c,a,o]);if(t.__type!==hn.PROCESSED)throw new $r(n);u=t.response}finally{i=!0,s()}return u}async confirmTransactionUsingDurableNonceStrategy({commitment:t,strategy:{abortSignal:e,minContextSlot:r,nonceAccountPubkey:n,nonceValue:i,signature:o}}){let s=!1;const a=new Promise((e=>{let o=i,a=null;const c=async()=>{try{const{context:e,value:i}=await this.getNonceAndContext(n,{commitment:t,minContextSlot:r});return a=e.slot,i?.nonce}catch(t){return o}};(async()=>{if(o=await c(),!s)for(;;){if(i!==o)return void e({__type:hn.NONCE_INVALID,slotInWhichNonceDidAdvance:a});if(await Mn(2e3),s)return;if(o=await c(),s)return}})()})),{abortConfirmation:c,confirmationPromise:u}=this.getTransactionConfirmationPromise({commitment:t,signature:o}),h=this.getCancellationPromise(e);let l;try{const e=await Promise.race([h,u,a]);if(e.__type===hn.PROCESSED)l=e.response;else{let n;for(;;){const t=await this.getSignatureStatus(o);if(null==t)break;if(!(t.context.slot<(e.slotInWhichNonceDidAdvance??r))){n=t;break}await Mn(400)}if(!n?.value)throw new Vr(o);{const e=t||"finalized",{confirmationStatus:r}=n.value;switch(e){case"processed":case"recent":if("processed"!==r&&"confirmed"!==r&&"finalized"!==r)throw new Vr(o);break;case"confirmed":case"single":case"singleGossip":if("confirmed"!==r&&"finalized"!==r)throw new Vr(o);break;case"finalized":case"max":case"root":if("finalized"!==r)throw new Vr(o)}l={context:n.context,value:{err:n.value.err}}}}}finally{s=!0,c()}return l}async confirmTransactionUsingLegacyTimeoutStrategy({commitment:t,signature:e}){let r;const n=new Promise((e=>{let n=this._confirmTransactionInitialTimeout||6e4;switch(t){case"processed":case"recent":case"single":case"confirmed":case"singleGossip":n=this._confirmTransactionInitialTimeout||3e4}r=setTimeout((()=>e({__type:hn.TIMED_OUT,timeoutMs:n})),n)})),{abortConfirmation:i,confirmationPromise:o}=this.getTransactionConfirmationPromise({commitment:t,signature:e});let s;try{const t=await Promise.race([o,n]);if(t.__type!==hn.PROCESSED)throw new jr(e,t.timeoutMs/1e3);s=t.response}finally{clearTimeout(r),i()}return s}async getClusterNodes(){const t=ve(await this._rpcRequest("getClusterNodes",[]),hi(_e(so)));if("error"in t)throw new Bn(t.error,"failed to get cluster nodes");return t.result}async getVoteAccounts(t){const e=this._buildArgs([],t),r=ve(await this._rpcRequest("getVoteAccounts",e),co);if("error"in r)throw new Bn(r.error,"failed to get vote accounts");return r.result}async getSlot(t){const{commitment:e,config:r}=si(t),n=this._buildArgs([],e,void 0,r),i=ve(await this._rpcRequest("getSlot",n),hi(Pe()));if("error"in i)throw new Bn(i.error,"failed to get slot");return i.result}async getSlotLeader(t){const{commitment:e,config:r}=si(t),n=this._buildArgs([],e,void 0,r),i=ve(await this._rpcRequest("getSlotLeader",n),hi(Le()));if("error"in i)throw new Bn(i.error,"failed to get slot leader");return i.result}async getSlotLeaders(t,e){const r=[t,e],n=ve(await this._rpcRequest("getSlotLeaders",r),hi(_e(ri)));if("error"in n)throw new Bn(n.error,"failed to get slot leaders");return n.result}async getSignatureStatus(t,e){const{context:r,value:n}=await this.getSignatureStatuses([t],e);return en(1===n.length),{context:r,value:n[0]}}async getSignatureStatuses(t,e){const r=[t];e&&r.push(e);const n=ve(await this._rpcRequest("getSignatureStatuses",r),lo);if("error"in n)throw new Bn(n.error,"failed to get signature status");return n.result}async getTransactionCount(t){const{commitment:e,config:r}=si(t),n=this._buildArgs([],e,void 0,r),i=ve(await this._rpcRequest("getTransactionCount",n),hi(Pe()));if("error"in i)throw new Bn(i.error,"failed to get transaction count");return i.result}async getTotalSupply(t){return(await this.getSupply({commitment:t,excludeNonCirculatingAccountsList:!0})).value.total}async getInflationGovernor(t){const e=this._buildArgs([],t),r=ve(await this._rpcRequest("getInflationGovernor",e),Mi);if("error"in r)throw new Bn(r.error,"failed to get inflation");return r.result}async getInflationReward(t,e,r){const{commitment:n,config:i}=si(r),o=this._buildArgs([t.map((t=>t.toBase58()))],n,void 0,{...i,epoch:null!=e?e:i?.epoch}),s=ve(await this._rpcRequest("getInflationReward",o),gi);if("error"in s)throw new Bn(s.error,"failed to get inflation reward");return s.result}async getInflationRate(){const t=ve(await this._rpcRequest("getInflationRate",[]),Pi);if("error"in t)throw new Bn(t.error,"failed to get inflation rate");return t.result}async getEpochInfo(t){const{commitment:e,config:r}=si(t),n=this._buildArgs([],e,void 0,r),i=ve(await this._rpcRequest("getEpochInfo",n),Ti);if("error"in i)throw new Bn(i.error,"failed to get epoch info");return i.result}async getEpochSchedule(){const t=ve(await this._rpcRequest("getEpochSchedule",[]),Li);if("error"in t)throw new Bn(t.error,"failed to get epoch schedule");const e=t.result;return new Zn(e.slotsPerEpoch,e.leaderScheduleSlotOffset,e.warmup,e.firstNormalEpoch,e.firstNormalSlot)}async getLeaderSchedule(){const t=ve(await this._rpcRequest("getLeaderSchedule",[]),Oi);if("error"in t)throw new Bn(t.error,"failed to get leader schedule");return t.result}async getMinimumBalanceForRentExemption(t,e){const r=this._buildArgs([t],e),n=ve(await this._rpcRequest("getMinimumBalanceForRentExemption",r),fo);return"error"in n?(console.warn("Unable to fetch minimum balance for rent exemption"),0):n.result}async getRecentBlockhashAndContext(t){const{context:e,value:{blockhash:r}}=await this.getLatestBlockhashAndContext(t);return{context:e,value:{blockhash:r,feeCalculator:{get lamportsPerSignature(){throw new Error("The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee for a given message.")},toJSON:()=>({})}}}}async getRecentPerformanceSamples(t){const e=ve(await this._rpcRequest("getRecentPerformanceSamples",t?[t]:[]),Ko);if("error"in e)throw new Bn(e.error,"failed to get recent performance samples");return e.result}async getFeeCalculatorForBlockhash(t,e){const r=this._buildArgs([t],e),n=ve(await this._rpcRequest("getFeeCalculatorForBlockhash",r),Ho);if("error"in n)throw new Bn(n.error,"failed to get fee calculator");const{context:i,value:o}=n.result;return{context:i,value:null!==o?o.feeCalculator:null}}async getFeeForMessage(t,e){const r=Rr(t.serialize()).toString("base64"),n=this._buildArgs([r],e),i=ve(await this._rpcRequest("getFeeForMessage",n),li(Me(Pe())));if("error"in i)throw new Bn(i.error,"failed to get fee for message");if(null===i.result)throw new Error("invalid blockhash");return i.result}async getRecentPrioritizationFees(t){const e=t?.lockedWritableAccounts?.map((t=>t.toBase58())),r=e?.length?[e]:[],n=ve(await this._rpcRequest("getRecentPrioritizationFees",r),Ri);if("error"in n)throw new Bn(n.error,"failed to get recent prioritization fees");return n.result}async getRecentBlockhash(t){try{return(await this.getRecentBlockhashAndContext(t)).value}catch(t){throw new Error("failed to get recent blockhash: "+t)}}async getLatestBlockhash(t){try{return(await this.getLatestBlockhashAndContext(t)).value}catch(t){throw new Error("failed to get recent blockhash: "+t)}}async getLatestBlockhashAndContext(t){const{commitment:e,config:r}=si(t),n=this._buildArgs([],e,void 0,r),i=ve(await this._rpcRequest("getLatestBlockhash",n),Uo);if("error"in i)throw new Bn(i.error,"failed to get latest blockhash");return i.result}async isBlockhashValid(t,e){const{commitment:r,config:n}=si(e),i=this._buildArgs([t],r,void 0,n),o=ve(await this._rpcRequest("isBlockhashValid",i),Wo);if("error"in o)throw new Bn(o.error,"failed to determine if the blockhash `"+t+"`is valid");return o.result}async getVersion(){const t=ve(await this._rpcRequest("getVersion",[]),hi(Ai));if("error"in t)throw new Bn(t.error,"failed to get version");return t.result}async getGenesisHash(){const t=ve(await this._rpcRequest("getGenesisHash",[]),hi(Le()));if("error"in t)throw new Bn(t.error,"failed to get genesis hash");return t.result}async getBlock(t,e){const{commitment:r,config:n}=si(e),i=this._buildArgsAtLeastConfirmed([t],r,void 0,n),o=await this._rpcRequest("getBlock",i);try{switch(n?.transactionDetails){case"accounts":{const t=ve(o,Po);if("error"in t)throw t.error;return t.result}case"none":{const t=ve(o,Mo);if("error"in t)throw t.error;return t.result}default:{const t=ve(o,xo);if("error"in t)throw t.error;const{result:e}=t;return e?{...e,transactions:e.transactions.map((({transaction:t,meta:e,version:r})=>({meta:e,transaction:{...t,message:fi(r,t.message)},version:r})))}:null}}}catch(t){throw new Bn(t,"failed to get confirmed block")}}async getParsedBlock(t,e){const{commitment:r,config:n}=si(e),i=this._buildArgsAtLeastConfirmed([t],r,"jsonParsed",n),o=await this._rpcRequest("getBlock",i);try{switch(n?.transactionDetails){case"accounts":{const t=ve(o,To);if("error"in t)throw t.error;return t.result}case"none":{const t=ve(o,Lo);if("error"in t)throw t.error;return t.result}default:{const t=ve(o,Ro);if("error"in t)throw t.error;return t.result}}}catch(t){throw new Bn(t,"failed to get block")}}async getBlockProduction(t){let e,r;if("string"==typeof t)r=t;else if(t){const{commitment:n,...i}=t;r=n,e=i}const n=this._buildArgs([],r,"base64",e),i=ve(await this._rpcRequest("getBlockProduction",n),xi);if("error"in i)throw new Bn(i.error,"failed to get block production information");return i.result}async getTransaction(t,e){const{commitment:r,config:n}=si(e),i=this._buildArgsAtLeastConfirmed([t],r,void 0,n),o=ve(await this._rpcRequest("getTransaction",i),zo);if("error"in o)throw new Bn(o.error,"failed to get transaction");const s=o.result;return s?{...s,transaction:{...s.transaction,message:fi(s.version,s.transaction.message)}}:s}async getParsedTransaction(t,e){const{commitment:r,config:n}=si(e),i=this._buildArgsAtLeastConfirmed([t],r,"jsonParsed",n),o=ve(await this._rpcRequest("getTransaction",i),No);if("error"in o)throw new Bn(o.error,"failed to get transaction");return o.result}async getParsedTransactions(t,e){const{commitment:r,config:n}=si(e),i=t.map((t=>({methodName:"getTransaction",args:this._buildArgsAtLeastConfirmed([t],r,"jsonParsed",n)})));return(await this._rpcBatchRequest(i)).map((t=>{const e=ve(t,No);if("error"in e)throw new Bn(e.error,"failed to get transactions");return e.result}))}async getTransactions(t,e){const{commitment:r,config:n}=si(e),i=t.map((t=>({methodName:"getTransaction",args:this._buildArgsAtLeastConfirmed([t],r,void 0,n)})));return(await this._rpcBatchRequest(i)).map((t=>{const e=ve(t,zo);if("error"in e)throw new Bn(e.error,"failed to get transactions");const r=e.result;return r?{...r,transaction:{...r.transaction,message:fi(r.version,r.transaction.message)}}:r}))}async getConfirmedBlock(t,e){const r=this._buildArgsAtLeastConfirmed([t],e),n=ve(await this._rpcRequest("getBlock",r),Oo);if("error"in n)throw new Bn(n.error,"failed to get confirmed block");const i=n.result;if(!i)throw new Error("Confirmed block "+t+" not found");const o={...i,transactions:i.transactions.map((({transaction:t,meta:e})=>{const r=new an(t.message);return{meta:e,transaction:{...t,message:r}}}))};return{...o,transactions:o.transactions.map((({transaction:t,meta:e})=>({meta:e,transaction:fn.populate(t.message,t.signatures)})))}}async getBlocks(t,e,r){const n=this._buildArgsAtLeastConfirmed(void 0!==e?[t,e]:[t],r),i=ve(await this._rpcRequest("getBlocks",n),hi(_e(Pe())));if("error"in i)throw new Bn(i.error,"failed to get blocks");return i.result}async getBlockSignatures(t,e){const r=this._buildArgsAtLeastConfirmed([t],e,void 0,{transactionDetails:"signatures",rewards:!1}),n=ve(await this._rpcRequest("getBlock",r),Co);if("error"in n)throw new Bn(n.error,"failed to get block");const i=n.result;if(!i)throw new Error("Block "+t+" not found");return i}async getConfirmedBlockSignatures(t,e){const r=this._buildArgsAtLeastConfirmed([t],e,void 0,{transactionDetails:"signatures",rewards:!1}),n=ve(await this._rpcRequest("getBlock",r),Co);if("error"in n)throw new Bn(n.error,"failed to get confirmed block");const i=n.result;if(!i)throw new Error("Confirmed block "+t+" not found");return i}async getConfirmedTransaction(t,e){const r=this._buildArgsAtLeastConfirmed([t],e),n=ve(await this._rpcRequest("getTransaction",r),zo);if("error"in n)throw new Bn(n.error,"failed to get transaction");const i=n.result;if(!i)return i;const o=new an(i.transaction.message),s=i.transaction.signatures;return{...i,transaction:fn.populate(o,s)}}async getParsedConfirmedTransaction(t,e){const r=this._buildArgsAtLeastConfirmed([t],e,"jsonParsed"),n=ve(await this._rpcRequest("getTransaction",r),No);if("error"in n)throw new Bn(n.error,"failed to get confirmed transaction");return n.result}async getParsedConfirmedTransactions(t,e){const r=t.map((t=>({methodName:"getTransaction",args:this._buildArgsAtLeastConfirmed([t],e,"jsonParsed")})));return(await this._rpcBatchRequest(r)).map((t=>{const e=ve(t,No);if("error"in e)throw new Bn(e.error,"failed to get confirmed transactions");return e.result}))}async getConfirmedSignaturesForAddress(t,e,r){let n={},i=await this.getFirstAvailableBlock();for(;!("until"in n)&&!(--e<=0||e<i);)try{const t=await this.getConfirmedBlockSignatures(e,"finalized");t.signatures.length>0&&(n.until=t.signatures[t.signatures.length-1].toString())}catch(t){if(t instanceof Error&&t.message.includes("skipped"))continue;throw t}let o=await this.getSlot("finalized");for(;!("before"in n||++r>o);)try{const t=await this.getConfirmedBlockSignatures(r);t.signatures.length>0&&(n.before=t.signatures[t.signatures.length-1].toString())}catch(t){if(t instanceof Error&&t.message.includes("skipped"))continue;throw t}return(await this.getConfirmedSignaturesForAddress2(t,n)).map((t=>t.signature))}async getConfirmedSignaturesForAddress2(t,e,r){const n=this._buildArgsAtLeastConfirmed([t.toBase58()],r,void 0,e),i=ve(await this._rpcRequest("getConfirmedSignaturesForAddress2",n),Gi);if("error"in i)throw new Bn(i.error,"failed to get confirmed signatures for address");return i.result}async getSignaturesForAddress(t,e,r){const n=this._buildArgsAtLeastConfirmed([t.toBase58()],r,void 0,e),i=ve(await this._rpcRequest("getSignaturesForAddress",n),Zi);if("error"in i)throw new Bn(i.error,"failed to get signatures for address");return i.result}async getAddressLookupTable(t,e){const{context:r,value:n}=await this.getAccountInfoAndContext(t,e);let i=null;return null!==n&&(i=new Qn({key:t,state:Qn.deserialize(n.data)})),{context:r,value:i}}async getNonceAndContext(t,e){const{context:r,value:n}=await this.getAccountInfoAndContext(t,e);let i=null;return null!==n&&(i=Cn.fromAccountData(n.data)),{context:r,value:i}}async getNonce(t,e){return await this.getNonceAndContext(t,e).then((t=>t.value)).catch((e=>{throw new Error("failed to get nonce for account "+t.toBase58()+": "+e)}))}async requestAirdrop(t,e){const r=ve(await this._rpcRequest("requestAirdrop",[t.toBase58(),e]),qo);if("error"in r)throw new Bn(r.error,`airdrop to ${t.toBase58()} failed`);return r.result}async _blockhashWithExpiryBlockHeight(t){if(!t){for(;this._pollingBlockhash;)await Mn(100);const t=Date.now()-this._blockhashInfo.lastFetch>=oi;if(null!==this._blockhashInfo.latestBlockhash&&!t)return this._blockhashInfo.latestBlockhash}return await this._pollNewBlockhash()}async _pollNewBlockhash(){this._pollingBlockhash=!0;try{const t=Date.now(),e=this._blockhashInfo.latestBlockhash,r=e?e.blockhash:null;for(let t=0;t<50;t++){const t=await this.getLatestBlockhash("finalized");if(r!==t.blockhash)return this._blockhashInfo={latestBlockhash:t,lastFetch:Date.now(),transactionSignatures:[],simulatedSignatures:[]},t;await Mn(200)}throw new Error(`Unable to obtain a new blockhash after ${Date.now()-t}ms`)}finally{this._pollingBlockhash=!1}}async getStakeMinimumDelegation(t){const{commitment:e,config:r}=si(t),n=this._buildArgs([],e,"base64",r),i=ve(await this._rpcRequest("getStakeMinimumDelegation",n),li(Pe()));if("error"in i)throw new Bn(i.error,"failed to get stake minimum delegation");return i.result}async simulateTransaction(t,e,r){if("message"in t){const n=t.serialize(),o=i.Buffer.from(n).toString("base64");if(Array.isArray(e)||void 0!==r)throw new Error("Invalid arguments");const s=e||{};s.encoding="base64","commitment"in s||(s.commitment=this.commitment),e&&"object"==typeof e&&"innerInstructions"in e&&(s.innerInstructions=e.innerInstructions);const a=[o,s],c=ve(await this._rpcRequest("simulateTransaction",a),Bi);if("error"in c)throw new Error("failed to simulate transaction: "+c.error.message);return c.result}let n;if(t instanceof fn){let e=t;n=new fn,n.feePayer=e.feePayer,n.instructions=t.instructions,n.nonceInfo=e.nonceInfo,n.signatures=e.signatures}else n=fn.populate(t),n._message=n._json=void 0;if(void 0!==e&&!Array.isArray(e))throw new Error("Invalid arguments");const o=e;if(n.nonceInfo&&o)n.sign(...o);else{let t=this._disableBlockhashCaching;for(;;){const e=await this._blockhashWithExpiryBlockHeight(t);if(n.lastValidBlockHeight=e.lastValidBlockHeight,n.recentBlockhash=e.blockhash,!o)break;if(n.sign(...o),!n.signature)throw new Error("!signature");const r=n.signature.toString("base64");if(!this._blockhashInfo.simulatedSignatures.includes(r)&&!this._blockhashInfo.transactionSignatures.includes(r)){this._blockhashInfo.simulatedSignatures.push(r);break}t=!0}}const s=n._compile(),a=s.serialize(),c=n._serialize(a).toString("base64"),u={encoding:"base64",commitment:this.commitment};if(r){const t=(Array.isArray(r)?r:s.nonProgramIds()).map((t=>t.toBase58()));u.accounts={encoding:"base64",addresses:t}}o&&(u.sigVerify=!0),e&&"object"==typeof e&&"innerInstructions"in e&&(u.innerInstructions=e.innerInstructions);const h=[c,u],l=ve(await this._rpcRequest("simulateTransaction",h),Bi);if("error"in l){let t;if("data"in l.error&&(t=l.error.data.logs,t&&Array.isArray(t))){const e="\n    ",r=e+t.join(e);console.error(l.error.message,r)}throw new _n({action:"simulate",signature:"",transactionMessage:l.error.message,logs:t})}return l.result}async sendTransaction(t,e,r){if("version"in t){if(e&&Array.isArray(e))throw new Error("Invalid arguments");const r=t.serialize();return await this.sendRawTransaction(r,e)}if(void 0===e||!Array.isArray(e))throw new Error("Invalid arguments");const n=e;if(t.nonceInfo)t.sign(...n);else{let e=this._disableBlockhashCaching;for(;;){const r=await this._blockhashWithExpiryBlockHeight(e);if(t.lastValidBlockHeight=r.lastValidBlockHeight,t.recentBlockhash=r.blockhash,t.sign(...n),!t.signature)throw new Error("!signature");const i=t.signature.toString("base64");if(!this._blockhashInfo.transactionSignatures.includes(i)){this._blockhashInfo.transactionSignatures.push(i);break}e=!0}}const i=t.serialize();return await this.sendRawTransaction(i,r)}async sendRawTransaction(t,e){const r=Rr(t).toString("base64");return await this.sendEncodedTransaction(r,e)}async sendEncodedTransaction(t,e){const r={encoding:"base64"},n=e&&e.skipPreflight,i=!0===n?"processed":e&&e.preflightCommitment||this.commitment;e&&null!=e.maxRetries&&(r.maxRetries=e.maxRetries),e&&null!=e.minContextSlot&&(r.minContextSlot=e.minContextSlot),n&&(r.skipPreflight=n),i&&(r.preflightCommitment=i);const o=[t,r],s=ve(await this._rpcRequest("sendTransaction",o),Do);if("error"in s){let t;throw"data"in s.error&&(t=s.error.data.logs),new _n({action:n?"send":"simulate",signature:"",transactionMessage:s.error.message,logs:t})}return s.result}_wsOnOpen(){this._rpcWebSocketConnected=!0,this._rpcWebSocketHeartbeat=setInterval((()=>{(async()=>{try{await this._rpcWebSocket.notify("ping")}catch{}})()}),5e3),this._updateSubscriptions()}_wsOnError(t){this._rpcWebSocketConnected=!1,console.error("ws error:",t.message)}_wsOnClose(t){this._rpcWebSocketConnected=!1,this._rpcWebSocketGeneration=(this._rpcWebSocketGeneration+1)%Number.MAX_SAFE_INTEGER,this._rpcWebSocketIdleTimeout&&(clearTimeout(this._rpcWebSocketIdleTimeout),this._rpcWebSocketIdleTimeout=null),this._rpcWebSocketHeartbeat&&(clearInterval(this._rpcWebSocketHeartbeat),this._rpcWebSocketHeartbeat=null),1e3!==t?(this._subscriptionCallbacksByServerSubscriptionId={},Object.entries(this._subscriptionsByHash).forEach((([t,e])=>{this._setSubscription(t,{...e,state:"pending"})}))):this._updateSubscriptions()}_setSubscription(t,e){const r=this._subscriptionsByHash[t]?.state;if(this._subscriptionsByHash[t]=e,r!==e.state){const r=this._subscriptionStateChangeCallbacksByHash[t];r&&r.forEach((t=>{try{t(e.state)}catch{}}))}}_onSubscriptionStateChange(t,e){const r=this._subscriptionHashByClientSubscriptionId[t];if(null==r)return()=>{};const n=this._subscriptionStateChangeCallbacksByHash[r]||=new Set;return n.add(e),()=>{n.delete(e),0===n.size&&delete this._subscriptionStateChangeCallbacksByHash[r]}}async _updateSubscriptions(){if(0===Object.keys(this._subscriptionsByHash).length)return void(this._rpcWebSocketConnected&&(this._rpcWebSocketConnected=!1,this._rpcWebSocketIdleTimeout=setTimeout((()=>{this._rpcWebSocketIdleTimeout=null;try{this._rpcWebSocket.close()}catch(t){t instanceof Error&&console.log(`Error when closing socket connection: ${t.message}`)}}),500)));if(null!==this._rpcWebSocketIdleTimeout&&(clearTimeout(this._rpcWebSocketIdleTimeout),this._rpcWebSocketIdleTimeout=null,this._rpcWebSocketConnected=!0),!this._rpcWebSocketConnected)return void this._rpcWebSocket.connect();const t=this._rpcWebSocketGeneration,e=()=>t===this._rpcWebSocketGeneration;await Promise.all(Object.keys(this._subscriptionsByHash).map((async t=>{const r=this._subscriptionsByHash[t];if(void 0!==r)switch(r.state){case"pending":case"unsubscribed":if(0===r.callbacks.size)return delete this._subscriptionsByHash[t],"unsubscribed"===r.state&&delete this._subscriptionCallbacksByServerSubscriptionId[r.serverSubscriptionId],void await this._updateSubscriptions();await(async()=>{const{args:n,method:i}=r;try{this._setSubscription(t,{...r,state:"subscribing"});const e=await this._rpcWebSocket.call(i,n);this._setSubscription(t,{...r,serverSubscriptionId:e,state:"subscribed"}),this._subscriptionCallbacksByServerSubscriptionId[e]=r.callbacks,await this._updateSubscriptions()}catch(o){if(console.error(`Received ${o instanceof Error?"":"JSON-RPC "}error calling \`${i}\``,{args:n,error:o}),!e())return;this._setSubscription(t,{...r,state:"pending"}),await this._updateSubscriptions()}})();break;case"subscribed":0===r.callbacks.size&&await(async()=>{const{serverSubscriptionId:n,unsubscribeMethod:i}=r;if(this._subscriptionsAutoDisposedByRpc.has(n))this._subscriptionsAutoDisposedByRpc.delete(n);else{this._setSubscription(t,{...r,state:"unsubscribing"}),this._setSubscription(t,{...r,state:"unsubscribing"});try{await this._rpcWebSocket.call(i,[n])}catch(n){if(n instanceof Error&&console.error(`${i} error:`,n.message),!e())return;return this._setSubscription(t,{...r,state:"subscribed"}),void await this._updateSubscriptions()}}this._setSubscription(t,{...r,state:"unsubscribed"}),await this._updateSubscriptions()})()}})))}_handleServerNotification(t,e){const r=this._subscriptionCallbacksByServerSubscriptionId[t];void 0!==r&&r.forEach((t=>{try{t(...e)}catch(t){console.error(t)}}))}_wsOnAccountNotification(t){const{result:e,subscription:r}=ve(t,Ji);this._handleServerNotification(r,[e.value,e.context])}_makeSubscription(t,e){const r=this._nextClientSubscriptionId++,n=Yn([t.method,e]),i=this._subscriptionsByHash[n];return void 0===i?this._subscriptionsByHash[n]={...t,args:e,callbacks:new Set([t.callback]),state:"pending"}:i.callbacks.add(t.callback),this._subscriptionHashByClientSubscriptionId[r]=n,this._subscriptionDisposeFunctionsByClientSubscriptionId[r]=async()=>{delete this._subscriptionDisposeFunctionsByClientSubscriptionId[r],delete this._subscriptionHashByClientSubscriptionId[r];const e=this._subscriptionsByHash[n];en(void 0!==e,`Could not find a \`Subscription\` when tearing down client subscription #${r}`),e.callbacks.delete(t.callback),await this._updateSubscriptions()},this._updateSubscriptions(),r}onAccountChange(t,e,r){const{commitment:n,config:i}=si(r),o=this._buildArgs([t.toBase58()],n||this._commitment||"finalized","base64",i);return this._makeSubscription({callback:e,method:"accountSubscribe",unsubscribeMethod:"accountUnsubscribe"},o)}async removeAccountChangeListener(t){await this._unsubscribeClientSubscription(t,"account change")}_wsOnProgramAccountNotification(t){const{result:e,subscription:r}=ve(t,Qi);this._handleServerNotification(r,[{accountId:e.value.pubkey,accountInfo:e.value.account},e.context])}onProgramAccountChange(t,e,r,n){const{commitment:i,config:o}=si(r),s=this._buildArgs([t.toBase58()],i||this._commitment||"finalized","base64",o||(n?{filters:ai(n)}:void 0));return this._makeSubscription({callback:e,method:"programSubscribe",unsubscribeMethod:"programUnsubscribe"},s)}async removeProgramAccountChangeListener(t){await this._unsubscribeClientSubscription(t,"program account change")}onLogs(t,e,r){const n=this._buildArgs(["object"==typeof t?{mentions:[t.toString()]}:t],r||this._commitment||"finalized");return this._makeSubscription({callback:e,method:"logsSubscribe",unsubscribeMethod:"logsUnsubscribe"},n)}async removeOnLogsListener(t){await this._unsubscribeClientSubscription(t,"logs")}_wsOnLogsNotification(t){const{result:e,subscription:r}=ve(t,$o);this._handleServerNotification(r,[e.value,e.context])}_wsOnSlotNotification(t){const{result:e,subscription:r}=ve(t,eo);this._handleServerNotification(r,[e])}onSlotChange(t){return this._makeSubscription({callback:t,method:"slotSubscribe",unsubscribeMethod:"slotUnsubscribe"},[])}async removeSlotChangeListener(t){await this._unsubscribeClientSubscription(t,"slot change")}_wsOnSlotUpdatesNotification(t){const{result:e,subscription:r}=ve(t,no);this._handleServerNotification(r,[e])}onSlotUpdate(t){return this._makeSubscription({callback:t,method:"slotsUpdatesSubscribe",unsubscribeMethod:"slotsUpdatesUnsubscribe"},[])}async removeSlotUpdateListener(t){await this._unsubscribeClientSubscription(t,"slot update")}async _unsubscribeClientSubscription(t,e){const r=this._subscriptionDisposeFunctionsByClientSubscriptionId[t];r?await r():console.warn(`Ignored unsubscribe request because an active subscription with id \`${t}\` for '${e}' events could not be found.`)}_buildArgs(t,e,r,n){const i=e||this._commitment;if(i||r||n){let e={};r&&(e.encoding=r),i&&(e.commitment=i),n&&(e=Object.assign(e,n)),t.push(e)}return t}_buildArgsAtLeastConfirmed(t,e,r,n){const i=e||this._commitment;if(i&&!["confirmed","finalized"].includes(i))throw new Error("Using Connection with default commitment: `"+this._commitment+"`, but method requires at least `confirmed`");return this._buildArgs(t,e,r,n)}_wsOnSignatureNotification(t){const{result:e,subscription:r}=ve(t,io);"receivedSignature"!==e.value&&this._subscriptionsAutoDisposedByRpc.add(r),this._handleServerNotification(r,"receivedSignature"===e.value?[{type:"received"},e.context]:[{type:"status",result:e.value},e.context])}onSignature(t,e,r){const n=this._buildArgs([t],r||this._commitment||"finalized"),i=this._makeSubscription({callback:(t,r)=>{if("status"===t.type){e(t.result,r);try{this.removeSignatureListener(i)}catch(t){}}},method:"signatureSubscribe",unsubscribeMethod:"signatureUnsubscribe"},n);return i}onSignatureWithOptions(t,e,r){const{commitment:n,...i}={...r,commitment:r&&r.commitment||this._commitment||"finalized"},o=this._buildArgs([t],n,void 0,i),s=this._makeSubscription({callback:(t,r)=>{e(t,r);try{this.removeSignatureListener(s)}catch(t){}},method:"signatureSubscribe",unsubscribeMethod:"signatureUnsubscribe"},o);return s}async removeSignatureListener(t){await this._unsubscribeClientSubscription(t,"signature result")}_wsOnRootNotification(t){const{result:e,subscription:r}=ve(t,oo);this._handleServerNotification(r,[e])}onRootChange(t){return this._makeSubscription({callback:t,method:"rootSubscribe",unsubscribeMethod:"rootUnsubscribe"},[])}async removeRootChangeListener(t){await this._unsubscribeClientSubscription(t,"root change")}}class Yo{constructor(t){this._keypair=void 0,this._keypair=t??Er()}static generate(){return new Yo(Er())}static fromSecretKey(t,e){if(64!==t.byteLength)throw new Error("bad secret key size");const r=t.slice(32,64);if(!e||!e.skipValidation){const e=t.slice(0,32),n=Br(e);for(let t=0;t<32;t++)if(r[t]!==n[t])throw new Error("provided secretKey is invalid")}return new Yo({publicKey:r,secretKey:t})}static fromSeed(t){const e=Br(t),r=new Uint8Array(64);return r.set(t),r.set(e,32),new Yo({publicKey:e,secretKey:r})}get publicKey(){return new Wr(this._keypair.publicKey)}get secretKey(){return new Uint8Array(this._keypair.secretKey)}}const Go=Object.freeze({CreateLookupTable:{index:0,layout:he.w3([he.DH("instruction"),zn("recentSlot"),he.u8("bumpSeed")])},FreezeLookupTable:{index:1,layout:he.w3([he.DH("instruction")])},ExtendLookupTable:{index:2,layout:he.w3([he.DH("instruction"),zn(),he.O6(Gr(),he.cY(he.DH(),-8),"addresses")])},DeactivateLookupTable:{index:3,layout:he.w3([he.DH("instruction")])},CloseLookupTable:{index:4,layout:he.w3([he.DH("instruction")])}});class Zo{constructor(){}static decodeInstructionType(t){this.checkProgramId(t.programId);const e=he.DH("instruction").decode(t.data);let r;for(const[t,n]of Object.entries(Go))if(n.index==e){r=t;break}if(!r)throw new Error("Invalid Instruction. Should be a LookupTable Instruction");return r}static decodeCreateLookupTable(t){this.checkProgramId(t.programId),this.checkKeysLength(t.keys,4);const{recentSlot:e}=Rn(Go.CreateLookupTable,t.data);return{authority:t.keys[1].pubkey,payer:t.keys[2].pubkey,recentSlot:Number(e)}}static decodeExtendLookupTable(t){if(this.checkProgramId(t.programId),t.keys.length<2)throw new Error(`invalid instruction; found ${t.keys.length} keys, expected at least 2`);const{addresses:e}=Rn(Go.ExtendLookupTable,t.data);return{lookupTable:t.keys[0].pubkey,authority:t.keys[1].pubkey,payer:t.keys.length>2?t.keys[2].pubkey:void 0,addresses:e.map((t=>new Wr(t)))}}static decodeCloseLookupTable(t){return this.checkProgramId(t.programId),this.checkKeysLength(t.keys,3),{lookupTable:t.keys[0].pubkey,authority:t.keys[1].pubkey,recipient:t.keys[2].pubkey}}static decodeFreezeLookupTable(t){return this.checkProgramId(t.programId),this.checkKeysLength(t.keys,2),{lookupTable:t.keys[0].pubkey,authority:t.keys[1].pubkey}}static decodeDeactivateLookupTable(t){return this.checkProgramId(t.programId),this.checkKeysLength(t.keys,2),{lookupTable:t.keys[0].pubkey,authority:t.keys[1].pubkey}}static checkProgramId(t){if(!t.equals(Jo.programId))throw new Error("invalid instruction; programId is not AddressLookupTable Program")}static checkKeysLength(t,e){if(t.length<e)throw new Error(`invalid instruction; found ${t.length} keys, expected at least ${e}`)}}class Jo{constructor(){}static createLookupTable(t){const[e,r]=Wr.findProgramAddressSync([t.authority.toBuffer(),(0,le.Bq)(BigInt(t.recentSlot),8)],this.programId),n=Pn(Go.CreateLookupTable,{recentSlot:BigInt(t.recentSlot),bumpSeed:r}),i=[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:t.authority,isSigner:!0,isWritable:!1},{pubkey:t.payer,isSigner:!0,isWritable:!0},{pubkey:Wn.programId,isSigner:!1,isWritable:!1}];return[new dn({programId:this.programId,keys:i,data:n}),e]}static freezeLookupTable(t){const e=Pn(Go.FreezeLookupTable),r=[{pubkey:t.lookupTable,isSigner:!1,isWritable:!0},{pubkey:t.authority,isSigner:!0,isWritable:!1}];return new dn({programId:this.programId,keys:r,data:e})}static extendLookupTable(t){const e=Pn(Go.ExtendLookupTable,{addresses:t.addresses.map((t=>t.toBytes()))}),r=[{pubkey:t.lookupTable,isSigner:!1,isWritable:!0},{pubkey:t.authority,isSigner:!0,isWritable:!1}];return t.payer&&r.push({pubkey:t.payer,isSigner:!0,isWritable:!0},{pubkey:Wn.programId,isSigner:!1,isWritable:!1}),new dn({programId:this.programId,keys:r,data:e})}static deactivateLookupTable(t){const e=Pn(Go.DeactivateLookupTable),r=[{pubkey:t.lookupTable,isSigner:!1,isWritable:!0},{pubkey:t.authority,isSigner:!0,isWritable:!1}];return new dn({programId:this.programId,keys:r,data:e})}static closeLookupTable(t){const e=Pn(Go.CloseLookupTable),r=[{pubkey:t.lookupTable,isSigner:!1,isWritable:!0},{pubkey:t.authority,isSigner:!0,isWritable:!1},{pubkey:t.recipient,isSigner:!1,isWritable:!0}];return new dn({programId:this.programId,keys:r,data:e})}}Jo.programId=new Wr("AddressLookupTab1e1111111111111111111111111");class Xo{constructor(){}static decodeInstructionType(t){this.checkProgramId(t.programId);const e=he.u8("instruction").decode(t.data);let r;for(const[t,n]of Object.entries(Qo))if(n.index==e){r=t;break}if(!r)throw new Error("Instruction type incorrect; not a ComputeBudgetInstruction");return r}static decodeRequestUnits(t){this.checkProgramId(t.programId);const{units:e,additionalFee:r}=Rn(Qo.RequestUnits,t.data);return{units:e,additionalFee:r}}static decodeRequestHeapFrame(t){this.checkProgramId(t.programId);const{bytes:e}=Rn(Qo.RequestHeapFrame,t.data);return{bytes:e}}static decodeSetComputeUnitLimit(t){this.checkProgramId(t.programId);const{units:e}=Rn(Qo.SetComputeUnitLimit,t.data);return{units:e}}static decodeSetComputeUnitPrice(t){this.checkProgramId(t.programId);const{microLamports:e}=Rn(Qo.SetComputeUnitPrice,t.data);return{microLamports:e}}static checkProgramId(t){if(!t.equals(ts.programId))throw new Error("invalid instruction; programId is not ComputeBudgetProgram")}}const Qo=Object.freeze({RequestUnits:{index:0,layout:he.w3([he.u8("instruction"),he.DH("units"),he.DH("additionalFee")])},RequestHeapFrame:{index:1,layout:he.w3([he.u8("instruction"),he.DH("bytes")])},SetComputeUnitLimit:{index:2,layout:he.w3([he.u8("instruction"),he.DH("units")])},SetComputeUnitPrice:{index:3,layout:he.w3([he.u8("instruction"),zn("microLamports")])}});class ts{constructor(){}static requestUnits(t){const e=Pn(Qo.RequestUnits,t);return new dn({keys:[],programId:this.programId,data:e})}static requestHeapFrame(t){const e=Pn(Qo.RequestHeapFrame,t);return new dn({keys:[],programId:this.programId,data:e})}static setComputeUnitLimit(t){const e=Pn(Qo.SetComputeUnitLimit,t);return new dn({keys:[],programId:this.programId,data:e})}static setComputeUnitPrice(t){const e=Pn(Qo.SetComputeUnitPrice,{microLamports:BigInt(t.microLamports)});return new dn({keys:[],programId:this.programId,data:e})}}ts.programId=new Wr("ComputeBudget111111111111111111111111111111");const es=he.w3([he.u8("numSignatures"),he.u8("padding"),he.NX("signatureOffset"),he.NX("signatureInstructionIndex"),he.NX("publicKeyOffset"),he.NX("publicKeyInstructionIndex"),he.NX("messageDataOffset"),he.NX("messageDataSize"),he.NX("messageInstructionIndex")]);class rs{constructor(){}static createInstructionWithPublicKey(t){const{publicKey:e,message:r,signature:n,instructionIndex:o}=t;en(32===e.length,`Public Key must be 32 bytes but received ${e.length} bytes`),en(64===n.length,`Signature must be 64 bytes but received ${n.length} bytes`);const s=es.span,a=s+e.length,c=a+n.length,u=i.Buffer.alloc(c+r.length),h=null==o?65535:o;return es.encode({numSignatures:1,padding:0,signatureOffset:a,signatureInstructionIndex:h,publicKeyOffset:s,publicKeyInstructionIndex:h,messageDataOffset:c,messageDataSize:r.length,messageInstructionIndex:h},u),u.fill(e,s),u.fill(n,a),u.fill(r,c),new dn({keys:[],programId:rs.programId,data:u})}static createInstructionWithPrivateKey(t){const{privateKey:e,message:r,instructionIndex:n}=t;en(64===e.length,`Private key must be 64 bytes but received ${e.length} bytes`);try{const t=Yo.fromSecretKey(e),i=t.publicKey.toBytes(),o=Mr(r,t.secretKey);return this.createInstructionWithPublicKey({publicKey:i,message:r,signature:o,instructionIndex:n})}catch(t){throw new Error(`Error creating instruction; ${t}`)}}}rs.programId=new Wr("Ed25519SigVerify111111111111111111111111111"),Ar.utils.isValidPrivateKey;const ns=Ar.getPublicKey,is=he.w3([he.u8("numSignatures"),he.NX("signatureOffset"),he.u8("signatureInstructionIndex"),he.NX("ethAddressOffset"),he.u8("ethAddressInstructionIndex"),he.NX("messageDataOffset"),he.NX("messageDataSize"),he.u8("messageInstructionIndex"),he.av(20,"ethAddress"),he.av(64,"signature"),he.u8("recoveryId")]);class os{constructor(){}static publicKeyToEthAddress(t){en(64===t.length,`Public key must be 64 bytes but received ${t.length} bytes`);try{return i.Buffer.from(or(Rr(t))).slice(-20)}catch(t){throw new Error(`Error constructing Ethereum address: ${t}`)}}static createInstructionWithPublicKey(t){const{publicKey:e,message:r,signature:n,recoveryId:i,instructionIndex:o}=t;return os.createInstructionWithEthAddress({ethAddress:os.publicKeyToEthAddress(e),message:r,signature:n,recoveryId:i,instructionIndex:o})}static createInstructionWithEthAddress(t){const{ethAddress:e,message:r,signature:n,recoveryId:o,instructionIndex:s=0}=t;let a;a="string"==typeof e?e.startsWith("0x")?i.Buffer.from(e.substr(2),"hex"):i.Buffer.from(e,"hex"):e,en(20===a.length,`Address must be 20 bytes but received ${a.length} bytes`);const c=12+a.length,u=c+n.length+1,h=i.Buffer.alloc(is.span+r.length);return is.encode({numSignatures:1,signatureOffset:c,signatureInstructionIndex:s,ethAddressOffset:12,ethAddressInstructionIndex:s,messageDataOffset:u,messageDataSize:r.length,messageInstructionIndex:s,signature:Rr(n),ethAddress:Rr(a),recoveryId:o},h),h.fill(Rr(r),is.span),new dn({keys:[],programId:os.programId,data:h})}static createInstructionWithPrivateKey(t){const{privateKey:e,message:r,instructionIndex:n}=t;en(32===e.length,`Private key must be 32 bytes but received ${e.length} bytes`);try{const t=Rr(e),o=ns(t,!1).slice(1),s=i.Buffer.from(or(Rr(r))),[a,c]=((t,e)=>{const r=Ar.sign(t,e);return[r.toCompactRawBytes(),r.recovery]})(s,t);return this.createInstructionWithPublicKey({publicKey:o,message:r,signature:a,recoveryId:c,instructionIndex:n})}catch(t){throw new Error(`Error creating instruction; ${t}`)}}}var ss;os.programId=new Wr("KeccakSecp256k11111111111111111111111111111");const as=new Wr("StakeConfig11111111111111111111111111111111");class cs{constructor(t,e){this.staker=void 0,this.withdrawer=void 0,this.staker=t,this.withdrawer=e}}class us{constructor(t,e,r){this.unixTimestamp=void 0,this.epoch=void 0,this.custodian=void 0,this.unixTimestamp=t,this.epoch=e,this.custodian=r}}ss=us,us.default=new ss(0,0,Wr.default);class hs{constructor(){}static decodeInstructionType(t){this.checkProgramId(t.programId);const e=he.DH("instruction").decode(t.data);let r;for(const[t,n]of Object.entries(ls))if(n.index==e){r=t;break}if(!r)throw new Error("Instruction type incorrect; not a StakeInstruction");return r}static decodeInitialize(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,2);const{authorized:e,lockup:r}=Rn(ls.Initialize,t.data);return{stakePubkey:t.keys[0].pubkey,authorized:new cs(new Wr(e.staker),new Wr(e.withdrawer)),lockup:new us(r.unixTimestamp,r.epoch,new Wr(r.custodian))}}static decodeDelegate(t){return this.checkProgramId(t.programId),this.checkKeyLength(t.keys,6),Rn(ls.Delegate,t.data),{stakePubkey:t.keys[0].pubkey,votePubkey:t.keys[1].pubkey,authorizedPubkey:t.keys[5].pubkey}}static decodeAuthorize(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,3);const{newAuthorized:e,stakeAuthorizationType:r}=Rn(ls.Authorize,t.data),n={stakePubkey:t.keys[0].pubkey,authorizedPubkey:t.keys[2].pubkey,newAuthorizedPubkey:new Wr(e),stakeAuthorizationType:{index:r}};return t.keys.length>3&&(n.custodianPubkey=t.keys[3].pubkey),n}static decodeAuthorizeWithSeed(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,2);const{newAuthorized:e,stakeAuthorizationType:r,authoritySeed:n,authorityOwner:i}=Rn(ls.AuthorizeWithSeed,t.data),o={stakePubkey:t.keys[0].pubkey,authorityBase:t.keys[1].pubkey,authoritySeed:n,authorityOwner:new Wr(i),newAuthorizedPubkey:new Wr(e),stakeAuthorizationType:{index:r}};return t.keys.length>3&&(o.custodianPubkey=t.keys[3].pubkey),o}static decodeSplit(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,3);const{lamports:e}=Rn(ls.Split,t.data);return{stakePubkey:t.keys[0].pubkey,splitStakePubkey:t.keys[1].pubkey,authorizedPubkey:t.keys[2].pubkey,lamports:e}}static decodeMerge(t){return this.checkProgramId(t.programId),this.checkKeyLength(t.keys,3),Rn(ls.Merge,t.data),{stakePubkey:t.keys[0].pubkey,sourceStakePubKey:t.keys[1].pubkey,authorizedPubkey:t.keys[4].pubkey}}static decodeWithdraw(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,5);const{lamports:e}=Rn(ls.Withdraw,t.data),r={stakePubkey:t.keys[0].pubkey,toPubkey:t.keys[1].pubkey,authorizedPubkey:t.keys[4].pubkey,lamports:e};return t.keys.length>5&&(r.custodianPubkey=t.keys[5].pubkey),r}static decodeDeactivate(t){return this.checkProgramId(t.programId),this.checkKeyLength(t.keys,3),Rn(ls.Deactivate,t.data),{stakePubkey:t.keys[0].pubkey,authorizedPubkey:t.keys[2].pubkey}}static checkProgramId(t){if(!t.equals(fs.programId))throw new Error("invalid instruction; programId is not StakeProgram")}static checkKeyLength(t,e){if(t.length<e)throw new Error(`invalid instruction; found ${t.length} keys, expected at least ${e}`)}}const ls=Object.freeze({Initialize:{index:0,layout:he.w3([he.DH("instruction"),((t="authorized")=>he.w3([Gr("staker"),Gr("withdrawer")],t))(),((t="lockup")=>he.w3([he.Wg("unixTimestamp"),he.Wg("epoch"),Gr("custodian")],t))()])},Authorize:{index:1,layout:he.w3([he.DH("instruction"),Gr("newAuthorized"),he.DH("stakeAuthorizationType")])},Delegate:{index:2,layout:he.w3([he.DH("instruction")])},Split:{index:3,layout:he.w3([he.DH("instruction"),he.Wg("lamports")])},Withdraw:{index:4,layout:he.w3([he.DH("instruction"),he.Wg("lamports")])},Deactivate:{index:5,layout:he.w3([he.DH("instruction")])},Merge:{index:7,layout:he.w3([he.DH("instruction")])},AuthorizeWithSeed:{index:8,layout:he.w3([he.DH("instruction"),Gr("newAuthorized"),he.DH("stakeAuthorizationType"),Jr("authoritySeed"),Gr("authorityOwner")])}}),ds=Object.freeze({Staker:{index:0},Withdrawer:{index:1}});class fs{constructor(){}static initialize(t){const{stakePubkey:e,authorized:r,lockup:n}=t,i=n||us.default,o=Pn(ls.Initialize,{authorized:{staker:Rr(r.staker.toBuffer()),withdrawer:Rr(r.withdrawer.toBuffer())},lockup:{unixTimestamp:i.unixTimestamp,epoch:i.epoch,custodian:Rr(i.custodian.toBuffer())}}),s={keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:kn,isSigner:!1,isWritable:!1}],programId:this.programId,data:o};return new dn(s)}static createAccountWithSeed(t){const e=new fn;e.add(Wn.createAccountWithSeed({fromPubkey:t.fromPubkey,newAccountPubkey:t.stakePubkey,basePubkey:t.basePubkey,seed:t.seed,lamports:t.lamports,space:this.space,programId:this.programId}));const{stakePubkey:r,authorized:n,lockup:i}=t;return e.add(this.initialize({stakePubkey:r,authorized:n,lockup:i}))}static createAccount(t){const e=new fn;e.add(Wn.createAccount({fromPubkey:t.fromPubkey,newAccountPubkey:t.stakePubkey,lamports:t.lamports,space:this.space,programId:this.programId}));const{stakePubkey:r,authorized:n,lockup:i}=t;return e.add(this.initialize({stakePubkey:r,authorized:n,lockup:i}))}static delegate(t){const{stakePubkey:e,authorizedPubkey:r,votePubkey:n}=t,i=Pn(ls.Delegate);return(new fn).add({keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!1},{pubkey:mn,isSigner:!1,isWritable:!1},{pubkey:An,isSigner:!1,isWritable:!1},{pubkey:as,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:i})}static authorize(t){const{stakePubkey:e,authorizedPubkey:r,newAuthorizedPubkey:n,stakeAuthorizationType:i,custodianPubkey:o}=t,s=Pn(ls.Authorize,{newAuthorized:Rr(n.toBuffer()),stakeAuthorizationType:i.index}),a=[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:mn,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}];return o&&a.push({pubkey:o,isSigner:!0,isWritable:!1}),(new fn).add({keys:a,programId:this.programId,data:s})}static authorizeWithSeed(t){const{stakePubkey:e,authorityBase:r,authoritySeed:n,authorityOwner:i,newAuthorizedPubkey:o,stakeAuthorizationType:s,custodianPubkey:a}=t,c=Pn(ls.AuthorizeWithSeed,{newAuthorized:Rr(o.toBuffer()),stakeAuthorizationType:s.index,authoritySeed:n,authorityOwner:Rr(i.toBuffer())}),u=[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1},{pubkey:mn,isSigner:!1,isWritable:!1}];return a&&u.push({pubkey:a,isSigner:!0,isWritable:!1}),(new fn).add({keys:u,programId:this.programId,data:c})}static splitInstruction(t){const{stakePubkey:e,authorizedPubkey:r,splitStakePubkey:n,lamports:i}=t,o=Pn(ls.Split,{lamports:i});return new dn({keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:o})}static split(t,e){const r=new fn;return r.add(Wn.createAccount({fromPubkey:t.authorizedPubkey,newAccountPubkey:t.splitStakePubkey,lamports:e,space:this.space,programId:this.programId})),r.add(this.splitInstruction(t))}static splitWithSeed(t,e){const{stakePubkey:r,authorizedPubkey:n,splitStakePubkey:i,basePubkey:o,seed:s,lamports:a}=t,c=new fn;return c.add(Wn.allocate({accountPubkey:i,basePubkey:o,seed:s,space:this.space,programId:this.programId})),e&&e>0&&c.add(Wn.transfer({fromPubkey:t.authorizedPubkey,toPubkey:i,lamports:e})),c.add(this.splitInstruction({stakePubkey:r,authorizedPubkey:n,splitStakePubkey:i,lamports:a}))}static merge(t){const{stakePubkey:e,sourceStakePubKey:r,authorizedPubkey:n}=t,i=Pn(ls.Merge);return(new fn).add({keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!1,isWritable:!0},{pubkey:mn,isSigner:!1,isWritable:!1},{pubkey:An,isSigner:!1,isWritable:!1},{pubkey:n,isSigner:!0,isWritable:!1}],programId:this.programId,data:i})}static withdraw(t){const{stakePubkey:e,authorizedPubkey:r,toPubkey:n,lamports:i,custodianPubkey:o}=t,s=Pn(ls.Withdraw,{lamports:i}),a=[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!1,isWritable:!0},{pubkey:mn,isSigner:!1,isWritable:!1},{pubkey:An,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return o&&a.push({pubkey:o,isSigner:!0,isWritable:!1}),(new fn).add({keys:a,programId:this.programId,data:s})}static deactivate(t){const{stakePubkey:e,authorizedPubkey:r}=t,n=Pn(ls.Deactivate);return(new fn).add({keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:mn,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:n})}}fs.programId=new Wr("Stake11111111111111111111111111111111111111"),fs.space=200;class ps{constructor(t,e,r,n){this.nodePubkey=void 0,this.authorizedVoter=void 0,this.authorizedWithdrawer=void 0,this.commission=void 0,this.nodePubkey=t,this.authorizedVoter=e,this.authorizedWithdrawer=r,this.commission=n}}class gs{constructor(){}static decodeInstructionType(t){this.checkProgramId(t.programId);const e=he.DH("instruction").decode(t.data);let r;for(const[t,n]of Object.entries(ms))if(n.index==e){r=t;break}if(!r)throw new Error("Instruction type incorrect; not a VoteInstruction");return r}static decodeInitializeAccount(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,4);const{voteInit:e}=Rn(ms.InitializeAccount,t.data);return{votePubkey:t.keys[0].pubkey,nodePubkey:t.keys[3].pubkey,voteInit:new ps(new Wr(e.nodePubkey),new Wr(e.authorizedVoter),new Wr(e.authorizedWithdrawer),e.commission)}}static decodeAuthorize(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,3);const{newAuthorized:e,voteAuthorizationType:r}=Rn(ms.Authorize,t.data);return{votePubkey:t.keys[0].pubkey,authorizedPubkey:t.keys[2].pubkey,newAuthorizedPubkey:new Wr(e),voteAuthorizationType:{index:r}}}static decodeAuthorizeWithSeed(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,3);const{voteAuthorizeWithSeedArgs:{currentAuthorityDerivedKeyOwnerPubkey:e,currentAuthorityDerivedKeySeed:r,newAuthorized:n,voteAuthorizationType:i}}=Rn(ms.AuthorizeWithSeed,t.data);return{currentAuthorityDerivedKeyBasePubkey:t.keys[2].pubkey,currentAuthorityDerivedKeyOwnerPubkey:new Wr(e),currentAuthorityDerivedKeySeed:r,newAuthorizedPubkey:new Wr(n),voteAuthorizationType:{index:i},votePubkey:t.keys[0].pubkey}}static decodeWithdraw(t){this.checkProgramId(t.programId),this.checkKeyLength(t.keys,3);const{lamports:e}=Rn(ms.Withdraw,t.data);return{votePubkey:t.keys[0].pubkey,authorizedWithdrawerPubkey:t.keys[2].pubkey,lamports:e,toPubkey:t.keys[1].pubkey}}static checkProgramId(t){if(!t.equals(bs.programId))throw new Error("invalid instruction; programId is not VoteProgram")}static checkKeyLength(t,e){if(t.length<e)throw new Error(`invalid instruction; found ${t.length} keys, expected at least ${e}`)}}const ms=Object.freeze({InitializeAccount:{index:0,layout:he.w3([he.DH("instruction"),((t="voteInit")=>he.w3([Gr("nodePubkey"),Gr("authorizedVoter"),Gr("authorizedWithdrawer"),he.u8("commission")],t))()])},Authorize:{index:1,layout:he.w3([he.DH("instruction"),Gr("newAuthorized"),he.DH("voteAuthorizationType")])},Withdraw:{index:3,layout:he.w3([he.DH("instruction"),he.Wg("lamports")])},UpdateValidatorIdentity:{index:4,layout:he.w3([he.DH("instruction")])},AuthorizeWithSeed:{index:10,layout:he.w3([he.DH("instruction"),((t="voteAuthorizeWithSeedArgs")=>he.w3([he.DH("voteAuthorizationType"),Gr("currentAuthorityDerivedKeyOwnerPubkey"),Jr("currentAuthorityDerivedKeySeed"),Gr("newAuthorized")],t))()])}}),ys=Object.freeze({Voter:{index:0},Withdrawer:{index:1}});class bs{constructor(){}static initializeAccount(t){const{votePubkey:e,nodePubkey:r,voteInit:n}=t,i=Pn(ms.InitializeAccount,{voteInit:{nodePubkey:Rr(n.nodePubkey.toBuffer()),authorizedVoter:Rr(n.authorizedVoter.toBuffer()),authorizedWithdrawer:Rr(n.authorizedWithdrawer.toBuffer()),commission:n.commission}}),o={keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:kn,isSigner:!1,isWritable:!1},{pubkey:mn,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:i};return new dn(o)}static createAccount(t){const e=new fn;return e.add(Wn.createAccount({fromPubkey:t.fromPubkey,newAccountPubkey:t.votePubkey,lamports:t.lamports,space:this.space,programId:this.programId})),e.add(this.initializeAccount({votePubkey:t.votePubkey,nodePubkey:t.voteInit.nodePubkey,voteInit:t.voteInit}))}static authorize(t){const{votePubkey:e,authorizedPubkey:r,newAuthorizedPubkey:n,voteAuthorizationType:i}=t,o=Pn(ms.Authorize,{newAuthorized:Rr(n.toBuffer()),voteAuthorizationType:i.index}),s=[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:mn,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return(new fn).add({keys:s,programId:this.programId,data:o})}static authorizeWithSeed(t){const{currentAuthorityDerivedKeyBasePubkey:e,currentAuthorityDerivedKeyOwnerPubkey:r,currentAuthorityDerivedKeySeed:n,newAuthorizedPubkey:i,voteAuthorizationType:o,votePubkey:s}=t,a=Pn(ms.AuthorizeWithSeed,{voteAuthorizeWithSeedArgs:{currentAuthorityDerivedKeyOwnerPubkey:Rr(r.toBuffer()),currentAuthorityDerivedKeySeed:n,newAuthorized:Rr(i.toBuffer()),voteAuthorizationType:o.index}}),c=[{pubkey:s,isSigner:!1,isWritable:!0},{pubkey:mn,isSigner:!1,isWritable:!1},{pubkey:e,isSigner:!0,isWritable:!1}];return(new fn).add({keys:c,programId:this.programId,data:a})}static withdraw(t){const{votePubkey:e,authorizedWithdrawerPubkey:r,lamports:n,toPubkey:i}=t,o=Pn(ms.Withdraw,{lamports:n}),s=[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:i,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}];return(new fn).add({keys:s,programId:this.programId,data:o})}static safeWithdraw(t,e,r){if(t.lamports>e-r)throw new Error("Withdraw will leave vote account with insufficient funds.");return bs.withdraw(t)}static updateValidatorIdentity(t){const{votePubkey:e,authorizedWithdrawerPubkey:r,nodePubkey:n}=t,i=Pn(ms.UpdateValidatorIdentity),o=[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:n,isSigner:!0,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return(new fn).add({keys:o,programId:this.programId,data:i})}}bs.programId=new Wr("Vote111111111111111111111111111111111111111"),bs.space=3762;const ws=new Wr("Va1idator1nfo111111111111111111111111111111"),ks=Ce({name:Le(),website:Re(Le()),details:Re(Le()),iconUrl:Re(Le()),keybaseUsername:Re(Le())});class vs{constructor(t,e){this.key=void 0,this.info=void 0,this.key=t,this.info=e}static fromConfigData(t){let e=[...t];if(2!==Qr(e))return null;const r=[];for(let t=0;t<2;t++){const t=new Wr(sn(e,0,Nr)),n=1===on(e);r.push({publicKey:t,isSigner:n})}if(r[0].publicKey.equals(ws)&&r[1].isSigner){const t=Jr().decode(i.Buffer.from(e)),n=JSON.parse(t);return ke(n,ks),new vs(r[1].publicKey,n)}return null}}const Ss=new Wr("Vote111111111111111111111111111111111111111"),Is=he.w3([Gr("nodePubkey"),Gr("authorizedWithdrawer"),he.u8("commission"),he.I0(),he.O6(he.w3([he.I0("slot"),he.DH("confirmationCount")]),he.cY(he.DH(),-8),"votes"),he.u8("rootSlotValid"),he.I0("rootSlot"),he.I0(),he.O6(he.w3([he.I0("epoch"),Gr("authorizedVoter")]),he.cY(he.DH(),-8),"authorizedVoters"),he.w3([he.O6(he.w3([Gr("authorizedPubkey"),he.I0("epochOfLastAuthorizedSwitch"),he.I0("targetEpoch")]),32,"buf"),he.I0("idx"),he.u8("isEmpty")],"priorVoters"),he.I0(),he.O6(he.w3([he.I0("epoch"),he.I0("credits"),he.I0("prevCredits")]),he.cY(he.DH(),-8),"epochCredits"),he.w3([he.I0("slot"),he.I0("timestamp")],"lastTimestamp")]);class As{constructor(t){this.nodePubkey=void 0,this.authorizedWithdrawer=void 0,this.commission=void 0,this.rootSlot=void 0,this.votes=void 0,this.authorizedVoters=void 0,this.priorVoters=void 0,this.epochCredits=void 0,this.lastTimestamp=void 0,this.nodePubkey=t.nodePubkey,this.authorizedWithdrawer=t.authorizedWithdrawer,this.commission=t.commission,this.rootSlot=t.rootSlot,this.votes=t.votes,this.authorizedVoters=t.authorizedVoters,this.priorVoters=t.priorVoters,this.epochCredits=t.epochCredits,this.lastTimestamp=t.lastTimestamp}static fromAccountData(t){const e=Is.decode(Rr(t),4);let r=e.rootSlot;return e.rootSlotValid||(r=null),new As({nodePubkey:new Wr(e.nodePubkey),authorizedWithdrawer:new Wr(e.authorizedWithdrawer),commission:e.commission,votes:e.votes,rootSlot:r,authorizedVoters:e.authorizedVoters.map(_s),priorVoters:Bs(e.priorVoters),epochCredits:e.epochCredits,lastTimestamp:e.lastTimestamp})}}function _s({authorizedVoter:t,epoch:e}){return{epoch:e,authorizedVoter:new Wr(t)}}function Es({authorizedPubkey:t,epochOfLastAuthorizedSwitch:e,targetEpoch:r}){return{authorizedPubkey:new Wr(t),epochOfLastAuthorizedSwitch:e,targetEpoch:r}}function Bs({buf:t,idx:e,isEmpty:r}){return r?[]:[...t.slice(e+1).map(Es),...t.slice(0,e).map(Es)]}const xs={http:{devnet:"http://api.devnet.solana.com",testnet:"http://api.testnet.solana.com","mainnet-beta":"http://api.mainnet-beta.solana.com/"},https:{devnet:"https://api.devnet.solana.com",testnet:"https://api.testnet.solana.com","mainnet-beta":"https://api.mainnet-beta.solana.com/"}};function Ms(t,e){const r=!1===e?"http":"https";if(!t)return xs[r].devnet;const n=xs[r][t];if(!n)throw new Error(`Unknown ${r} cluster: ${t}`);return n}async function Ps(t,e,r,n){let i,o;r&&Object.prototype.hasOwnProperty.call(r,"lastValidBlockHeight")||r&&Object.prototype.hasOwnProperty.call(r,"nonceValue")?(i=r,o=n):o=r;const s=o&&{skipPreflight:o.skipPreflight,preflightCommitment:o.preflightCommitment||o.commitment,minContextSlot:o.minContextSlot},a=await t.sendRawTransaction(e,s),c=o&&o.commitment,u=i?t.confirmTransaction(i,c):t.confirmTransaction(a,c),h=(await u).value;if(h.err){if(null!=a)throw new _n({action:s?.skipPreflight?"send":"simulate",signature:a,transactionMessage:`Status: (${JSON.stringify(h)})`});throw new Error(`Raw transaction ${a} failed (${JSON.stringify(h)})`)}return a}const Rs=1e9},404:function(t,e,r){!function(t,e){"use strict";function n(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function o(t,e,r){if(o.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=o:e.BN=o,o.BN=o,o.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:r(790).Buffer}catch(t){}function a(t,e){var r=t.charCodeAt(e);return r>=48&&r<=57?r-48:r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:void n(!1,"Invalid character in "+t)}function c(t,e,r){var n=a(t,r);return r-1>=e&&(n|=a(t,r-1)<<4),n}function u(t,e,r,i){for(var o=0,s=0,a=Math.min(t.length,r),c=e;c<a;c++){var u=t.charCodeAt(c)-48;o*=i,s=u>=49?u-49+10:u>=17?u-17+10:u,n(u>=0&&s<i,"Invalid character"),o+=s}return o}function h(t,e){t.words=e.words,t.length=e.length,t.negative=e.negative,t.red=e.red}if(o.isBN=function(t){return t instanceof o||null!==t&&"object"==typeof t&&t.constructor.wordSize===o.wordSize&&Array.isArray(t.words)},o.max=function(t,e){return t.cmp(e)>0?t:e},o.min=function(t,e){return t.cmp(e)<0?t:e},o.prototype._init=function(t,e,r){if("number"==typeof t)return this._initNumber(t,e,r);if("object"==typeof t)return this._initArray(t,e,r);"hex"===e&&(e=16),n(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<t.length&&(16===e?this._parseHex(t,i,r):(this._parseBase(t,e,i),"le"===r&&this._initArray(this.toArray(),e,r)))},o.prototype._initNumber=function(t,e,r){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(n(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),e,r)},o.prototype._initArray=function(t,e,r){if(n("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===r)for(i=t.length-1,o=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===r)for(i=0,o=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this._strip()},o.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,s=0;if("be"===r)for(n=t.length-1;n>=e;n-=2)i=c(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;else for(n=(t.length-e)%2==0?e+1:e;n<t.length;n+=2)i=c(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;this._strip()},o.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var o=t.length-r,s=o%n,a=Math.min(o,o-s)+r,c=0,h=r;h<a;h+=n)c=u(t,h,h+n,e),this.imuln(i),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==s){var l=1;for(c=u(t,h,t.length,e),h=0;h<s;h++)l*=e;this.imuln(l),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}this._strip()},o.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},o.prototype._move=function(t){h(t,this)},o.prototype.clone=function(){var t=new o(null);return this.copy(t),t},o.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},o.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{o.prototype[Symbol.for("nodejs.util.inspect.custom")]=l}catch(t){o.prototype.inspect=l}else o.prototype.inspect=l;function l(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var d=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function g(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],o=0|e.words[0],s=i*o,a=67108863&s,c=s/67108864|0;r.words[0]=a;for(var u=1;u<n;u++){for(var h=c>>>26,l=67108863&c,d=Math.min(u,e.length-1),f=Math.max(0,u-t.length+1);f<=d;f++){var p=u-f|0;h+=(s=(i=0|t.words[p])*(o=0|e.words[f])+l)/67108864|0,l=67108863&s}r.words[u]=0|l,c=0|h}return 0!==c?r.words[u]=0|c:r.length--,r._strip()}o.prototype.toString=function(t,e){var r;if(e=0|e||1,16===(t=t||10)||"hex"===t){r="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],c=(16777215&(a<<i|o)).toString(16);o=a>>>24-i&16777215,(i+=2)>=26&&(i-=26,s--),r=0!==o||s!==this.length-1?d[6-c.length]+c+r:c+r}for(0!==o&&(r=o.toString(16)+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(t===(0|t)&&t>=2&&t<=36){var u=f[t],h=p[t];r="";var l=this.clone();for(l.negative=0;!l.isZero();){var g=l.modrn(h).toString(t);r=(l=l.idivn(h)).isZero()?g+r:d[u-g.length]+g+r}for(this.isZero()&&(r="0"+r);r.length%e!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},o.prototype.toJSON=function(){return this.toString(16,2)},s&&(o.prototype.toBuffer=function(t,e){return this.toArrayLike(s,t,e)}),o.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},o.prototype.toArrayLike=function(t,e,r){this._strip();var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0");var s=function(t,e){return t.allocUnsafe?t.allocUnsafe(e):new t(e)}(t,o);return this["_toArrayLike"+("le"===e?"LE":"BE")](s,i),s},o.prototype._toArrayLikeLE=function(t,e){for(var r=0,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;t[r++]=255&s,r<t.length&&(t[r++]=s>>8&255),r<t.length&&(t[r++]=s>>16&255),6===o?(r<t.length&&(t[r++]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r<t.length)for(t[r++]=n;r<t.length;)t[r++]=0},o.prototype._toArrayLikeBE=function(t,e){for(var r=t.length-1,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;t[r--]=255&s,r>=0&&(t[r--]=s>>8&255),r>=0&&(t[r--]=s>>16&255),6===o?(r>=0&&(t[r--]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r>=0)for(t[r--]=n;r>=0;)t[r--]=0},Math.clz32?o.prototype._countBits=function(t){return 32-Math.clz32(t)}:o.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},o.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 8191&e||(r+=13,e>>>=13),127&e||(r+=7,e>>>=7),15&e||(r+=4,e>>>=4),3&e||(r+=2,e>>>=2),1&e||r++,r},o.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},o.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this._strip()},o.prototype.ior=function(t){return n(!(this.negative|t.negative)),this.iuor(t)},o.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},o.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},o.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this._strip()},o.prototype.iand=function(t){return n(!(this.negative|t.negative)),this.iuand(t)},o.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},o.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},o.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this._strip()},o.prototype.ixor=function(t){return n(!(this.negative|t.negative)),this.iuxor(t)},o.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},o.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},o.prototype.inotn=function(t){n("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),r=t%26;this._expand(e),r>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this._strip()},o.prototype.notn=function(t){return this.clone().inotn(t)},o.prototype.setn=function(t,e){n("number"==typeof t&&t>=0);var r=t/26|0,i=t%26;return this._expand(r+1),this.words[r]=e?this.words[r]|1<<i:this.words[r]&~(1<<i),this._strip()},o.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,o=0;o<n.length;o++)e=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<r.length;o++)e=(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},o.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var o=0,s=0;s<n.length;s++)o=(e=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this._strip()},o.prototype.sub=function(t){return this.clone().isub(t)};var m=function(t,e,r){var n,i,o,s=t.words,a=e.words,c=r.words,u=0,h=0|s[0],l=8191&h,d=h>>>13,f=0|s[1],p=8191&f,g=f>>>13,m=0|s[2],y=8191&m,b=m>>>13,w=0|s[3],k=8191&w,v=w>>>13,S=0|s[4],I=8191&S,A=S>>>13,_=0|s[5],E=8191&_,B=_>>>13,x=0|s[6],M=8191&x,P=x>>>13,R=0|s[7],T=8191&R,L=R>>>13,O=0|s[8],C=8191&O,z=O>>>13,N=0|s[9],U=8191&N,W=N>>>13,K=0|a[0],H=8191&K,q=K>>>13,D=0|a[1],F=8191&D,$=D>>>13,j=0|a[2],V=8191&j,Y=j>>>13,G=0|a[3],Z=8191&G,J=G>>>13,X=0|a[4],Q=8191&X,tt=X>>>13,et=0|a[5],rt=8191&et,nt=et>>>13,it=0|a[6],ot=8191&it,st=it>>>13,at=0|a[7],ct=8191&at,ut=at>>>13,ht=0|a[8],lt=8191&ht,dt=ht>>>13,ft=0|a[9],pt=8191&ft,gt=ft>>>13;r.negative=t.negative^e.negative,r.length=19;var mt=(u+(n=Math.imul(l,H))|0)+((8191&(i=(i=Math.imul(l,q))+Math.imul(d,H)|0))<<13)|0;u=((o=Math.imul(d,q))+(i>>>13)|0)+(mt>>>26)|0,mt&=67108863,n=Math.imul(p,H),i=(i=Math.imul(p,q))+Math.imul(g,H)|0,o=Math.imul(g,q);var yt=(u+(n=n+Math.imul(l,F)|0)|0)+((8191&(i=(i=i+Math.imul(l,$)|0)+Math.imul(d,F)|0))<<13)|0;u=((o=o+Math.imul(d,$)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(y,H),i=(i=Math.imul(y,q))+Math.imul(b,H)|0,o=Math.imul(b,q),n=n+Math.imul(p,F)|0,i=(i=i+Math.imul(p,$)|0)+Math.imul(g,F)|0,o=o+Math.imul(g,$)|0;var bt=(u+(n=n+Math.imul(l,V)|0)|0)+((8191&(i=(i=i+Math.imul(l,Y)|0)+Math.imul(d,V)|0))<<13)|0;u=((o=o+Math.imul(d,Y)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(k,H),i=(i=Math.imul(k,q))+Math.imul(v,H)|0,o=Math.imul(v,q),n=n+Math.imul(y,F)|0,i=(i=i+Math.imul(y,$)|0)+Math.imul(b,F)|0,o=o+Math.imul(b,$)|0,n=n+Math.imul(p,V)|0,i=(i=i+Math.imul(p,Y)|0)+Math.imul(g,V)|0,o=o+Math.imul(g,Y)|0;var wt=(u+(n=n+Math.imul(l,Z)|0)|0)+((8191&(i=(i=i+Math.imul(l,J)|0)+Math.imul(d,Z)|0))<<13)|0;u=((o=o+Math.imul(d,J)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(I,H),i=(i=Math.imul(I,q))+Math.imul(A,H)|0,o=Math.imul(A,q),n=n+Math.imul(k,F)|0,i=(i=i+Math.imul(k,$)|0)+Math.imul(v,F)|0,o=o+Math.imul(v,$)|0,n=n+Math.imul(y,V)|0,i=(i=i+Math.imul(y,Y)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,Y)|0,n=n+Math.imul(p,Z)|0,i=(i=i+Math.imul(p,J)|0)+Math.imul(g,Z)|0,o=o+Math.imul(g,J)|0;var kt=(u+(n=n+Math.imul(l,Q)|0)|0)+((8191&(i=(i=i+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;u=((o=o+Math.imul(d,tt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(E,H),i=(i=Math.imul(E,q))+Math.imul(B,H)|0,o=Math.imul(B,q),n=n+Math.imul(I,F)|0,i=(i=i+Math.imul(I,$)|0)+Math.imul(A,F)|0,o=o+Math.imul(A,$)|0,n=n+Math.imul(k,V)|0,i=(i=i+Math.imul(k,Y)|0)+Math.imul(v,V)|0,o=o+Math.imul(v,Y)|0,n=n+Math.imul(y,Z)|0,i=(i=i+Math.imul(y,J)|0)+Math.imul(b,Z)|0,o=o+Math.imul(b,J)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(g,Q)|0,o=o+Math.imul(g,tt)|0;var vt=(u+(n=n+Math.imul(l,rt)|0)|0)+((8191&(i=(i=i+Math.imul(l,nt)|0)+Math.imul(d,rt)|0))<<13)|0;u=((o=o+Math.imul(d,nt)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(M,H),i=(i=Math.imul(M,q))+Math.imul(P,H)|0,o=Math.imul(P,q),n=n+Math.imul(E,F)|0,i=(i=i+Math.imul(E,$)|0)+Math.imul(B,F)|0,o=o+Math.imul(B,$)|0,n=n+Math.imul(I,V)|0,i=(i=i+Math.imul(I,Y)|0)+Math.imul(A,V)|0,o=o+Math.imul(A,Y)|0,n=n+Math.imul(k,Z)|0,i=(i=i+Math.imul(k,J)|0)+Math.imul(v,Z)|0,o=o+Math.imul(v,J)|0,n=n+Math.imul(y,Q)|0,i=(i=i+Math.imul(y,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,n=n+Math.imul(p,rt)|0,i=(i=i+Math.imul(p,nt)|0)+Math.imul(g,rt)|0,o=o+Math.imul(g,nt)|0;var St=(u+(n=n+Math.imul(l,ot)|0)|0)+((8191&(i=(i=i+Math.imul(l,st)|0)+Math.imul(d,ot)|0))<<13)|0;u=((o=o+Math.imul(d,st)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(T,H),i=(i=Math.imul(T,q))+Math.imul(L,H)|0,o=Math.imul(L,q),n=n+Math.imul(M,F)|0,i=(i=i+Math.imul(M,$)|0)+Math.imul(P,F)|0,o=o+Math.imul(P,$)|0,n=n+Math.imul(E,V)|0,i=(i=i+Math.imul(E,Y)|0)+Math.imul(B,V)|0,o=o+Math.imul(B,Y)|0,n=n+Math.imul(I,Z)|0,i=(i=i+Math.imul(I,J)|0)+Math.imul(A,Z)|0,o=o+Math.imul(A,J)|0,n=n+Math.imul(k,Q)|0,i=(i=i+Math.imul(k,tt)|0)+Math.imul(v,Q)|0,o=o+Math.imul(v,tt)|0,n=n+Math.imul(y,rt)|0,i=(i=i+Math.imul(y,nt)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,nt)|0,n=n+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,st)|0)+Math.imul(g,ot)|0,o=o+Math.imul(g,st)|0;var It=(u+(n=n+Math.imul(l,ct)|0)|0)+((8191&(i=(i=i+Math.imul(l,ut)|0)+Math.imul(d,ct)|0))<<13)|0;u=((o=o+Math.imul(d,ut)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863,n=Math.imul(C,H),i=(i=Math.imul(C,q))+Math.imul(z,H)|0,o=Math.imul(z,q),n=n+Math.imul(T,F)|0,i=(i=i+Math.imul(T,$)|0)+Math.imul(L,F)|0,o=o+Math.imul(L,$)|0,n=n+Math.imul(M,V)|0,i=(i=i+Math.imul(M,Y)|0)+Math.imul(P,V)|0,o=o+Math.imul(P,Y)|0,n=n+Math.imul(E,Z)|0,i=(i=i+Math.imul(E,J)|0)+Math.imul(B,Z)|0,o=o+Math.imul(B,J)|0,n=n+Math.imul(I,Q)|0,i=(i=i+Math.imul(I,tt)|0)+Math.imul(A,Q)|0,o=o+Math.imul(A,tt)|0,n=n+Math.imul(k,rt)|0,i=(i=i+Math.imul(k,nt)|0)+Math.imul(v,rt)|0,o=o+Math.imul(v,nt)|0,n=n+Math.imul(y,ot)|0,i=(i=i+Math.imul(y,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,n=n+Math.imul(p,ct)|0,i=(i=i+Math.imul(p,ut)|0)+Math.imul(g,ct)|0,o=o+Math.imul(g,ut)|0;var At=(u+(n=n+Math.imul(l,lt)|0)|0)+((8191&(i=(i=i+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;u=((o=o+Math.imul(d,dt)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(U,H),i=(i=Math.imul(U,q))+Math.imul(W,H)|0,o=Math.imul(W,q),n=n+Math.imul(C,F)|0,i=(i=i+Math.imul(C,$)|0)+Math.imul(z,F)|0,o=o+Math.imul(z,$)|0,n=n+Math.imul(T,V)|0,i=(i=i+Math.imul(T,Y)|0)+Math.imul(L,V)|0,o=o+Math.imul(L,Y)|0,n=n+Math.imul(M,Z)|0,i=(i=i+Math.imul(M,J)|0)+Math.imul(P,Z)|0,o=o+Math.imul(P,J)|0,n=n+Math.imul(E,Q)|0,i=(i=i+Math.imul(E,tt)|0)+Math.imul(B,Q)|0,o=o+Math.imul(B,tt)|0,n=n+Math.imul(I,rt)|0,i=(i=i+Math.imul(I,nt)|0)+Math.imul(A,rt)|0,o=o+Math.imul(A,nt)|0,n=n+Math.imul(k,ot)|0,i=(i=i+Math.imul(k,st)|0)+Math.imul(v,ot)|0,o=o+Math.imul(v,st)|0,n=n+Math.imul(y,ct)|0,i=(i=i+Math.imul(y,ut)|0)+Math.imul(b,ct)|0,o=o+Math.imul(b,ut)|0,n=n+Math.imul(p,lt)|0,i=(i=i+Math.imul(p,dt)|0)+Math.imul(g,lt)|0,o=o+Math.imul(g,dt)|0;var _t=(u+(n=n+Math.imul(l,pt)|0)|0)+((8191&(i=(i=i+Math.imul(l,gt)|0)+Math.imul(d,pt)|0))<<13)|0;u=((o=o+Math.imul(d,gt)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(U,F),i=(i=Math.imul(U,$))+Math.imul(W,F)|0,o=Math.imul(W,$),n=n+Math.imul(C,V)|0,i=(i=i+Math.imul(C,Y)|0)+Math.imul(z,V)|0,o=o+Math.imul(z,Y)|0,n=n+Math.imul(T,Z)|0,i=(i=i+Math.imul(T,J)|0)+Math.imul(L,Z)|0,o=o+Math.imul(L,J)|0,n=n+Math.imul(M,Q)|0,i=(i=i+Math.imul(M,tt)|0)+Math.imul(P,Q)|0,o=o+Math.imul(P,tt)|0,n=n+Math.imul(E,rt)|0,i=(i=i+Math.imul(E,nt)|0)+Math.imul(B,rt)|0,o=o+Math.imul(B,nt)|0,n=n+Math.imul(I,ot)|0,i=(i=i+Math.imul(I,st)|0)+Math.imul(A,ot)|0,o=o+Math.imul(A,st)|0,n=n+Math.imul(k,ct)|0,i=(i=i+Math.imul(k,ut)|0)+Math.imul(v,ct)|0,o=o+Math.imul(v,ut)|0,n=n+Math.imul(y,lt)|0,i=(i=i+Math.imul(y,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(u+(n=n+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,gt)|0)+Math.imul(g,pt)|0))<<13)|0;u=((o=o+Math.imul(g,gt)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(U,V),i=(i=Math.imul(U,Y))+Math.imul(W,V)|0,o=Math.imul(W,Y),n=n+Math.imul(C,Z)|0,i=(i=i+Math.imul(C,J)|0)+Math.imul(z,Z)|0,o=o+Math.imul(z,J)|0,n=n+Math.imul(T,Q)|0,i=(i=i+Math.imul(T,tt)|0)+Math.imul(L,Q)|0,o=o+Math.imul(L,tt)|0,n=n+Math.imul(M,rt)|0,i=(i=i+Math.imul(M,nt)|0)+Math.imul(P,rt)|0,o=o+Math.imul(P,nt)|0,n=n+Math.imul(E,ot)|0,i=(i=i+Math.imul(E,st)|0)+Math.imul(B,ot)|0,o=o+Math.imul(B,st)|0,n=n+Math.imul(I,ct)|0,i=(i=i+Math.imul(I,ut)|0)+Math.imul(A,ct)|0,o=o+Math.imul(A,ut)|0,n=n+Math.imul(k,lt)|0,i=(i=i+Math.imul(k,dt)|0)+Math.imul(v,lt)|0,o=o+Math.imul(v,dt)|0;var Bt=(u+(n=n+Math.imul(y,pt)|0)|0)+((8191&(i=(i=i+Math.imul(y,gt)|0)+Math.imul(b,pt)|0))<<13)|0;u=((o=o+Math.imul(b,gt)|0)+(i>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,n=Math.imul(U,Z),i=(i=Math.imul(U,J))+Math.imul(W,Z)|0,o=Math.imul(W,J),n=n+Math.imul(C,Q)|0,i=(i=i+Math.imul(C,tt)|0)+Math.imul(z,Q)|0,o=o+Math.imul(z,tt)|0,n=n+Math.imul(T,rt)|0,i=(i=i+Math.imul(T,nt)|0)+Math.imul(L,rt)|0,o=o+Math.imul(L,nt)|0,n=n+Math.imul(M,ot)|0,i=(i=i+Math.imul(M,st)|0)+Math.imul(P,ot)|0,o=o+Math.imul(P,st)|0,n=n+Math.imul(E,ct)|0,i=(i=i+Math.imul(E,ut)|0)+Math.imul(B,ct)|0,o=o+Math.imul(B,ut)|0,n=n+Math.imul(I,lt)|0,i=(i=i+Math.imul(I,dt)|0)+Math.imul(A,lt)|0,o=o+Math.imul(A,dt)|0;var xt=(u+(n=n+Math.imul(k,pt)|0)|0)+((8191&(i=(i=i+Math.imul(k,gt)|0)+Math.imul(v,pt)|0))<<13)|0;u=((o=o+Math.imul(v,gt)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(U,Q),i=(i=Math.imul(U,tt))+Math.imul(W,Q)|0,o=Math.imul(W,tt),n=n+Math.imul(C,rt)|0,i=(i=i+Math.imul(C,nt)|0)+Math.imul(z,rt)|0,o=o+Math.imul(z,nt)|0,n=n+Math.imul(T,ot)|0,i=(i=i+Math.imul(T,st)|0)+Math.imul(L,ot)|0,o=o+Math.imul(L,st)|0,n=n+Math.imul(M,ct)|0,i=(i=i+Math.imul(M,ut)|0)+Math.imul(P,ct)|0,o=o+Math.imul(P,ut)|0,n=n+Math.imul(E,lt)|0,i=(i=i+Math.imul(E,dt)|0)+Math.imul(B,lt)|0,o=o+Math.imul(B,dt)|0;var Mt=(u+(n=n+Math.imul(I,pt)|0)|0)+((8191&(i=(i=i+Math.imul(I,gt)|0)+Math.imul(A,pt)|0))<<13)|0;u=((o=o+Math.imul(A,gt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(U,rt),i=(i=Math.imul(U,nt))+Math.imul(W,rt)|0,o=Math.imul(W,nt),n=n+Math.imul(C,ot)|0,i=(i=i+Math.imul(C,st)|0)+Math.imul(z,ot)|0,o=o+Math.imul(z,st)|0,n=n+Math.imul(T,ct)|0,i=(i=i+Math.imul(T,ut)|0)+Math.imul(L,ct)|0,o=o+Math.imul(L,ut)|0,n=n+Math.imul(M,lt)|0,i=(i=i+Math.imul(M,dt)|0)+Math.imul(P,lt)|0,o=o+Math.imul(P,dt)|0;var Pt=(u+(n=n+Math.imul(E,pt)|0)|0)+((8191&(i=(i=i+Math.imul(E,gt)|0)+Math.imul(B,pt)|0))<<13)|0;u=((o=o+Math.imul(B,gt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,n=Math.imul(U,ot),i=(i=Math.imul(U,st))+Math.imul(W,ot)|0,o=Math.imul(W,st),n=n+Math.imul(C,ct)|0,i=(i=i+Math.imul(C,ut)|0)+Math.imul(z,ct)|0,o=o+Math.imul(z,ut)|0,n=n+Math.imul(T,lt)|0,i=(i=i+Math.imul(T,dt)|0)+Math.imul(L,lt)|0,o=o+Math.imul(L,dt)|0;var Rt=(u+(n=n+Math.imul(M,pt)|0)|0)+((8191&(i=(i=i+Math.imul(M,gt)|0)+Math.imul(P,pt)|0))<<13)|0;u=((o=o+Math.imul(P,gt)|0)+(i>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,n=Math.imul(U,ct),i=(i=Math.imul(U,ut))+Math.imul(W,ct)|0,o=Math.imul(W,ut),n=n+Math.imul(C,lt)|0,i=(i=i+Math.imul(C,dt)|0)+Math.imul(z,lt)|0,o=o+Math.imul(z,dt)|0;var Tt=(u+(n=n+Math.imul(T,pt)|0)|0)+((8191&(i=(i=i+Math.imul(T,gt)|0)+Math.imul(L,pt)|0))<<13)|0;u=((o=o+Math.imul(L,gt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,n=Math.imul(U,lt),i=(i=Math.imul(U,dt))+Math.imul(W,lt)|0,o=Math.imul(W,dt);var Lt=(u+(n=n+Math.imul(C,pt)|0)|0)+((8191&(i=(i=i+Math.imul(C,gt)|0)+Math.imul(z,pt)|0))<<13)|0;u=((o=o+Math.imul(z,gt)|0)+(i>>>13)|0)+(Lt>>>26)|0,Lt&=67108863;var Ot=(u+(n=Math.imul(U,pt))|0)+((8191&(i=(i=Math.imul(U,gt))+Math.imul(W,pt)|0))<<13)|0;return u=((o=Math.imul(W,gt))+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,c[0]=mt,c[1]=yt,c[2]=bt,c[3]=wt,c[4]=kt,c[5]=vt,c[6]=St,c[7]=It,c[8]=At,c[9]=_t,c[10]=Et,c[11]=Bt,c[12]=xt,c[13]=Mt,c[14]=Pt,c[15]=Rt,c[16]=Tt,c[17]=Lt,c[18]=Ot,0!==u&&(c[19]=u,r.length++),r};function y(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,c=Math.min(o,e.length-1),u=Math.max(0,o-t.length+1);u<=c;u++){var h=o-u,l=(0|t.words[h])*(0|e.words[u]),d=67108863&l;a=67108863&(d=d+a|0),i+=(s=(s=s+(l/67108864|0)|0)+(d>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r._strip()}function b(t,e,r){return y(t,e,r)}function w(t,e){this.x=t,this.y=e}Math.imul||(m=g),o.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?m(this,t,e):r<63?g(this,t,e):r<1024?y(this,t,e):b(this,t,e)},w.prototype.makeRBT=function(t){for(var e=new Array(t),r=o.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},w.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},w.prototype.permute=function(t,e,r,n,i,o){for(var s=0;s<o;s++)n[s]=e[t[s]],i[s]=r[t[s]]},w.prototype.transform=function(t,e,r,n,i,o){this.permute(o,t,e,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,c=Math.cos(2*Math.PI/a),u=Math.sin(2*Math.PI/a),h=0;h<i;h+=a)for(var l=c,d=u,f=0;f<s;f++){var p=r[h+f],g=n[h+f],m=r[h+f+s],y=n[h+f+s],b=l*m-d*y;y=l*y+d*m,m=b,r[h+f]=p+m,n[h+f]=g+y,r[h+f+s]=p-m,n[h+f+s]=g-y,f!==a&&(b=c*l-u*d,d=c*d+u*l,l=b)}},w.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},w.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},w.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},w.prototype.convert13b=function(t,e,r,i){for(var o=0,s=0;s<e;s++)o+=0|t[s],r[2*s]=8191&o,o>>>=13,r[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<i;++s)r[s]=0;n(0===o),n(!(-8192&o))},w.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},w.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),c=new Array(n),u=new Array(n),h=new Array(n),l=new Array(n),d=r.words;d.length=n,this.convert13b(t.words,t.length,s,n),this.convert13b(e.words,e.length,u,n),this.transform(s,o,a,c,n,i),this.transform(u,o,h,l,n,i);for(var f=0;f<n;f++){var p=a[f]*h[f]-c[f]*l[f];c[f]=a[f]*l[f]+c[f]*h[f],a[f]=p}return this.conjugate(a,c,n),this.transform(a,c,d,o,n,i),this.conjugate(d,o,n),this.normalize13b(d,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r._strip()},o.prototype.mul=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},o.prototype.mulf=function(t){var e=new o(null);return e.words=new Array(this.length+t.length),b(this,t,e)},o.prototype.imul=function(t){return this.clone().mulTo(t,this)},o.prototype.imuln=function(t){var e=t<0;e&&(t=-t),n("number"==typeof t),n(t<67108864);for(var r=0,i=0;i<this.length;i++){var o=(0|this.words[i])*t,s=(67108863&o)+(67108863&r);r>>=26,r+=o/67108864|0,r+=s>>>26,this.words[i]=67108863&s}return 0!==r&&(this.words[i]=r,this.length++),e?this.ineg():this},o.prototype.muln=function(t){return this.clone().imuln(t)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=t.words[n]>>>i&1}return e}(t);if(0===e.length)return new o(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var i=r.sqr();n<e.length;n++,i=i.sqr())0!==e[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(t){n("number"==typeof t&&t>=0);var e,r=t%26,i=(t-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,c=(0|this.words[e])-a<<r;this.words[e]=c|s,s=a>>>26-r}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this._strip()},o.prototype.ishln=function(t){return n(0===this.negative),this.iushln(t)},o.prototype.iushrn=function(t,e,r){var i;n("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,c=r;if(i-=s,i=Math.max(0,i),c){for(var u=0;u<s;u++)c.words[u]=this.words[u];c.length=s}if(0===s);else if(this.length>s)for(this.length-=s,u=0;u<this.length;u++)this.words[u]=this.words[u+s];else this.words[0]=0,this.length=1;var h=0;for(u=this.length-1;u>=0&&(0!==h||u>=i);u--){var l=0|this.words[u];this.words[u]=h<<26-o|l>>>o,h=l&a}return c&&0!==h&&(c.words[c.length++]=h),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},o.prototype.ishrn=function(t,e,r){return n(0===this.negative),this.iushrn(t,e,r)},o.prototype.shln=function(t){return this.clone().ishln(t)},o.prototype.ushln=function(t){return this.clone().iushln(t)},o.prototype.shrn=function(t){return this.clone().ishrn(t)},o.prototype.ushrn=function(t){return this.clone().iushrn(t)},o.prototype.testn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26,i=1<<e;return!(this.length<=r||!(this.words[r]&i))},o.prototype.imaskn=function(t){n("number"==typeof t&&t>=0);var e=t%26,r=(t-e)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==e&&r++,this.length=Math.min(r,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this._strip()},o.prototype.maskn=function(t){return this.clone().imaskn(t)},o.prototype.iaddn=function(t){return n("number"==typeof t),n(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},o.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},o.prototype.isubn=function(t){if(n("number"==typeof t),n(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},o.prototype.addn=function(t){return this.clone().iaddn(t)},o.prototype.subn=function(t){return this.clone().isubn(t)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(t,e,r){var i,o,s=t.length+r;this._expand(s);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+r])+a;var c=(0|t.words[i])*e;a=((o-=67108863&c)>>26)-(c/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)a=(o=(0|this.words[i+r])+a)>>26,this.words[i+r]=67108863&o;if(0===a)return this._strip();for(n(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this._strip()},o.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),i=t,s=0|i.words[i.length-1];0!=(r=26-this._countBits(s))&&(i=i.ushln(r),n.iushln(r),s=0|i.words[i.length-1]);var a,c=n.length-i.length;if("mod"!==e){(a=new o(null)).length=c+1,a.words=new Array(a.length);for(var u=0;u<a.length;u++)a.words[u]=0}var h=n.clone()._ishlnsubmul(i,1,c);0===h.negative&&(n=h,a&&(a.words[c]=1));for(var l=c-1;l>=0;l--){var d=67108864*(0|n.words[i.length+l])+(0|n.words[i.length+l-1]);for(d=Math.min(d/s|0,67108863),n._ishlnsubmul(i,d,l);0!==n.negative;)d--,n.negative=0,n._ishlnsubmul(i,1,l),n.isZero()||(n.negative^=1);a&&(a.words[l]=d)}return a&&a._strip(),n._strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},o.prototype.divmod=function(t,e,r){return n(!t.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(i=a.div.neg()),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.iadd(t)),{div:i,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(i=a.div.neg()),{div:i,mod:a.mod}):this.negative&t.negative?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),r&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new o(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new o(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new o(this.modrn(t.words[0]))}:this._wordDiv(t,e);var i,s,a},o.prototype.div=function(t){return this.divmod(t,"div",!1).div},o.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},o.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},o.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},o.prototype.modrn=function(t){var e=t<0;e&&(t=-t),n(t<=67108863);for(var r=(1<<26)%t,i=0,o=this.length-1;o>=0;o--)i=(r*i+(0|this.words[o]))%t;return e?-i:i},o.prototype.modn=function(t){return this.modrn(t)},o.prototype.idivn=function(t){var e=t<0;e&&(t=-t),n(t<=67108863);for(var r=0,i=this.length-1;i>=0;i--){var o=(0|this.words[i])+67108864*r;this.words[i]=o/t|0,r=o%t}return this._strip(),e?this.ineg():this},o.prototype.divn=function(t){return this.clone().idivn(t)},o.prototype.egcd=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i=new o(1),s=new o(0),a=new o(0),c=new o(1),u=0;e.isEven()&&r.isEven();)e.iushrn(1),r.iushrn(1),++u;for(var h=r.clone(),l=e.clone();!e.isZero();){for(var d=0,f=1;!(e.words[0]&f)&&d<26;++d,f<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(i.isOdd()||s.isOdd())&&(i.iadd(h),s.isub(l)),i.iushrn(1),s.iushrn(1);for(var p=0,g=1;!(r.words[0]&g)&&p<26;++p,g<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(a.isOdd()||c.isOdd())&&(a.iadd(h),c.isub(l)),a.iushrn(1),c.iushrn(1);e.cmp(r)>=0?(e.isub(r),i.isub(a),s.isub(c)):(r.isub(e),a.isub(i),c.isub(s))}return{a,b:c,gcd:r.iushln(u)}},o.prototype._invmp=function(t){n(0===t.negative),n(!t.isZero());var e=this,r=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var i,s=new o(1),a=new o(0),c=r.clone();e.cmpn(1)>0&&r.cmpn(1)>0;){for(var u=0,h=1;!(e.words[0]&h)&&u<26;++u,h<<=1);if(u>0)for(e.iushrn(u);u-- >0;)s.isOdd()&&s.iadd(c),s.iushrn(1);for(var l=0,d=1;!(r.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(r.iushrn(l);l-- >0;)a.isOdd()&&a.iadd(c),a.iushrn(1);e.cmp(r)>=0?(e.isub(r),s.isub(a)):(r.isub(e),a.isub(s))}return(i=0===e.cmpn(1)?s:a).cmpn(0)<0&&i.iadd(t),i},o.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var o=e;e=r,r=o}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},o.prototype.invm=function(t){return this.egcd(t).a.umod(t)},o.prototype.isEven=function(){return!(1&this.words[0])},o.prototype.isOdd=function(){return!(1&~this.words[0])},o.prototype.andln=function(t){return this.words[0]&t},o.prototype.bincn=function(t){n("number"==typeof t);var e=t%26,r=(t-e)/26,i=1<<e;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,s=r;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(t){var e,r=t<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this._strip(),this.length>1)e=1;else{r&&(t=-t),n(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},o.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},o.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},o.prototype.gtn=function(t){return 1===this.cmpn(t)},o.prototype.gt=function(t){return 1===this.cmp(t)},o.prototype.gten=function(t){return this.cmpn(t)>=0},o.prototype.gte=function(t){return this.cmp(t)>=0},o.prototype.ltn=function(t){return-1===this.cmpn(t)},o.prototype.lt=function(t){return-1===this.cmp(t)},o.prototype.lten=function(t){return this.cmpn(t)<=0},o.prototype.lte=function(t){return this.cmp(t)<=0},o.prototype.eqn=function(t){return 0===this.cmpn(t)},o.prototype.eq=function(t){return 0===this.cmp(t)},o.red=function(t){return new E(t)},o.prototype.toRed=function(t){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(t){return this.red=t,this},o.prototype.forceRed=function(t){return n(!this.red,"Already a number in reduction context"),this._forceRed(t)},o.prototype.redAdd=function(t){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},o.prototype.redIAdd=function(t){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},o.prototype.redSub=function(t){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},o.prototype.redISub=function(t){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},o.prototype.redShl=function(t){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},o.prototype.redMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},o.prototype.redIMul=function(t){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(t){return n(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var k={k256:null,p224:null,p192:null,p25519:null};function v(t,e){this.name=t,this.p=new o(e,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function S(){v.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function I(){v.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function A(){v.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){v.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function E(t){if("string"==typeof t){var e=o._prime(t);this.m=e.p,this.prime=e}else n(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function B(t){E.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}v.prototype._tmp=function(){var t=new o(null);return t.words=new Array(Math.ceil(this.n/13)),t},v.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},v.prototype.split=function(t,e){t.iushrn(this.n,0,e)},v.prototype.imulK=function(t){return t.imul(this.k)},i(S,v),S.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},S.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(I,v),i(A,v),i(_,v),_.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},o._prime=function(t){if(k[t])return k[t];var e;if("k256"===t)e=new S;else if("p224"===t)e=new I;else if("p192"===t)e=new A;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return k[t]=e,e},E.prototype._verify1=function(t){n(0===t.negative,"red works only with positives"),n(t.red,"red works only with red numbers")},E.prototype._verify2=function(t,e){n(!(t.negative|e.negative),"red works only with positives"),n(t.red&&t.red===e.red,"red works only with red numbers")},E.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(h(t,t.umod(this.m)._forceRed(this)),t)},E.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},E.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},E.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},E.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},E.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},E.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},E.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},E.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},E.prototype.isqr=function(t){return this.imul(t,t.clone())},E.prototype.sqr=function(t){return this.mul(t,t)},E.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(n(e%2==1),3===e){var r=this.m.add(new o(1)).iushrn(2);return this.pow(t,r)}for(var i=this.m.subn(1),s=0;!i.isZero()&&0===i.andln(1);)s++,i.iushrn(1);n(!i.isZero());var a=new o(1).toRed(this),c=a.redNeg(),u=this.m.subn(1).iushrn(1),h=this.m.bitLength();for(h=new o(2*h*h).toRed(this);0!==this.pow(h,u).cmp(c);)h.redIAdd(c);for(var l=this.pow(h,i),d=this.pow(t,i.addn(1).iushrn(1)),f=this.pow(t,i),p=s;0!==f.cmp(a);){for(var g=f,m=0;0!==g.cmp(a);m++)g=g.redSqr();n(m<p);var y=this.pow(l,new o(1).iushln(p-m-1));d=d.redMul(y),l=y.redSqr(),f=f.redMul(l),p=m}return d},E.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},E.prototype.pow=function(t,e){if(e.isZero())return new o(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var i=r[0],s=0,a=0,c=e.bitLength()%26;for(0===c&&(c=26),n=e.length-1;n>=0;n--){for(var u=e.words[n],h=c-1;h>=0;h--){var l=u>>h&1;i!==r[0]&&(i=this.sqr(i)),0!==l||0!==s?(s<<=1,s|=l,(4==++a||0===n&&0===h)&&(i=this.mul(i,r[s]),a=0,s=0)):a=0}c=26}return i},E.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},E.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},o.mont=function(t){return new B(t)},i(B,E),B.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},B.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},B.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},B.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new o(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),s=i;return i.cmp(this.m)>=0?s=i.isub(this.m):i.cmpn(0)<0&&(s=i.iadd(this.m)),s._forceRed(this)},B.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=r.nmd(t),this)},462:(t,e,r)=>{"use strict";var n=r(861).Buffer;t.exports=function(t){if(t.length>=255)throw new TypeError("Alphabet too long");for(var e=new Uint8Array(256),r=0;r<e.length;r++)e[r]=255;for(var i=0;i<t.length;i++){var o=t.charAt(i),s=o.charCodeAt(0);if(255!==e[s])throw new TypeError(o+" is ambiguous");e[s]=i}var a=t.length,c=t.charAt(0),u=Math.log(a)/Math.log(256),h=Math.log(256)/Math.log(a);function l(t){if("string"!=typeof t)throw new TypeError("Expected String");if(0===t.length)return n.alloc(0);for(var r=0,i=0,o=0;t[r]===c;)i++,r++;for(var s=(t.length-r)*u+1>>>0,h=new Uint8Array(s);r<t.length;){var l=t.charCodeAt(r);if(l>255)return;var d=e[l];if(255===d)return;for(var f=0,p=s-1;(0!==d||f<o)&&-1!==p;p--,f++)d+=a*h[p]>>>0,h[p]=d%256>>>0,d=d/256>>>0;if(0!==d)throw new Error("Non-zero carry");o=f,r++}for(var g=s-o;g!==s&&0===h[g];)g++;var m=n.allocUnsafe(i+(s-g));m.fill(0,0,i);for(var y=i;g!==s;)m[y++]=h[g++];return m}return{encode:function(e){if((Array.isArray(e)||e instanceof Uint8Array)&&(e=n.from(e)),!n.isBuffer(e))throw new TypeError("Expected Buffer");if(0===e.length)return"";for(var r=0,i=0,o=0,s=e.length;o!==s&&0===e[o];)o++,r++;for(var u=(s-o)*h+1>>>0,l=new Uint8Array(u);o!==s;){for(var d=e[o],f=0,p=u-1;(0!==d||f<i)&&-1!==p;p--,f++)d+=256*l[p]>>>0,l[p]=d%a>>>0,d=d/a>>>0;if(0!==d)throw new Error("Non-zero carry");i=f,o++}for(var g=u-i;g!==u&&0===l[g];)g++;for(var m=c.repeat(r);g<u;++g)m+=t.charAt(l[g]);return m},decodeUnsafe:l,decode:function(t){var e=l(t);if(e)return e;throw new Error("Non-base"+a+" character")}}}},466:(t,e,r)=>{var n=r(621);t.exports=n("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")},526:(t,e)=>{"use strict";e.byteLength=function(t){var e=a(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,o=a(t),s=o[0],c=o[1],u=new i(function(t,e,r){return 3*(e+r)/4-r}(0,s,c)),h=0,l=c>0?s-4:s;for(r=0;r<l;r+=4)e=n[t.charCodeAt(r)]<<18|n[t.charCodeAt(r+1)]<<12|n[t.charCodeAt(r+2)]<<6|n[t.charCodeAt(r+3)],u[h++]=e>>16&255,u[h++]=e>>8&255,u[h++]=255&e;return 2===c&&(e=n[t.charCodeAt(r)]<<2|n[t.charCodeAt(r+1)]>>4,u[h++]=255&e),1===c&&(e=n[t.charCodeAt(r)]<<10|n[t.charCodeAt(r+1)]<<4|n[t.charCodeAt(r+2)]>>2,u[h++]=e>>8&255,u[h++]=255&e),u},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=16383,a=0,u=n-i;a<u;a+=s)o.push(c(t,a,a+s>u?u:a+s));return 1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"=")),o.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0;s<64;++s)r[s]=o[s],n[o.charCodeAt(s)]=s;function a(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function c(t,e,n){for(var i,o,s=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},601:(t,e,r)=>{"use strict";e.I0=e.DH=e.NX=e.u8=e.cY=void 0,e.av=e.O6=e.w3=e.Wg=void 0;const n=r(287);function i(t){if(!(t instanceof Uint8Array))throw new TypeError("b must be a Uint8Array")}function o(t){return i(t),n.Buffer.from(t.buffer,t.byteOffset,t.length)}class s{constructor(t,e){if(!Number.isInteger(t))throw new TypeError("span must be an integer");this.span=t,this.property=e}makeDestinationObject(){return{}}getSpan(t,e){if(0>this.span)throw new RangeError("indeterminate span");return this.span}replicate(t){const e=Object.create(this.constructor.prototype);return Object.assign(e,this),e.property=t,e}fromArray(t){}}function a(t,e){return e.property?t+"["+e.property+"]":t}class c extends s{isCount(){throw new Error("ExternalLayout is abstract")}}class u extends c{constructor(t,e=0,r){if(!(t instanceof s))throw new TypeError("layout must be a Layout");if(!Number.isInteger(e))throw new TypeError("offset must be integer or undefined");super(t.span,r||t.property),this.layout=t,this.offset=e}isCount(){return this.layout instanceof h||this.layout instanceof l}decode(t,e=0){return this.layout.decode(t,e+this.offset)}encode(t,e,r=0){return this.layout.encode(t,e,r+this.offset)}}class h extends s{constructor(t,e){if(super(t,e),6<this.span)throw new RangeError("span must not exceed 6 bytes")}decode(t,e=0){return o(t).readUIntLE(e,this.span)}encode(t,e,r=0){return o(e).writeUIntLE(t,r,this.span),this.span}}class l extends s{constructor(t,e){if(super(t,e),6<this.span)throw new RangeError("span must not exceed 6 bytes")}decode(t,e=0){return o(t).readUIntBE(e,this.span)}encode(t,e,r=0){return o(e).writeUIntBE(t,r,this.span),this.span}}const d=Math.pow(2,32);function f(t){const e=Math.floor(t/d);return{hi32:e,lo32:t-e*d}}function p(t,e){return t*d+e}class g extends s{constructor(t){super(8,t)}decode(t,e=0){const r=o(t),n=r.readUInt32LE(e);return p(r.readUInt32LE(e+4),n)}encode(t,e,r=0){const n=f(t),i=o(e);return i.writeUInt32LE(n.lo32,r),i.writeUInt32LE(n.hi32,r+4),8}}class m extends s{constructor(t){super(8,t)}decode(t,e=0){const r=o(t),n=r.readUInt32LE(e);return p(r.readInt32LE(e+4),n)}encode(t,e,r=0){const n=f(t),i=o(e);return i.writeUInt32LE(n.lo32,r),i.writeInt32LE(n.hi32,r+4),8}}class y extends s{constructor(t,e,r){if(!(t instanceof s))throw new TypeError("elementLayout must be a Layout");if(!(e instanceof c&&e.isCount()||Number.isInteger(e)&&0<=e))throw new TypeError("count must be non-negative integer or an unsigned integer ExternalLayout");let n=-1;!(e instanceof c)&&0<t.span&&(n=e*t.span),super(n,r),this.elementLayout=t,this.count=e}getSpan(t,e=0){if(0<=this.span)return this.span;let r=0,n=this.count;if(n instanceof c&&(n=n.decode(t,e)),0<this.elementLayout.span)r=n*this.elementLayout.span;else{let i=0;for(;i<n;)r+=this.elementLayout.getSpan(t,e+r),++i}return r}decode(t,e=0){const r=[];let n=0,i=this.count;for(i instanceof c&&(i=i.decode(t,e));n<i;)r.push(this.elementLayout.decode(t,e)),e+=this.elementLayout.getSpan(t,e),n+=1;return r}encode(t,e,r=0){const n=this.elementLayout,i=t.reduce(((t,i)=>t+n.encode(i,e,r+t)),0);return this.count instanceof c&&this.count.encode(t.length,e,r),i}}class b extends s{constructor(t,e,r){if(!Array.isArray(t)||!t.reduce(((t,e)=>t&&e instanceof s),!0))throw new TypeError("fields must be array of Layout instances");"boolean"==typeof e&&void 0===r&&(r=e,e=void 0);for(const e of t)if(0>e.span&&void 0===e.property)throw new Error("fields cannot contain unnamed variable-length layout");let n=-1;try{n=t.reduce(((t,e)=>t+e.getSpan()),0)}catch(t){}super(n,e),this.fields=t,this.decodePrefixes=!!r}getSpan(t,e=0){if(0<=this.span)return this.span;let r=0;try{r=this.fields.reduce(((r,n)=>{const i=n.getSpan(t,e);return e+=i,r+i}),0)}catch(t){throw new RangeError("indeterminate span")}return r}decode(t,e=0){i(t);const r=this.makeDestinationObject();for(const n of this.fields)if(void 0!==n.property&&(r[n.property]=n.decode(t,e)),e+=n.getSpan(t,e),this.decodePrefixes&&t.length===e)break;return r}encode(t,e,r=0){const n=r;let i=0,o=0;for(const n of this.fields){let s=n.span;if(o=0<s?s:0,void 0!==n.property){const i=t[n.property];void 0!==i&&(o=n.encode(i,e,r),0>s&&(s=n.getSpan(e,r)))}i=r,r+=s}return i+o-n}fromArray(t){const e=this.makeDestinationObject();for(const r of this.fields)void 0!==r.property&&0<t.length&&(e[r.property]=t.shift());return e}layoutFor(t){if("string"!=typeof t)throw new TypeError("property must be string");for(const e of this.fields)if(e.property===t)return e}offsetOf(t){if("string"!=typeof t)throw new TypeError("property must be string");let e=0;for(const r of this.fields){if(r.property===t)return e;0>r.span?e=-1:0<=e&&(e+=r.span)}}}class w extends s{constructor(t,e){if(!(t instanceof c&&t.isCount()||Number.isInteger(t)&&0<=t))throw new TypeError("length must be positive integer or an unsigned integer ExternalLayout");let r=-1;t instanceof c||(r=t),super(r,e),this.length=t}getSpan(t,e){let r=this.span;return 0>r&&(r=this.length.decode(t,e)),r}decode(t,e=0){let r=this.span;return 0>r&&(r=this.length.decode(t,e)),o(t).slice(e,e+r)}encode(t,e,r){let n=this.length;if(this.length instanceof c&&(n=t.length),!(t instanceof Uint8Array&&n===t.length))throw new TypeError(a("Blob.encode",this)+" requires (length "+n+") Uint8Array as src");if(r+n>e.length)throw new RangeError("encoding overruns Uint8Array");const i=o(t);return o(e).write(i.toString("hex"),r,n,"hex"),this.length instanceof c&&this.length.encode(n,e,r),n}}e.cY=(t,e,r)=>new u(t,e,r),e.u8=t=>new h(1,t),e.NX=t=>new h(2,t),e.DH=t=>new h(4,t),e.I0=t=>new g(t),e.Wg=t=>new m(t),e.w3=(t,e,r)=>new b(t,e,r),e.O6=(t,e,r)=>new y(t,e,r),e.av=(t,e)=>new w(t,e)},621:(t,e,r)=>{"use strict";var n=r(861).Buffer;t.exports=function(t){if(t.length>=255)throw new TypeError("Alphabet too long");for(var e=new Uint8Array(256),r=0;r<e.length;r++)e[r]=255;for(var i=0;i<t.length;i++){var o=t.charAt(i),s=o.charCodeAt(0);if(255!==e[s])throw new TypeError(o+" is ambiguous");e[s]=i}var a=t.length,c=t.charAt(0),u=Math.log(a)/Math.log(256),h=Math.log(256)/Math.log(a);function l(t){if("string"!=typeof t)throw new TypeError("Expected String");if(0===t.length)return n.alloc(0);for(var r=0,i=0,o=0;t[r]===c;)i++,r++;for(var s=(t.length-r)*u+1>>>0,h=new Uint8Array(s);r<t.length;){var l=t.charCodeAt(r);if(l>255)return;var d=e[l];if(255===d)return;for(var f=0,p=s-1;(0!==d||f<o)&&-1!==p;p--,f++)d+=a*h[p]>>>0,h[p]=d%256>>>0,d=d/256>>>0;if(0!==d)throw new Error("Non-zero carry");o=f,r++}for(var g=s-o;g!==s&&0===h[g];)g++;var m=n.allocUnsafe(i+(s-g));m.fill(0,0,i);for(var y=i;g!==s;)m[y++]=h[g++];return m}return{encode:function(e){if((Array.isArray(e)||e instanceof Uint8Array)&&(e=n.from(e)),!n.isBuffer(e))throw new TypeError("Expected Buffer");if(0===e.length)return"";for(var r=0,i=0,o=0,s=e.length;o!==s&&0===e[o];)o++,r++;for(var u=(s-o)*h+1>>>0,l=new Uint8Array(u);o!==s;){for(var d=e[o],f=0,p=u-1;(0!==d||f<i)&&-1!==p;p--,f++)d+=256*l[p]>>>0,l[p]=d%a>>>0,d=d/a>>>0;if(0!==d)throw new Error("Non-zero carry");i=f,o++}for(var g=u-i;g!==u&&0===l[g];)g++;for(var m=c.repeat(r);g<u;++g)m+=t.charAt(l[g]);return m},decodeUnsafe:l,decode:function(t){var e=l(t);if(e)return e;throw new Error("Non-base"+a+" character")}}}},755:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.hasOwnProperty.call(t,r)&&n(e,t,r);return i(e,t),e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.deserializeUnchecked=e.deserialize=e.serialize=e.BinaryReader=e.BinaryWriter=e.BorshError=e.baseDecode=e.baseEncode=void 0;const c=a(r(404)),u=a(r(989)),h=s(r(281)),l=new("function"!=typeof TextDecoder?h.TextDecoder:TextDecoder)("utf-8",{fatal:!0});e.baseEncode=function(t){return"string"==typeof t&&(t=Buffer.from(t,"utf8")),u.default.encode(Buffer.from(t))},e.baseDecode=function(t){return Buffer.from(u.default.decode(t))};const d=1024;class f extends Error{constructor(t){super(t),this.fieldPath=[],this.originalMessage=t}addToFieldPath(t){this.fieldPath.splice(0,0,t),this.message=this.originalMessage+": "+this.fieldPath.join(".")}}e.BorshError=f;class p{constructor(){this.buf=Buffer.alloc(d),this.length=0}maybeResize(){this.buf.length<16+this.length&&(this.buf=Buffer.concat([this.buf,Buffer.alloc(d)]))}writeU8(t){this.maybeResize(),this.buf.writeUInt8(t,this.length),this.length+=1}writeU16(t){this.maybeResize(),this.buf.writeUInt16LE(t,this.length),this.length+=2}writeU32(t){this.maybeResize(),this.buf.writeUInt32LE(t,this.length),this.length+=4}writeU64(t){this.maybeResize(),this.writeBuffer(Buffer.from(new c.default(t).toArray("le",8)))}writeU128(t){this.maybeResize(),this.writeBuffer(Buffer.from(new c.default(t).toArray("le",16)))}writeU256(t){this.maybeResize(),this.writeBuffer(Buffer.from(new c.default(t).toArray("le",32)))}writeU512(t){this.maybeResize(),this.writeBuffer(Buffer.from(new c.default(t).toArray("le",64)))}writeBuffer(t){this.buf=Buffer.concat([Buffer.from(this.buf.subarray(0,this.length)),t,Buffer.alloc(d)]),this.length+=t.length}writeString(t){this.maybeResize();const e=Buffer.from(t,"utf8");this.writeU32(e.length),this.writeBuffer(e)}writeFixedArray(t){this.writeBuffer(Buffer.from(t))}writeArray(t,e){this.maybeResize(),this.writeU32(t.length);for(const r of t)this.maybeResize(),e(r)}toArray(){return this.buf.subarray(0,this.length)}}function g(t,e,r){const n=r.value;r.value=function(...t){try{return n.apply(this,t)}catch(t){if(t instanceof RangeError){const e=t.code;if(["ERR_BUFFER_OUT_OF_BOUNDS","ERR_OUT_OF_RANGE"].indexOf(e)>=0)throw new f("Reached the end of buffer when deserializing")}throw t}}}e.BinaryWriter=p;class m{constructor(t){this.buf=t,this.offset=0}readU8(){const t=this.buf.readUInt8(this.offset);return this.offset+=1,t}readU16(){const t=this.buf.readUInt16LE(this.offset);return this.offset+=2,t}readU32(){const t=this.buf.readUInt32LE(this.offset);return this.offset+=4,t}readU64(){const t=this.readBuffer(8);return new c.default(t,"le")}readU128(){const t=this.readBuffer(16);return new c.default(t,"le")}readU256(){const t=this.readBuffer(32);return new c.default(t,"le")}readU512(){const t=this.readBuffer(64);return new c.default(t,"le")}readBuffer(t){if(this.offset+t>this.buf.length)throw new f(`Expected buffer length ${t} isn't within bounds`);const e=this.buf.slice(this.offset,this.offset+t);return this.offset+=t,e}readString(){const t=this.readU32(),e=this.readBuffer(t);try{return l.decode(e)}catch(t){throw new f(`Error decoding UTF-8 string: ${t}`)}}readFixedArray(t){return new Uint8Array(this.readBuffer(t))}readArray(t){const e=this.readU32(),r=Array();for(let n=0;n<e;++n)r.push(t());return r}}function y(t){return t.charAt(0).toUpperCase()+t.slice(1)}function b(t,e,r,n,i){try{if("string"==typeof n)i[`write${y(n)}`](r);else if(n instanceof Array)if("number"==typeof n[0]){if(r.length!==n[0])throw new f(`Expecting byte array of length ${n[0]}, but got ${r.length} bytes`);i.writeFixedArray(r)}else if(2===n.length&&"number"==typeof n[1]){if(r.length!==n[1])throw new f(`Expecting byte array of length ${n[1]}, but got ${r.length} bytes`);for(let e=0;e<n[1];e++)b(t,null,r[e],n[0],i)}else i.writeArray(r,(r=>{b(t,e,r,n[0],i)}));else if(void 0!==n.kind)switch(n.kind){case"option":null==r?i.writeU8(0):(i.writeU8(1),b(t,e,r,n.type,i));break;case"map":i.writeU32(r.size),r.forEach(((r,o)=>{b(t,e,o,n.key,i),b(t,e,r,n.value,i)}));break;default:throw new f(`FieldType ${n} unrecognized`)}else w(t,r,i)}catch(t){throw t instanceof f&&t.addToFieldPath(e),t}}function w(t,e,r){if("function"==typeof e.borshSerialize)return void e.borshSerialize(r);const n=t.get(e.constructor);if(!n)throw new f(`Class ${e.constructor.name} is missing in schema`);if("struct"===n.kind)n.fields.map((([n,i])=>{b(t,n,e[n],i,r)}));else{if("enum"!==n.kind)throw new f(`Unexpected schema kind: ${n.kind} for ${e.constructor.name}`);{const i=e[n.field];for(let o=0;o<n.values.length;++o){const[s,a]=n.values[o];if(s===i){r.writeU8(o),b(t,s,e[s],a,r);break}}}}}function k(t,e,r,n){try{if("string"==typeof r)return n[`read${y(r)}`]();if(r instanceof Array){if("number"==typeof r[0])return n.readFixedArray(r[0]);if("number"==typeof r[1]){const e=[];for(let i=0;i<r[1];i++)e.push(k(t,null,r[0],n));return e}return n.readArray((()=>k(t,e,r[0],n)))}if("option"===r.kind)return n.readU8()?k(t,e,r.type,n):void 0;if("map"===r.kind){let i=new Map;const o=n.readU32();for(let s=0;s<o;s++){const o=k(t,e,r.key,n),s=k(t,e,r.value,n);i.set(o,s)}return i}return v(t,r,n)}catch(t){throw t instanceof f&&t.addToFieldPath(e),t}}function v(t,e,r){if("function"==typeof e.borshDeserialize)return e.borshDeserialize(r);const n=t.get(e);if(!n)throw new f(`Class ${e.name} is missing in schema`);if("struct"===n.kind){const n={};for(const[i,o]of t.get(e).fields)n[i]=k(t,i,o,r);return new e(n)}if("enum"===n.kind){const i=r.readU8();if(i>=n.values.length)throw new f(`Enum index: ${i} is out of range`);const[o,s]=n.values[i],a=k(t,o,s,r);return new e({[o]:a})}throw new f(`Unexpected schema kind: ${n.kind} for ${e.constructor.name}`)}o([g],m.prototype,"readU8",null),o([g],m.prototype,"readU16",null),o([g],m.prototype,"readU32",null),o([g],m.prototype,"readU64",null),o([g],m.prototype,"readU128",null),o([g],m.prototype,"readU256",null),o([g],m.prototype,"readU512",null),o([g],m.prototype,"readString",null),o([g],m.prototype,"readFixedArray",null),o([g],m.prototype,"readArray",null),e.BinaryReader=m,e.serialize=function(t,e,r=p){const n=new r;return w(t,e,n),n.toArray()},e.deserialize=function(t,e,r,n=m){const i=new n(r),o=v(t,e,i);if(i.offset<r.length)throw new f(`Unexpected ${r.length-i.offset} bytes after deserialized data`);return o},e.deserializeUnchecked=function(t,e,r,n=m){return v(t,e,new n(r))}},790:()=>{},861:(t,e,r)=>{var n=r(287),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=n:(o(n,e),e.Buffer=s),s.prototype=Object.create(i.prototype),o(i,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},989:(t,e,r)=>{var n=r(462);t.exports=n("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=r(317);const{Connection:e,PublicKey:n}=r(343),i=document.querySelector(":root");let o="https://api.mainnet-beta.solana.com";const s=document.querySelector(".info"),a=document.querySelector(".transactions"),c=document.querySelector(".footer"),u=document.querySelector(".wallet-input");document.querySelector(".wallet-btn").onclick=()=>{""!=u.value&&async function(r){let i;i=new e(o,"confirmed");const u=new n(r);document.querySelector(".info__item").innerHTML=await(0,t.getNetworkInfo)(i),document.querySelector(".info__item-account").innerHTML=await(0,t.getAccountInfo)(i,u)+"<br>"+await(0,t.getBalance)(i,u);const h=await(0,t.getRecentTransactions)(i,u);for(let t of document.querySelectorAll(".transactions__item"))t.remove();if(0!=h.length){for(let t of h)document.querySelector(".transactions__block").insertAdjacentHTML("afterbegin",t);a.style.display="block"}s.style.display="block",c.style.display="block"}(u.value)};const h=document.querySelector(".header__devnet-btn");let l=!1;h.onclick=()=>{l=!l,console.debug("Change isDevnet to "+l),l?(h.innerText="DevNET",i.style.setProperty("--net-btn-color","#f2aff7"),i.style.setProperty("--net-btn-hover-color","#f2d2f4"),o="https://api.devnet.solana.com"):(h.innerText="MainNET",i.style.setProperty("--net-btn-color","#80e2da"),i.style.setProperty("--net-btn-hover-color","#82f6ec"),o="https://api.mainnet-beta.solana.com")},document.querySelector(".transaction__block-empty"),document.querySelector(".transactions__item")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy9qYXlzb24vbGliL2NsaWVudC9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL2JpZ2ludC1idWZmZXIvZGlzdC9icm93c2VyLmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL2V2ZW50ZW1pdHRlcjMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy90ZXh0LWVuY29kaW5nLXV0Zi04L2xpYi9lbmNvZGluZy5saWIuanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL2pheXNvbi9saWIvZ2VuZXJhdGVSZXF1ZXN0LmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vc3JjL3dlYjMuanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19hc3NlcnQuanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvLmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL3V0aWxzLmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19tZC5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fdTY0LmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL3NoYTUxMi5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9hYnN0cmFjdC91dGlscy5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9hYnN0cmFjdC9tb2R1bGFyLmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvZXNtL2Fic3RyYWN0L2N1cnZlLmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvZXNtL2Fic3RyYWN0L2Vkd2FyZHMuanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vZWQyNTUxOS5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9zaGEyNTYuanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvc3VwZXJzdHJ1Y3QvZGlzdC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvcnBjLXdlYnNvY2tldHMvZGlzdC9pbmRleC5icm93c2VyLm1qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9zaGEzLmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2htYWMuanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vX3Nob3J0d191dGlscy5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9zZWNwMjU2azEuanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvQHNvbGFuYS93ZWIzLmpzL2xpYi9pbmRleC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvYm9yc2gvbm9kZV9tb2R1bGVzL2Jhc2UteC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvQHNvbGFuYS93ZWIzLmpzL25vZGVfbW9kdWxlcy9iczU4L2luZGV4LmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy9Ac29sYW5hL2J1ZmZlci1sYXlvdXQvbGliL0xheW91dC5qcyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL25vZGVfbW9kdWxlcy9Ac29sYW5hL3dlYjMuanMvbm9kZV9tb2R1bGVzL2Jhc2UteC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvLi9ub2RlX21vZHVsZXMvYm9yc2gvbGliL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hLy4vbm9kZV9tb2R1bGVzL2JvcnNoL25vZGVfbW9kdWxlcy9iczU4L2luZGV4LmpzIiwid2VicGFjazovL3Rlc3Rfc29sYW5hL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3Rlc3Rfc29sYW5hL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3Rlc3Rfc29sYW5hL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Rlc3Rfc29sYW5hL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdGVzdF9zb2xhbmEvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly90ZXN0X3NvbGFuYS8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV1aWQgPSByZXF1aXJlKCd1dWlkJykudjQ7XG5jb25zdCBnZW5lcmF0ZVJlcXVlc3QgPSByZXF1aXJlKCcuLi8uLi9nZW5lcmF0ZVJlcXVlc3QnKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciBmb3IgYSBKYXlzb24gQnJvd3NlciBDbGllbnQgdGhhdCBkb2VzIG5vdCBkZXBlbmQgYW55IG5vZGUuanMgY29yZSBsaWJyYXJpZXNcbiAqIEBjbGFzcyBDbGllbnRCcm93c2VyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsU2VydmVyIE1ldGhvZCB0aGF0IGNhbGxzIHRoZSBzZXJ2ZXIsIHJlY2VpdmVzIHRoZSBzdHJpbmdpZmllZCByZXF1ZXN0IGFuZCBhIHJlZ3VsYXIgbm9kZS1zdHlsZSBjYWxsYmFja1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMucmV2aXZlcl0gUmV2aXZlciBmdW5jdGlvbiBmb3IgSlNPTlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMucmVwbGFjZXJdIFJlcGxhY2VyIGZ1bmN0aW9uIGZvciBKU09OXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMudmVyc2lvbj0yXSBKU09OLVJQQyB2ZXJzaW9uIHRvIHVzZSAoMXwyKVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuZ2VuZXJhdG9yXSBGdW5jdGlvbiB0byB1c2UgZm9yIGdlbmVyYXRpbmcgcmVxdWVzdCBJRHNcbiAqICBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm5vdGlmaWNhdGlvbklkTnVsbD1mYWxzZV0gV2hlbiB0cnVlLCB2ZXJzaW9uIDIgcmVxdWVzdHMgd2lsbCBzZXQgaWQgdG8gbnVsbCBpbnN0ZWFkIG9mIG9taXR0aW5nIGl0XG4gKiBAcmV0dXJuIHtDbGllbnRCcm93c2VyfVxuICovXG5jb25zdCBDbGllbnRCcm93c2VyID0gZnVuY3Rpb24oY2FsbFNlcnZlciwgb3B0aW9ucykge1xuICBpZighKHRoaXMgaW5zdGFuY2VvZiBDbGllbnRCcm93c2VyKSkge1xuICAgIHJldHVybiBuZXcgQ2xpZW50QnJvd3NlcihjYWxsU2VydmVyLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHRoaXMub3B0aW9ucyA9IHtcbiAgICByZXZpdmVyOiB0eXBlb2Ygb3B0aW9ucy5yZXZpdmVyICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMucmV2aXZlciA6IG51bGwsXG4gICAgcmVwbGFjZXI6IHR5cGVvZiBvcHRpb25zLnJlcGxhY2VyICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMucmVwbGFjZXIgOiBudWxsLFxuICAgIGdlbmVyYXRvcjogdHlwZW9mIG9wdGlvbnMuZ2VuZXJhdG9yICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuZ2VuZXJhdG9yIDogZnVuY3Rpb24oKSB7IHJldHVybiB1dWlkKCk7IH0sXG4gICAgdmVyc2lvbjogdHlwZW9mIG9wdGlvbnMudmVyc2lvbiAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLnZlcnNpb24gOiAyLFxuICAgIG5vdGlmaWNhdGlvbklkTnVsbDogdHlwZW9mIG9wdGlvbnMubm90aWZpY2F0aW9uSWROdWxsID09PSAnYm9vbGVhbicgPyBvcHRpb25zLm5vdGlmaWNhdGlvbklkTnVsbCA6IGZhbHNlLFxuICB9O1xuXG4gIHRoaXMuY2FsbFNlcnZlciA9IGNhbGxTZXJ2ZXI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsaWVudEJyb3dzZXI7XG5cbi8qKlxuICogIENyZWF0ZXMgYSByZXF1ZXN0IGFuZCBkaXNwYXRjaGVzIGl0IGlmIGdpdmVuIGEgY2FsbGJhY2suXG4gKiAgQHBhcmFtIHtTdHJpbmd8QXJyYXl9IG1ldGhvZCBBIGJhdGNoIHJlcXVlc3QgaWYgcGFzc2VkIGFuIEFycmF5LCBvciBhIG1ldGhvZCBuYW1lIGlmIHBhc3NlZCBhIFN0cmluZ1xuICogIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBbcGFyYW1zXSBQYXJhbWV0ZXJzIGZvciB0aGUgbWV0aG9kXG4gKiAgQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBbaWRdIE9wdGlvbmFsIGlkLiBJZiB1bmRlZmluZWQgYW4gaWQgd2lsbCBiZSBnZW5lcmF0ZWQuIElmIG51bGwgaXQgY3JlYXRlcyBhIG5vdGlmaWNhdGlvbiByZXF1ZXN0XG4gKiAgQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBSZXF1ZXN0IGNhbGxiYWNrLiBJZiBzcGVjaWZpZWQsIGV4ZWN1dGVzIHRoZSByZXF1ZXN0IHJhdGhlciB0aGFuIG9ubHkgcmV0dXJuaW5nIGl0LlxuICogIEB0aHJvd3Mge1R5cGVFcnJvcn0gSW52YWxpZCBwYXJhbWV0ZXJzXG4gKiAgQHJldHVybiB7T2JqZWN0fSBKU09OLVJQQyAxLjAgb3IgMi4wIGNvbXBhdGlibGUgcmVxdWVzdFxuICovXG5DbGllbnRCcm93c2VyLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24obWV0aG9kLCBwYXJhbXMsIGlkLCBjYWxsYmFjaykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgbGV0IHJlcXVlc3QgPSBudWxsO1xuXG4gIC8vIGlzIHRoaXMgYSBiYXRjaCByZXF1ZXN0P1xuICBjb25zdCBpc0JhdGNoID0gQXJyYXkuaXNBcnJheShtZXRob2QpICYmIHR5cGVvZiBwYXJhbXMgPT09ICdmdW5jdGlvbic7XG5cbiAgaWYgKHRoaXMub3B0aW9ucy52ZXJzaW9uID09PSAxICYmIGlzQmF0Y2gpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdKU09OLVJQQyAxLjAgZG9lcyBub3Qgc3VwcG9ydCBiYXRjaGluZycpO1xuICB9XG5cbiAgLy8gaXMgdGhpcyBhIHJhdyByZXF1ZXN0P1xuICBjb25zdCBpc1JhdyA9ICFpc0JhdGNoICYmIG1ldGhvZCAmJiB0eXBlb2YgbWV0aG9kID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcGFyYW1zID09PSAnZnVuY3Rpb24nO1xuXG4gIGlmKGlzQmF0Y2ggfHwgaXNSYXcpIHtcbiAgICBjYWxsYmFjayA9IHBhcmFtcztcbiAgICByZXF1ZXN0ID0gbWV0aG9kO1xuICB9IGVsc2Uge1xuICAgIGlmKHR5cGVvZiBpZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBpZDtcbiAgICAgIC8vIHNwZWNpZmljYWxseSB1bmRlZmluZWQgYmVjYXVzZSBcIm51bGxcIiBpcyBhIG5vdGlmaWNhdGlvbiByZXF1ZXN0XG4gICAgICBpZCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBoYXNDYWxsYmFjayA9IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJztcblxuICAgIHRyeSB7XG4gICAgICByZXF1ZXN0ID0gZ2VuZXJhdGVSZXF1ZXN0KG1ldGhvZCwgcGFyYW1zLCBpZCwge1xuICAgICAgICBnZW5lcmF0b3I6IHRoaXMub3B0aW9ucy5nZW5lcmF0b3IsXG4gICAgICAgIHZlcnNpb246IHRoaXMub3B0aW9ucy52ZXJzaW9uLFxuICAgICAgICBub3RpZmljYXRpb25JZE51bGw6IHRoaXMub3B0aW9ucy5ub3RpZmljYXRpb25JZE51bGwsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgaWYoaGFzQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgLy8gbm8gY2FsbGJhY2sgbWVhbnMgd2Ugc2hvdWxkIGp1c3QgcmV0dXJuIGEgcmF3IHJlcXVlc3RcbiAgICBpZighaGFzQ2FsbGJhY2spIHtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cblxuICB9XG5cbiAgbGV0IG1lc3NhZ2U7XG4gIHRyeSB7XG4gICAgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QsIHRoaXMub3B0aW9ucy5yZXBsYWNlcik7XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gIH1cblxuICB0aGlzLmNhbGxTZXJ2ZXIobWVzc2FnZSwgZnVuY3Rpb24oZXJyLCByZXNwb25zZSkge1xuICAgIHNlbGYuX3BhcnNlUmVzcG9uc2UoZXJyLCByZXNwb25zZSwgY2FsbGJhY2spO1xuICB9KTtcblxuICAvLyBhbHdheXMgcmV0dXJuIHRoZSByYXcgcmVxdWVzdFxuICByZXR1cm4gcmVxdWVzdDtcbn07XG5cbi8qKlxuICogUGFyc2VzIGEgcmVzcG9uc2UgZnJvbSBhIHNlcnZlclxuICogQHBhcmFtIHtPYmplY3R9IGVyciBFcnJvciB0byBwYXNzIG9uIHRoYXQgaXMgdW5yZWxhdGVkIHRvIHRoZSBhY3R1YWwgcmVzcG9uc2VcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXNwb25zZVRleHQgSlNPTi1SUEMgMS4wIG9yIDIuMCByZXNwb25zZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdGhhdCB3aWxsIHJlY2VpdmUgZGlmZmVyZW50IGFyZ3VtZW50cyBkZXBlbmRpbmcgb24gdGhlIGFtb3VudCBvZiBwYXJhbWV0ZXJzXG4gKiBAcHJpdmF0ZVxuICovXG5DbGllbnRCcm93c2VyLnByb3RvdHlwZS5fcGFyc2VSZXNwb25zZSA9IGZ1bmN0aW9uKGVyciwgcmVzcG9uc2VUZXh0LCBjYWxsYmFjaykge1xuICBpZihlcnIpIHtcbiAgICBjYWxsYmFjayhlcnIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmKCFyZXNwb25zZVRleHQpIHtcbiAgICAvLyBlbXB0eSByZXNwb25zZSB0ZXh0LCBhc3N1bWUgdGhhdCBpcyBjb3JyZWN0IGJlY2F1c2UgaXQgY291bGQgYmUgYVxuICAgIC8vIG5vdGlmaWNhdGlvbiB3aGljaCBqYXlzb24gZG9lcyBub3QgZ2l2ZSBhbnkgYm9keSBmb3JcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIGxldCByZXNwb25zZTtcbiAgdHJ5IHtcbiAgICByZXNwb25zZSA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0LCB0aGlzLm9wdGlvbnMucmV2aXZlcik7XG4gIH0gY2F0Y2goZXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gIH1cblxuICBpZihjYWxsYmFjay5sZW5ndGggPT09IDMpIHtcbiAgICAvLyBpZiBjYWxsYmFjayBsZW5ndGggaXMgMywgd2Ugc3BsaXQgY2FsbGJhY2sgYXJndW1lbnRzIG9uIGVycm9yIGFuZCByZXNwb25zZVxuXG4gICAgLy8gaXMgYmF0Y2ggcmVzcG9uc2U/XG4gICAgaWYoQXJyYXkuaXNBcnJheShyZXNwb25zZSkpIHtcblxuICAgICAgLy8gbmVjY2VzYXJ5IHRvIHNwbGl0IHN0cmljdGx5IG9uIHZhbGlkaXR5IGFjY29yZGluZyB0byBzcGVjIGhlcmVcbiAgICAgIGNvbnN0IGlzRXJyb3IgPSBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiByZXMuZXJyb3IgIT09ICd1bmRlZmluZWQnO1xuICAgICAgfTtcblxuICAgICAgY29uc3QgaXNOb3RFcnJvciA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgcmV0dXJuICFpc0Vycm9yKHJlcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UuZmlsdGVyKGlzRXJyb3IpLCByZXNwb25zZS5maWx0ZXIoaXNOb3RFcnJvcikpO1xuICAgIFxuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vIHNwbGl0IHJlZ2FyZGxlc3Mgb2YgdmFsaWRpdHlcbiAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCByZXNwb25zZS5lcnJvciwgcmVzcG9uc2UucmVzdWx0KTtcbiAgICBcbiAgICB9XG4gIFxuICB9XG5cbiAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xubGV0IGNvbnZlcnRlcjtcbi8qKlxuICogQ29udmVydCBhIGxpdHRsZS1lbmRpYW4gYnVmZmVyIGludG8gYSBCaWdJbnQuXG4gKiBAcGFyYW0gYnVmIFRoZSBsaXR0bGUtZW5kaWFuIGJ1ZmZlciB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyBBIEJpZ0ludCB3aXRoIHRoZSBsaXR0bGUtZW5kaWFuIHJlcHJlc2VudGF0aW9uIG9mIGJ1Zi5cbiAqL1xuZnVuY3Rpb24gdG9CaWdJbnRMRShidWYpIHtcbiAgICB7XG4gICAgICAgIGNvbnN0IHJldmVyc2VkID0gQnVmZmVyLmZyb20oYnVmKTtcbiAgICAgICAgcmV2ZXJzZWQucmV2ZXJzZSgpO1xuICAgICAgICBjb25zdCBoZXggPSByZXZlcnNlZC50b1N0cmluZygnaGV4Jyk7XG4gICAgICAgIGlmIChoZXgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gQmlnSW50KDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCaWdJbnQoYDB4JHtoZXh9YCk7XG4gICAgfVxuICAgIHJldHVybiBjb252ZXJ0ZXIudG9CaWdJbnQoYnVmLCBmYWxzZSk7XG59XG5leHBvcnRzLnRvQmlnSW50TEUgPSB0b0JpZ0ludExFO1xuLyoqXG4gKiBDb252ZXJ0IGEgYmlnLWVuZGlhbiBidWZmZXIgaW50byBhIEJpZ0ludFxuICogQHBhcmFtIGJ1ZiBUaGUgYmlnLWVuZGlhbiBidWZmZXIgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIEEgQmlnSW50IHdpdGggdGhlIGJpZy1lbmRpYW4gcmVwcmVzZW50YXRpb24gb2YgYnVmLlxuICovXG5mdW5jdGlvbiB0b0JpZ0ludEJFKGJ1Zikge1xuICAgIHtcbiAgICAgICAgY29uc3QgaGV4ID0gYnVmLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBCaWdJbnQoMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJpZ0ludChgMHgke2hleH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnZlcnRlci50b0JpZ0ludChidWYsIHRydWUpO1xufVxuZXhwb3J0cy50b0JpZ0ludEJFID0gdG9CaWdJbnRCRTtcbi8qKlxuICogQ29udmVydCBhIEJpZ0ludCB0byBhIGxpdHRsZS1lbmRpYW4gYnVmZmVyLlxuICogQHBhcmFtIG51bSAgIFRoZSBCaWdJbnQgdG8gY29udmVydC5cbiAqIEBwYXJhbSB3aWR0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRoYXQgdGhlIHJlc3VsdGluZyBidWZmZXIgc2hvdWxkIGJlLlxuICogQHJldHVybnMgQSBsaXR0bGUtZW5kaWFuIGJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBudW0uXG4gKi9cbmZ1bmN0aW9uIHRvQnVmZmVyTEUobnVtLCB3aWR0aCkge1xuICAgIHtcbiAgICAgICAgY29uc3QgaGV4ID0gbnVtLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oaGV4LnBhZFN0YXJ0KHdpZHRoICogMiwgJzAnKS5zbGljZSgwLCB3aWR0aCAqIDIpLCAnaGV4Jyk7XG4gICAgICAgIGJ1ZmZlci5yZXZlcnNlKCk7XG4gICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgfVxuICAgIC8vIEFsbG9jYXRpb24gaXMgZG9uZSBoZXJlLCBzaW5jZSBpdCBpcyBzbG93ZXIgdXNpbmcgbmFwaSBpbiBDXG4gICAgcmV0dXJuIGNvbnZlcnRlci5mcm9tQmlnSW50KG51bSwgQnVmZmVyLmFsbG9jVW5zYWZlKHdpZHRoKSwgZmFsc2UpO1xufVxuZXhwb3J0cy50b0J1ZmZlckxFID0gdG9CdWZmZXJMRTtcbi8qKlxuICogQ29udmVydCBhIEJpZ0ludCB0byBhIGJpZy1lbmRpYW4gYnVmZmVyLlxuICogQHBhcmFtIG51bSAgIFRoZSBCaWdJbnQgdG8gY29udmVydC5cbiAqIEBwYXJhbSB3aWR0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRoYXQgdGhlIHJlc3VsdGluZyBidWZmZXIgc2hvdWxkIGJlLlxuICogQHJldHVybnMgQSBiaWctZW5kaWFuIGJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiBudW0uXG4gKi9cbmZ1bmN0aW9uIHRvQnVmZmVyQkUobnVtLCB3aWR0aCkge1xuICAgIHtcbiAgICAgICAgY29uc3QgaGV4ID0gbnVtLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGhleC5wYWRTdGFydCh3aWR0aCAqIDIsICcwJykuc2xpY2UoMCwgd2lkdGggKiAyKSwgJ2hleCcpO1xuICAgIH1cbiAgICByZXR1cm4gY29udmVydGVyLmZyb21CaWdJbnQobnVtLCBCdWZmZXIuYWxsb2NVbnNhZmUod2lkdGgpLCB0cnVlKTtcbn1cbmV4cG9ydHMudG9CdWZmZXJCRSA9IHRvQnVmZmVyQkU7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG4gICwgcHJlZml4ID0gJ34nO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIHN0b3JhZ2UgZm9yIG91ciBgRUVgIG9iamVjdHMuXG4gKiBBbiBgRXZlbnRzYCBpbnN0YW5jZSBpcyBhIHBsYWluIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIGFyZSBldmVudCBuYW1lcy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEV2ZW50cygpIHt9XG5cbi8vXG4vLyBXZSB0cnkgdG8gbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuIEluIHNvbWUgZW5naW5lcyBjcmVhdGluZyBhblxuLy8gaW5zdGFuY2UgaW4gdGhpcyB3YXkgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgZGlyZWN0bHkuXG4vLyBJZiBgT2JqZWN0LmNyZWF0ZShudWxsKWAgaXMgbm90IHN1cHBvcnRlZCB3ZSBwcmVmaXggdGhlIGV2ZW50IG5hbWVzIHdpdGggYVxuLy8gY2hhcmFjdGVyIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBidWlsdC1pbiBvYmplY3QgcHJvcGVydGllcyBhcmUgbm90XG4vLyBvdmVycmlkZGVuIG9yIHVzZWQgYXMgYW4gYXR0YWNrIHZlY3Rvci5cbi8vXG5pZiAoT2JqZWN0LmNyZWF0ZSkge1xuICBFdmVudHMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAvL1xuICAvLyBUaGlzIGhhY2sgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGBfX3Byb3RvX19gIHByb3BlcnR5IGlzIHN0aWxsIGluaGVyaXRlZCBpblxuICAvLyBzb21lIG9sZCBicm93c2VycyBsaWtlIEFuZHJvaWQgNCwgaVBob25lIDUuMSwgT3BlcmEgMTEgYW5kIFNhZmFyaSA1LlxuICAvL1xuICBpZiAoIW5ldyBFdmVudHMoKS5fX3Byb3RvX18pIHByZWZpeCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudGF0aW9uIG9mIGEgc2luZ2xlIGV2ZW50IGxpc3RlbmVyLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFRShmbiwgY29udGV4dCwgb25jZSkge1xuICB0aGlzLmZuID0gZm47XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMub25jZSA9IG9uY2UgfHwgZmFsc2U7XG59XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IG5ldyBFRShmbiwgY29udGV4dCB8fCBlbWl0dGVyLCBvbmNlKVxuICAgICwgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdKSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IGxpc3RlbmVyLCBlbWl0dGVyLl9ldmVudHNDb3VudCsrO1xuICBlbHNlIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0uZm4pIGVtaXR0ZXIuX2V2ZW50c1tldnRdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gW2VtaXR0ZXIuX2V2ZW50c1tldnRdLCBsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIGVtaXR0ZXI7XG59XG5cbi8qKlxuICogQ2xlYXIgZXZlbnQgYnkgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2dCBUaGUgRXZlbnQgbmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNsZWFyRXZlbnQoZW1pdHRlciwgZXZ0KSB7XG4gIGlmICgtLWVtaXR0ZXIuX2V2ZW50c0NvdW50ID09PSAwKSBlbWl0dGVyLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIGVsc2UgZGVsZXRlIGVtaXR0ZXIuX2V2ZW50c1tldnRdO1xufVxuXG4vKipcbiAqIE1pbmltYWwgYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlIHRoYXQgaXMgbW9sZGVkIGFnYWluc3QgdGhlIE5vZGUuanNcbiAqIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgbGlzdGluZyB0aGUgZXZlbnRzIGZvciB3aGljaCB0aGUgZW1pdHRlciBoYXMgcmVnaXN0ZXJlZFxuICogbGlzdGVuZXJzLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgdmFyIG5hbWVzID0gW11cbiAgICAsIGV2ZW50c1xuICAgICwgbmFtZTtcblxuICBpZiAodGhpcy5fZXZlbnRzQ291bnQgPT09IDApIHJldHVybiBuYW1lcztcblxuICBmb3IgKG5hbWUgaW4gKGV2ZW50cyA9IHRoaXMuX2V2ZW50cykpIHtcbiAgICBpZiAoaGFzLmNhbGwoZXZlbnRzLCBuYW1lKSkgbmFtZXMucHVzaChwcmVmaXggPyBuYW1lLnNsaWNlKDEpIDogbmFtZSk7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHJldHVybiBuYW1lcy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhldmVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lcztcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSByZWdpc3RlcmVkIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFoYW5kbGVycykgcmV0dXJuIFtdO1xuICBpZiAoaGFuZGxlcnMuZm4pIHJldHVybiBbaGFuZGxlcnMuZm5dO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoLCBlZSA9IG5ldyBBcnJheShsKTsgaSA8IGw7IGkrKykge1xuICAgIGVlW2ldID0gaGFuZGxlcnNbaV0uZm47XG4gIH1cblxuICByZXR1cm4gZWU7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtYmVyIG9mIGxpc3RlbmVycy5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gbGlzdGVuZXJDb3VudChldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiAwO1xuICBpZiAobGlzdGVuZXJzLmZuKSByZXR1cm4gMTtcbiAgcmV0dXJuIGxpc3RlbmVycy5sZW5ndGg7XG59O1xuXG4vKipcbiAqIENhbGxzIGVhY2ggb2YgdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGVsc2UgYGZhbHNlYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF1cbiAgICAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGFyZ3NcbiAgICAsIGk7XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChsaXN0ZW5lcnMub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSksIHRydWU7XG4gICAgICBjYXNlIDM6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzKSwgdHJ1ZTtcbiAgICAgIGNhc2UgNTogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCksIHRydWU7XG4gICAgICBjYXNlIDY6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZuLmFwcGx5KGxpc3RlbmVycy5jb250ZXh0LCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aFxuICAgICAgLCBqO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobGlzdGVuZXJzW2ldLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyc1tpXS5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAxOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCk7IGJyZWFrO1xuICAgICAgICBjYXNlIDI6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSk7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIpOyBicmVhaztcbiAgICAgICAgY2FzZSA0OiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyLCBhMyk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGlmICghYXJncykgZm9yIChqID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaiAtIDFdID0gYXJndW1lbnRzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyc1tpXS5mbi5hcHBseShsaXN0ZW5lcnNbaV0uY29udGV4dCwgYXJncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogQWRkIGEgb25lLXRpbWUgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGZuLCBjb250ZXh0KSB7XG4gIHJldHVybiBhZGRMaXN0ZW5lcih0aGlzLCBldmVudCwgZm4sIGNvbnRleHQsIHRydWUpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGxpc3RlbmVycyBvZiBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBtYXRjaCB0aGlzIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IE9ubHkgcmVtb3ZlIHRoZSBsaXN0ZW5lcnMgdGhhdCBoYXZlIHRoaXMgY29udGV4dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBPbmx5IHJlbW92ZSBvbmUtdGltZSBsaXN0ZW5lcnMuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudCwgZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIHRoaXM7XG4gIGlmICghZm4pIHtcbiAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2dF07XG5cbiAgaWYgKGxpc3RlbmVycy5mbikge1xuICAgIGlmIChcbiAgICAgIGxpc3RlbmVycy5mbiA9PT0gZm4gJiZcbiAgICAgICghb25jZSB8fCBsaXN0ZW5lcnMub25jZSkgJiZcbiAgICAgICghY29udGV4dCB8fCBsaXN0ZW5lcnMuY29udGV4dCA9PT0gY29udGV4dClcbiAgICApIHtcbiAgICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGV2ZW50cyA9IFtdLCBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgbGlzdGVuZXJzW2ldLmZuICE9PSBmbiB8fFxuICAgICAgICAob25jZSAmJiAhbGlzdGVuZXJzW2ldLm9uY2UpIHx8XG4gICAgICAgIChjb250ZXh0ICYmIGxpc3RlbmVyc1tpXS5jb250ZXh0ICE9PSBjb250ZXh0KVxuICAgICAgKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKGxpc3RlbmVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBSZXNldCB0aGUgYXJyYXksIG9yIHJlbW92ZSBpdCBjb21wbGV0ZWx5IGlmIHdlIGhhdmUgbm8gbW9yZSBsaXN0ZW5lcnMuXG4gICAgLy9cbiAgICBpZiAoZXZlbnRzLmxlbmd0aCkgdGhpcy5fZXZlbnRzW2V2dF0gPSBldmVudHMubGVuZ3RoID09PSAxID8gZXZlbnRzWzBdIDogZXZlbnRzO1xuICAgIGVsc2UgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgbGlzdGVuZXJzLCBvciB0aG9zZSBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBbZXZlbnRdIFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0O1xuXG4gIGlmIChldmVudCkge1xuICAgIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG4gICAgaWYgKHRoaXMuX2V2ZW50c1tldnRdKSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIEFsaWFzIG1ldGhvZHMgbmFtZXMgYmVjYXVzZSBwZW9wbGUgcm9sbCBsaWtlIHRoYXQuXG4vL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub247XG5cbi8vXG4vLyBFeHBvc2UgdGhlIHByZWZpeC5cbi8vXG5FdmVudEVtaXR0ZXIucHJlZml4ZWQgPSBwcmVmaXg7XG5cbi8vXG4vLyBBbGxvdyBgRXZlbnRFbWl0dGVyYCB0byBiZSBpbXBvcnRlZCBhcyBtb2R1bGUgbmFtZXNwYWNlLlxuLy9cbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5pZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBtb2R1bGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG59XG4iLCIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGlzIGlzIGZyZWUgYW5kIHVuZW5jdW1iZXJlZCBzb2Z0d2FyZSByZWxlYXNlZCBpbnRvIHRoZSBwdWJsaWMgZG9tYWluLlxuLy8gU2VlIExJQ0VOU0UubWQgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbi8vXG4vLyBVdGlsaXRpZXNcbi8vXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGEgVGhlIG51bWJlciB0byB0ZXN0LlxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbWluaW11bSB2YWx1ZSBpbiB0aGUgcmFuZ2UsIGluY2x1c2l2ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIG1heGltdW0gdmFsdWUgaW4gdGhlIHJhbmdlLCBpbmNsdXNpdmUuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGEgPj0gbWluIGFuZCBhIDw9IG1heC5cbiAqL1xuZnVuY3Rpb24gaW5SYW5nZShhLCBtaW4sIG1heCkge1xuICByZXR1cm4gbWluIDw9IGEgJiYgYSA8PSBtYXg7XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIFRvRGljdGlvbmFyeShvKSB7XG4gIGlmIChvID09PSB1bmRlZmluZWQpIHJldHVybiB7fTtcbiAgaWYgKG8gPT09IE9iamVjdChvKSkgcmV0dXJuIG87XG4gIHRocm93IFR5cGVFcnJvcignQ291bGQgbm90IGNvbnZlcnQgYXJndW1lbnQgdG8gZGljdGlvbmFyeScpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgSW5wdXQgc3RyaW5nIG9mIFVURi0xNiBjb2RlIHVuaXRzLlxuICogQHJldHVybiB7IUFycmF5LjxudW1iZXI+fSBDb2RlIHBvaW50cy5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9Db2RlUG9pbnRzKHN0cmluZykge1xuICAvLyBodHRwczovL2hleWNhbS5naXRodWIuaW8vd2ViaWRsLyNkZm4tb2J0YWluLXVuaWNvZGVcblxuICAvLyAxLiBMZXQgUyBiZSB0aGUgRE9NU3RyaW5nIHZhbHVlLlxuICB2YXIgcyA9IFN0cmluZyhzdHJpbmcpO1xuXG4gIC8vIDIuIExldCBuIGJlIHRoZSBsZW5ndGggb2YgUy5cbiAgdmFyIG4gPSBzLmxlbmd0aDtcblxuICAvLyAzLiBJbml0aWFsaXplIGkgdG8gMC5cbiAgdmFyIGkgPSAwO1xuXG4gIC8vIDQuIEluaXRpYWxpemUgVSB0byBiZSBhbiBlbXB0eSBzZXF1ZW5jZSBvZiBVbmljb2RlIGNoYXJhY3RlcnMuXG4gIHZhciB1ID0gW107XG5cbiAgLy8gNS4gV2hpbGUgaSA8IG46XG4gIHdoaWxlIChpIDwgbikge1xuXG4gICAgLy8gMS4gTGV0IGMgYmUgdGhlIGNvZGUgdW5pdCBpbiBTIGF0IGluZGV4IGkuXG4gICAgdmFyIGMgPSBzLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAvLyAyLiBEZXBlbmRpbmcgb24gdGhlIHZhbHVlIG9mIGM6XG5cbiAgICAvLyBjIDwgMHhEODAwIG9yIGMgPiAweERGRkZcbiAgICBpZiAoYyA8IDB4RDgwMCB8fCBjID4gMHhERkZGKSB7XG4gICAgICAvLyBBcHBlbmQgdG8gVSB0aGUgVW5pY29kZSBjaGFyYWN0ZXIgd2l0aCBjb2RlIHBvaW50IGMuXG4gICAgICB1LnB1c2goYyk7XG4gICAgfVxuXG4gICAgLy8gMHhEQzAwIOKJpCBjIOKJpCAweERGRkZcbiAgICBlbHNlIGlmICgweERDMDAgPD0gYyAmJiBjIDw9IDB4REZGRikge1xuICAgICAgLy8gQXBwZW5kIHRvIFUgYSBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSLlxuICAgICAgdS5wdXNoKDB4RkZGRCk7XG4gICAgfVxuXG4gICAgLy8gMHhEODAwIOKJpCBjIOKJpCAweERCRkZcbiAgICBlbHNlIGlmICgweEQ4MDAgPD0gYyAmJiBjIDw9IDB4REJGRikge1xuICAgICAgLy8gMS4gSWYgaSA9IG7iiJIxLCB0aGVuIGFwcGVuZCB0byBVIGEgVStGRkZEIFJFUExBQ0VNRU5UXG4gICAgICAvLyBDSEFSQUNURVIuXG4gICAgICBpZiAoaSA9PT0gbiAtIDEpIHtcbiAgICAgICAgdS5wdXNoKDB4RkZGRCk7XG4gICAgICB9XG4gICAgICAvLyAyLiBPdGhlcndpc2UsIGkgPCBu4oiSMTpcbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyAxLiBMZXQgZCBiZSB0aGUgY29kZSB1bml0IGluIFMgYXQgaW5kZXggaSsxLlxuICAgICAgICB2YXIgZCA9IHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKTtcblxuICAgICAgICAvLyAyLiBJZiAweERDMDAg4omkIGQg4omkIDB4REZGRiwgdGhlbjpcbiAgICAgICAgaWYgKDB4REMwMCA8PSBkICYmIGQgPD0gMHhERkZGKSB7XG4gICAgICAgICAgLy8gMS4gTGV0IGEgYmUgYyAmIDB4M0ZGLlxuICAgICAgICAgIHZhciBhID0gYyAmIDB4M0ZGO1xuXG4gICAgICAgICAgLy8gMi4gTGV0IGIgYmUgZCAmIDB4M0ZGLlxuICAgICAgICAgIHZhciBiID0gZCAmIDB4M0ZGO1xuXG4gICAgICAgICAgLy8gMy4gQXBwZW5kIHRvIFUgdGhlIFVuaWNvZGUgY2hhcmFjdGVyIHdpdGggY29kZSBwb2ludFxuICAgICAgICAgIC8vIDJeMTYrMl4xMCphK2IuXG4gICAgICAgICAgdS5wdXNoKDB4MTAwMDAgKyAoYSA8PCAxMCkgKyBiKTtcblxuICAgICAgICAgIC8vIDQuIFNldCBpIHRvIGkrMS5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAzLiBPdGhlcndpc2UsIGQgPCAweERDMDAgb3IgZCA+IDB4REZGRi4gQXBwZW5kIHRvIFUgYVxuICAgICAgICAvLyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSLlxuICAgICAgICBlbHNlICB7XG4gICAgICAgICAgdS5wdXNoKDB4RkZGRCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAzLiBTZXQgaSB0byBpKzEuXG4gICAgaSArPSAxO1xuICB9XG5cbiAgLy8gNi4gUmV0dXJuIFUuXG4gIHJldHVybiB1O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5LjxudW1iZXI+fSBjb2RlX3BvaW50cyBBcnJheSBvZiBjb2RlIHBvaW50cy5cbiAqIEByZXR1cm4ge3N0cmluZ30gc3RyaW5nIFN0cmluZyBvZiBVVEYtMTYgY29kZSB1bml0cy5cbiAqL1xuZnVuY3Rpb24gY29kZVBvaW50c1RvU3RyaW5nKGNvZGVfcG9pbnRzKSB7XG4gIHZhciBzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZV9wb2ludHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgY3AgPSBjb2RlX3BvaW50c1tpXTtcbiAgICBpZiAoY3AgPD0gMHhGRkZGKSB7XG4gICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjcCAtPSAweDEwMDAwO1xuICAgICAgcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjcCA+PiAxMCkgKyAweEQ4MDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNwICYgMHgzRkYpICsgMHhEQzAwKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cblxuLy9cbi8vIEltcGxlbWVudGF0aW9uIG9mIEVuY29kaW5nIHNwZWNpZmljYXRpb25cbi8vIGh0dHBzOi8vZW5jb2Rpbmcuc3BlYy53aGF0d2cub3JnL1xuLy9cblxuLy9cbi8vIDMuIFRlcm1pbm9sb2d5XG4vL1xuXG4vKipcbiAqIEVuZC1vZi1zdHJlYW0gaXMgYSBzcGVjaWFsIHRva2VuIHRoYXQgc2lnbmlmaWVzIG5vIG1vcmUgdG9rZW5zXG4gKiBhcmUgaW4gdGhlIHN0cmVhbS5cbiAqIEBjb25zdFxuICovIHZhciBlbmRfb2Zfc3RyZWFtID0gLTE7XG5cbi8qKlxuICogQSBzdHJlYW0gcmVwcmVzZW50cyBhbiBvcmRlcmVkIHNlcXVlbmNlIG9mIHRva2Vucy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0gdG9rZW5zIEFycmF5IG9mIHRva2VucyB0aGF0IHByb3ZpZGUgdGhlXG4gKiBzdHJlYW0uXG4gKi9cbmZ1bmN0aW9uIFN0cmVhbSh0b2tlbnMpIHtcbiAgLyoqIEB0eXBlIHshQXJyYXkuPG51bWJlcj59ICovXG4gIHRoaXMudG9rZW5zID0gW10uc2xpY2UuY2FsbCh0b2tlbnMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBlbmQtb2Ytc3RyZWFtIGhhcyBiZWVuIGhpdC5cbiAgICovXG4gIGVuZE9mU3RyZWFtOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXRoaXMudG9rZW5zLmxlbmd0aDtcbiAgfSxcblxuICAvKipcbiAgICogV2hlbiBhIHRva2VuIGlzIHJlYWQgZnJvbSBhIHN0cmVhbSwgdGhlIGZpcnN0IHRva2VuIGluIHRoZVxuICAgKiBzdHJlYW0gbXVzdCBiZSByZXR1cm5lZCBhbmQgc3Vic2VxdWVudGx5IHJlbW92ZWQsIGFuZFxuICAgKiBlbmQtb2Ytc3RyZWFtIG11c3QgYmUgcmV0dXJuZWQgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9IEdldCB0aGUgbmV4dCB0b2tlbiBmcm9tIHRoZSBzdHJlYW0sIG9yXG4gICAqIGVuZF9vZl9zdHJlYW0uXG4gICAqL1xuICAgcmVhZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLnRva2Vucy5sZW5ndGgpXG4gICAgICByZXR1cm4gZW5kX29mX3N0cmVhbTtcbiAgICAgcmV0dXJuIHRoaXMudG9rZW5zLnNoaWZ0KCk7XG4gICB9LFxuXG4gIC8qKlxuICAgKiBXaGVuIG9uZSBvciBtb3JlIHRva2VucyBhcmUgcHJlcGVuZGVkIHRvIGEgc3RyZWFtLCB0aG9zZSB0b2tlbnNcbiAgICogbXVzdCBiZSBpbnNlcnRlZCwgaW4gZ2l2ZW4gb3JkZXIsIGJlZm9yZSB0aGUgZmlyc3QgdG9rZW4gaW4gdGhlXG4gICAqIHN0cmVhbS5cbiAgICpcbiAgICogQHBhcmFtIHsobnVtYmVyfCFBcnJheS48bnVtYmVyPil9IHRva2VuIFRoZSB0b2tlbihzKSB0byBwcmVwZW5kIHRvIHRoZSBzdHJlYW0uXG4gICAqL1xuICBwcmVwZW5kOiBmdW5jdGlvbih0b2tlbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRva2VuKSkge1xuICAgICAgdmFyIHRva2VucyA9IC8qKkB0eXBlIHshQXJyYXkuPG51bWJlcj59Ki8odG9rZW4pO1xuICAgICAgd2hpbGUgKHRva2Vucy5sZW5ndGgpXG4gICAgICAgIHRoaXMudG9rZW5zLnVuc2hpZnQodG9rZW5zLnBvcCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50b2tlbnMudW5zaGlmdCh0b2tlbik7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBXaGVuIG9uZSBvciBtb3JlIHRva2VucyBhcmUgcHVzaGVkIHRvIGEgc3RyZWFtLCB0aG9zZSB0b2tlbnNcbiAgICogbXVzdCBiZSBpbnNlcnRlZCwgaW4gZ2l2ZW4gb3JkZXIsIGFmdGVyIHRoZSBsYXN0IHRva2VuIGluIHRoZVxuICAgKiBzdHJlYW0uXG4gICAqXG4gICAqIEBwYXJhbSB7KG51bWJlcnwhQXJyYXkuPG51bWJlcj4pfSB0b2tlbiBUaGUgdG9rZW5zKHMpIHRvIHByZXBlbmQgdG8gdGhlIHN0cmVhbS5cbiAgICovXG4gIHB1c2g6IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodG9rZW4pKSB7XG4gICAgICB2YXIgdG9rZW5zID0gLyoqQHR5cGUgeyFBcnJheS48bnVtYmVyPn0qLyh0b2tlbik7XG4gICAgICB3aGlsZSAodG9rZW5zLmxlbmd0aClcbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh0b2tlbnMuc2hpZnQoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2godG9rZW4pO1xuICAgIH1cbiAgfVxufTtcblxuLy9cbi8vIDQuIEVuY29kaW5nc1xuLy9cblxuLy8gNC4xIEVuY29kZXJzIGFuZCBkZWNvZGVyc1xuXG4vKiogQGNvbnN0ICovXG52YXIgZmluaXNoZWQgPSAtMTtcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGZhdGFsIElmIHRydWUsIGRlY29kaW5nIGVycm9ycyByYWlzZSBhbiBleGNlcHRpb24uXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9jb2RlX3BvaW50IE92ZXJyaWRlIHRoZSBzdGFuZGFyZCBmYWxsYmFjayBjb2RlIHBvaW50LlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgY29kZSBwb2ludCB0byBpbnNlcnQgb24gYSBkZWNvZGluZyBlcnJvci5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlckVycm9yKGZhdGFsLCBvcHRfY29kZV9wb2ludCkge1xuICBpZiAoZmF0YWwpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdEZWNvZGVyIGVycm9yJyk7XG4gIHJldHVybiBvcHRfY29kZV9wb2ludCB8fCAweEZGRkQ7XG59XG5cbi8vXG4vLyA3LiBBUElcbi8vXG5cbi8qKiBAY29uc3QgKi8gdmFyIERFRkFVTFRfRU5DT0RJTkcgPSAndXRmLTgnO1xuXG4vLyA3LjEgSW50ZXJmYWNlIFRleHREZWNvZGVyXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZz19IGVuY29kaW5nIFRoZSBsYWJlbCBvZiB0aGUgZW5jb2Rpbmc7XG4gKiAgICAgZGVmYXVsdHMgdG8gJ3V0Zi04Jy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICovXG5mdW5jdGlvbiBUZXh0RGVjb2RlcihlbmNvZGluZywgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVGV4dERlY29kZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZywgb3B0aW9ucyk7XG4gIH1cbiAgZW5jb2RpbmcgPSBlbmNvZGluZyAhPT0gdW5kZWZpbmVkID8gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpIDogREVGQVVMVF9FTkNPRElORztcbiAgaWYgKGVuY29kaW5nICE9PSBERUZBVUxUX0VOQ09ESU5HKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbmNvZGluZyBub3Qgc3VwcG9ydGVkLiBPbmx5IHV0Zi04IGlzIHN1cHBvcnRlZCcpO1xuICB9XG4gIG9wdGlvbnMgPSBUb0RpY3Rpb25hcnkob3B0aW9ucyk7XG5cbiAgLyoqIEBwcml2YXRlIEB0eXBlIHtib29sZWFufSAqL1xuICB0aGlzLl9zdHJlYW1pbmcgPSBmYWxzZTtcbiAgLyoqIEBwcml2YXRlIEB0eXBlIHtib29sZWFufSAqL1xuICB0aGlzLl9CT01zZWVuID0gZmFsc2U7XG4gIC8qKiBAcHJpdmF0ZSBAdHlwZSB7P0RlY29kZXJ9ICovXG4gIHRoaXMuX2RlY29kZXIgPSBudWxsO1xuICAvKiogQHByaXZhdGUgQHR5cGUge2Jvb2xlYW59ICovXG4gIHRoaXMuX2ZhdGFsID0gQm9vbGVhbihvcHRpb25zWydmYXRhbCddKTtcbiAgLyoqIEBwcml2YXRlIEB0eXBlIHtib29sZWFufSAqL1xuICB0aGlzLl9pZ25vcmVCT00gPSBCb29sZWFuKG9wdGlvbnNbJ2lnbm9yZUJPTSddKTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VuY29kaW5nJywge3ZhbHVlOiAndXRmLTgnfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZmF0YWwnLCB7dmFsdWU6IHRoaXMuX2ZhdGFsfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaWdub3JlQk9NJywge3ZhbHVlOiB0aGlzLl9pZ25vcmVCT019KTtcbn1cblxuVGV4dERlY29kZXIucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlclZpZXc9fSBpbnB1dCBUaGUgYnVmZmVyIG9mIGJ5dGVzIHRvIGRlY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGRlY29kZWQgc3RyaW5nLlxuICAgKi9cbiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICB2YXIgYnl0ZXM7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgaW5wdXQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShpbnB1dCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmICdidWZmZXInIGluIGlucHV0ICYmXG4gICAgICAgICAgICAgICBpbnB1dC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShpbnB1dC5idWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmJ5dGVPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmJ5dGVMZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KDApO1xuICAgIH1cblxuICAgIG9wdGlvbnMgPSBUb0RpY3Rpb25hcnkob3B0aW9ucyk7XG5cbiAgICBpZiAoIXRoaXMuX3N0cmVhbWluZykge1xuICAgICAgdGhpcy5fZGVjb2RlciA9IG5ldyBVVEY4RGVjb2Rlcih7ZmF0YWw6IHRoaXMuX2ZhdGFsfSk7XG4gICAgICB0aGlzLl9CT01zZWVuID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuX3N0cmVhbWluZyA9IEJvb2xlYW4ob3B0aW9uc1snc3RyZWFtJ10pO1xuXG4gICAgdmFyIGlucHV0X3N0cmVhbSA9IG5ldyBTdHJlYW0oYnl0ZXMpO1xuXG4gICAgdmFyIGNvZGVfcG9pbnRzID0gW107XG5cbiAgICAvKiogQHR5cGUgez8obnVtYmVyfCFBcnJheS48bnVtYmVyPil9ICovXG4gICAgdmFyIHJlc3VsdDtcblxuICAgIHdoaWxlICghaW5wdXRfc3RyZWFtLmVuZE9mU3RyZWFtKCkpIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2RlY29kZXIuaGFuZGxlcihpbnB1dF9zdHJlYW0sIGlucHV0X3N0cmVhbS5yZWFkKCkpO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gZmluaXNoZWQpXG4gICAgICAgIGJyZWFrO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbClcbiAgICAgICAgY29udGludWU7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKVxuICAgICAgICBjb2RlX3BvaW50cy5wdXNoLmFwcGx5KGNvZGVfcG9pbnRzLCAvKipAdHlwZSB7IUFycmF5LjxudW1iZXI+fSovKHJlc3VsdCkpO1xuICAgICAgZWxzZVxuICAgICAgICBjb2RlX3BvaW50cy5wdXNoKHJlc3VsdCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5fc3RyZWFtaW5nKSB7XG4gICAgICBkbyB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuX2RlY29kZXIuaGFuZGxlcihpbnB1dF9zdHJlYW0sIGlucHV0X3N0cmVhbS5yZWFkKCkpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBmaW5pc2hlZClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbClcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSlcbiAgICAgICAgICBjb2RlX3BvaW50cy5wdXNoLmFwcGx5KGNvZGVfcG9pbnRzLCAvKipAdHlwZSB7IUFycmF5LjxudW1iZXI+fSovKHJlc3VsdCkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgY29kZV9wb2ludHMucHVzaChyZXN1bHQpO1xuICAgICAgfSB3aGlsZSAoIWlucHV0X3N0cmVhbS5lbmRPZlN0cmVhbSgpKTtcbiAgICAgIHRoaXMuX2RlY29kZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChjb2RlX3BvaW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIElmIGVuY29kaW5nIGlzIG9uZSBvZiB1dGYtOCwgdXRmLTE2YmUsIGFuZCB1dGYtMTZsZSwgYW5kXG4gICAgICAvLyBpZ25vcmUgQk9NIGZsYWcgYW5kIEJPTSBzZWVuIGZsYWcgYXJlIHVuc2V0LCBydW4gdGhlc2VcbiAgICAgIC8vIHN1YnN1YnN0ZXBzOlxuICAgICAgaWYgKFsndXRmLTgnXS5pbmRleE9mKHRoaXMuZW5jb2RpbmcpICE9PSAtMSAmJlxuICAgICAgICAgICF0aGlzLl9pZ25vcmVCT00gJiYgIXRoaXMuX0JPTXNlZW4pIHtcbiAgICAgICAgLy8gSWYgdG9rZW4gaXMgVStGRUZGLCBzZXQgQk9NIHNlZW4gZmxhZy5cbiAgICAgICAgaWYgKGNvZGVfcG9pbnRzWzBdID09PSAweEZFRkYpIHtcbiAgICAgICAgICB0aGlzLl9CT01zZWVuID0gdHJ1ZTtcbiAgICAgICAgICBjb2RlX3BvaW50cy5zaGlmdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSwgaWYgdG9rZW4gaXMgbm90IGVuZC1vZi1zdHJlYW0sIHNldCBCT00gc2VlblxuICAgICAgICAgIC8vIGZsYWcgYW5kIGFwcGVuZCB0b2tlbiB0byBvdXRwdXQuXG4gICAgICAgICAgdGhpcy5fQk9Nc2VlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29kZVBvaW50c1RvU3RyaW5nKGNvZGVfcG9pbnRzKTtcbiAgfVxufTtcblxuLy8gNy4yIEludGVyZmFjZSBUZXh0RW5jb2RlclxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmc9fSBlbmNvZGluZyBUaGUgbGFiZWwgb2YgdGhlIGVuY29kaW5nO1xuICogICAgIGRlZmF1bHRzIHRvICd1dGYtOCcuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gVGV4dEVuY29kZXIoZW5jb2RpbmcsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRleHRFbmNvZGVyKSlcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKGVuY29kaW5nLCBvcHRpb25zKTtcbiAgZW5jb2RpbmcgPSBlbmNvZGluZyAhPT0gdW5kZWZpbmVkID8gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpIDogREVGQVVMVF9FTkNPRElORztcbiAgaWYgKGVuY29kaW5nICE9PSBERUZBVUxUX0VOQ09ESU5HKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbmNvZGluZyBub3Qgc3VwcG9ydGVkLiBPbmx5IHV0Zi04IGlzIHN1cHBvcnRlZCcpO1xuICB9XG4gIG9wdGlvbnMgPSBUb0RpY3Rpb25hcnkob3B0aW9ucyk7XG5cbiAgLyoqIEBwcml2YXRlIEB0eXBlIHtib29sZWFufSAqL1xuICB0aGlzLl9zdHJlYW1pbmcgPSBmYWxzZTtcbiAgLyoqIEBwcml2YXRlIEB0eXBlIHs/RW5jb2Rlcn0gKi9cbiAgdGhpcy5fZW5jb2RlciA9IG51bGw7XG4gIC8qKiBAcHJpdmF0ZSBAdHlwZSB7e2ZhdGFsOiBib29sZWFufX0gKi9cbiAgdGhpcy5fb3B0aW9ucyA9IHtmYXRhbDogQm9vbGVhbihvcHRpb25zWydmYXRhbCddKX07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdlbmNvZGluZycsIHt2YWx1ZTogJ3V0Zi04J30pO1xufVxuXG5UZXh0RW5jb2Rlci5wcm90b3R5cGUgPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zdHJpbmcgVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSBFbmNvZGVkIGJ5dGVzLCBhcyBhIFVpbnQ4QXJyYXkuXG4gICAqL1xuICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZShvcHRfc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgb3B0X3N0cmluZyA9IG9wdF9zdHJpbmcgPyBTdHJpbmcob3B0X3N0cmluZykgOiAnJztcbiAgICBvcHRpb25zID0gVG9EaWN0aW9uYXJ5KG9wdGlvbnMpO1xuXG4gICAgLy8gTk9URTogVGhpcyBvcHRpb24gaXMgbm9uc3RhbmRhcmQuIE5vbmUgb2YgdGhlIGVuY29kaW5nc1xuICAgIC8vIHBlcm1pdHRlZCBmb3IgZW5jb2RpbmcgKGkuZS4gVVRGLTgsIFVURi0xNikgYXJlIHN0YXRlZnVsLFxuICAgIC8vIHNvIHN0cmVhbWluZyBpcyBub3QgbmVjZXNzYXJ5LlxuICAgIGlmICghdGhpcy5fc3RyZWFtaW5nKVxuICAgICAgdGhpcy5fZW5jb2RlciA9IG5ldyBVVEY4RW5jb2Rlcih0aGlzLl9vcHRpb25zKTtcbiAgICB0aGlzLl9zdHJlYW1pbmcgPSBCb29sZWFuKG9wdGlvbnNbJ3N0cmVhbSddKTtcblxuICAgIHZhciBieXRlcyA9IFtdO1xuICAgIHZhciBpbnB1dF9zdHJlYW0gPSBuZXcgU3RyZWFtKHN0cmluZ1RvQ29kZVBvaW50cyhvcHRfc3RyaW5nKSk7XG4gICAgLyoqIEB0eXBlIHs/KG51bWJlcnwhQXJyYXkuPG51bWJlcj4pfSAqL1xuICAgIHZhciByZXN1bHQ7XG4gICAgd2hpbGUgKCFpbnB1dF9zdHJlYW0uZW5kT2ZTdHJlYW0oKSkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5fZW5jb2Rlci5oYW5kbGVyKGlucHV0X3N0cmVhbSwgaW5wdXRfc3RyZWFtLnJlYWQoKSk7XG4gICAgICBpZiAocmVzdWx0ID09PSBmaW5pc2hlZClcbiAgICAgICAgYnJlYWs7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKVxuICAgICAgICBieXRlcy5wdXNoLmFwcGx5KGJ5dGVzLCAvKipAdHlwZSB7IUFycmF5LjxudW1iZXI+fSovKHJlc3VsdCkpO1xuICAgICAgZWxzZVxuICAgICAgICBieXRlcy5wdXNoKHJlc3VsdCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5fc3RyZWFtaW5nKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVyLmhhbmRsZXIoaW5wdXRfc3RyZWFtLCBpbnB1dF9zdHJlYW0ucmVhZCgpKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmluaXNoZWQpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpXG4gICAgICAgICAgYnl0ZXMucHVzaC5hcHBseShieXRlcywgLyoqQHR5cGUgeyFBcnJheS48bnVtYmVyPn0qLyhyZXN1bHQpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGJ5dGVzLnB1c2gocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2VuY29kZXIgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpO1xuICB9XG59O1xuXG4vL1xuLy8gOC4gVGhlIGVuY29kaW5nXG4vL1xuXG4vLyA4LjEgdXRmLThcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIHtEZWNvZGVyfVxuICogQHBhcmFtIHt7ZmF0YWw6IGJvb2xlYW59fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIFVURjhEZWNvZGVyKG9wdGlvbnMpIHtcbiAgdmFyIGZhdGFsID0gb3B0aW9ucy5mYXRhbDtcblxuICAvLyB1dGYtOCdzIGRlY29kZXIncyBoYXMgYW4gYXNzb2NpYXRlZCB1dGYtOCBjb2RlIHBvaW50LCB1dGYtOFxuICAvLyBieXRlcyBzZWVuLCBhbmQgdXRmLTggYnl0ZXMgbmVlZGVkIChhbGwgaW5pdGlhbGx5IDApLCBhIHV0Zi04XG4gIC8vIGxvd2VyIGJvdW5kYXJ5IChpbml0aWFsbHkgMHg4MCksIGFuZCBhIHV0Zi04IHVwcGVyIGJvdW5kYXJ5XG4gIC8vIChpbml0aWFsbHkgMHhCRikuXG4gIHZhciAvKiogQHR5cGUge251bWJlcn0gKi8gdXRmOF9jb2RlX3BvaW50ID0gMCxcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyB1dGY4X2J5dGVzX3NlZW4gPSAwLFxuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovIHV0ZjhfYnl0ZXNfbmVlZGVkID0gMCxcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyB1dGY4X2xvd2VyX2JvdW5kYXJ5ID0gMHg4MCxcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyB1dGY4X3VwcGVyX2JvdW5kYXJ5ID0gMHhCRjtcblxuICAvKipcbiAgICogQHBhcmFtIHtTdHJlYW19IHN0cmVhbSBUaGUgc3RyZWFtIG9mIGJ5dGVzIGJlaW5nIGRlY29kZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRlIFRoZSBuZXh0IGJ5dGUgcmVhZCBmcm9tIHRoZSBzdHJlYW0uXG4gICAqIEByZXR1cm4gez8obnVtYmVyfCFBcnJheS48bnVtYmVyPil9IFRoZSBuZXh0IGNvZGUgcG9pbnQocylcbiAgICogICAgIGRlY29kZWQsIG9yIG51bGwgaWYgbm90IGVub3VnaCBkYXRhIGV4aXN0cyBpbiB0aGUgaW5wdXRcbiAgICogICAgIHN0cmVhbSB0byBkZWNvZGUgYSBjb21wbGV0ZSBjb2RlIHBvaW50LlxuICAgKi9cbiAgdGhpcy5oYW5kbGVyID0gZnVuY3Rpb24oc3RyZWFtLCBiaXRlKSB7XG4gICAgLy8gMS4gSWYgYnl0ZSBpcyBlbmQtb2Ytc3RyZWFtIGFuZCB1dGYtOCBieXRlcyBuZWVkZWQgaXMgbm90IDAsXG4gICAgLy8gc2V0IHV0Zi04IGJ5dGVzIG5lZWRlZCB0byAwIGFuZCByZXR1cm4gZXJyb3IuXG4gICAgaWYgKGJpdGUgPT09IGVuZF9vZl9zdHJlYW0gJiYgdXRmOF9ieXRlc19uZWVkZWQgIT09IDApIHtcbiAgICAgIHV0ZjhfYnl0ZXNfbmVlZGVkID0gMDtcbiAgICAgIHJldHVybiBkZWNvZGVyRXJyb3IoZmF0YWwpO1xuICAgIH1cblxuICAgIC8vIDIuIElmIGJ5dGUgaXMgZW5kLW9mLXN0cmVhbSwgcmV0dXJuIGZpbmlzaGVkLlxuICAgIGlmIChiaXRlID09PSBlbmRfb2Zfc3RyZWFtKVxuICAgICAgcmV0dXJuIGZpbmlzaGVkO1xuXG4gICAgLy8gMy4gSWYgdXRmLTggYnl0ZXMgbmVlZGVkIGlzIDAsIGJhc2VkIG9uIGJ5dGU6XG4gICAgaWYgKHV0ZjhfYnl0ZXNfbmVlZGVkID09PSAwKSB7XG5cbiAgICAgIC8vIDB4MDAgdG8gMHg3RlxuICAgICAgaWYgKGluUmFuZ2UoYml0ZSwgMHgwMCwgMHg3RikpIHtcbiAgICAgICAgLy8gUmV0dXJuIGEgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSBpcyBieXRlLlxuICAgICAgICByZXR1cm4gYml0ZTtcbiAgICAgIH1cblxuICAgICAgLy8gMHhDMiB0byAweERGXG4gICAgICBpZiAoaW5SYW5nZShiaXRlLCAweEMyLCAweERGKSkge1xuICAgICAgICAvLyBTZXQgdXRmLTggYnl0ZXMgbmVlZGVkIHRvIDEgYW5kIHV0Zi04IGNvZGUgcG9pbnQgdG8gYnl0ZVxuICAgICAgICAvLyDiiJIgMHhDMC5cbiAgICAgICAgdXRmOF9ieXRlc19uZWVkZWQgPSAxO1xuICAgICAgICB1dGY4X2NvZGVfcG9pbnQgPSBiaXRlIC0gMHhDMDtcbiAgICAgIH1cblxuICAgICAgLy8gMHhFMCB0byAweEVGXG4gICAgICBlbHNlIGlmIChpblJhbmdlKGJpdGUsIDB4RTAsIDB4RUYpKSB7XG4gICAgICAgIC8vIDEuIElmIGJ5dGUgaXMgMHhFMCwgc2V0IHV0Zi04IGxvd2VyIGJvdW5kYXJ5IHRvIDB4QTAuXG4gICAgICAgIGlmIChiaXRlID09PSAweEUwKVxuICAgICAgICAgIHV0ZjhfbG93ZXJfYm91bmRhcnkgPSAweEEwO1xuICAgICAgICAvLyAyLiBJZiBieXRlIGlzIDB4RUQsIHNldCB1dGYtOCB1cHBlciBib3VuZGFyeSB0byAweDlGLlxuICAgICAgICBpZiAoYml0ZSA9PT0gMHhFRClcbiAgICAgICAgICB1dGY4X3VwcGVyX2JvdW5kYXJ5ID0gMHg5RjtcbiAgICAgICAgLy8gMy4gU2V0IHV0Zi04IGJ5dGVzIG5lZWRlZCB0byAyIGFuZCB1dGYtOCBjb2RlIHBvaW50IHRvXG4gICAgICAgIC8vIGJ5dGUg4oiSIDB4RTAuXG4gICAgICAgIHV0ZjhfYnl0ZXNfbmVlZGVkID0gMjtcbiAgICAgICAgdXRmOF9jb2RlX3BvaW50ID0gYml0ZSAtIDB4RTA7XG4gICAgICB9XG5cbiAgICAgIC8vIDB4RjAgdG8gMHhGNFxuICAgICAgZWxzZSBpZiAoaW5SYW5nZShiaXRlLCAweEYwLCAweEY0KSkge1xuICAgICAgICAvLyAxLiBJZiBieXRlIGlzIDB4RjAsIHNldCB1dGYtOCBsb3dlciBib3VuZGFyeSB0byAweDkwLlxuICAgICAgICBpZiAoYml0ZSA9PT0gMHhGMClcbiAgICAgICAgICB1dGY4X2xvd2VyX2JvdW5kYXJ5ID0gMHg5MDtcbiAgICAgICAgLy8gMi4gSWYgYnl0ZSBpcyAweEY0LCBzZXQgdXRmLTggdXBwZXIgYm91bmRhcnkgdG8gMHg4Ri5cbiAgICAgICAgaWYgKGJpdGUgPT09IDB4RjQpXG4gICAgICAgICAgdXRmOF91cHBlcl9ib3VuZGFyeSA9IDB4OEY7XG4gICAgICAgIC8vIDMuIFNldCB1dGYtOCBieXRlcyBuZWVkZWQgdG8gMyBhbmQgdXRmLTggY29kZSBwb2ludCB0b1xuICAgICAgICAvLyBieXRlIOKIkiAweEYwLlxuICAgICAgICB1dGY4X2J5dGVzX25lZWRlZCA9IDM7XG4gICAgICAgIHV0ZjhfY29kZV9wb2ludCA9IGJpdGUgLSAweEYwO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2VcbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZXJyb3IuXG4gICAgICAgIHJldHVybiBkZWNvZGVyRXJyb3IoZmF0YWwpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGVuIChieXRlIGlzIGluIHRoZSByYW5nZSAweEMyIHRvIDB4RjQpIHNldCB1dGYtOCBjb2RlXG4gICAgICAvLyBwb2ludCB0byB1dGYtOCBjb2RlIHBvaW50IDw8ICg2IMOXIHV0Zi04IGJ5dGVzIG5lZWRlZCkgYW5kXG4gICAgICAvLyByZXR1cm4gY29udGludWUuXG4gICAgICB1dGY4X2NvZGVfcG9pbnQgPSB1dGY4X2NvZGVfcG9pbnQgPDwgKDYgKiB1dGY4X2J5dGVzX25lZWRlZCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyA0LiBJZiBieXRlIGlzIG5vdCBpbiB0aGUgcmFuZ2UgdXRmLTggbG93ZXIgYm91bmRhcnkgdG8gdXRmLThcbiAgICAvLyB1cHBlciBib3VuZGFyeSwgcnVuIHRoZXNlIHN1YnN0ZXBzOlxuICAgIGlmICghaW5SYW5nZShiaXRlLCB1dGY4X2xvd2VyX2JvdW5kYXJ5LCB1dGY4X3VwcGVyX2JvdW5kYXJ5KSkge1xuXG4gICAgICAvLyAxLiBTZXQgdXRmLTggY29kZSBwb2ludCwgdXRmLTggYnl0ZXMgbmVlZGVkLCBhbmQgdXRmLThcbiAgICAgIC8vIGJ5dGVzIHNlZW4gdG8gMCwgc2V0IHV0Zi04IGxvd2VyIGJvdW5kYXJ5IHRvIDB4ODAsIGFuZCBzZXRcbiAgICAgIC8vIHV0Zi04IHVwcGVyIGJvdW5kYXJ5IHRvIDB4QkYuXG4gICAgICB1dGY4X2NvZGVfcG9pbnQgPSB1dGY4X2J5dGVzX25lZWRlZCA9IHV0ZjhfYnl0ZXNfc2VlbiA9IDA7XG4gICAgICB1dGY4X2xvd2VyX2JvdW5kYXJ5ID0gMHg4MDtcbiAgICAgIHV0ZjhfdXBwZXJfYm91bmRhcnkgPSAweEJGO1xuXG4gICAgICAvLyAyLiBQcmVwZW5kIGJ5dGUgdG8gc3RyZWFtLlxuICAgICAgc3RyZWFtLnByZXBlbmQoYml0ZSk7XG5cbiAgICAgIC8vIDMuIFJldHVybiBlcnJvci5cbiAgICAgIHJldHVybiBkZWNvZGVyRXJyb3IoZmF0YWwpO1xuICAgIH1cblxuICAgIC8vIDUuIFNldCB1dGYtOCBsb3dlciBib3VuZGFyeSB0byAweDgwIGFuZCB1dGYtOCB1cHBlciBib3VuZGFyeVxuICAgIC8vIHRvIDB4QkYuXG4gICAgdXRmOF9sb3dlcl9ib3VuZGFyeSA9IDB4ODA7XG4gICAgdXRmOF91cHBlcl9ib3VuZGFyeSA9IDB4QkY7XG5cbiAgICAvLyA2LiBJbmNyZWFzZSB1dGYtOCBieXRlcyBzZWVuIGJ5IG9uZSBhbmQgc2V0IHV0Zi04IGNvZGUgcG9pbnRcbiAgICAvLyB0byB1dGYtOCBjb2RlIHBvaW50ICsgKGJ5dGUg4oiSIDB4ODApIDw8ICg2IMOXICh1dGYtOCBieXRlc1xuICAgIC8vIG5lZWRlZCDiiJIgdXRmLTggYnl0ZXMgc2VlbikpLlxuICAgIHV0ZjhfYnl0ZXNfc2VlbiArPSAxO1xuICAgIHV0ZjhfY29kZV9wb2ludCArPSAoYml0ZSAtIDB4ODApIDw8ICg2ICogKHV0ZjhfYnl0ZXNfbmVlZGVkIC0gdXRmOF9ieXRlc19zZWVuKSk7XG5cbiAgICAvLyA3LiBJZiB1dGYtOCBieXRlcyBzZWVuIGlzIG5vdCBlcXVhbCB0byB1dGYtOCBieXRlcyBuZWVkZWQsXG4gICAgLy8gY29udGludWUuXG4gICAgaWYgKHV0ZjhfYnl0ZXNfc2VlbiAhPT0gdXRmOF9ieXRlc19uZWVkZWQpXG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIC8vIDguIExldCBjb2RlIHBvaW50IGJlIHV0Zi04IGNvZGUgcG9pbnQuXG4gICAgdmFyIGNvZGVfcG9pbnQgPSB1dGY4X2NvZGVfcG9pbnQ7XG5cbiAgICAvLyA5LiBTZXQgdXRmLTggY29kZSBwb2ludCwgdXRmLTggYnl0ZXMgbmVlZGVkLCBhbmQgdXRmLTggYnl0ZXNcbiAgICAvLyBzZWVuIHRvIDAuXG4gICAgdXRmOF9jb2RlX3BvaW50ID0gdXRmOF9ieXRlc19uZWVkZWQgPSB1dGY4X2J5dGVzX3NlZW4gPSAwO1xuXG4gICAgLy8gMTAuIFJldHVybiBhIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgaXMgY29kZSBwb2ludC5cbiAgICByZXR1cm4gY29kZV9wb2ludDtcbiAgfTtcbn1cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBpbXBsZW1lbnRzIHtFbmNvZGVyfVxuICogQHBhcmFtIHt7ZmF0YWw6IGJvb2xlYW59fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIFVURjhFbmNvZGVyKG9wdGlvbnMpIHtcbiAgdmFyIGZhdGFsID0gb3B0aW9ucy5mYXRhbDtcbiAgLyoqXG4gICAqIEBwYXJhbSB7U3RyZWFtfSBzdHJlYW0gSW5wdXQgc3RyZWFtLlxuICAgKiBAcGFyYW0ge251bWJlcn0gY29kZV9wb2ludCBOZXh0IGNvZGUgcG9pbnQgcmVhZCBmcm9tIHRoZSBzdHJlYW0uXG4gICAqIEByZXR1cm4geyhudW1iZXJ8IUFycmF5LjxudW1iZXI+KX0gQnl0ZShzKSB0byBlbWl0LlxuICAgKi9cbiAgdGhpcy5oYW5kbGVyID0gZnVuY3Rpb24oc3RyZWFtLCBjb2RlX3BvaW50KSB7XG4gICAgLy8gMS4gSWYgY29kZSBwb2ludCBpcyBlbmQtb2Ytc3RyZWFtLCByZXR1cm4gZmluaXNoZWQuXG4gICAgaWYgKGNvZGVfcG9pbnQgPT09IGVuZF9vZl9zdHJlYW0pXG4gICAgICByZXR1cm4gZmluaXNoZWQ7XG5cbiAgICAvLyAyLiBJZiBjb2RlIHBvaW50IGlzIGluIHRoZSByYW5nZSBVKzAwMDAgdG8gVSswMDdGLCByZXR1cm4gYVxuICAgIC8vIGJ5dGUgd2hvc2UgdmFsdWUgaXMgY29kZSBwb2ludC5cbiAgICBpZiAoaW5SYW5nZShjb2RlX3BvaW50LCAweDAwMDAsIDB4MDA3ZikpXG4gICAgICByZXR1cm4gY29kZV9wb2ludDtcblxuICAgIC8vIDMuIFNldCBjb3VudCBhbmQgb2Zmc2V0IGJhc2VkIG9uIHRoZSByYW5nZSBjb2RlIHBvaW50IGlzIGluOlxuICAgIHZhciBjb3VudCwgb2Zmc2V0O1xuICAgIC8vIFUrMDA4MCB0byBVKzA3RkY6ICAgIDEgYW5kIDB4QzBcbiAgICBpZiAoaW5SYW5nZShjb2RlX3BvaW50LCAweDAwODAsIDB4MDdGRikpIHtcbiAgICAgIGNvdW50ID0gMTtcbiAgICAgIG9mZnNldCA9IDB4QzA7XG4gICAgfVxuICAgIC8vIFUrMDgwMCB0byBVK0ZGRkY6ICAgIDIgYW5kIDB4RTBcbiAgICBlbHNlIGlmIChpblJhbmdlKGNvZGVfcG9pbnQsIDB4MDgwMCwgMHhGRkZGKSkge1xuICAgICAgY291bnQgPSAyO1xuICAgICAgb2Zmc2V0ID0gMHhFMDtcbiAgICB9XG4gICAgLy8gVSsxMDAwMCB0byBVKzEwRkZGRjogMyBhbmQgMHhGMFxuICAgIGVsc2UgaWYgKGluUmFuZ2UoY29kZV9wb2ludCwgMHgxMDAwMCwgMHgxMEZGRkYpKSB7XG4gICAgICBjb3VudCA9IDM7XG4gICAgICBvZmZzZXQgPSAweEYwO1xuICAgIH1cblxuICAgIC8vIDQuTGV0IGJ5dGVzIGJlIGEgYnl0ZSBzZXF1ZW5jZSB3aG9zZSBmaXJzdCBieXRlIGlzIChjb2RlXG4gICAgLy8gcG9pbnQgPj4gKDYgw5cgY291bnQpKSArIG9mZnNldC5cbiAgICB2YXIgYnl0ZXMgPSBbKGNvZGVfcG9pbnQgPj4gKDYgKiBjb3VudCkpICsgb2Zmc2V0XTtcblxuICAgIC8vIDUuIFJ1biB0aGVzZSBzdWJzdGVwcyB3aGlsZSBjb3VudCBpcyBncmVhdGVyIHRoYW4gMDpcbiAgICB3aGlsZSAoY291bnQgPiAwKSB7XG5cbiAgICAgIC8vIDEuIFNldCB0ZW1wIHRvIGNvZGUgcG9pbnQgPj4gKDYgw5cgKGNvdW50IOKIkiAxKSkuXG4gICAgICB2YXIgdGVtcCA9IGNvZGVfcG9pbnQgPj4gKDYgKiAoY291bnQgLSAxKSk7XG5cbiAgICAgIC8vIDIuIEFwcGVuZCB0byBieXRlcyAweDgwIHwgKHRlbXAgJiAweDNGKS5cbiAgICAgIGJ5dGVzLnB1c2goMHg4MCB8ICh0ZW1wICYgMHgzRikpO1xuXG4gICAgICAvLyAzLiBEZWNyZWFzZSBjb3VudCBieSBvbmUuXG4gICAgICBjb3VudCAtPSAxO1xuICAgIH1cblxuICAgIC8vIDYuIFJldHVybiBieXRlcyBieXRlcywgaW4gb3JkZXIuXG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9O1xufVxuXG5leHBvcnRzLlRleHRFbmNvZGVyID0gVGV4dEVuY29kZXI7XG5leHBvcnRzLlRleHREZWNvZGVyID0gVGV4dERlY29kZXI7IiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbmNvbnN0IGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbmNvbnN0IGN1c3RvbUluc3BlY3RTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA/IFN5bWJvbFsnZm9yJ10oJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA6IG51bGxcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG5jb25zdCBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGNvbnN0IHByb3RvID0geyBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pXG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ1ZmZlclxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpXG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIChpc0luc3RhbmNlKHZhbHVlLCBTaGFyZWRBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgKVxuICB9XG5cbiAgY29uc3QgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgY29uc3QgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSwgVWludDhBcnJheS5wcm90b3R5cGUpXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLCBVaW50OEFycmF5KVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICBjb25zdCBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICBsZXQgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICBjb25zdCBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheVZpZXcgKGFycmF5Vmlldykge1xuICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgY29uc3QgY29weSA9IG5ldyBVaW50OEFycmF5KGFycmF5VmlldylcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKGNvcHkuYnVmZmVyLCBjb3B5LmJ5dGVPZmZzZXQsIGNvcHkuYnl0ZUxlbmd0aClcbiAgfVxuICByZXR1cm4gZnJvbUFycmF5TGlrZShhcnJheVZpZXcpXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBsZXQgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIGNvbnN0IGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICB9XG5cbiAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJlxuICAgIGIgIT09IEJ1ZmZlci5wcm90b3R5cGUgLy8gc28gQnVmZmVyLmlzQnVmZmVyKEJ1ZmZlci5wcm90b3R5cGUpIHdpbGwgYmUgZmFsc2Vcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyLmZyb20oYSwgYS5vZmZzZXQsIGEuYnl0ZUxlbmd0aClcbiAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIuZnJvbShiLCBiLm9mZnNldCwgYi5ieXRlTGVuZ3RoKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5J1xuICAgIClcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIGxldCB4ID0gYS5sZW5ndGhcbiAgbGV0IHkgPSBiLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICBsZXQgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIGxldCBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHBvcyArIGJ1Zi5sZW5ndGggPiBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcbiAgICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgYnVmLFxuICAgICAgICAgIHBvc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIH1cbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgY29uc3QgbXVzdE1hdGNoID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZSlcbiAgaWYgKCFtdXN0TWF0Y2ggJiYgbGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJjaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgY29uc3QgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgbGV0IHN0ciA9ICcnXG4gIGNvbnN0IG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5yZXBsYWNlKC8oLnsyfSkvZywgJyQxICcpLnRyaW0oKVxuICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5pZiAoY3VzdG9tSW5zcGVjdFN5bWJvbCkge1xuICBCdWZmZXIucHJvdG90eXBlW2N1c3RvbUluc3BlY3RTeW1ib2xdID0gQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmIChpc0luc3RhbmNlKHRhcmdldCwgVWludDhBcnJheSkpIHtcbiAgICB0YXJnZXQgPSBCdWZmZXIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKVxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdGFyZ2V0KVxuICAgIClcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIGxldCB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICBsZXQgeSA9IGVuZCAtIHN0YXJ0XG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgY29uc3QgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgY29uc3QgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKG51bWJlcklzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgW3ZhbF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIGxldCBpbmRleFNpemUgPSAxXG4gIGxldCBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIGxldCB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIGxldCBpXG4gIGlmIChkaXIpIHtcbiAgICBsZXQgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIGNvbnN0IHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgY29uc3QgcmVzID0gW11cblxuICBsZXQgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgY29uc3QgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgbGV0IGNvZGVQb2ludCA9IG51bGxcbiAgICBsZXQgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKVxuICAgICAgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKVxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIGxldCBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbmNvbnN0IE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICBjb25zdCBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICBsZXQgb3V0ID0gJydcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICBsZXQgcmVzID0gJydcbiAgLy8gSWYgYnl0ZXMubGVuZ3RoIGlzIG9kZCwgdGhlIGxhc3QgOCBiaXRzIG11c3QgYmUgaWdub3JlZCAoc2FtZSBhcyBub2RlLmpzKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgKGJ5dGVzW2kgKyAxXSAqIDI1NikpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICBjb25zdCBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIGxldCBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgbG8gPSBmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0XG5cbiAgY29uc3QgaGkgPSB0aGlzWysrb2Zmc2V0XSArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgbGFzdCAqIDIgKiogMjRcblxuICByZXR1cm4gQmlnSW50KGxvKSArIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBoaSA9IGZpcnN0ICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICBjb25zdCBsbyA9IHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdFxuXG4gIHJldHVybiAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKSArIEJpZ0ludChsbylcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgaSA9IGJ5dGVMZW5ndGhcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgNF0gK1xuICAgIHRoaXNbb2Zmc2V0ICsgNV0gKiAyICoqIDggK1xuICAgIHRoaXNbb2Zmc2V0ICsgNl0gKiAyICoqIDE2ICtcbiAgICAobGFzdCA8PCAyNCkgLy8gT3ZlcmZsb3dcblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQoZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSAoZmlyc3QgPDwgMjQpICsgLy8gT3ZlcmZsb3dcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludCh0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3QpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NExFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIHJldHVybiBvZmZzZXRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0QkUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDddID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA2XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNV0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDRdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyAzXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMl0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDFdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXRdID0gaGlcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSAwXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlcicpXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICBjb25zdCBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnICYmIGNvZGUgPCAxMjgpIHx8XG4gICAgICAgICAgZW5jb2RpbmcgPT09ICdsYXRpbjEnKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuXG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIGxldCBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICBjb25zdCBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIENVU1RPTSBFUlJPUlNcbi8vID09PT09PT09PT09PT1cblxuLy8gU2ltcGxpZmllZCB2ZXJzaW9ucyBmcm9tIE5vZGUsIGNoYW5nZWQgZm9yIEJ1ZmZlci1vbmx5IHVzYWdlXG5jb25zdCBlcnJvcnMgPSB7fVxuZnVuY3Rpb24gRSAoc3ltLCBnZXRNZXNzYWdlLCBCYXNlKSB7XG4gIGVycm9yc1tzeW1dID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgc3VwZXIoKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICAgIHZhbHVlOiBnZXRNZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pXG5cbiAgICAgIC8vIEFkZCB0aGUgZXJyb3IgY29kZSB0byB0aGUgbmFtZSB0byBpbmNsdWRlIGl0IGluIHRoZSBzdGFjayB0cmFjZS5cbiAgICAgIHRoaXMubmFtZSA9IGAke3RoaXMubmFtZX0gWyR7c3ltfV1gXG4gICAgICAvLyBBY2Nlc3MgdGhlIHN0YWNrIHRvIGdlbmVyYXRlIHRoZSBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZXJyb3IgY29kZVxuICAgICAgLy8gZnJvbSB0aGUgbmFtZS5cbiAgICAgIHRoaXMuc3RhY2sgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgIC8vIFJlc2V0IHRoZSBuYW1lIHRvIHRoZSBhY3R1YWwgbmFtZS5cbiAgICAgIGRlbGV0ZSB0aGlzLm5hbWVcbiAgICB9XG5cbiAgICBnZXQgY29kZSAoKSB7XG4gICAgICByZXR1cm4gc3ltXG4gICAgfVxuXG4gICAgc2V0IGNvZGUgKHZhbHVlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvZGUnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9IFske3N5bX1dOiAke3RoaXMubWVzc2FnZX1gXG4gICAgfVxuICB9XG59XG5cbkUoJ0VSUl9CVUZGRVJfT1VUX09GX0JPVU5EUycsXG4gIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHNgXG4gICAgfVxuXG4gICAgcmV0dXJuICdBdHRlbXB0IHRvIGFjY2VzcyBtZW1vcnkgb3V0c2lkZSBidWZmZXIgYm91bmRzJ1xuICB9LCBSYW5nZUVycm9yKVxuRSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLFxuICBmdW5jdGlvbiAobmFtZSwgYWN0dWFsKSB7XG4gICAgcmV0dXJuIGBUaGUgXCIke25hbWV9XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBhY3R1YWx9YFxuICB9LCBUeXBlRXJyb3IpXG5FKCdFUlJfT1VUX09GX1JBTkdFJyxcbiAgZnVuY3Rpb24gKHN0ciwgcmFuZ2UsIGlucHV0KSB7XG4gICAgbGV0IG1zZyA9IGBUaGUgdmFsdWUgb2YgXCIke3N0cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYFxuICAgIGxldCByZWNlaXZlZCA9IGlucHV0XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoaW5wdXQpICYmIE1hdGguYWJzKGlucHV0KSA+IDIgKiogMzIpIHtcbiAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKFN0cmluZyhpbnB1dCkpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdiaWdpbnQnKSB7XG4gICAgICByZWNlaXZlZCA9IFN0cmluZyhpbnB1dClcbiAgICAgIGlmIChpbnB1dCA+IEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpIHx8IGlucHV0IDwgLShCaWdJbnQoMikgKiogQmlnSW50KDMyKSkpIHtcbiAgICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IocmVjZWl2ZWQpXG4gICAgICB9XG4gICAgICByZWNlaXZlZCArPSAnbidcbiAgICB9XG4gICAgbXNnICs9IGAgSXQgbXVzdCBiZSAke3JhbmdlfS4gUmVjZWl2ZWQgJHtyZWNlaXZlZH1gXG4gICAgcmV0dXJuIG1zZ1xuICB9LCBSYW5nZUVycm9yKVxuXG5mdW5jdGlvbiBhZGROdW1lcmljYWxTZXBhcmF0b3IgKHZhbCkge1xuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSB2YWwubGVuZ3RoXG4gIGNvbnN0IHN0YXJ0ID0gdmFsWzBdID09PSAnLScgPyAxIDogMFxuICBmb3IgKDsgaSA+PSBzdGFydCArIDQ7IGkgLT0gMykge1xuICAgIHJlcyA9IGBfJHt2YWwuc2xpY2UoaSAtIDMsIGkpfSR7cmVzfWBcbiAgfVxuICByZXR1cm4gYCR7dmFsLnNsaWNlKDAsIGkpfSR7cmVzfWBcbn1cblxuLy8gQ0hFQ0sgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gY2hlY2tCb3VuZHMgKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGlmIChidWZbb2Zmc2V0XSA9PT0gdW5kZWZpbmVkIHx8IGJ1ZltvZmZzZXQgKyBieXRlTGVuZ3RoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCBidWYubGVuZ3RoIC0gKGJ5dGVMZW5ndGggKyAxKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ludEJJICh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikge1xuICAgIGNvbnN0IG4gPSB0eXBlb2YgbWluID09PSAnYmlnaW50JyA/ICduJyA6ICcnXG4gICAgbGV0IHJhbmdlXG4gICAgaWYgKGJ5dGVMZW5ndGggPiAzKSB7XG4gICAgICBpZiAobWluID09PSAwIHx8IG1pbiA9PT0gQmlnSW50KDApKSB7XG4gICAgICAgIHJhbmdlID0gYD49IDAke259IGFuZCA8IDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDh9JHtufWBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmdlID0gYD49IC0oMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufSkgYW5kIDwgMiAqKiBgICtcbiAgICAgICAgICAgICAgICBgJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufWBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2UgPSBgPj0gJHttaW59JHtufSBhbmQgPD0gJHttYXh9JHtufWBcbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKCd2YWx1ZScsIHJhbmdlLCB2YWx1ZSlcbiAgfVxuICBjaGVja0JvdW5kcyhidWYsIG9mZnNldCwgYnl0ZUxlbmd0aClcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIgKHZhbHVlLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCAnbnVtYmVyJywgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gYm91bmRzRXJyb3IgKHZhbHVlLCBsZW5ndGgsIHR5cGUpIHtcbiAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgIHZhbGlkYXRlTnVtYmVyKHZhbHVlLCB0eXBlKVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLCAnYW4gaW50ZWdlcicsIHZhbHVlKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUygpXG4gIH1cblxuICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA+PSAke3R5cGUgPyAxIDogMH0gYW5kIDw9ICR7bGVuZ3RofWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSlcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG5jb25zdCBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgbGV0IGNvZGVQb2ludFxuICBjb25zdCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIGxldCBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICBjb25zdCBieXRlcyA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgbGV0IGMsIGhpLCBsb1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IG9iamVjdHMgZnJvbSBvdGhlciBjb250ZXh0cyAoaS5lLiBpZnJhbWVzKSBkbyBub3QgcGFzc1xuLy8gdGhlIGBpbnN0YW5jZW9mYCBjaGVjayBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyBvZiB0aGF0IHR5cGUuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjZcbmZ1bmN0aW9uIGlzSW5zdGFuY2UgKG9iaiwgdHlwZSkge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZSB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSAhPSBudWxsICYmXG4gICAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lKVxufVxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICAvLyBGb3IgSUUxMSBzdXBwb3J0XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlIGZvciBgdG9TdHJpbmcoJ2hleCcpYFxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMjE5XG5jb25zdCBoZXhTbGljZUxvb2t1cFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgY29uc3QgdGFibGUgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICBjb25zdCBpMTYgPSBpICogMTZcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIHRhYmxlW2kxNiArIGpdID0gYWxwaGFiZXRbaV0gKyBhbHBoYWJldFtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFibGVcbn0pKClcblxuLy8gUmV0dXJuIG5vdCBmdW5jdGlvbiB3aXRoIEVycm9yIGlmIEJpZ0ludCBub3Qgc3VwcG9ydGVkXG5mdW5jdGlvbiBkZWZpbmVCaWdJbnRNZXRob2QgKGZuKSB7XG4gIHJldHVybiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgOiBmblxufVxuXG5mdW5jdGlvbiBCdWZmZXJCaWdJbnROb3REZWZpbmVkICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdCaWdJbnQgbm90IHN1cHBvcnRlZCcpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV1aWQgPSByZXF1aXJlKCd1dWlkJykudjQ7XG5cbi8qKlxuICogIEdlbmVyYXRlcyBhIEpTT04tUlBDIDEuMCBvciAyLjAgcmVxdWVzdFxuICogIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgTmFtZSBvZiBtZXRob2QgdG8gY2FsbFxuICogIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBwYXJhbXMgQXJyYXkgb2YgcGFyYW1ldGVycyBwYXNzZWQgdG8gdGhlIG1ldGhvZCBhcyBzcGVjaWZpZWQsIG9yIGFuIG9iamVjdCBvZiBwYXJhbWV0ZXIgbmFtZXMgYW5kIGNvcnJlc3BvbmRpbmcgdmFsdWVcbiAqICBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8bnVsbH0gW2lkXSBSZXF1ZXN0IElEIGNhbiBiZSBhIHN0cmluZywgbnVtYmVyLCBudWxsIGZvciBleHBsaWNpdCBub3RpZmljYXRpb24gb3IgbGVmdCBvdXQgZm9yIGF1dG9tYXRpYyBnZW5lcmF0aW9uXG4gKiAgQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy52ZXJzaW9uPTJdIEpTT04tUlBDIHZlcnNpb24gdG8gdXNlICgxIG9yIDIpXG4gKiAgQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5ub3RpZmljYXRpb25JZE51bGw9ZmFsc2VdIFdoZW4gdHJ1ZSwgdmVyc2lvbiAyIHJlcXVlc3RzIHdpbGwgc2V0IGlkIHRvIG51bGwgaW5zdGVhZCBvZiBvbWl0dGluZyBpdFxuICogIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmdlbmVyYXRvcl0gUGFzc2VkIHRoZSByZXF1ZXN0LCBhbmQgdGhlIG9wdGlvbnMgb2JqZWN0IGFuZCBpcyBleHBlY3RlZCB0byByZXR1cm4gYSByZXF1ZXN0IElEXG4gKiAgQHRocm93cyB7VHlwZUVycm9yfSBJZiBhbnkgb2YgdGhlIHBhcmFtZXRlcnMgYXJlIGludmFsaWRcbiAqICBAcmV0dXJuIHtPYmplY3R9IEEgSlNPTi1SUEMgMS4wIG9yIDIuMCByZXF1ZXN0XG4gKiAgQG1lbWJlck9mIFV0aWxzXG4gKi9cbmNvbnN0IGdlbmVyYXRlUmVxdWVzdCA9IGZ1bmN0aW9uKG1ldGhvZCwgcGFyYW1zLCBpZCwgb3B0aW9ucykge1xuICBpZih0eXBlb2YgbWV0aG9kICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IobWV0aG9kICsgJyBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBjaGVjayB2YWxpZCB2ZXJzaW9uIHByb3ZpZGVkXG4gIGNvbnN0IHZlcnNpb24gPSB0eXBlb2Ygb3B0aW9ucy52ZXJzaW9uID09PSAnbnVtYmVyJyA/IG9wdGlvbnMudmVyc2lvbiA6IDI7XG4gIGlmICh2ZXJzaW9uICE9PSAxICYmIHZlcnNpb24gIT09IDIpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHZlcnNpb24gKyAnIG11c3QgYmUgMSBvciAyJyk7XG4gIH1cblxuICBjb25zdCByZXF1ZXN0ID0ge1xuICAgIG1ldGhvZDogbWV0aG9kXG4gIH07XG5cbiAgaWYodmVyc2lvbiA9PT0gMikge1xuICAgIHJlcXVlc3QuanNvbnJwYyA9ICcyLjAnO1xuICB9XG5cbiAgaWYocGFyYW1zKSB7XG4gICAgLy8gcGFyYW1zIGdpdmVuLCBidXQgaW52YWxpZD9cbiAgICBpZih0eXBlb2YgcGFyYW1zICE9PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHBhcmFtcyArICcgbXVzdCBiZSBhbiBvYmplY3QsIGFycmF5IG9yIG9taXR0ZWQnKTtcbiAgICB9XG4gICAgcmVxdWVzdC5wYXJhbXMgPSBwYXJhbXM7XG4gIH1cblxuICAvLyBpZiBpZCB3YXMgbGVmdCBvdXQsIGdlbmVyYXRlIG9uZSAobnVsbCBtZWFucyBleHBsaWNpdCBub3RpZmljYXRpb24pXG4gIGlmKHR5cGVvZihpZCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgZ2VuZXJhdG9yID0gdHlwZW9mIG9wdGlvbnMuZ2VuZXJhdG9yID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5nZW5lcmF0b3IgOiBmdW5jdGlvbigpIHsgcmV0dXJuIHV1aWQoKTsgfTtcbiAgICByZXF1ZXN0LmlkID0gZ2VuZXJhdG9yKHJlcXVlc3QsIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKHZlcnNpb24gPT09IDIgJiYgaWQgPT09IG51bGwpIHtcbiAgICAvLyB3ZSBoYXZlIGEgdmVyc2lvbiAyIG5vdGlmaWNhdGlvblxuICAgIGlmIChvcHRpb25zLm5vdGlmaWNhdGlvbklkTnVsbCkge1xuICAgICAgcmVxdWVzdC5pZCA9IG51bGw7IC8vIGlkIHdpbGwgbm90IGJlIHNldCBhdCBhbGwgdW5sZXNzIG9wdGlvbiBwcm92aWRlZFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXF1ZXN0LmlkID0gaWQ7XG4gIH1cblxuICByZXR1cm4gcmVxdWVzdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGVSZXF1ZXN0O1xuIiwiLy8g0JHQsNC30L7QstGL0Lkg0YHQutGA0LjQv9GCINC00LvRjyDQstC30LDQuNC80L7QtNC10LnRgdGC0LLQuNGPINGBIFNvbGFuYVxyXG4vLyDQo9GB0YLQsNC90L7QstC40YLQtSDQvdC10L7QsdGF0L7QtNC40LzRi9C1INC30LDQstC40YHQuNC80L7RgdGC0Lg6XHJcbi8vIG5wbSBpbnN0YWxsIEBzb2xhbmEvd2ViMy5qc1xyXG5cclxuY29uc3QgeyBDb25uZWN0aW9uLCBQdWJsaWNLZXksIEtleXBhaXIsIExBTVBPUlRTX1BFUl9TT0wgfSA9IHJlcXVpcmUoJ0Bzb2xhbmEvd2ViMy5qcycpO1xyXG5cclxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC/0YDQvtCy0LXRgNC60Lgg0LHQsNC70LDQvdGB0LAg0LrQvtGI0LXQu9GM0LrQsFxyXG5hc3luYyBmdW5jdGlvbiBnZXRCYWxhbmNlKGNvbm5lY3Rpb24sIHB1YmxpY0tleSkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INCx0LDQu9Cw0L3RgVxyXG4gICAgY29uc3QgYmFsYW5jZSA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0QmFsYW5jZShwdWJsaWNLZXkpO1xyXG5cclxuICAgIC8vINCa0L7QvdCy0LXRgNGC0LjRgNGD0LXQvCDQu9Cw0Lxwb3J0cyDQsiBTT0wgKDEgU09MID0gMSwwMDAsMDAwLDAwMCBsYW1wb3J0cylcclxuICAgIGNvbnN0IHNvbEJhbGFuY2UgPSBiYWxhbmNlIC8gTEFNUE9SVFNfUEVSX1NPTDtcclxuXHJcbiAgICBjb25zdCBvdXRwdXREYXRhID0gYNCR0LDQu9Cw0L3RgTogJHtzb2xCYWxhbmNlfSBTT0xgO1xyXG5cclxuICAgIHJldHVybiBvdXRwdXREYXRhO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LAg0L/RgNC4INC/0YDQvtCy0LXRgNC60LUg0LHQsNC70LDQvdGB0LA6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG59XHJcblxyXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINC40L3RhNC+0YDQvNCw0YbQuNC4INC+0LEg0LDQutC60LDRg9C90YLQtVxyXG5hc3luYyBmdW5jdGlvbiBnZXRBY2NvdW50SW5mbyhjb25uZWN0aW9uLCBwdWJsaWNLZXkpIHtcclxuICB0cnkge1xyXG4gICAgLy8g0J/QvtC70YPRh9Cw0LXQvCDQuNC90YTQvtGA0LzQsNGG0LjRjiDQvtCxINCw0LrQutCw0YPQvdGC0LVcclxuICAgIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgY29ubmVjdGlvbi5nZXRBY2NvdW50SW5mbyhwdWJsaWNLZXkpO1xyXG5cclxuICAgIGxldCBvdXRwdXREYXRhID0gJyc7XHJcblxyXG4gICAgaWYgKGFjY291bnRJbmZvKSB7XHJcbiAgICAgIG91dHB1dERhdGEgPSBg0JLQu9Cw0LTQtdC70LXRhjogJHthY2NvdW50SW5mby5vd25lci50b1N0cmluZygpfTxicj7QmNGB0L/QvtC70L3Rj9C10LzRi9C5OiAke2FjY291bnRJbmZvLmV4ZWN1dGFibGV9PGJyPtCg0LDQt9C80LXRgCDQtNCw0L3QvdGL0YU6ICR7YWNjb3VudEluZm8uZGF0YS5sZW5ndGh9INCx0LDQudGCYDtcclxuICAgICAgLy9jb25zb2xlLmxvZygn0JjQvdGE0L7RgNC80LDRhtC40Y8g0L7QsSDQsNC60LrQsNGD0L3RgtC1OicpO1xyXG4gICAgICAvL2NvbnNvbGUubG9nKGDQktC70LDQtNC10LvQtdGGOiAke2FjY291bnRJbmZvLm93bmVyLnRvU3RyaW5nKCl9YCk7XHJcbiAgICAgIC8vY29uc29sZS5sb2coYNCY0YHQv9C+0LvQvdGP0LXQvNGL0Lk6ICR7YWNjb3VudEluZm8uZXhlY3V0YWJsZX1gKTtcclxuICAgICAgLy9jb25zb2xlLmxvZyhg0KDQsNC30LzQtdGAINC00LDQvdC90YvRhTogJHthY2NvdW50SW5mby5kYXRhLmxlbmd0aH0g0LHQsNC50YJgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG91dHB1dERhdGEgPSAn0JDQutC60LDRg9C90YIg0L3QtSDQvdCw0LnQtNC10L0g0LjQu9C4INC90LUg0YHQvtC00LXRgNC20LjRgiDQtNCw0L3QvdGL0YUnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvdXRwdXREYXRhO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LAg0L/RgNC4INC/0L7Qu9GD0YfQtdC90LjQuCDQuNC90YTQvtGA0LzQsNGG0LjQuCDQvtCxINCw0LrQutCw0YPQvdGC0LU6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0YHQvtC30LTQsNC90LjRjyDQvdC+0LLQvtCz0L4g0LrQvtGI0LXQu9GM0LrQsFxyXG4vLyBmdW5jdGlvbiBjcmVhdGVOZXdXYWxsZXQoKSB7XHJcbi8vICAgLy8g0JPQtdC90LXRgNC40YDRg9C10Lwg0L3QvtCy0YPRjiDQutC70Y7Rh9C10LLRg9GOINC/0LDRgNGDXHJcbi8vICAgY29uc3QgbmV3V2FsbGV0ID0gS2V5cGFpci5nZW5lcmF0ZSgpO1xyXG5cclxuLy8gICBjb25zb2xlLmxvZygn0KHQvtC30LTQsNC9INC90L7QstGL0Lkg0LrQvtGI0LXQu9C10Lo6Jyk7XHJcbi8vICAgY29uc29sZS5sb2coYNCf0YPQsdC70LjRh9C90YvQuSDQutC70Y7RhyAo0LDQtNGA0LXRgSk6ICR7bmV3V2FsbGV0LnB1YmxpY0tleS50b1N0cmluZygpfWApO1xyXG4vLyAgIGNvbnNvbGUubG9nKGDQn9GA0LjQstCw0YLQvdGL0Lkg0LrQu9GO0Yc6IFske0J1ZmZlci5mcm9tKG5ld1dhbGxldC5zZWNyZXRLZXkpLnRvU3RyaW5nKCdoZXgnKX1dYCk7XHJcblxyXG4vLyAgIHJldHVybiBuZXdXYWxsZXQ7XHJcbi8vIH1cclxuXHJcbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0L/QvtGB0LvQtdC00L3QuNGFINGC0YDQsNC90LfQsNC60YbQuNC5XHJcbmFzeW5jIGZ1bmN0aW9uIGdldFJlY2VudFRyYW5zYWN0aW9ucyhjb25uZWN0aW9uLCBwdWJsaWNLZXksIGxpbWl0ID0gMzApIHtcclxuICB0cnkge1xyXG4gICAgLy8g0J/QvtC70YPRh9Cw0LXQvCDQv9C+0LTQv9C40YHQuCDQv9C+0YHQu9C10LTQvdC40YUg0YLRgNCw0L3Qt9Cw0LrRhtC40LlcclxuICAgIGNvbnN0IHNpZ25hdHVyZXMgPSBhd2FpdCBjb25uZWN0aW9uLmdldFNpZ25hdHVyZXNGb3JBZGRyZXNzKHB1YmxpY0tleSwgeyBsaW1pdCB9KTtcclxuXHJcbiAgICBpZiAoc2lnbmF0dXJlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vINCf0YDQvtGF0L7QtNC40Lwg0L/QviDQutCw0LbQtNC+0Lkg0L/QvtC00L/QuNGB0Lgg0Lgg0L/QvtC70YPRh9Cw0LXQvCDQv9C+0LTRgNC+0LHQvdGD0Y4g0LjQvdGE0L7RgNC80LDRhtC40Y5cclxuICAgIGNvbnN0IHRyYW5zYWN0aW9uc0luZm8gPSBhd2FpdCBQcm9taXNlLmFsbChcclxuICAgICAgc2lnbmF0dXJlcy5tYXAoYXN5bmMgKHNpZ25hdHVyZUluZm8pID0+IHtcclxuICAgICAgICBjb25zdCB0eEluZm8gPSBhd2FpdCBjb25uZWN0aW9uLmdldFRyYW5zYWN0aW9uKHNpZ25hdHVyZUluZm8uc2lnbmF0dXJlKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmVJbmZvLnNpZ25hdHVyZSxcclxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoc2lnbmF0dXJlSW5mby5ibG9ja1RpbWUgKiAxMDAwKS50b0xvY2FsZVN0cmluZygpLFxyXG4gICAgICAgICAgc3VjY2Vzc2Z1bDogc2lnbmF0dXJlSW5mby5jb25maXJtYXRpb25TdGF0dXMgPT09ICdmaW5hbGl6ZWQnLFxyXG4gICAgICAgICAgZGV0YWlsczogdHhJbmZvXHJcbiAgICAgICAgfTtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgLy8g0JLRi9Cy0L7QtNC40Lwg0LjQvdGE0L7RgNC80LDRhtC40Y4g0L4g0YLRgNCw0L3Qt9Cw0LrRhtC40Y/RhVxyXG4gICAgbGV0IHRyYW5zYWN0aW9uc0FycmF5ID0gW107XHJcblxyXG4gICAgdHJhbnNhY3Rpb25zSW5mby5mb3JFYWNoKCh0eCwgaW5kZXgpID0+IHtcclxuXHJcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uQmxvY2sgPSBgXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidHJhbnNhY3Rpb25zX19pdGVtXCI+XHJcbiAgICAgICAgICAgIDxwIGNsYXNzPVwidHJhbnNhY3Rpb25zX192YWx1ZVwiPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidHJhbnNhY3Rpb25zX19kZXNjcmlwdGlvblwiPtCi0YDQsNC90LfQsNC60YbQuNGPICR7aW5kZXggKyAxfTogPC9zcGFuPlxyXG4gICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDxwIGNsYXNzPVwidHJhbnNhY3Rpb25zX192YWx1ZVwiPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidHJhbnNhY3Rpb25zX19kZXNjcmlwdGlvblwiPtCh0LjQs9C90LDRgtGD0YDQsDogPC9zcGFuPlxyXG4gICAgICAgICAgICAgICR7dHguc2lnbmF0dXJlfVxyXG4gICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDxwIGNsYXNzPVwidHJhbnNhY3Rpb25zX192YWx1ZVwiPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidHJhbnNhY3Rpb25zX19kZXNjcmlwdGlvblwiPtCS0YDQtdC80Y86IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAke3R4LnRpbWVzdGFtcH1cclxuICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICA8cCBjbGFzcz1cInRyYW5zYWN0aW9uc19fdmFsdWVcIj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRyYW5zYWN0aW9uc19fZGVzY3JpcHRpb25cIj7QodGC0LDRgtGD0YE6IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAke3R4LnN1Y2Nlc3NmdWwgPyAn0KPRgdC/0LXRiNC90L4nIDogJ9CSINC+0LHRgNCw0LHQvtGC0LrQtSd9XHJcbiAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcbiAgICAgIHRyYW5zYWN0aW9uc0FycmF5LnB1c2godHJhbnNhY3Rpb25CbG9jayk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uc0FycmF5LnJldmVyc2UoKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINC/0YDQuCDQv9C+0LvRg9GH0LXQvdC40Lgg0YLRgNCw0L3Qt9Cw0LrRhtC40Lk6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufVxyXG5cclxuLy8g0J/QvtC70YPRh9C10L3QuNC1INC40L3RhNC+0YDQvNCw0YbQuNC4INC+INCx0LvQvtC60YfQtdC50L3QtSBTb2xhbmFcclxuYXN5bmMgZnVuY3Rpb24gZ2V0TmV0d29ya0luZm8oY29ubmVjdGlvbikge1xyXG4gIHRyeSB7XHJcbiAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INCy0LXRgNGB0LjRjlxyXG4gICAgY29uc3QgdmVyc2lvbiA9IGF3YWl0IGNvbm5lY3Rpb24uZ2V0VmVyc2lvbigpO1xyXG5cclxuICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0LLRi9GB0L7RgtGDINCx0LvQvtC60YfQtdC50L3QsFxyXG4gICAgY29uc3QgYmxvY2tIZWlnaHQgPSBhd2FpdCBjb25uZWN0aW9uLmdldEJsb2NrSGVpZ2h0KCk7XHJcblxyXG4gICAgLy8g0J/QvtC70YPRh9Cw0LXQvCDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDRgtC10LrRg9GJ0LXQvCDRgdC70L7RgtC1XHJcbiAgICBjb25zdCBzbG90ID0gYXdhaXQgY29ubmVjdGlvbi5nZXRTbG90KCk7XHJcblxyXG4gICAgLy8g0J/QvtC70YPRh9Cw0LXQvCDRgtC10LrRg9GJ0LjQuSDRhdC10Ygg0LHQu9C+0LrQsFxyXG4gICAgY29uc3QgYmxvY2toYXNoID0gYXdhaXQgY29ubmVjdGlvbi5nZXRMYXRlc3RCbG9ja2hhc2goKTtcclxuXHJcbiAgICBjb25zdCBhID0gYXdhaXQgY29ubmVjdGlvbi5nZXRcclxuXHJcbiAgICAvKlxyXG4gICAgLSDQktC10YDRgdC40Y8gU29sYW5hXHJcbiAgICAgICAgLSDQktGL0YHQvtGC0LAg0LHQu9C+0LrRh9C10LnQvdCwXHJcbiAgICAgICAgLSDQotC10LrRg9GJ0LjQuSDRgdC70L7RglxyXG4gICAgICAgIC0g0KXQtdGIINGC0LXQutGD0YnQtdCz0L4g0LHQu9C+0LrQsFxyXG4gICAgICAgIC0g0KLQtdC60YPRidCw0Y8g0Y3Qv9C+0YXQsFxyXG4gICAgICAgIC0g0JrQvtC80LjRgdGB0LjRjyDQt9CwINGC0YDQsNC90LfQsNC60YbQuNGOXHJcbiAgICAqL1xyXG5cclxuICAgIGNvbnN0IG91dHB1dERhdGEgPSBg0JLQtdGA0YHQuNGPOiAke3ZlcnNpb25bJ3NvbGFuYS1jb3JlJ119PGJyPtCS0YvRgdC+0YLQsCDQsdC70L7QutGH0LXQudC90LA6ICR7YmxvY2tIZWlnaHR9PGJyPtCi0LXQutGD0YnQuNC5INGB0LvQvtGCOiAke3Nsb3R9PGJyPtCi0LXQutGD0YnQuNC5INGF0LXRiCDQsdC70L7QutCwOiAke2Jsb2NraGFzaC5ibG9ja2hhc2h9YDtcclxuXHJcbiAgICByZXR1cm4gb3V0cHV0RGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINC/0YDQuCDQv9C+0LvRg9GH0LXQvdC40Lgg0LjQvdGE0L7RgNC80LDRhtC40Lgg0L4g0YHQtdGC0Lg6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vLyDQn9GA0LjQvNC10YAg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8gKNC40YHQv9GA0LDQstC70LXQvdC90YvQuSwg0LHQtdC3INC30LDQv9GA0L7RgdCwIGFpcmRyb3ApXHJcbi8vIGFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XHJcbi8vICAgdHJ5IHtcclxuLy8gICAgIGNvbnNvbGUubG9nKCc9PT09PSDQlNCV0JzQntCd0KHQotCg0JDQptCY0K8g0KDQkNCR0J7QotCrINChIFNPTEFOQSA9PT09PScpO1xyXG5cclxuLy8gICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0LjQvdGE0L7RgNC80LDRhtC40Y4g0L4g0YHQtdGC0LhcclxuLy8gICAgIGNvbnNvbGUubG9nKCdcXG4xLiDQn9C+0LvRg9GH0LXQvdC40LUg0LjQvdGE0L7RgNC80LDRhtC40Lgg0L4g0YHQtdGC0Lg6Jyk7XHJcbi8vICAgICBhd2FpdCBnZXROZXR3b3JrSW5mbygpO1xyXG5cclxuLy8gICAgIC8vINCh0L7Qt9C00LDQtdC8INC90L7QstGL0Lkg0LrQvtGI0LXQu9C10LpcclxuLy8gICAgIGNvbnNvbGUubG9nKCdcXG4yLiDQodC+0LfQtNCw0L3QuNC1INC90L7QstC+0LPQviDQutC+0YjQtdC70YzQutCwOicpO1xyXG4vLyAgICAgY29uc3Qgd2FsbGV0ID0gY3JlYXRlTmV3V2FsbGV0KCk7XHJcbi8vICAgICBjb25zdCB3YWxsZXRBZGRyZXNzID0gd2FsbGV0LnB1YmxpY0tleS50b1N0cmluZygpO1xyXG5cclxuLy8gICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0LjQvdGE0L7RgNC80LDRhtC40Y4g0L7QsSDQsNC60LrQsNGD0L3RgtC1XHJcbi8vICAgICBjb25zb2xlLmxvZygnXFxuMy4g0J/QvtC70YPRh9C10L3QuNC1INC40L3RhNC+0YDQvNCw0YbQuNC4INC+0LEg0LDQutC60LDRg9C90YLQtTonKTtcclxuLy8gICAgIGF3YWl0IGdldEFjY291bnRJbmZvKHdhbGxldEFkZHJlc3MpO1xyXG5cclxuLy8gICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCDQsdCw0LvQsNC90YFcclxuLy8gICAgIGNvbnNvbGUubG9nKCdcXG40LiDQn9GA0L7QstC10YDQutCwINCx0LDQu9Cw0L3RgdCwOicpO1xyXG4vLyAgICAgYXdhaXQgZ2V0QmFsYW5jZSh3YWxsZXRBZGRyZXNzKTtcclxuXHJcbi8vICAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INC/0L7RgdC70LXQtNC90LjQtSDRgtGA0LDQvdC30LDQutGG0LjQuFxyXG4vLyAgICAgY29uc29sZS5sb2coJ1xcbjUuINCf0L7Qu9GD0YfQtdC90LjQtSDQv9C+0YHQu9C10LTQvdC40YUg0YLRgNCw0L3Qt9Cw0LrRhtC40Lk6Jyk7XHJcbi8vICAgICBhd2FpdCBnZXRSZWNlbnRUcmFuc2FjdGlvbnMod2FsbGV0QWRkcmVzcyk7XHJcblxyXG4vLyAgICAgY29uc29sZS5sb2coJ1xcbj09PT09INCU0JXQnNCe0J3QodCi0KDQkNCm0JjQryDQl9CQ0JLQldCg0KjQldCd0JAgPT09PT0nKTtcclxuLy8gICB9IGNhdGNoIChlcnJvcikge1xyXG4vLyAgICAgY29uc29sZS5lcnJvcign0J/RgNC+0LjQt9C+0YjQu9CwINC+0YjQuNCx0LrQsCDQsiDQvtGB0L3QvtCy0L3QvtC8INC/0YDQvtGG0LXRgdGB0LU6JywgZXJyb3IpO1xyXG4vLyAgIH1cclxuLy8gfVxyXG5cclxuLy8g0K3QutGB0L/QvtGA0YLQuNGA0YPQtdC8INGE0YPQvdC60YbQuNC4INC00LvRjyDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjyDQsiDQtNGA0YPQs9C40YUg0LzQvtC00YPQu9GP0YVcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZ2V0QmFsYW5jZSxcclxuICBnZXRBY2NvdW50SW5mbyxcclxuICBnZXRSZWNlbnRUcmFuc2FjdGlvbnMsXHJcbiAgZ2V0TmV0d29ya0luZm9cclxufTtcclxuXHJcbi8vbWFpbigpOyIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxudmFyIGdldFJhbmRvbVZhbHVlcztcbnZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgLy8gbGF6eSBsb2FkIHNvIHRoYXQgZW52aXJvbm1lbnRzIHRoYXQgbmVlZCB0byBwb2x5ZmlsbCBoYXZlIGEgY2hhbmNlIHRvIGRvIHNvXG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLiBBbHNvLFxuICAgIC8vIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byAobXNDcnlwdG8pIG9uIElFMTEuXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSB8fCB0eXBlb2YgbXNDcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pO1xuXG4gICAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn0iLCJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbnZhciBieXRlVG9IZXggPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFycikge1xuICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgdmFyIHV1aWQgPSAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7IiwiaW1wb3J0IFJFR0VYIGZyb20gJy4vcmVnZXguanMnO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7IiwiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiLyoqXG4gKiBJbnRlcm5hbCBhc3NlcnRpb24gaGVscGVycy5cbiAqIEBtb2R1bGVcbiAqL1xuLyoqIEFzc2VydHMgc29tZXRoaW5nIGlzIHBvc2l0aXZlIGludGVnZXIuICovXG5mdW5jdGlvbiBhbnVtYmVyKG4pIHtcbiAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKG4pIHx8IG4gPCAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Bvc2l0aXZlIGludGVnZXIgZXhwZWN0ZWQsIGdvdCAnICsgbik7XG59XG4vKiogSXMgbnVtYmVyIGFuIFVpbnQ4QXJyYXk/IENvcGllZCBmcm9tIHV0aWxzIGZvciBwZXJmLiAqL1xuZnVuY3Rpb24gaXNCeXRlcyhhKSB7XG4gICAgcmV0dXJuIGEgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IChBcnJheUJ1ZmZlci5pc1ZpZXcoYSkgJiYgYS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpO1xufVxuLyoqIEFzc2VydHMgc29tZXRoaW5nIGlzIFVpbnQ4QXJyYXkuICovXG5mdW5jdGlvbiBhYnl0ZXMoYiwgLi4ubGVuZ3Rocykge1xuICAgIGlmICghaXNCeXRlcyhiKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVaW50OEFycmF5IGV4cGVjdGVkJyk7XG4gICAgaWYgKGxlbmd0aHMubGVuZ3RoID4gMCAmJiAhbGVuZ3Rocy5pbmNsdWRlcyhiLmxlbmd0aCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVWludDhBcnJheSBleHBlY3RlZCBvZiBsZW5ndGggJyArIGxlbmd0aHMgKyAnLCBnb3QgbGVuZ3RoPScgKyBiLmxlbmd0aCk7XG59XG4vKiogQXNzZXJ0cyBzb21ldGhpbmcgaXMgaGFzaCAqL1xuZnVuY3Rpb24gYWhhc2goaCkge1xuICAgIGlmICh0eXBlb2YgaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaC5jcmVhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBzaG91bGQgYmUgd3JhcHBlZCBieSB1dGlscy53cmFwQ29uc3RydWN0b3InKTtcbiAgICBhbnVtYmVyKGgub3V0cHV0TGVuKTtcbiAgICBhbnVtYmVyKGguYmxvY2tMZW4pO1xufVxuLyoqIEFzc2VydHMgYSBoYXNoIGluc3RhbmNlIGhhcyBub3QgYmVlbiBkZXN0cm95ZWQgLyBmaW5pc2hlZCAqL1xuZnVuY3Rpb24gYWV4aXN0cyhpbnN0YW5jZSwgY2hlY2tGaW5pc2hlZCA9IHRydWUpIHtcbiAgICBpZiAoaW5zdGFuY2UuZGVzdHJveWVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hhc2ggaW5zdGFuY2UgaGFzIGJlZW4gZGVzdHJveWVkJyk7XG4gICAgaWYgKGNoZWNrRmluaXNoZWQgJiYgaW5zdGFuY2UuZmluaXNoZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCcpO1xufVxuLyoqIEFzc2VydHMgb3V0cHV0IGlzIHByb3Blcmx5LXNpemVkIGJ5dGUgYXJyYXkgKi9cbmZ1bmN0aW9uIGFvdXRwdXQob3V0LCBpbnN0YW5jZSkge1xuICAgIGFieXRlcyhvdXQpO1xuICAgIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgICBpZiAob3V0Lmxlbmd0aCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICcgKyBtaW4pO1xuICAgIH1cbn1cbmV4cG9ydCB7IGFudW1iZXIsIGFieXRlcywgYWhhc2gsIGFleGlzdHMsIGFvdXRwdXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9hc3NlcnQuanMubWFwIiwiZXhwb3J0IGNvbnN0IGNyeXB0byA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JyAmJiAnY3J5cHRvJyBpbiBnbG9iYWxUaGlzID8gZ2xvYmFsVGhpcy5jcnlwdG8gOiB1bmRlZmluZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcnlwdG8uanMubWFwIiwiLyoqXG4gKiBVdGlsaXRpZXMgZm9yIGhleCwgYnl0ZXMsIENTUFJORy5cbiAqIEBtb2R1bGVcbiAqL1xuLyohIG5vYmxlLWhhc2hlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuLy8gV2UgdXNlIFdlYkNyeXB0byBha2EgZ2xvYmFsVGhpcy5jcnlwdG8sIHdoaWNoIGV4aXN0cyBpbiBicm93c2VycyBhbmQgbm9kZS5qcyAxNisuXG4vLyBub2RlLmpzIHZlcnNpb25zIGVhcmxpZXIgdGhhbiB2MTkgZG9uJ3QgZGVjbGFyZSBpdCBpbiBnbG9iYWwgc2NvcGUuXG4vLyBGb3Igbm9kZS5qcywgcGFja2FnZS5qc29uI2V4cG9ydHMgZmllbGQgbWFwcGluZyByZXdyaXRlcyBpbXBvcnRcbi8vIGZyb20gYGNyeXB0b2AgdG8gYGNyeXB0b05vZGVgLCB3aGljaCBpbXBvcnRzIG5hdGl2ZSBtb2R1bGUuXG4vLyBNYWtlcyB0aGUgdXRpbHMgdW4taW1wb3J0YWJsZSBpbiBicm93c2VycyB3aXRob3V0IGEgYnVuZGxlci5cbi8vIE9uY2Ugbm9kZS5qcyAxOCBpcyBkZXByZWNhdGVkICgyMDI1LTA0LTMwKSwgd2UgY2FuIGp1c3QgZHJvcCB0aGUgaW1wb3J0LlxuaW1wb3J0IHsgY3J5cHRvIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9jcnlwdG8nO1xuaW1wb3J0IHsgYWJ5dGVzIH0gZnJvbSAnLi9fYXNzZXJ0LmpzJztcbi8vIGV4cG9ydCB7IGlzQnl0ZXMgfSBmcm9tICcuL19hc3NlcnQuanMnO1xuLy8gV2UgY2FuJ3QgcmV1c2UgaXNCeXRlcyBmcm9tIF9hc3NlcnQsIGJlY2F1c2Ugc29tZWhvdyB0aGlzIGNhdXNlcyBodWdlIHBlcmYgaXNzdWVzXG5leHBvcnQgZnVuY3Rpb24gaXNCeXRlcyhhKSB7XG4gICAgcmV0dXJuIGEgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IChBcnJheUJ1ZmZlci5pc1ZpZXcoYSkgJiYgYS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnVWludDhBcnJheScpO1xufVxuLy8gQ2FzdCBhcnJheSB0byBkaWZmZXJlbnQgdHlwZVxuZXhwb3J0IGZ1bmN0aW9uIHU4KGFycikge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShhcnIuYnVmZmVyLCBhcnIuYnl0ZU9mZnNldCwgYXJyLmJ5dGVMZW5ndGgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHUzMihhcnIpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KGFyci5idWZmZXIsIGFyci5ieXRlT2Zmc2V0LCBNYXRoLmZsb29yKGFyci5ieXRlTGVuZ3RoIC8gNCkpO1xufVxuLy8gQ2FzdCBhcnJheSB0byB2aWV3XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVmlldyhhcnIpIHtcbiAgICByZXR1cm4gbmV3IERhdGFWaWV3KGFyci5idWZmZXIsIGFyci5ieXRlT2Zmc2V0LCBhcnIuYnl0ZUxlbmd0aCk7XG59XG4vKiogVGhlIHJvdGF0ZSByaWdodCAoY2lyY3VsYXIgcmlnaHQgc2hpZnQpIG9wZXJhdGlvbiBmb3IgdWludDMyICovXG5leHBvcnQgZnVuY3Rpb24gcm90cih3b3JkLCBzaGlmdCkge1xuICAgIHJldHVybiAod29yZCA8PCAoMzIgLSBzaGlmdCkpIHwgKHdvcmQgPj4+IHNoaWZ0KTtcbn1cbi8qKiBUaGUgcm90YXRlIGxlZnQgKGNpcmN1bGFyIGxlZnQgc2hpZnQpIG9wZXJhdGlvbiBmb3IgdWludDMyICovXG5leHBvcnQgZnVuY3Rpb24gcm90bCh3b3JkLCBzaGlmdCkge1xuICAgIHJldHVybiAod29yZCA8PCBzaGlmdCkgfCAoKHdvcmQgPj4+ICgzMiAtIHNoaWZ0KSkgPj4+IDApO1xufVxuLyoqIElzIGN1cnJlbnQgcGxhdGZvcm0gbGl0dGxlLWVuZGlhbj8gTW9zdCBhcmUuIEJpZy1FbmRpYW4gcGxhdGZvcm06IElCTSAqL1xuZXhwb3J0IGNvbnN0IGlzTEUgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IG5ldyBVaW50OEFycmF5KG5ldyBVaW50MzJBcnJheShbMHgxMTIyMzM0NF0pLmJ1ZmZlcilbMF0gPT09IDB4NDQpKCk7XG4vLyBUaGUgYnl0ZSBzd2FwIG9wZXJhdGlvbiBmb3IgdWludDMyXG5leHBvcnQgZnVuY3Rpb24gYnl0ZVN3YXAod29yZCkge1xuICAgIHJldHVybiAoKCh3b3JkIDw8IDI0KSAmIDB4ZmYwMDAwMDApIHxcbiAgICAgICAgKCh3b3JkIDw8IDgpICYgMHhmZjAwMDApIHxcbiAgICAgICAgKCh3b3JkID4+PiA4KSAmIDB4ZmYwMCkgfFxuICAgICAgICAoKHdvcmQgPj4+IDI0KSAmIDB4ZmYpKTtcbn1cbi8qKiBDb25kaXRpb25hbGx5IGJ5dGUgc3dhcCBpZiBvbiBhIGJpZy1lbmRpYW4gcGxhdGZvcm0gKi9cbmV4cG9ydCBjb25zdCBieXRlU3dhcElmQkUgPSBpc0xFXG4gICAgPyAobikgPT4gblxuICAgIDogKG4pID0+IGJ5dGVTd2FwKG4pO1xuLyoqIEluIHBsYWNlIGJ5dGUgc3dhcCBmb3IgVWludDMyQXJyYXkgKi9cbmV4cG9ydCBmdW5jdGlvbiBieXRlU3dhcDMyKGFycikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycltpXSA9IGJ5dGVTd2FwKGFycltpXSk7XG4gICAgfVxufVxuLy8gQXJyYXkgd2hlcmUgaW5kZXggMHhmMCAoMjQwKSBpcyBtYXBwZWQgdG8gc3RyaW5nICdmMCdcbmNvbnN0IGhleGVzID0gLyogQF9fUFVSRV9fICovIEFycmF5LmZyb20oeyBsZW5ndGg6IDI1NiB9LCAoXywgaSkgPT4gaS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSk7XG4vKipcbiAqIENvbnZlcnQgYnl0ZSBhcnJheSB0byBoZXggc3RyaW5nLlxuICogQGV4YW1wbGUgYnl0ZXNUb0hleChVaW50OEFycmF5LmZyb20oWzB4Y2EsIDB4ZmUsIDB4MDEsIDB4MjNdKSkgLy8gJ2NhZmUwMTIzJ1xuICovXG5leHBvcnQgZnVuY3Rpb24gYnl0ZXNUb0hleChieXRlcykge1xuICAgIGFieXRlcyhieXRlcyk7XG4gICAgLy8gcHJlLWNhY2hpbmcgaW1wcm92ZXMgdGhlIHNwZWVkIDZ4XG4gICAgbGV0IGhleCA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGV4ICs9IGhleGVzW2J5dGVzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIGhleDtcbn1cbi8vIFdlIHVzZSBvcHRpbWl6ZWQgdGVjaG5pcXVlIHRvIGNvbnZlcnQgaGV4IHN0cmluZyB0byBieXRlIGFycmF5XG5jb25zdCBhc2NpaXMgPSB7IF8wOiA0OCwgXzk6IDU3LCBBOiA2NSwgRjogNzAsIGE6IDk3LCBmOiAxMDIgfTtcbmZ1bmN0aW9uIGFzY2lpVG9CYXNlMTYoY2gpIHtcbiAgICBpZiAoY2ggPj0gYXNjaWlzLl8wICYmIGNoIDw9IGFzY2lpcy5fOSlcbiAgICAgICAgcmV0dXJuIGNoIC0gYXNjaWlzLl8wOyAvLyAnMicgPT4gNTAtNDhcbiAgICBpZiAoY2ggPj0gYXNjaWlzLkEgJiYgY2ggPD0gYXNjaWlzLkYpXG4gICAgICAgIHJldHVybiBjaCAtIChhc2NpaXMuQSAtIDEwKTsgLy8gJ0InID0+IDY2LSg2NS0xMClcbiAgICBpZiAoY2ggPj0gYXNjaWlzLmEgJiYgY2ggPD0gYXNjaWlzLmYpXG4gICAgICAgIHJldHVybiBjaCAtIChhc2NpaXMuYSAtIDEwKTsgLy8gJ2InID0+IDk4LSg5Ny0xMClcbiAgICByZXR1cm47XG59XG4vKipcbiAqIENvbnZlcnQgaGV4IHN0cmluZyB0byBieXRlIGFycmF5LlxuICogQGV4YW1wbGUgaGV4VG9CeXRlcygnY2FmZTAxMjMnKSAvLyBVaW50OEFycmF5LmZyb20oWzB4Y2EsIDB4ZmUsIDB4MDEsIDB4MjNdKVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9CeXRlcyhoZXgpIHtcbiAgICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGV4IHN0cmluZyBleHBlY3RlZCwgZ290ICcgKyB0eXBlb2YgaGV4KTtcbiAgICBjb25zdCBobCA9IGhleC5sZW5ndGg7XG4gICAgY29uc3QgYWwgPSBobCAvIDI7XG4gICAgaWYgKGhsICUgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3QgdW5wYWRkZWQgaGV4IG9mIGxlbmd0aCAnICsgaGwpO1xuICAgIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYWwpO1xuICAgIGZvciAobGV0IGFpID0gMCwgaGkgPSAwOyBhaSA8IGFsOyBhaSsrLCBoaSArPSAyKSB7XG4gICAgICAgIGNvbnN0IG4xID0gYXNjaWlUb0Jhc2UxNihoZXguY2hhckNvZGVBdChoaSkpO1xuICAgICAgICBjb25zdCBuMiA9IGFzY2lpVG9CYXNlMTYoaGV4LmNoYXJDb2RlQXQoaGkgKyAxKSk7XG4gICAgICAgIGlmIChuMSA9PT0gdW5kZWZpbmVkIHx8IG4yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBoZXhbaGldICsgaGV4W2hpICsgMV07XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hleCBzdHJpbmcgZXhwZWN0ZWQsIGdvdCBub24taGV4IGNoYXJhY3RlciBcIicgKyBjaGFyICsgJ1wiIGF0IGluZGV4ICcgKyBoaSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJyYXlbYWldID0gbjEgKiAxNiArIG4yOyAvLyBtdWx0aXBseSBmaXJzdCBvY3RldCwgZS5nLiAnYTMnID0+IDEwKjE2KzMgPT4gMTYwICsgMyA9PiAxNjNcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuLyoqXG4gKiBUaGVyZSBpcyBubyBzZXRJbW1lZGlhdGUgaW4gYnJvd3NlciBhbmQgc2V0VGltZW91dCBpcyBzbG93LlxuICogQ2FsbCBvZiBhc3luYyBmbiB3aWxsIHJldHVybiBQcm9taXNlLCB3aGljaCB3aWxsIGJlIGZ1bGxmaWxlZCBvbmx5IG9uXG4gKiBuZXh0IHNjaGVkdWxlciBxdWV1ZSBwcm9jZXNzaW5nIHN0ZXAgYW5kIHRoaXMgaXMgZXhhY3RseSB3aGF0IHdlIG5lZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBuZXh0VGljayA9IGFzeW5jICgpID0+IHsgfTtcbi8qKiBSZXR1cm5zIGNvbnRyb2wgdG8gdGhyZWFkIGVhY2ggJ3RpY2snIG1zIHRvIGF2b2lkIGJsb2NraW5nLiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFzeW5jTG9vcChpdGVycywgdGljaywgY2IpIHtcbiAgICBsZXQgdHMgPSBEYXRlLm5vdygpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlcnM7IGkrKykge1xuICAgICAgICBjYihpKTtcbiAgICAgICAgLy8gRGF0ZS5ub3coKSBpcyBub3QgbW9ub3RvbmljLCBzbyBpbiBjYXNlIGlmIGNsb2NrIGdvZXMgYmFja3dhcmRzIHdlIHJldHVybiByZXR1cm4gY29udHJvbCB0b29cbiAgICAgICAgY29uc3QgZGlmZiA9IERhdGUubm93KCkgLSB0cztcbiAgICAgICAgaWYgKGRpZmYgPj0gMCAmJiBkaWZmIDwgdGljaylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgICB0cyArPSBkaWZmO1xuICAgIH1cbn1cbi8qKlxuICogQ29udmVydCBKUyBzdHJpbmcgdG8gYnl0ZSBhcnJheS5cbiAqIEBleGFtcGxlIHV0ZjhUb0J5dGVzKCdhYmMnKSAvLyBuZXcgVWludDhBcnJheShbOTcsIDk4LCA5OV0pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1dGY4VG9CeXRlcyhzdHIpIHtcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndXRmOFRvQnl0ZXMgZXhwZWN0ZWQgc3RyaW5nLCBnb3QgJyArIHR5cGVvZiBzdHIpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKSk7IC8vIGh0dHBzOi8vYnVnemlsLmxhLzE2ODE4MDlcbn1cbi8qKlxuICogTm9ybWFsaXplcyAobm9uLWhleCkgc3RyaW5nIG9yIFVpbnQ4QXJyYXkgdG8gVWludDhBcnJheS5cbiAqIFdhcm5pbmc6IHdoZW4gVWludDhBcnJheSBpcyBwYXNzZWQsIGl0IHdvdWxkIE5PVCBnZXQgY29waWVkLlxuICogS2VlcCBpbiBtaW5kIGZvciBmdXR1cmUgbXV0YWJsZSBvcGVyYXRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9CeXRlcyhkYXRhKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJylcbiAgICAgICAgZGF0YSA9IHV0ZjhUb0J5dGVzKGRhdGEpO1xuICAgIGFieXRlcyhkYXRhKTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbi8qKlxuICogQ29waWVzIHNldmVyYWwgVWludDhBcnJheXMgaW50byBvbmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRCeXRlcyguLi5hcnJheXMpIHtcbiAgICBsZXQgc3VtID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhID0gYXJyYXlzW2ldO1xuICAgICAgICBhYnl0ZXMoYSk7XG4gICAgICAgIHN1bSArPSBhLmxlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gbmV3IFVpbnQ4QXJyYXkoc3VtKTtcbiAgICBmb3IgKGxldCBpID0gMCwgcGFkID0gMDsgaSA8IGFycmF5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhID0gYXJyYXlzW2ldO1xuICAgICAgICByZXMuc2V0KGEsIHBhZCk7XG4gICAgICAgIHBhZCArPSBhLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qKiBGb3IgcnVudGltZSBjaGVjayBpZiBjbGFzcyBpbXBsZW1lbnRzIGludGVyZmFjZSAqL1xuZXhwb3J0IGNsYXNzIEhhc2gge1xuICAgIC8vIFNhZmUgdmVyc2lvbiB0aGF0IGNsb25lcyBpbnRlcm5hbCBzdGF0ZVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvbmVJbnRvKCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrT3B0cyhkZWZhdWx0cywgb3B0cykge1xuICAgIGlmIChvcHRzICE9PSB1bmRlZmluZWQgJiYge30udG9TdHJpbmcuY2FsbChvcHRzKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignT3B0aW9ucyBzaG91bGQgYmUgb2JqZWN0IG9yIHVuZGVmaW5lZCcpO1xuICAgIGNvbnN0IG1lcmdlZCA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdHMsIG9wdHMpO1xuICAgIHJldHVybiBtZXJnZWQ7XG59XG4vKiogV3JhcHMgaGFzaCBmdW5jdGlvbiwgY3JlYXRpbmcgYW4gaW50ZXJmYWNlIG9uIHRvcCBvZiBpdCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBDb25zdHJ1Y3RvcihoYXNoQ29ucykge1xuICAgIGNvbnN0IGhhc2hDID0gKG1zZykgPT4gaGFzaENvbnMoKS51cGRhdGUodG9CeXRlcyhtc2cpKS5kaWdlc3QoKTtcbiAgICBjb25zdCB0bXAgPSBoYXNoQ29ucygpO1xuICAgIGhhc2hDLm91dHB1dExlbiA9IHRtcC5vdXRwdXRMZW47XG4gICAgaGFzaEMuYmxvY2tMZW4gPSB0bXAuYmxvY2tMZW47XG4gICAgaGFzaEMuY3JlYXRlID0gKCkgPT4gaGFzaENvbnMoKTtcbiAgICByZXR1cm4gaGFzaEM7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcENvbnN0cnVjdG9yV2l0aE9wdHMoaGFzaENvbnMpIHtcbiAgICBjb25zdCBoYXNoQyA9IChtc2csIG9wdHMpID0+IGhhc2hDb25zKG9wdHMpLnVwZGF0ZSh0b0J5dGVzKG1zZykpLmRpZ2VzdCgpO1xuICAgIGNvbnN0IHRtcCA9IGhhc2hDb25zKHt9KTtcbiAgICBoYXNoQy5vdXRwdXRMZW4gPSB0bXAub3V0cHV0TGVuO1xuICAgIGhhc2hDLmJsb2NrTGVuID0gdG1wLmJsb2NrTGVuO1xuICAgIGhhc2hDLmNyZWF0ZSA9IChvcHRzKSA9PiBoYXNoQ29ucyhvcHRzKTtcbiAgICByZXR1cm4gaGFzaEM7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcFhPRkNvbnN0cnVjdG9yV2l0aE9wdHMoaGFzaENvbnMpIHtcbiAgICBjb25zdCBoYXNoQyA9IChtc2csIG9wdHMpID0+IGhhc2hDb25zKG9wdHMpLnVwZGF0ZSh0b0J5dGVzKG1zZykpLmRpZ2VzdCgpO1xuICAgIGNvbnN0IHRtcCA9IGhhc2hDb25zKHt9KTtcbiAgICBoYXNoQy5vdXRwdXRMZW4gPSB0bXAub3V0cHV0TGVuO1xuICAgIGhhc2hDLmJsb2NrTGVuID0gdG1wLmJsb2NrTGVuO1xuICAgIGhhc2hDLmNyZWF0ZSA9IChvcHRzKSA9PiBoYXNoQ29ucyhvcHRzKTtcbiAgICByZXR1cm4gaGFzaEM7XG59XG4vKiogQ3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIFBSTkcuIFVzZXMgaW50ZXJuYWwgT1MtbGV2ZWwgYGNyeXB0by5nZXRSYW5kb21WYWx1ZXNgLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbUJ5dGVzKGJ5dGVzTGVuZ3RoID0gMzIpIHtcbiAgICBpZiAoY3J5cHRvICYmIHR5cGVvZiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KGJ5dGVzTGVuZ3RoKSk7XG4gICAgfVxuICAgIC8vIExlZ2FjeSBOb2RlLmpzIGNvbXBhdGliaWxpdHlcbiAgICBpZiAoY3J5cHRvICYmIHR5cGVvZiBjcnlwdG8ucmFuZG9tQnl0ZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyhieXRlc0xlbmd0aCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcyBtdXN0IGJlIGRlZmluZWQnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsIi8qKlxuICogSW50ZXJuYWwgTWVya2xlLURhbWdhcmQgaGFzaCB1dGlscy5cbiAqIEBtb2R1bGVcbiAqL1xuaW1wb3J0IHsgYWV4aXN0cywgYW91dHB1dCB9IGZyb20gJy4vX2Fzc2VydC5qcyc7XG5pbXBvcnQgeyBIYXNoLCBjcmVhdGVWaWV3LCB0b0J5dGVzIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vKiogUG9seWZpbGwgZm9yIFNhZmFyaSAxNC4gaHR0cHM6Ly9jYW5pdXNlLmNvbS9tZG4tamF2YXNjcmlwdF9idWlsdGluc19kYXRhdmlld19zZXRiaWd1aW50NjQgKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRCaWdVaW50NjQodmlldywgYnl0ZU9mZnNldCwgdmFsdWUsIGlzTEUpIHtcbiAgICBpZiAodHlwZW9mIHZpZXcuc2V0QmlnVWludDY0ID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gdmlldy5zZXRCaWdVaW50NjQoYnl0ZU9mZnNldCwgdmFsdWUsIGlzTEUpO1xuICAgIGNvbnN0IF8zMm4gPSBCaWdJbnQoMzIpO1xuICAgIGNvbnN0IF91MzJfbWF4ID0gQmlnSW50KDB4ZmZmZmZmZmYpO1xuICAgIGNvbnN0IHdoID0gTnVtYmVyKCh2YWx1ZSA+PiBfMzJuKSAmIF91MzJfbWF4KTtcbiAgICBjb25zdCB3bCA9IE51bWJlcih2YWx1ZSAmIF91MzJfbWF4KTtcbiAgICBjb25zdCBoID0gaXNMRSA/IDQgOiAwO1xuICAgIGNvbnN0IGwgPSBpc0xFID8gMCA6IDQ7XG4gICAgdmlldy5zZXRVaW50MzIoYnl0ZU9mZnNldCArIGgsIHdoLCBpc0xFKTtcbiAgICB2aWV3LnNldFVpbnQzMihieXRlT2Zmc2V0ICsgbCwgd2wsIGlzTEUpO1xufVxuLyoqIENob2ljZTogYSA/IGIgOiBjICovXG5leHBvcnQgZnVuY3Rpb24gQ2hpKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGEgJiBiKSBeICh+YSAmIGMpO1xufVxuLyoqIE1ham9yaXR5IGZ1bmN0aW9uLCB0cnVlIGlmIGFueSB0d28gaW5wdXRzIGlzIHRydWUuICovXG5leHBvcnQgZnVuY3Rpb24gTWFqKGEsIGIsIGMpIHtcbiAgICByZXR1cm4gKGEgJiBiKSBeIChhICYgYykgXiAoYiAmIGMpO1xufVxuLyoqXG4gKiBNZXJrbGUtRGFtZ2FyZCBoYXNoIGNvbnN0cnVjdGlvbiBiYXNlIGNsYXNzLlxuICogQ291bGQgYmUgdXNlZCB0byBjcmVhdGUgTUQ1LCBSSVBFTUQsIFNIQTEsIFNIQTIuXG4gKi9cbmV4cG9ydCBjbGFzcyBIYXNoTUQgZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgb3V0cHV0TGVuLCBwYWRPZmZzZXQsIGlzTEUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5wYWRPZmZzZXQgPSBwYWRPZmZzZXQ7XG4gICAgICAgIHRoaXMuaXNMRSA9IGlzTEU7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xuICAgICAgICB0aGlzLnZpZXcgPSBjcmVhdGVWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICB9XG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgYWV4aXN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyB2aWV3LCBidWZmZXIsIGJsb2NrTGVuIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gdG9CeXRlcyhkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjspIHtcbiAgICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zLCBsZW4gLSBwb3MpO1xuICAgICAgICAgICAgLy8gRmFzdCBwYXRoOiB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBibG9jayBpbiBpbnB1dCwgY2FzdCBpdCB0byB2aWV3IGFuZCBwcm9jZXNzXG4gICAgICAgICAgICBpZiAodGFrZSA9PT0gYmxvY2tMZW4pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhVmlldyA9IGNyZWF0ZVZpZXcoZGF0YSk7XG4gICAgICAgICAgICAgICAgZm9yICg7IGJsb2NrTGVuIDw9IGxlbiAtIHBvczsgcG9zICs9IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoZGF0YVZpZXcsIHBvcyk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIuc2V0KGRhdGEuc3ViYXJyYXkocG9zLCBwb3MgKyB0YWtlKSwgdGhpcy5wb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gdGFrZTtcbiAgICAgICAgICAgIHBvcyArPSB0YWtlO1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID09PSBibG9ja0xlbikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzcyh2aWV3LCAwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggKz0gZGF0YS5sZW5ndGg7XG4gICAgICAgIHRoaXMucm91bmRDbGVhbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgYWV4aXN0cyh0aGlzKTtcbiAgICAgICAgYW91dHB1dChvdXQsIHRoaXMpO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgLy8gUGFkZGluZ1xuICAgICAgICAvLyBXZSBjYW4gYXZvaWQgYWxsb2NhdGlvbiBvZiBidWZmZXIgZm9yIHBhZGRpbmcgY29tcGxldGVseSBpZiBpdFxuICAgICAgICAvLyB3YXMgcHJldmlvdXNseSBub3QgYWxsb2NhdGVkIGhlcmUuIEJ1dCBpdCB3b24ndCBjaGFuZ2UgcGVyZm9ybWFuY2UuXG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCB2aWV3LCBibG9ja0xlbiwgaXNMRSB9ID0gdGhpcztcbiAgICAgICAgbGV0IHsgcG9zIH0gPSB0aGlzO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIGJpdCAnMScgdG8gdGhlIG1lc3NhZ2VcbiAgICAgICAgYnVmZmVyW3BvcysrXSA9IDBiMTAwMDAwMDA7XG4gICAgICAgIHRoaXMuYnVmZmVyLnN1YmFycmF5KHBvcykuZmlsbCgwKTtcbiAgICAgICAgLy8gd2UgaGF2ZSBsZXNzIHRoYW4gcGFkT2Zmc2V0IGxlZnQgaW4gYnVmZmVyLCBzbyB3ZSBjYW5ub3QgcHV0IGxlbmd0aCBpblxuICAgICAgICAvLyBjdXJyZW50IGJsb2NrLCBuZWVkIHByb2Nlc3MgaXQgYW5kIHBhZCBhZ2FpblxuICAgICAgICBpZiAodGhpcy5wYWRPZmZzZXQgPiBibG9ja0xlbiAtIHBvcykge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzKHZpZXcsIDApO1xuICAgICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQYWQgdW50aWwgZnVsbCBibG9jayBieXRlIHdpdGggemVyb3NcbiAgICAgICAgZm9yIChsZXQgaSA9IHBvczsgaSA8IGJsb2NrTGVuOyBpKyspXG4gICAgICAgICAgICBidWZmZXJbaV0gPSAwO1xuICAgICAgICAvLyBOb3RlOiBzaGE1MTIgcmVxdWlyZXMgbGVuZ3RoIHRvIGJlIDEyOGJpdCBpbnRlZ2VyLCBidXQgbGVuZ3RoIGluIEpTIHdpbGwgb3ZlcmZsb3cgYmVmb3JlIHRoYXRcbiAgICAgICAgLy8gWW91IG5lZWQgdG8gd3JpdGUgYXJvdW5kIDIgZXhhYnl0ZXMgKHU2NF9tYXggLyA4IC8gKDEwMjQqKjYpKSBmb3IgdGhpcyB0byBoYXBwZW4uXG4gICAgICAgIC8vIFNvIHdlIGp1c3Qgd3JpdGUgbG93ZXN0IDY0IGJpdHMgb2YgdGhhdCB2YWx1ZS5cbiAgICAgICAgc2V0QmlnVWludDY0KHZpZXcsIGJsb2NrTGVuIC0gOCwgQmlnSW50KHRoaXMubGVuZ3RoICogOCksIGlzTEUpO1xuICAgICAgICB0aGlzLnByb2Nlc3ModmlldywgMCk7XG4gICAgICAgIGNvbnN0IG92aWV3ID0gY3JlYXRlVmlldyhvdXQpO1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLm91dHB1dExlbjtcbiAgICAgICAgLy8gTk9URTogd2UgZG8gZGl2aXNpb24gYnkgNCBsYXRlciwgd2hpY2ggc2hvdWxkIGJlIGZ1c2VkIGluIHNpbmdsZSBvcCB3aXRoIG1vZHVsbyBieSBKSVRcbiAgICAgICAgaWYgKGxlbiAlIDQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ19zaGEyOiBvdXRwdXRMZW4gc2hvdWxkIGJlIGFsaWduZWQgdG8gMzJiaXQnKTtcbiAgICAgICAgY29uc3Qgb3V0TGVuID0gbGVuIC8gNDtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldCgpO1xuICAgICAgICBpZiAob3V0TGVuID4gc3RhdGUubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdfc2hhMjogb3V0cHV0TGVuIGJpZ2dlciB0aGFuIHN0YXRlJyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspXG4gICAgICAgICAgICBvdmlldy5zZXRVaW50MzIoNCAqIGksIHN0YXRlW2ldLCBpc0xFKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgb3V0cHV0TGVuIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLmRpZ2VzdEludG8oYnVmZmVyKTtcbiAgICAgICAgY29uc3QgcmVzID0gYnVmZmVyLnNsaWNlKDAsIG91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIHRvIHx8ICh0byA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkpO1xuICAgICAgICB0by5zZXQoLi4udGhpcy5nZXQoKSk7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIGJ1ZmZlciwgbGVuZ3RoLCBmaW5pc2hlZCwgZGVzdHJveWVkLCBwb3MgfSA9IHRoaXM7XG4gICAgICAgIHRvLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdG8ucG9zID0gcG9zO1xuICAgICAgICB0by5maW5pc2hlZCA9IGZpbmlzaGVkO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSBkZXN0cm95ZWQ7XG4gICAgICAgIGlmIChsZW5ndGggJSBibG9ja0xlbilcbiAgICAgICAgICAgIHRvLmJ1ZmZlci5zZXQoYnVmZmVyKTtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9tZC5qcy5tYXAiLCIvKipcbiAqIEludGVybmFsIGhlbHBlcnMgZm9yIHU2NC4gQmlnVWludDY0QXJyYXkgaXMgdG9vIHNsb3cgYXMgcGVyIDIwMjUsIHNvIHdlIGltcGxlbWVudCBpdCB1c2luZyBVaW50MzJBcnJheS5cbiAqIEB0b2RvIHJlLWNoZWNrIGh0dHBzOi8vaXNzdWVzLmNocm9taXVtLm9yZy9pc3N1ZXMvNDIyMTI1ODhcbiAqIEBtb2R1bGVcbiAqL1xuY29uc3QgVTMyX01BU0s2NCA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMiAqKiAzMiAtIDEpO1xuY29uc3QgXzMybiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMzIpO1xuZnVuY3Rpb24gZnJvbUJpZyhuLCBsZSA9IGZhbHNlKSB7XG4gICAgaWYgKGxlKVxuICAgICAgICByZXR1cm4geyBoOiBOdW1iZXIobiAmIFUzMl9NQVNLNjQpLCBsOiBOdW1iZXIoKG4gPj4gXzMybikgJiBVMzJfTUFTSzY0KSB9O1xuICAgIHJldHVybiB7IGg6IE51bWJlcigobiA+PiBfMzJuKSAmIFUzMl9NQVNLNjQpIHwgMCwgbDogTnVtYmVyKG4gJiBVMzJfTUFTSzY0KSB8IDAgfTtcbn1cbmZ1bmN0aW9uIHNwbGl0KGxzdCwgbGUgPSBmYWxzZSkge1xuICAgIGxldCBBaCA9IG5ldyBVaW50MzJBcnJheShsc3QubGVuZ3RoKTtcbiAgICBsZXQgQWwgPSBuZXcgVWludDMyQXJyYXkobHN0Lmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgeyBoLCBsIH0gPSBmcm9tQmlnKGxzdFtpXSwgbGUpO1xuICAgICAgICBbQWhbaV0sIEFsW2ldXSA9IFtoLCBsXTtcbiAgICB9XG4gICAgcmV0dXJuIFtBaCwgQWxdO1xufVxuY29uc3QgdG9CaWcgPSAoaCwgbCkgPT4gKEJpZ0ludChoID4+PiAwKSA8PCBfMzJuKSB8IEJpZ0ludChsID4+PiAwKTtcbi8vIGZvciBTaGlmdCBpbiBbMCwgMzIpXG5jb25zdCBzaHJTSCA9IChoLCBfbCwgcykgPT4gaCA+Pj4gcztcbmNvbnN0IHNoclNMID0gKGgsIGwsIHMpID0+IChoIDw8ICgzMiAtIHMpKSB8IChsID4+PiBzKTtcbi8vIFJpZ2h0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gWzEsIDMyKVxuY29uc3Qgcm90clNIID0gKGgsIGwsIHMpID0+IChoID4+PiBzKSB8IChsIDw8ICgzMiAtIHMpKTtcbmNvbnN0IHJvdHJTTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAoMzIgLSBzKSkgfCAobCA+Pj4gcyk7XG4vLyBSaWdodCByb3RhdGUgZm9yIFNoaWZ0IGluICgzMiwgNjQpLCBOT1RFOiAzMiBpcyBzcGVjaWFsIGNhc2UuXG5jb25zdCByb3RyQkggPSAoaCwgbCwgcykgPT4gKGggPDwgKDY0IC0gcykpIHwgKGwgPj4+IChzIC0gMzIpKTtcbmNvbnN0IHJvdHJCTCA9IChoLCBsLCBzKSA9PiAoaCA+Pj4gKHMgLSAzMikpIHwgKGwgPDwgKDY0IC0gcykpO1xuLy8gUmlnaHQgcm90YXRlIGZvciBzaGlmdD09PTMyIChqdXN0IHN3YXBzIGwmaClcbmNvbnN0IHJvdHIzMkggPSAoX2gsIGwpID0+IGw7XG5jb25zdCByb3RyMzJMID0gKGgsIF9sKSA9PiBoO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluIFsxLCAzMilcbmNvbnN0IHJvdGxTSCA9IChoLCBsLCBzKSA9PiAoaCA8PCBzKSB8IChsID4+PiAoMzIgLSBzKSk7XG5jb25zdCByb3RsU0wgPSAoaCwgbCwgcykgPT4gKGwgPDwgcykgfCAoaCA+Pj4gKDMyIC0gcykpO1xuLy8gTGVmdCByb3RhdGUgZm9yIFNoaWZ0IGluICgzMiwgNjQpLCBOT1RFOiAzMiBpcyBzcGVjaWFsIGNhc2UuXG5jb25zdCByb3RsQkggPSAoaCwgbCwgcykgPT4gKGwgPDwgKHMgLSAzMikpIHwgKGggPj4+ICg2NCAtIHMpKTtcbmNvbnN0IHJvdGxCTCA9IChoLCBsLCBzKSA9PiAoaCA8PCAocyAtIDMyKSkgfCAobCA+Pj4gKDY0IC0gcykpO1xuLy8gSlMgdXNlcyAzMi1iaXQgc2lnbmVkIGludGVnZXJzIGZvciBiaXR3aXNlIG9wZXJhdGlvbnMgd2hpY2ggbWVhbnMgd2UgY2Fubm90XG4vLyBzaW1wbGUgdGFrZSBjYXJyeSBvdXQgb2YgbG93IGJpdCBzdW0gYnkgc2hpZnQsIHdlIG5lZWQgdG8gdXNlIGRpdmlzaW9uLlxuZnVuY3Rpb24gYWRkKEFoLCBBbCwgQmgsIEJsKSB7XG4gICAgY29uc3QgbCA9IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApO1xuICAgIHJldHVybiB7IGg6IChBaCArIEJoICsgKChsIC8gMiAqKiAzMikgfCAwKSkgfCAwLCBsOiBsIHwgMCB9O1xufVxuLy8gQWRkaXRpb24gd2l0aCBtb3JlIHRoYW4gMiBlbGVtZW50c1xuY29uc3QgYWRkM0wgPSAoQWwsIEJsLCBDbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApO1xuY29uc3QgYWRkM0ggPSAobG93LCBBaCwgQmgsIENoKSA9PiAoQWggKyBCaCArIENoICsgKChsb3cgLyAyICoqIDMyKSB8IDApKSB8IDA7XG5jb25zdCBhZGQ0TCA9IChBbCwgQmwsIENsLCBEbCkgPT4gKEFsID4+PiAwKSArIChCbCA+Pj4gMCkgKyAoQ2wgPj4+IDApICsgKERsID4+PiAwKTtcbmNvbnN0IGFkZDRIID0gKGxvdywgQWgsIEJoLCBDaCwgRGgpID0+IChBaCArIEJoICsgQ2ggKyBEaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuY29uc3QgYWRkNUwgPSAoQWwsIEJsLCBDbCwgRGwsIEVsKSA9PiAoQWwgPj4+IDApICsgKEJsID4+PiAwKSArIChDbCA+Pj4gMCkgKyAoRGwgPj4+IDApICsgKEVsID4+PiAwKTtcbmNvbnN0IGFkZDVIID0gKGxvdywgQWgsIEJoLCBDaCwgRGgsIEVoKSA9PiAoQWggKyBCaCArIENoICsgRGggKyBFaCArICgobG93IC8gMiAqKiAzMikgfCAwKSkgfCAwO1xuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnQgeyBmcm9tQmlnLCBzcGxpdCwgdG9CaWcsIHNoclNILCBzaHJTTCwgcm90clNILCByb3RyU0wsIHJvdHJCSCwgcm90ckJMLCByb3RyMzJILCByb3RyMzJMLCByb3RsU0gsIHJvdGxTTCwgcm90bEJILCByb3RsQkwsIGFkZCwgYWRkM0wsIGFkZDNILCBhZGQ0TCwgYWRkNEgsIGFkZDVILCBhZGQ1TCwgfTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3QgdTY0ID0ge1xuICAgIGZyb21CaWcsIHNwbGl0LCB0b0JpZyxcbiAgICBzaHJTSCwgc2hyU0wsXG4gICAgcm90clNILCByb3RyU0wsIHJvdHJCSCwgcm90ckJMLFxuICAgIHJvdHIzMkgsIHJvdHIzMkwsXG4gICAgcm90bFNILCByb3RsU0wsIHJvdGxCSCwgcm90bEJMLFxuICAgIGFkZCwgYWRkM0wsIGFkZDNILCBhZGQ0TCwgYWRkNEgsIGFkZDVILCBhZGQ1TCxcbn07XG5leHBvcnQgZGVmYXVsdCB1NjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fdTY0LmpzLm1hcCIsIi8qKlxuICogU0hBMi01MTIgYS5rLmEuIHNoYTUxMiBhbmQgc2hhMzg0LiBJdCBpcyBzbG93ZXIgdGhhbiBzaGEyNTYgaW4ganMgYmVjYXVzZSB1NjQgb3BlcmF0aW9ucyBhcmUgc2xvdy5cbiAqXG4gKiBDaGVjayBvdXQgW1JGQyA0NjM0XShodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL3JmYzQ2MzQpIGFuZFxuICogW3RoZSBwYXBlciBvbiB0cnVuY2F0ZWQgU0hBNTEyLzI1Nl0oaHR0cHM6Ly9lcHJpbnQuaWFjci5vcmcvMjAxMC81NDgucGRmKS5cbiAqIEBtb2R1bGVcbiAqL1xuaW1wb3J0IHsgSGFzaE1EIH0gZnJvbSAnLi9fbWQuanMnO1xuaW1wb3J0IHU2NCBmcm9tICcuL191NjQuanMnO1xuaW1wb3J0IHsgd3JhcENvbnN0cnVjdG9yIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vLyBSb3VuZCBjb250YW50cyAoZmlyc3QgMzIgYml0cyBvZiB0aGUgZnJhY3Rpb25hbCBwYXJ0cyBvZiB0aGUgY3ViZSByb290cyBvZiB0aGUgZmlyc3QgODAgcHJpbWVzIDIuLjQwOSk6XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IFtTSEE1MTJfS2gsIFNIQTUxMl9LbF0gPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IHU2NC5zcGxpdChbXG4gICAgJzB4NDI4YTJmOThkNzI4YWUyMicsICcweDcxMzc0NDkxMjNlZjY1Y2QnLCAnMHhiNWMwZmJjZmVjNGQzYjJmJywgJzB4ZTliNWRiYTU4MTg5ZGJiYycsXG4gICAgJzB4Mzk1NmMyNWJmMzQ4YjUzOCcsICcweDU5ZjExMWYxYjYwNWQwMTknLCAnMHg5MjNmODJhNGFmMTk0ZjliJywgJzB4YWIxYzVlZDVkYTZkODExOCcsXG4gICAgJzB4ZDgwN2FhOThhMzAzMDI0MicsICcweDEyODM1YjAxNDU3MDZmYmUnLCAnMHgyNDMxODViZTRlZTRiMjhjJywgJzB4NTUwYzdkYzNkNWZmYjRlMicsXG4gICAgJzB4NzJiZTVkNzRmMjdiODk2ZicsICcweDgwZGViMWZlM2IxNjk2YjEnLCAnMHg5YmRjMDZhNzI1YzcxMjM1JywgJzB4YzE5YmYxNzRjZjY5MjY5NCcsXG4gICAgJzB4ZTQ5YjY5YzE5ZWYxNGFkMicsICcweGVmYmU0Nzg2Mzg0ZjI1ZTMnLCAnMHgwZmMxOWRjNjhiOGNkNWI1JywgJzB4MjQwY2ExY2M3N2FjOWM2NScsXG4gICAgJzB4MmRlOTJjNmY1OTJiMDI3NScsICcweDRhNzQ4NGFhNmVhNmU0ODMnLCAnMHg1Y2IwYTlkY2JkNDFmYmQ0JywgJzB4NzZmOTg4ZGE4MzExNTNiNScsXG4gICAgJzB4OTgzZTUxNTJlZTY2ZGZhYicsICcweGE4MzFjNjZkMmRiNDMyMTAnLCAnMHhiMDAzMjdjODk4ZmIyMTNmJywgJzB4YmY1OTdmYzdiZWVmMGVlNCcsXG4gICAgJzB4YzZlMDBiZjMzZGE4OGZjMicsICcweGQ1YTc5MTQ3OTMwYWE3MjUnLCAnMHgwNmNhNjM1MWUwMDM4MjZmJywgJzB4MTQyOTI5NjcwYTBlNmU3MCcsXG4gICAgJzB4MjdiNzBhODU0NmQyMmZmYycsICcweDJlMWIyMTM4NWMyNmM5MjYnLCAnMHg0ZDJjNmRmYzVhYzQyYWVkJywgJzB4NTMzODBkMTM5ZDk1YjNkZicsXG4gICAgJzB4NjUwYTczNTQ4YmFmNjNkZScsICcweDc2NmEwYWJiM2M3N2IyYTgnLCAnMHg4MWMyYzkyZTQ3ZWRhZWU2JywgJzB4OTI3MjJjODUxNDgyMzUzYicsXG4gICAgJzB4YTJiZmU4YTE0Y2YxMDM2NCcsICcweGE4MWE2NjRiYmM0MjMwMDEnLCAnMHhjMjRiOGI3MGQwZjg5NzkxJywgJzB4Yzc2YzUxYTMwNjU0YmUzMCcsXG4gICAgJzB4ZDE5MmU4MTlkNmVmNTIxOCcsICcweGQ2OTkwNjI0NTU2NWE5MTAnLCAnMHhmNDBlMzU4NTU3NzEyMDJhJywgJzB4MTA2YWEwNzAzMmJiZDFiOCcsXG4gICAgJzB4MTlhNGMxMTZiOGQyZDBjOCcsICcweDFlMzc2YzA4NTE0MWFiNTMnLCAnMHgyNzQ4Nzc0Y2RmOGVlYjk5JywgJzB4MzRiMGJjYjVlMTliNDhhOCcsXG4gICAgJzB4MzkxYzBjYjNjNWM5NWE2MycsICcweDRlZDhhYTRhZTM0MThhY2InLCAnMHg1YjljY2E0Zjc3NjNlMzczJywgJzB4NjgyZTZmZjNkNmIyYjhhMycsXG4gICAgJzB4NzQ4ZjgyZWU1ZGVmYjJmYycsICcweDc4YTU2MzZmNDMxNzJmNjAnLCAnMHg4NGM4NzgxNGExZjBhYjcyJywgJzB4OGNjNzAyMDgxYTY0MzllYycsXG4gICAgJzB4OTBiZWZmZmEyMzYzMWUyOCcsICcweGE0NTA2Y2ViZGU4MmJkZTknLCAnMHhiZWY5YTNmN2IyYzY3OTE1JywgJzB4YzY3MTc4ZjJlMzcyNTMyYicsXG4gICAgJzB4Y2EyNzNlY2VlYTI2NjE5YycsICcweGQxODZiOGM3MjFjMGMyMDcnLCAnMHhlYWRhN2RkNmNkZTBlYjFlJywgJzB4ZjU3ZDRmN2ZlZTZlZDE3OCcsXG4gICAgJzB4MDZmMDY3YWE3MjE3NmZiYScsICcweDBhNjM3ZGM1YTJjODk4YTYnLCAnMHgxMTNmOTgwNGJlZjkwZGFlJywgJzB4MWI3MTBiMzUxMzFjNDcxYicsXG4gICAgJzB4MjhkYjc3ZjUyMzA0N2Q4NCcsICcweDMyY2FhYjdiNDBjNzI0OTMnLCAnMHgzYzllYmUwYTE1YzliZWJjJywgJzB4NDMxZDY3YzQ5YzEwMGQ0YycsXG4gICAgJzB4NGNjNWQ0YmVjYjNlNDJiNicsICcweDU5N2YyOTljZmM2NTdlMmEnLCAnMHg1ZmNiNmZhYjNhZDZmYWVjJywgJzB4NmM0NDE5OGM0YTQ3NTgxNydcbl0ubWFwKG4gPT4gQmlnSW50KG4pKSkpKCk7XG4vLyBUZW1wb3JhcnkgYnVmZmVyLCBub3QgdXNlZCB0byBzdG9yZSBhbnl0aGluZyBiZXR3ZWVuIHJ1bnNcbmNvbnN0IFNIQTUxMl9XX0ggPSAvKiBAX19QVVJFX18gKi8gbmV3IFVpbnQzMkFycmF5KDgwKTtcbmNvbnN0IFNIQTUxMl9XX0wgPSAvKiBAX19QVVJFX18gKi8gbmV3IFVpbnQzMkFycmF5KDgwKTtcbmV4cG9ydCBjbGFzcyBTSEE1MTIgZXh0ZW5kcyBIYXNoTUQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigxMjgsIDY0LCAxNiwgZmFsc2UpO1xuICAgICAgICAvLyBXZSBjYW5ub3QgdXNlIGFycmF5IGhlcmUgc2luY2UgYXJyYXkgYWxsb3dzIGluZGV4aW5nIGJ5IHZhcmlhYmxlIHdoaWNoIG1lYW5zIG9wdGltaXplci9jb21waWxlciBjYW5ub3QgdXNlIHJlZ2lzdGVycy5cbiAgICAgICAgLy8gQWxzbyBsb29rcyBjbGVhbmVyIGFuZCBlYXNpZXIgdG8gdmVyaWZ5IHdpdGggc3BlYy5cbiAgICAgICAgLy8gSW5pdGlhbCBzdGF0ZSAoZmlyc3QgMzIgYml0cyBvZiB0aGUgZnJhY3Rpb25hbCBwYXJ0cyBvZiB0aGUgc3F1YXJlIHJvb3RzIG9mIHRoZSBmaXJzdCA4IHByaW1lcyAyLi4xOSk6XG4gICAgICAgIC8vIGggLS0gaGlnaCAzMiBiaXRzLCBsIC0tIGxvdyAzMiBiaXRzXG4gICAgICAgIHRoaXMuQWggPSAweDZhMDllNjY3IHwgMDtcbiAgICAgICAgdGhpcy5BbCA9IDB4ZjNiY2M5MDggfCAwO1xuICAgICAgICB0aGlzLkJoID0gMHhiYjY3YWU4NSB8IDA7XG4gICAgICAgIHRoaXMuQmwgPSAweDg0Y2FhNzNiIHwgMDtcbiAgICAgICAgdGhpcy5DaCA9IDB4M2M2ZWYzNzIgfCAwO1xuICAgICAgICB0aGlzLkNsID0gMHhmZTk0ZjgyYiB8IDA7XG4gICAgICAgIHRoaXMuRGggPSAweGE1NGZmNTNhIHwgMDtcbiAgICAgICAgdGhpcy5EbCA9IDB4NWYxZDM2ZjEgfCAwO1xuICAgICAgICB0aGlzLkVoID0gMHg1MTBlNTI3ZiB8IDA7XG4gICAgICAgIHRoaXMuRWwgPSAweGFkZTY4MmQxIHwgMDtcbiAgICAgICAgdGhpcy5GaCA9IDB4OWIwNTY4OGMgfCAwO1xuICAgICAgICB0aGlzLkZsID0gMHgyYjNlNmMxZiB8IDA7XG4gICAgICAgIHRoaXMuR2ggPSAweDFmODNkOWFiIHwgMDtcbiAgICAgICAgdGhpcy5HbCA9IDB4ZmI0MWJkNmIgfCAwO1xuICAgICAgICB0aGlzLkhoID0gMHg1YmUwY2QxOSB8IDA7XG4gICAgICAgIHRoaXMuSGwgPSAweDEzN2UyMTc5IHwgMDtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgZ2V0KCkge1xuICAgICAgICBjb25zdCB7IEFoLCBBbCwgQmgsIEJsLCBDaCwgQ2wsIERoLCBEbCwgRWgsIEVsLCBGaCwgRmwsIEdoLCBHbCwgSGgsIEhsIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW0FoLCBBbCwgQmgsIEJsLCBDaCwgQ2wsIERoLCBEbCwgRWgsIEVsLCBGaCwgRmwsIEdoLCBHbCwgSGgsIEhsXTtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgc2V0KEFoLCBBbCwgQmgsIEJsLCBDaCwgQ2wsIERoLCBEbCwgRWgsIEVsLCBGaCwgRmwsIEdoLCBHbCwgSGgsIEhsKSB7XG4gICAgICAgIHRoaXMuQWggPSBBaCB8IDA7XG4gICAgICAgIHRoaXMuQWwgPSBBbCB8IDA7XG4gICAgICAgIHRoaXMuQmggPSBCaCB8IDA7XG4gICAgICAgIHRoaXMuQmwgPSBCbCB8IDA7XG4gICAgICAgIHRoaXMuQ2ggPSBDaCB8IDA7XG4gICAgICAgIHRoaXMuQ2wgPSBDbCB8IDA7XG4gICAgICAgIHRoaXMuRGggPSBEaCB8IDA7XG4gICAgICAgIHRoaXMuRGwgPSBEbCB8IDA7XG4gICAgICAgIHRoaXMuRWggPSBFaCB8IDA7XG4gICAgICAgIHRoaXMuRWwgPSBFbCB8IDA7XG4gICAgICAgIHRoaXMuRmggPSBGaCB8IDA7XG4gICAgICAgIHRoaXMuRmwgPSBGbCB8IDA7XG4gICAgICAgIHRoaXMuR2ggPSBHaCB8IDA7XG4gICAgICAgIHRoaXMuR2wgPSBHbCB8IDA7XG4gICAgICAgIHRoaXMuSGggPSBIaCB8IDA7XG4gICAgICAgIHRoaXMuSGwgPSBIbCB8IDA7XG4gICAgfVxuICAgIHByb2Nlc3Modmlldywgb2Zmc2V0KSB7XG4gICAgICAgIC8vIEV4dGVuZCB0aGUgZmlyc3QgMTYgd29yZHMgaW50byB0aGUgcmVtYWluaW5nIDY0IHdvcmRzIHdbMTYuLjc5XSBvZiB0aGUgbWVzc2FnZSBzY2hlZHVsZSBhcnJheVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyssIG9mZnNldCArPSA0KSB7XG4gICAgICAgICAgICBTSEE1MTJfV19IW2ldID0gdmlldy5nZXRVaW50MzIob2Zmc2V0KTtcbiAgICAgICAgICAgIFNIQTUxMl9XX0xbaV0gPSB2aWV3LmdldFVpbnQzMigob2Zmc2V0ICs9IDQpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBzMCA6PSAod1tpLTE1XSByaWdodHJvdGF0ZSAxKSB4b3IgKHdbaS0xNV0gcmlnaHRyb3RhdGUgOCkgeG9yICh3W2ktMTVdIHJpZ2h0c2hpZnQgNylcbiAgICAgICAgICAgIGNvbnN0IFcxNWggPSBTSEE1MTJfV19IW2kgLSAxNV0gfCAwO1xuICAgICAgICAgICAgY29uc3QgVzE1bCA9IFNIQTUxMl9XX0xbaSAtIDE1XSB8IDA7XG4gICAgICAgICAgICBjb25zdCBzMGggPSB1NjQucm90clNIKFcxNWgsIFcxNWwsIDEpIF4gdTY0LnJvdHJTSChXMTVoLCBXMTVsLCA4KSBeIHU2NC5zaHJTSChXMTVoLCBXMTVsLCA3KTtcbiAgICAgICAgICAgIGNvbnN0IHMwbCA9IHU2NC5yb3RyU0woVzE1aCwgVzE1bCwgMSkgXiB1NjQucm90clNMKFcxNWgsIFcxNWwsIDgpIF4gdTY0LnNoclNMKFcxNWgsIFcxNWwsIDcpO1xuICAgICAgICAgICAgLy8gczEgOj0gKHdbaS0yXSByaWdodHJvdGF0ZSAxOSkgeG9yICh3W2ktMl0gcmlnaHRyb3RhdGUgNjEpIHhvciAod1tpLTJdIHJpZ2h0c2hpZnQgNilcbiAgICAgICAgICAgIGNvbnN0IFcyaCA9IFNIQTUxMl9XX0hbaSAtIDJdIHwgMDtcbiAgICAgICAgICAgIGNvbnN0IFcybCA9IFNIQTUxMl9XX0xbaSAtIDJdIHwgMDtcbiAgICAgICAgICAgIGNvbnN0IHMxaCA9IHU2NC5yb3RyU0goVzJoLCBXMmwsIDE5KSBeIHU2NC5yb3RyQkgoVzJoLCBXMmwsIDYxKSBeIHU2NC5zaHJTSChXMmgsIFcybCwgNik7XG4gICAgICAgICAgICBjb25zdCBzMWwgPSB1NjQucm90clNMKFcyaCwgVzJsLCAxOSkgXiB1NjQucm90ckJMKFcyaCwgVzJsLCA2MSkgXiB1NjQuc2hyU0woVzJoLCBXMmwsIDYpO1xuICAgICAgICAgICAgLy8gU0hBMjU2X1dbaV0gPSBzMCArIHMxICsgU0hBMjU2X1dbaSAtIDddICsgU0hBMjU2X1dbaSAtIDE2XTtcbiAgICAgICAgICAgIGNvbnN0IFNVTWwgPSB1NjQuYWRkNEwoczBsLCBzMWwsIFNIQTUxMl9XX0xbaSAtIDddLCBTSEE1MTJfV19MW2kgLSAxNl0pO1xuICAgICAgICAgICAgY29uc3QgU1VNaCA9IHU2NC5hZGQ0SChTVU1sLCBzMGgsIHMxaCwgU0hBNTEyX1dfSFtpIC0gN10sIFNIQTUxMl9XX0hbaSAtIDE2XSk7XG4gICAgICAgICAgICBTSEE1MTJfV19IW2ldID0gU1VNaCB8IDA7XG4gICAgICAgICAgICBTSEE1MTJfV19MW2ldID0gU1VNbCB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHsgQWgsIEFsLCBCaCwgQmwsIENoLCBDbCwgRGgsIERsLCBFaCwgRWwsIEZoLCBGbCwgR2gsIEdsLCBIaCwgSGwgfSA9IHRoaXM7XG4gICAgICAgIC8vIENvbXByZXNzaW9uIGZ1bmN0aW9uIG1haW4gbG9vcCwgODAgcm91bmRzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODA7IGkrKykge1xuICAgICAgICAgICAgLy8gUzEgOj0gKGUgcmlnaHRyb3RhdGUgMTQpIHhvciAoZSByaWdodHJvdGF0ZSAxOCkgeG9yIChlIHJpZ2h0cm90YXRlIDQxKVxuICAgICAgICAgICAgY29uc3Qgc2lnbWExaCA9IHU2NC5yb3RyU0goRWgsIEVsLCAxNCkgXiB1NjQucm90clNIKEVoLCBFbCwgMTgpIF4gdTY0LnJvdHJCSChFaCwgRWwsIDQxKTtcbiAgICAgICAgICAgIGNvbnN0IHNpZ21hMWwgPSB1NjQucm90clNMKEVoLCBFbCwgMTQpIF4gdTY0LnJvdHJTTChFaCwgRWwsIDE4KSBeIHU2NC5yb3RyQkwoRWgsIEVsLCA0MSk7XG4gICAgICAgICAgICAvL2NvbnN0IFQxID0gKEggKyBzaWdtYTEgKyBDaGkoRSwgRiwgRykgKyBTSEEyNTZfS1tpXSArIFNIQTI1Nl9XW2ldKSB8IDA7XG4gICAgICAgICAgICBjb25zdCBDSEloID0gKEVoICYgRmgpIF4gKH5FaCAmIEdoKTtcbiAgICAgICAgICAgIGNvbnN0IENISWwgPSAoRWwgJiBGbCkgXiAofkVsICYgR2wpO1xuICAgICAgICAgICAgLy8gVDEgPSBIICsgc2lnbWExICsgQ2hpKEUsIEYsIEcpICsgU0hBNTEyX0tbaV0gKyBTSEE1MTJfV1tpXVxuICAgICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICBjb25zdCBUMWxsID0gdTY0LmFkZDVMKEhsLCBzaWdtYTFsLCBDSElsLCBTSEE1MTJfS2xbaV0sIFNIQTUxMl9XX0xbaV0pO1xuICAgICAgICAgICAgY29uc3QgVDFoID0gdTY0LmFkZDVIKFQxbGwsIEhoLCBzaWdtYTFoLCBDSEloLCBTSEE1MTJfS2hbaV0sIFNIQTUxMl9XX0hbaV0pO1xuICAgICAgICAgICAgY29uc3QgVDFsID0gVDFsbCB8IDA7XG4gICAgICAgICAgICAvLyBTMCA6PSAoYSByaWdodHJvdGF0ZSAyOCkgeG9yIChhIHJpZ2h0cm90YXRlIDM0KSB4b3IgKGEgcmlnaHRyb3RhdGUgMzkpXG4gICAgICAgICAgICBjb25zdCBzaWdtYTBoID0gdTY0LnJvdHJTSChBaCwgQWwsIDI4KSBeIHU2NC5yb3RyQkgoQWgsIEFsLCAzNCkgXiB1NjQucm90ckJIKEFoLCBBbCwgMzkpO1xuICAgICAgICAgICAgY29uc3Qgc2lnbWEwbCA9IHU2NC5yb3RyU0woQWgsIEFsLCAyOCkgXiB1NjQucm90ckJMKEFoLCBBbCwgMzQpIF4gdTY0LnJvdHJCTChBaCwgQWwsIDM5KTtcbiAgICAgICAgICAgIGNvbnN0IE1BSmggPSAoQWggJiBCaCkgXiAoQWggJiBDaCkgXiAoQmggJiBDaCk7XG4gICAgICAgICAgICBjb25zdCBNQUpsID0gKEFsICYgQmwpIF4gKEFsICYgQ2wpIF4gKEJsICYgQ2wpO1xuICAgICAgICAgICAgSGggPSBHaCB8IDA7XG4gICAgICAgICAgICBIbCA9IEdsIHwgMDtcbiAgICAgICAgICAgIEdoID0gRmggfCAwO1xuICAgICAgICAgICAgR2wgPSBGbCB8IDA7XG4gICAgICAgICAgICBGaCA9IEVoIHwgMDtcbiAgICAgICAgICAgIEZsID0gRWwgfCAwO1xuICAgICAgICAgICAgKHsgaDogRWgsIGw6IEVsIH0gPSB1NjQuYWRkKERoIHwgMCwgRGwgfCAwLCBUMWggfCAwLCBUMWwgfCAwKSk7XG4gICAgICAgICAgICBEaCA9IENoIHwgMDtcbiAgICAgICAgICAgIERsID0gQ2wgfCAwO1xuICAgICAgICAgICAgQ2ggPSBCaCB8IDA7XG4gICAgICAgICAgICBDbCA9IEJsIHwgMDtcbiAgICAgICAgICAgIEJoID0gQWggfCAwO1xuICAgICAgICAgICAgQmwgPSBBbCB8IDA7XG4gICAgICAgICAgICBjb25zdCBBbGwgPSB1NjQuYWRkM0woVDFsLCBzaWdtYTBsLCBNQUpsKTtcbiAgICAgICAgICAgIEFoID0gdTY0LmFkZDNIKEFsbCwgVDFoLCBzaWdtYTBoLCBNQUpoKTtcbiAgICAgICAgICAgIEFsID0gQWxsIHwgMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgdGhlIGNvbXByZXNzZWQgY2h1bmsgdG8gdGhlIGN1cnJlbnQgaGFzaCB2YWx1ZVxuICAgICAgICAoeyBoOiBBaCwgbDogQWwgfSA9IHU2NC5hZGQodGhpcy5BaCB8IDAsIHRoaXMuQWwgfCAwLCBBaCB8IDAsIEFsIHwgMCkpO1xuICAgICAgICAoeyBoOiBCaCwgbDogQmwgfSA9IHU2NC5hZGQodGhpcy5CaCB8IDAsIHRoaXMuQmwgfCAwLCBCaCB8IDAsIEJsIHwgMCkpO1xuICAgICAgICAoeyBoOiBDaCwgbDogQ2wgfSA9IHU2NC5hZGQodGhpcy5DaCB8IDAsIHRoaXMuQ2wgfCAwLCBDaCB8IDAsIENsIHwgMCkpO1xuICAgICAgICAoeyBoOiBEaCwgbDogRGwgfSA9IHU2NC5hZGQodGhpcy5EaCB8IDAsIHRoaXMuRGwgfCAwLCBEaCB8IDAsIERsIHwgMCkpO1xuICAgICAgICAoeyBoOiBFaCwgbDogRWwgfSA9IHU2NC5hZGQodGhpcy5FaCB8IDAsIHRoaXMuRWwgfCAwLCBFaCB8IDAsIEVsIHwgMCkpO1xuICAgICAgICAoeyBoOiBGaCwgbDogRmwgfSA9IHU2NC5hZGQodGhpcy5GaCB8IDAsIHRoaXMuRmwgfCAwLCBGaCB8IDAsIEZsIHwgMCkpO1xuICAgICAgICAoeyBoOiBHaCwgbDogR2wgfSA9IHU2NC5hZGQodGhpcy5HaCB8IDAsIHRoaXMuR2wgfCAwLCBHaCB8IDAsIEdsIHwgMCkpO1xuICAgICAgICAoeyBoOiBIaCwgbDogSGwgfSA9IHU2NC5hZGQodGhpcy5IaCB8IDAsIHRoaXMuSGwgfCAwLCBIaCB8IDAsIEhsIHwgMCkpO1xuICAgICAgICB0aGlzLnNldChBaCwgQWwsIEJoLCBCbCwgQ2gsIENsLCBEaCwgRGwsIEVoLCBFbCwgRmgsIEZsLCBHaCwgR2wsIEhoLCBIbCk7XG4gICAgfVxuICAgIHJvdW5kQ2xlYW4oKSB7XG4gICAgICAgIFNIQTUxMl9XX0guZmlsbCgwKTtcbiAgICAgICAgU0hBNTEyX1dfTC5maWxsKDApO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJ1ZmZlci5maWxsKDApO1xuICAgICAgICB0aGlzLnNldCgwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU0hBNTEyXzIyNCBleHRlbmRzIFNIQTUxMiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIGggLS0gaGlnaCAzMiBiaXRzLCBsIC0tIGxvdyAzMiBiaXRzXG4gICAgICAgIHRoaXMuQWggPSAweDhjM2QzN2M4IHwgMDtcbiAgICAgICAgdGhpcy5BbCA9IDB4MTk1NDRkYTIgfCAwO1xuICAgICAgICB0aGlzLkJoID0gMHg3M2UxOTk2NiB8IDA7XG4gICAgICAgIHRoaXMuQmwgPSAweDg5ZGNkNGQ2IHwgMDtcbiAgICAgICAgdGhpcy5DaCA9IDB4MWRmYWI3YWUgfCAwO1xuICAgICAgICB0aGlzLkNsID0gMHgzMmZmOWM4MiB8IDA7XG4gICAgICAgIHRoaXMuRGggPSAweDY3OWRkNTE0IHwgMDtcbiAgICAgICAgdGhpcy5EbCA9IDB4NTgyZjlmY2YgfCAwO1xuICAgICAgICB0aGlzLkVoID0gMHgwZjZkMmI2OSB8IDA7XG4gICAgICAgIHRoaXMuRWwgPSAweDdiZDQ0ZGE4IHwgMDtcbiAgICAgICAgdGhpcy5GaCA9IDB4NzdlMzZmNzMgfCAwO1xuICAgICAgICB0aGlzLkZsID0gMHgwNGM0ODk0MiB8IDA7XG4gICAgICAgIHRoaXMuR2ggPSAweDNmOWQ4NWE4IHwgMDtcbiAgICAgICAgdGhpcy5HbCA9IDB4NmExZDM2YzggfCAwO1xuICAgICAgICB0aGlzLkhoID0gMHgxMTEyZTZhZCB8IDA7XG4gICAgICAgIHRoaXMuSGwgPSAweDkxZDY5MmExIHwgMDtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSAyODtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU0hBNTEyXzI1NiBleHRlbmRzIFNIQTUxMiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vIGggLS0gaGlnaCAzMiBiaXRzLCBsIC0tIGxvdyAzMiBiaXRzXG4gICAgICAgIHRoaXMuQWggPSAweDIyMzEyMTk0IHwgMDtcbiAgICAgICAgdGhpcy5BbCA9IDB4ZmMyYmY3MmMgfCAwO1xuICAgICAgICB0aGlzLkJoID0gMHg5ZjU1NWZhMyB8IDA7XG4gICAgICAgIHRoaXMuQmwgPSAweGM4NGM2NGMyIHwgMDtcbiAgICAgICAgdGhpcy5DaCA9IDB4MjM5M2I4NmIgfCAwO1xuICAgICAgICB0aGlzLkNsID0gMHg2ZjUzYjE1MSB8IDA7XG4gICAgICAgIHRoaXMuRGggPSAweDk2Mzg3NzE5IHwgMDtcbiAgICAgICAgdGhpcy5EbCA9IDB4NTk0MGVhYmQgfCAwO1xuICAgICAgICB0aGlzLkVoID0gMHg5NjI4M2VlMiB8IDA7XG4gICAgICAgIHRoaXMuRWwgPSAweGE4OGVmZmUzIHwgMDtcbiAgICAgICAgdGhpcy5GaCA9IDB4YmU1ZTFlMjUgfCAwO1xuICAgICAgICB0aGlzLkZsID0gMHg1Mzg2Mzk5MiB8IDA7XG4gICAgICAgIHRoaXMuR2ggPSAweDJiMDE5OWZjIHwgMDtcbiAgICAgICAgdGhpcy5HbCA9IDB4MmM4NWI4YWEgfCAwO1xuICAgICAgICB0aGlzLkhoID0gMHgwZWI3MmRkYyB8IDA7XG4gICAgICAgIHRoaXMuSGwgPSAweDgxYzUyY2EyIHwgMDtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSAzMjtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU0hBMzg0IGV4dGVuZHMgU0hBNTEyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLy8gaCAtLSBoaWdoIDMyIGJpdHMsIGwgLS0gbG93IDMyIGJpdHNcbiAgICAgICAgdGhpcy5BaCA9IDB4Y2JiYjlkNWQgfCAwO1xuICAgICAgICB0aGlzLkFsID0gMHhjMTA1OWVkOCB8IDA7XG4gICAgICAgIHRoaXMuQmggPSAweDYyOWEyOTJhIHwgMDtcbiAgICAgICAgdGhpcy5CbCA9IDB4MzY3Y2Q1MDcgfCAwO1xuICAgICAgICB0aGlzLkNoID0gMHg5MTU5MDE1YSB8IDA7XG4gICAgICAgIHRoaXMuQ2wgPSAweDMwNzBkZDE3IHwgMDtcbiAgICAgICAgdGhpcy5EaCA9IDB4MTUyZmVjZDggfCAwO1xuICAgICAgICB0aGlzLkRsID0gMHhmNzBlNTkzOSB8IDA7XG4gICAgICAgIHRoaXMuRWggPSAweDY3MzMyNjY3IHwgMDtcbiAgICAgICAgdGhpcy5FbCA9IDB4ZmZjMDBiMzEgfCAwO1xuICAgICAgICB0aGlzLkZoID0gMHg4ZWI0NGE4NyB8IDA7XG4gICAgICAgIHRoaXMuRmwgPSAweDY4NTgxNTExIHwgMDtcbiAgICAgICAgdGhpcy5HaCA9IDB4ZGIwYzJlMGQgfCAwO1xuICAgICAgICB0aGlzLkdsID0gMHg2NGY5OGZhNyB8IDA7XG4gICAgICAgIHRoaXMuSGggPSAweDQ3YjU0ODFkIHwgMDtcbiAgICAgICAgdGhpcy5IbCA9IDB4YmVmYTRmYTQgfCAwO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IDQ4O1xuICAgIH1cbn1cbi8qKiBTSEEyLTUxMiBoYXNoIGZ1bmN0aW9uLiAqL1xuZXhwb3J0IGNvbnN0IHNoYTUxMiA9IC8qIEBfX1BVUkVfXyAqLyB3cmFwQ29uc3RydWN0b3IoKCkgPT4gbmV3IFNIQTUxMigpKTtcbi8qKiBTSEEyLTUxMi8yMjQgXCJ0cnVuY2F0ZWRcIiBoYXNoIGZ1bmN0aW9uLCB3aXRoIGltcHJvdmVkIHJlc2lzdGFuY2UgdG8gbGVuZ3RoIGV4dGVuc2lvbiBhdHRhY2tzLiAqL1xuZXhwb3J0IGNvbnN0IHNoYTUxMl8yMjQgPSAvKiBAX19QVVJFX18gKi8gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBTSEE1MTJfMjI0KCkpO1xuLyoqIFNIQTItNTEyLzI1NiBcInRydW5jYXRlZFwiIGhhc2ggZnVuY3Rpb24sIHdpdGggaW1wcm92ZWQgcmVzaXN0YW5jZSB0byBsZW5ndGggZXh0ZW5zaW9uIGF0dGFja3MuICovXG5leHBvcnQgY29uc3Qgc2hhNTEyXzI1NiA9IC8qIEBfX1BVUkVfXyAqLyB3cmFwQ29uc3RydWN0b3IoKCkgPT4gbmV3IFNIQTUxMl8yNTYoKSk7XG4vKiogU0hBMi0zODQgaGFzaCBmdW5jdGlvbi4gKi9cbmV4cG9ydCBjb25zdCBzaGEzODQgPSAvKiBAX19QVVJFX18gKi8gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBTSEEzODQoKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGE1MTIuanMubWFwIiwiLyoqXG4gKiBIZXgsIGJ5dGVzIGFuZCBudW1iZXIgdXRpbGl0aWVzLlxuICogQG1vZHVsZVxuICovXG4vKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG4vLyAxMDAgbGluZXMgb2YgY29kZSBpbiB0aGUgZmlsZSBhcmUgZHVwbGljYXRlZCBmcm9tIG5vYmxlLWhhc2hlcyAodXRpbHMpLlxuLy8gVGhpcyBpcyBPSzogYGFic3RyYWN0YCBkaXJlY3RvcnkgZG9lcyBub3QgdXNlIG5vYmxlLWhhc2hlcy5cbi8vIFVzZXIgbWF5IG9wdC1pbiBpbnRvIHVzaW5nIGRpZmZlcmVudCBoYXNoaW5nIGxpYnJhcnkuIFRoaXMgd2F5LCBub2JsZS1oYXNoZXNcbi8vIHdvbid0IGJlIGluY2x1ZGVkIGludG8gdGhlaXIgYnVuZGxlLlxuY29uc3QgXzBuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgwKTtcbmNvbnN0IF8xbiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMSk7XG5jb25zdCBfMm4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDIpO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQnl0ZXMoYSkge1xuICAgIHJldHVybiBhIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCAoQXJyYXlCdWZmZXIuaXNWaWV3KGEpICYmIGEuY29uc3RydWN0b3IubmFtZSA9PT0gJ1VpbnQ4QXJyYXknKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhYnl0ZXMoaXRlbSkge1xuICAgIGlmICghaXNCeXRlcyhpdGVtKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVaW50OEFycmF5IGV4cGVjdGVkJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gYWJvb2wodGl0bGUsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGl0bGUgKyAnIGJvb2xlYW4gZXhwZWN0ZWQsIGdvdCAnICsgdmFsdWUpO1xufVxuLy8gQXJyYXkgd2hlcmUgaW5kZXggMHhmMCAoMjQwKSBpcyBtYXBwZWQgdG8gc3RyaW5nICdmMCdcbmNvbnN0IGhleGVzID0gLyogQF9fUFVSRV9fICovIEFycmF5LmZyb20oeyBsZW5ndGg6IDI1NiB9LCAoXywgaSkgPT4gaS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSk7XG4vKipcbiAqIEBleGFtcGxlIGJ5dGVzVG9IZXgoVWludDhBcnJheS5mcm9tKFsweGNhLCAweGZlLCAweDAxLCAweDIzXSkpIC8vICdjYWZlMDEyMydcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVzVG9IZXgoYnl0ZXMpIHtcbiAgICBhYnl0ZXMoYnl0ZXMpO1xuICAgIC8vIHByZS1jYWNoaW5nIGltcHJvdmVzIHRoZSBzcGVlZCA2eFxuICAgIGxldCBoZXggPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhleCArPSBoZXhlc1tieXRlc1tpXV07XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG59XG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyVG9IZXhVbnBhZGRlZChudW0pIHtcbiAgICBjb25zdCBoZXggPSBudW0udG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBoZXgubGVuZ3RoICYgMSA/ICcwJyArIGhleCA6IGhleDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb051bWJlcihoZXgpIHtcbiAgICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGV4IHN0cmluZyBleHBlY3RlZCwgZ290ICcgKyB0eXBlb2YgaGV4KTtcbiAgICByZXR1cm4gaGV4ID09PSAnJyA/IF8wbiA6IEJpZ0ludCgnMHgnICsgaGV4KTsgLy8gQmlnIEVuZGlhblxufVxuLy8gV2UgdXNlIG9wdGltaXplZCB0ZWNobmlxdWUgdG8gY29udmVydCBoZXggc3RyaW5nIHRvIGJ5dGUgYXJyYXlcbmNvbnN0IGFzY2lpcyA9IHsgXzA6IDQ4LCBfOTogNTcsIEE6IDY1LCBGOiA3MCwgYTogOTcsIGY6IDEwMiB9O1xuZnVuY3Rpb24gYXNjaWlUb0Jhc2UxNihjaCkge1xuICAgIGlmIChjaCA+PSBhc2NpaXMuXzAgJiYgY2ggPD0gYXNjaWlzLl85KVxuICAgICAgICByZXR1cm4gY2ggLSBhc2NpaXMuXzA7IC8vICcyJyA9PiA1MC00OFxuICAgIGlmIChjaCA+PSBhc2NpaXMuQSAmJiBjaCA8PSBhc2NpaXMuRilcbiAgICAgICAgcmV0dXJuIGNoIC0gKGFzY2lpcy5BIC0gMTApOyAvLyAnQicgPT4gNjYtKDY1LTEwKVxuICAgIGlmIChjaCA+PSBhc2NpaXMuYSAmJiBjaCA8PSBhc2NpaXMuZilcbiAgICAgICAgcmV0dXJuIGNoIC0gKGFzY2lpcy5hIC0gMTApOyAvLyAnYicgPT4gOTgtKDk3LTEwKVxuICAgIHJldHVybjtcbn1cbi8qKlxuICogQGV4YW1wbGUgaGV4VG9CeXRlcygnY2FmZTAxMjMnKSAvLyBVaW50OEFycmF5LmZyb20oWzB4Y2EsIDB4ZmUsIDB4MDEsIDB4MjNdKVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9CeXRlcyhoZXgpIHtcbiAgICBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGV4IHN0cmluZyBleHBlY3RlZCwgZ290ICcgKyB0eXBlb2YgaGV4KTtcbiAgICBjb25zdCBobCA9IGhleC5sZW5ndGg7XG4gICAgY29uc3QgYWwgPSBobCAvIDI7XG4gICAgaWYgKGhsICUgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZXggc3RyaW5nIGV4cGVjdGVkLCBnb3QgdW5wYWRkZWQgaGV4IG9mIGxlbmd0aCAnICsgaGwpO1xuICAgIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYWwpO1xuICAgIGZvciAobGV0IGFpID0gMCwgaGkgPSAwOyBhaSA8IGFsOyBhaSsrLCBoaSArPSAyKSB7XG4gICAgICAgIGNvbnN0IG4xID0gYXNjaWlUb0Jhc2UxNihoZXguY2hhckNvZGVBdChoaSkpO1xuICAgICAgICBjb25zdCBuMiA9IGFzY2lpVG9CYXNlMTYoaGV4LmNoYXJDb2RlQXQoaGkgKyAxKSk7XG4gICAgICAgIGlmIChuMSA9PT0gdW5kZWZpbmVkIHx8IG4yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBoZXhbaGldICsgaGV4W2hpICsgMV07XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hleCBzdHJpbmcgZXhwZWN0ZWQsIGdvdCBub24taGV4IGNoYXJhY3RlciBcIicgKyBjaGFyICsgJ1wiIGF0IGluZGV4ICcgKyBoaSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJyYXlbYWldID0gbjEgKiAxNiArIG4yOyAvLyBtdWx0aXBseSBmaXJzdCBvY3RldCwgZS5nLiAnYTMnID0+IDEwKjE2KzMgPT4gMTYwICsgMyA9PiAxNjNcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuLy8gQkU6IEJpZyBFbmRpYW4sIExFOiBMaXR0bGUgRW5kaWFuXG5leHBvcnQgZnVuY3Rpb24gYnl0ZXNUb051bWJlckJFKGJ5dGVzKSB7XG4gICAgcmV0dXJuIGhleFRvTnVtYmVyKGJ5dGVzVG9IZXgoYnl0ZXMpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvTnVtYmVyTEUoYnl0ZXMpIHtcbiAgICBhYnl0ZXMoYnl0ZXMpO1xuICAgIHJldHVybiBoZXhUb051bWJlcihieXRlc1RvSGV4KFVpbnQ4QXJyYXkuZnJvbShieXRlcykucmV2ZXJzZSgpKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyVG9CeXRlc0JFKG4sIGxlbikge1xuICAgIHJldHVybiBoZXhUb0J5dGVzKG4udG9TdHJpbmcoMTYpLnBhZFN0YXJ0KGxlbiAqIDIsICcwJykpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG51bWJlclRvQnl0ZXNMRShuLCBsZW4pIHtcbiAgICByZXR1cm4gbnVtYmVyVG9CeXRlc0JFKG4sIGxlbikucmV2ZXJzZSgpO1xufVxuLy8gVW5wYWRkZWQsIHJhcmVseSB1c2VkXG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyVG9WYXJCeXRlc0JFKG4pIHtcbiAgICByZXR1cm4gaGV4VG9CeXRlcyhudW1iZXJUb0hleFVucGFkZGVkKG4pKTtcbn1cbi8qKlxuICogVGFrZXMgaGV4IHN0cmluZyBvciBVaW50OEFycmF5LCBjb252ZXJ0cyB0byBVaW50OEFycmF5LlxuICogVmFsaWRhdGVzIG91dHB1dCBsZW5ndGguXG4gKiBXaWxsIHRocm93IGVycm9yIGZvciBvdGhlciB0eXBlcy5cbiAqIEBwYXJhbSB0aXRsZSBkZXNjcmlwdGl2ZSB0aXRsZSBmb3IgYW4gZXJyb3IgZS5nLiAncHJpdmF0ZSBrZXknXG4gKiBAcGFyYW0gaGV4IGhleCBzdHJpbmcgb3IgVWludDhBcnJheVxuICogQHBhcmFtIGV4cGVjdGVkTGVuZ3RoIG9wdGlvbmFsLCB3aWxsIGNvbXBhcmUgdG8gcmVzdWx0IGFycmF5J3MgbGVuZ3RoXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlQnl0ZXModGl0bGUsIGhleCwgZXhwZWN0ZWRMZW5ndGgpIHtcbiAgICBsZXQgcmVzO1xuICAgIGlmICh0eXBlb2YgaGV4ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzID0gaGV4VG9CeXRlcyhoZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGl0bGUgKyAnIG11c3QgYmUgaGV4IHN0cmluZyBvciBVaW50OEFycmF5LCBjYXVzZTogJyArIGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQnl0ZXMoaGV4KSkge1xuICAgICAgICAvLyBVaW50OEFycmF5LmZyb20oKSBpbnN0ZWFkIG9mIGhhc2guc2xpY2UoKSBiZWNhdXNlIG5vZGUuanMgQnVmZmVyXG4gICAgICAgIC8vIGlzIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXksIGFuZCBpdHMgc2xpY2UoKSBjcmVhdGVzICoqbXV0YWJsZSoqIGNvcHlcbiAgICAgICAgcmVzID0gVWludDhBcnJheS5mcm9tKGhleCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGl0bGUgKyAnIG11c3QgYmUgaGV4IHN0cmluZyBvciBVaW50OEFycmF5Jyk7XG4gICAgfVxuICAgIGNvbnN0IGxlbiA9IHJlcy5sZW5ndGg7XG4gICAgaWYgKHR5cGVvZiBleHBlY3RlZExlbmd0aCA9PT0gJ251bWJlcicgJiYgbGVuICE9PSBleHBlY3RlZExlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRpdGxlICsgJyBvZiBsZW5ndGggJyArIGV4cGVjdGVkTGVuZ3RoICsgJyBleHBlY3RlZCwgZ290ICcgKyBsZW4pO1xuICAgIHJldHVybiByZXM7XG59XG4vKipcbiAqIENvcGllcyBzZXZlcmFsIFVpbnQ4QXJyYXlzIGludG8gb25lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0Qnl0ZXMoLi4uYXJyYXlzKSB7XG4gICAgbGV0IHN1bSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYSA9IGFycmF5c1tpXTtcbiAgICAgICAgYWJ5dGVzKGEpO1xuICAgICAgICBzdW0gKz0gYS5sZW5ndGg7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IG5ldyBVaW50OEFycmF5KHN1bSk7XG4gICAgZm9yIChsZXQgaSA9IDAsIHBhZCA9IDA7IGkgPCBhcnJheXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYSA9IGFycmF5c1tpXTtcbiAgICAgICAgcmVzLnNldChhLCBwYWQpO1xuICAgICAgICBwYWQgKz0gYS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vLyBDb21wYXJlcyAyIHU4YS1zIGluIGtpbmRhIGNvbnN0YW50IHRpbWVcbmV4cG9ydCBmdW5jdGlvbiBlcXVhbEJ5dGVzKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGRpZmYgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKylcbiAgICAgICAgZGlmZiB8PSBhW2ldIF4gYltpXTtcbiAgICByZXR1cm4gZGlmZiA9PT0gMDtcbn1cbi8qKlxuICogQGV4YW1wbGUgdXRmOFRvQnl0ZXMoJ2FiYycpIC8vIG5ldyBVaW50OEFycmF5KFs5NywgOTgsIDk5XSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHV0ZjhUb0J5dGVzKHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdHJpbmcgZXhwZWN0ZWQnKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cikpOyAvLyBodHRwczovL2J1Z3ppbC5sYS8xNjgxODA5XG59XG4vLyBJcyBwb3NpdGl2ZSBiaWdpbnRcbmNvbnN0IGlzUG9zQmlnID0gKG4pID0+IHR5cGVvZiBuID09PSAnYmlnaW50JyAmJiBfMG4gPD0gbjtcbmV4cG9ydCBmdW5jdGlvbiBpblJhbmdlKG4sIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIGlzUG9zQmlnKG4pICYmIGlzUG9zQmlnKG1pbikgJiYgaXNQb3NCaWcobWF4KSAmJiBtaW4gPD0gbiAmJiBuIDwgbWF4O1xufVxuLyoqXG4gKiBBc3NlcnRzIG1pbiA8PSBuIDwgbWF4LiBOT1RFOiBJdCdzIDwgbWF4IGFuZCBub3QgPD0gbWF4LlxuICogQGV4YW1wbGVcbiAqIGFJblJhbmdlKCd4JywgeCwgMW4sIDI1Nm4pOyAvLyB3b3VsZCBhc3N1bWUgeCBpcyBpbiAoMW4uLjI1NW4pXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhSW5SYW5nZSh0aXRsZSwgbiwgbWluLCBtYXgpIHtcbiAgICAvLyBXaHkgbWluIDw9IG4gPCBtYXggYW5kIG5vdCBhIChtaW4gPCBuIDwgbWF4KSBPUiBiIChtaW4gPD0gbiA8PSBtYXgpP1xuICAgIC8vIGNvbnNpZGVyIFA9MjU2biwgbWluPTBuLCBtYXg9UFxuICAgIC8vIC0gYSBmb3IgbWluPTAgd291bGQgcmVxdWlyZSAtMTogICAgICAgICAgYGluUmFuZ2UoJ3gnLCB4LCAtMW4sIFApYFxuICAgIC8vIC0gYiB3b3VsZCBjb21tb25seSByZXF1aXJlIHN1YnRyYWN0aW9uOiAgYGluUmFuZ2UoJ3gnLCB4LCAwbiwgUCAtIDFuKWBcbiAgICAvLyAtIG91ciB3YXkgaXMgdGhlIGNsZWFuZXN0OiAgICAgICAgICAgICAgIGBpblJhbmdlKCd4JywgeCwgMG4sIFApXG4gICAgaWYgKCFpblJhbmdlKG4sIG1pbiwgbWF4KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCB2YWxpZCAnICsgdGl0bGUgKyAnOiAnICsgbWluICsgJyA8PSBuIDwgJyArIG1heCArICcsIGdvdCAnICsgbik7XG59XG4vLyBCaXQgb3BlcmF0aW9uc1xuLyoqXG4gKiBDYWxjdWxhdGVzIGFtb3VudCBvZiBiaXRzIGluIGEgYmlnaW50LlxuICogU2FtZSBhcyBgbi50b1N0cmluZygyKS5sZW5ndGhgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaXRMZW4obikge1xuICAgIGxldCBsZW47XG4gICAgZm9yIChsZW4gPSAwOyBuID4gXzBuOyBuID4+PSBfMW4sIGxlbiArPSAxKVxuICAgICAgICA7XG4gICAgcmV0dXJuIGxlbjtcbn1cbi8qKlxuICogR2V0cyBzaW5nbGUgYml0IGF0IHBvc2l0aW9uLlxuICogTk9URTogZmlyc3QgYml0IHBvc2l0aW9uIGlzIDAgKHNhbWUgYXMgYXJyYXlzKVxuICogU2FtZSBhcyBgISErQXJyYXkuZnJvbShuLnRvU3RyaW5nKDIpKS5yZXZlcnNlKClbcG9zXWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpdEdldChuLCBwb3MpIHtcbiAgICByZXR1cm4gKG4gPj4gQmlnSW50KHBvcykpICYgXzFuO1xufVxuLyoqXG4gKiBTZXRzIHNpbmdsZSBiaXQgYXQgcG9zaXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaXRTZXQobiwgcG9zLCB2YWx1ZSkge1xuICAgIHJldHVybiBuIHwgKCh2YWx1ZSA/IF8xbiA6IF8wbikgPDwgQmlnSW50KHBvcykpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgbWFzayBmb3IgTiBiaXRzLiBOb3QgdXNpbmcgKiogb3BlcmF0b3Igd2l0aCBiaWdpbnRzIGJlY2F1c2Ugb2Ygb2xkIGVuZ2luZXMuXG4gKiBTYW1lIGFzIEJpZ0ludChgMGIke0FycmF5KGkpLmZpbGwoJzEnKS5qb2luKCcnKX1gKVxuICovXG5leHBvcnQgY29uc3QgYml0TWFzayA9IChuKSA9PiAoXzJuIDw8IEJpZ0ludChuIC0gMSkpIC0gXzFuO1xuLy8gRFJCR1xuY29uc3QgdThuID0gKGRhdGEpID0+IG5ldyBVaW50OEFycmF5KGRhdGEpOyAvLyBjcmVhdGVzIFVpbnQ4QXJyYXlcbmNvbnN0IHU4ZnIgPSAoYXJyKSA9PiBVaW50OEFycmF5LmZyb20oYXJyKTsgLy8gYW5vdGhlciBzaG9ydGN1dFxuLyoqXG4gKiBNaW5pbWFsIEhNQUMtRFJCRyBmcm9tIE5JU1QgODAwLTkwIGZvciBSRkM2OTc5IHNpZ3MuXG4gKiBAcmV0dXJucyBmdW5jdGlvbiB0aGF0IHdpbGwgY2FsbCBEUkJHIHVudGlsIDJuZCBhcmcgcmV0dXJucyBzb21ldGhpbmcgbWVhbmluZ2Z1bFxuICogQGV4YW1wbGVcbiAqICAgY29uc3QgZHJiZyA9IGNyZWF0ZUhtYWNEUkJHPEtleT4oMzIsIDMyLCBobWFjKTtcbiAqICAgZHJiZyhzZWVkLCBieXRlc1RvS2V5KTsgLy8gYnl0ZXNUb0tleSBtdXN0IHJldHVybiBLZXkgb3IgdW5kZWZpbmVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIbWFjRHJiZyhoYXNoTGVuLCBxQnl0ZUxlbiwgaG1hY0ZuKSB7XG4gICAgaWYgKHR5cGVvZiBoYXNoTGVuICE9PSAnbnVtYmVyJyB8fCBoYXNoTGVuIDwgMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoYXNoTGVuIG11c3QgYmUgYSBudW1iZXInKTtcbiAgICBpZiAodHlwZW9mIHFCeXRlTGVuICE9PSAnbnVtYmVyJyB8fCBxQnl0ZUxlbiA8IDIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncUJ5dGVMZW4gbXVzdCBiZSBhIG51bWJlcicpO1xuICAgIGlmICh0eXBlb2YgaG1hY0ZuICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2htYWNGbiBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAvLyBTdGVwIEIsIFN0ZXAgQzogc2V0IGhhc2hMZW4gdG8gOCpjZWlsKGhsZW4vOClcbiAgICBsZXQgdiA9IHU4bihoYXNoTGVuKTsgLy8gTWluaW1hbCBub24tZnVsbC1zcGVjIEhNQUMtRFJCRyBmcm9tIE5JU1QgODAwLTkwIGZvciBSRkM2OTc5IHNpZ3MuXG4gICAgbGV0IGsgPSB1OG4oaGFzaExlbik7IC8vIFN0ZXBzIEIgYW5kIEMgb2YgUkZDNjk3OSAzLjI6IHNldCBoYXNoTGVuLCBpbiBvdXIgY2FzZSBhbHdheXMgc2FtZVxuICAgIGxldCBpID0gMDsgLy8gSXRlcmF0aW9ucyBjb3VudGVyLCB3aWxsIHRocm93IHdoZW4gb3ZlciAxMDAwXG4gICAgY29uc3QgcmVzZXQgPSAoKSA9PiB7XG4gICAgICAgIHYuZmlsbCgxKTtcbiAgICAgICAgay5maWxsKDApO1xuICAgICAgICBpID0gMDtcbiAgICB9O1xuICAgIGNvbnN0IGggPSAoLi4uYikgPT4gaG1hY0ZuKGssIHYsIC4uLmIpOyAvLyBobWFjKGspKHYsIC4uLnZhbHVlcylcbiAgICBjb25zdCByZXNlZWQgPSAoc2VlZCA9IHU4bigpKSA9PiB7XG4gICAgICAgIC8vIEhNQUMtRFJCRyByZXNlZWQoKSBmdW5jdGlvbi4gU3RlcHMgRC1HXG4gICAgICAgIGsgPSBoKHU4ZnIoWzB4MDBdKSwgc2VlZCk7IC8vIGsgPSBobWFjKGsgfHwgdiB8fCAweDAwIHx8IHNlZWQpXG4gICAgICAgIHYgPSBoKCk7IC8vIHYgPSBobWFjKGsgfHwgdilcbiAgICAgICAgaWYgKHNlZWQubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBrID0gaCh1OGZyKFsweDAxXSksIHNlZWQpOyAvLyBrID0gaG1hYyhrIHx8IHYgfHwgMHgwMSB8fCBzZWVkKVxuICAgICAgICB2ID0gaCgpOyAvLyB2ID0gaG1hYyhrIHx8IHYpXG4gICAgfTtcbiAgICBjb25zdCBnZW4gPSAoKSA9PiB7XG4gICAgICAgIC8vIEhNQUMtRFJCRyBnZW5lcmF0ZSgpIGZ1bmN0aW9uXG4gICAgICAgIGlmIChpKysgPj0gMTAwMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZHJiZzogdHJpZWQgMTAwMCB2YWx1ZXMnKTtcbiAgICAgICAgbGV0IGxlbiA9IDA7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICB3aGlsZSAobGVuIDwgcUJ5dGVMZW4pIHtcbiAgICAgICAgICAgIHYgPSBoKCk7XG4gICAgICAgICAgICBjb25zdCBzbCA9IHYuc2xpY2UoKTtcbiAgICAgICAgICAgIG91dC5wdXNoKHNsKTtcbiAgICAgICAgICAgIGxlbiArPSB2Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uY2F0Qnl0ZXMoLi4ub3V0KTtcbiAgICB9O1xuICAgIGNvbnN0IGdlblVudGlsID0gKHNlZWQsIHByZWQpID0+IHtcbiAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgcmVzZWVkKHNlZWQpOyAvLyBTdGVwcyBELUdcbiAgICAgICAgbGV0IHJlcyA9IHVuZGVmaW5lZDsgLy8gU3RlcCBIOiBncmluZCB1bnRpbCBrIGlzIGluIFsxLi5uLTFdXG4gICAgICAgIHdoaWxlICghKHJlcyA9IHByZWQoZ2VuKCkpKSlcbiAgICAgICAgICAgIHJlc2VlZCgpO1xuICAgICAgICByZXNldCgpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgcmV0dXJuIGdlblVudGlsO1xufVxuLy8gVmFsaWRhdGluZyBjdXJ2ZXMgYW5kIGZpZWxkc1xuY29uc3QgdmFsaWRhdG9yRm5zID0ge1xuICAgIGJpZ2ludDogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2JpZ2ludCcsXG4gICAgZnVuY3Rpb246ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicsXG4gICAgYm9vbGVhbjogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2Jvb2xlYW4nLFxuICAgIHN0cmluZzogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycsXG4gICAgc3RyaW5nT3JVaW50OEFycmF5OiAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyB8fCBpc0J5dGVzKHZhbCksXG4gICAgaXNTYWZlSW50ZWdlcjogKHZhbCkgPT4gTnVtYmVyLmlzU2FmZUludGVnZXIodmFsKSxcbiAgICBhcnJheTogKHZhbCkgPT4gQXJyYXkuaXNBcnJheSh2YWwpLFxuICAgIGZpZWxkOiAodmFsLCBvYmplY3QpID0+IG9iamVjdC5GcC5pc1ZhbGlkKHZhbCksXG4gICAgaGFzaDogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyAmJiBOdW1iZXIuaXNTYWZlSW50ZWdlcih2YWwub3V0cHV0TGVuKSxcbn07XG4vLyB0eXBlIFJlY29yZDxLIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sLCBUPiA9IHsgW1AgaW4gS106IFQ7IH1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdChvYmplY3QsIHZhbGlkYXRvcnMsIG9wdFZhbGlkYXRvcnMgPSB7fSkge1xuICAgIGNvbnN0IGNoZWNrRmllbGQgPSAoZmllbGROYW1lLCB0eXBlLCBpc09wdGlvbmFsKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoZWNrVmFsID0gdmFsaWRhdG9yRm5zW3R5cGVdO1xuICAgICAgICBpZiAodHlwZW9mIGNoZWNrVmFsICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHZhbGlkYXRvciBmdW5jdGlvbicpO1xuICAgICAgICBjb25zdCB2YWwgPSBvYmplY3RbZmllbGROYW1lXTtcbiAgICAgICAgaWYgKGlzT3B0aW9uYWwgJiYgdmFsID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghY2hlY2tWYWwodmFsLCBvYmplY3QpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BhcmFtICcgKyBTdHJpbmcoZmllbGROYW1lKSArICcgaXMgaW52YWxpZC4gRXhwZWN0ZWQgJyArIHR5cGUgKyAnLCBnb3QgJyArIHZhbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZvciAoY29uc3QgW2ZpZWxkTmFtZSwgdHlwZV0gb2YgT2JqZWN0LmVudHJpZXModmFsaWRhdG9ycykpXG4gICAgICAgIGNoZWNrRmllbGQoZmllbGROYW1lLCB0eXBlLCBmYWxzZSk7XG4gICAgZm9yIChjb25zdCBbZmllbGROYW1lLCB0eXBlXSBvZiBPYmplY3QuZW50cmllcyhvcHRWYWxpZGF0b3JzKSlcbiAgICAgICAgY2hlY2tGaWVsZChmaWVsZE5hbWUsIHR5cGUsIHRydWUpO1xuICAgIHJldHVybiBvYmplY3Q7XG59XG4vLyB2YWxpZGF0ZSB0eXBlIHRlc3RzXG4vLyBjb25zdCBvOiB7IGE6IG51bWJlcjsgYjogbnVtYmVyOyBjOiBudW1iZXIgfSA9IHsgYTogMSwgYjogNSwgYzogNiB9O1xuLy8gY29uc3QgejAgPSB2YWxpZGF0ZU9iamVjdChvLCB7IGE6ICdpc1NhZmVJbnRlZ2VyJyB9LCB7IGM6ICdiaWdpbnQnIH0pOyAvLyBPayFcbi8vIC8vIFNob3VsZCBmYWlsIHR5cGUtY2hlY2tcbi8vIGNvbnN0IHoxID0gdmFsaWRhdGVPYmplY3QobywgeyBhOiAndG1wJyB9LCB7IGM6ICd6eicgfSk7XG4vLyBjb25zdCB6MiA9IHZhbGlkYXRlT2JqZWN0KG8sIHsgYTogJ2lzU2FmZUludGVnZXInIH0sIHsgYzogJ3p6JyB9KTtcbi8vIGNvbnN0IHozID0gdmFsaWRhdGVPYmplY3QobywgeyB0ZXN0OiAnYm9vbGVhbicsIHo6ICdidWcnIH0pO1xuLy8gY29uc3QgejQgPSB2YWxpZGF0ZU9iamVjdChvLCB7IGE6ICdib29sZWFuJywgejogJ2J1ZycgfSk7XG4vKipcbiAqIHRocm93cyBub3QgaW1wbGVtZW50ZWQgZXJyb3JcbiAqL1xuZXhwb3J0IGNvbnN0IG5vdEltcGxlbWVudGVkID0gKCkgPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG59O1xuLyoqXG4gKiBNZW1vaXplcyAoY2FjaGVzKSBjb21wdXRhdGlvbiByZXN1bHQuXG4gKiBVc2VzIFdlYWtNYXA6IHRoZSB2YWx1ZSBpcyBnb2luZyBhdXRvLWNsZWFuZWQgYnkgR0MgYWZ0ZXIgbGFzdCByZWZlcmVuY2UgaXMgcmVtb3ZlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lbW9pemVkKGZuKSB7XG4gICAgY29uc3QgbWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgICByZXR1cm4gKGFyZywgLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCB2YWwgPSBtYXAuZ2V0KGFyZyk7XG4gICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIGNvbnN0IGNvbXB1dGVkID0gZm4oYXJnLCAuLi5hcmdzKTtcbiAgICAgICAgbWFwLnNldChhcmcsIGNvbXB1dGVkKTtcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVkO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCIvKipcbiAqIFV0aWxzIGZvciBtb2R1bGFyIGRpdmlzaW9uIGFuZCBmaW5pdGUgZmllbGRzLlxuICogQSBmaW5pdGUgZmllbGQgb3ZlciAxMSBpcyBpbnRlZ2VyIG51bWJlciBvcGVyYXRpb25zIGBtb2QgMTFgLlxuICogVGhlcmUgaXMgbm8gZGl2aXNpb246IGl0IGlzIHJlcGxhY2VkIGJ5IG1vZHVsYXIgbXVsdGlwbGljYXRpdmUgaW52ZXJzZS5cbiAqIEBtb2R1bGVcbiAqL1xuLyohIG5vYmxlLWN1cnZlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuaW1wb3J0IHsgYml0TWFzaywgYnl0ZXNUb051bWJlckJFLCBieXRlc1RvTnVtYmVyTEUsIGVuc3VyZUJ5dGVzLCBudW1iZXJUb0J5dGVzQkUsIG51bWJlclRvQnl0ZXNMRSwgdmFsaWRhdGVPYmplY3QsIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IF8wbiA9IEJpZ0ludCgwKSwgXzFuID0gQmlnSW50KDEpLCBfMm4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDIpLCBfM24gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDMpO1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBfNG4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDQpLCBfNW4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDUpLCBfOG4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDgpO1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBfOW4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDkpLCBfMTZuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgxNik7XG4vLyBDYWxjdWxhdGVzIGEgbW9kdWxvIGJcbmV4cG9ydCBmdW5jdGlvbiBtb2QoYSwgYikge1xuICAgIGNvbnN0IHJlc3VsdCA9IGEgJSBiO1xuICAgIHJldHVybiByZXN1bHQgPj0gXzBuID8gcmVzdWx0IDogYiArIHJlc3VsdDtcbn1cbi8qKlxuICogRWZmaWNpZW50bHkgcmFpc2UgbnVtIHRvIHBvd2VyIGFuZCBkbyBtb2R1bGFyIGRpdmlzaW9uLlxuICogVW5zYWZlIGluIHNvbWUgY29udGV4dHM6IHVzZXMgbGFkZGVyLCBzbyBjYW4gZXhwb3NlIGJpZ2ludCBiaXRzLlxuICogQHRvZG8gdXNlIGZpZWxkIHZlcnNpb24gJiYgcmVtb3ZlXG4gKiBAZXhhbXBsZVxuICogcG93KDJuLCA2biwgMTFuKSAvLyA2NG4gJSAxMW4gPT0gOW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvdyhudW0sIHBvd2VyLCBtb2R1bG8pIHtcbiAgICBpZiAocG93ZXIgPCBfMG4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBleHBvbmVudCwgbmVnYXRpdmVzIHVuc3VwcG9ydGVkJyk7XG4gICAgaWYgKG1vZHVsbyA8PSBfMG4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBtb2R1bHVzJyk7XG4gICAgaWYgKG1vZHVsbyA9PT0gXzFuKVxuICAgICAgICByZXR1cm4gXzBuO1xuICAgIGxldCByZXMgPSBfMW47XG4gICAgd2hpbGUgKHBvd2VyID4gXzBuKSB7XG4gICAgICAgIGlmIChwb3dlciAmIF8xbilcbiAgICAgICAgICAgIHJlcyA9IChyZXMgKiBudW0pICUgbW9kdWxvO1xuICAgICAgICBudW0gPSAobnVtICogbnVtKSAlIG1vZHVsbztcbiAgICAgICAgcG93ZXIgPj49IF8xbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qKiBEb2VzIGB4XigyXnBvd2VyKWAgbW9kIHAuIGBwb3cyKDMwLCA0KWAgPT0gYDMwXigyXjQpYCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvdzIoeCwgcG93ZXIsIG1vZHVsbykge1xuICAgIGxldCByZXMgPSB4O1xuICAgIHdoaWxlIChwb3dlci0tID4gXzBuKSB7XG4gICAgICAgIHJlcyAqPSByZXM7XG4gICAgICAgIHJlcyAlPSBtb2R1bG87XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vKipcbiAqIEludmVyc2VzIG51bWJlciBvdmVyIG1vZHVsby5cbiAqIEltcGxlbWVudGVkIHVzaW5nIFtFdWNsaWRlYW4gR0NEXShodHRwczovL2JyaWxsaWFudC5vcmcvd2lraS9leHRlbmRlZC1ldWNsaWRlYW4tYWxnb3JpdGhtLykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQobnVtYmVyLCBtb2R1bG8pIHtcbiAgICBpZiAobnVtYmVyID09PSBfMG4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52ZXJ0OiBleHBlY3RlZCBub24temVybyBudW1iZXInKTtcbiAgICBpZiAobW9kdWxvIDw9IF8wbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZlcnQ6IGV4cGVjdGVkIHBvc2l0aXZlIG1vZHVsdXMsIGdvdCAnICsgbW9kdWxvKTtcbiAgICAvLyBGZXJtYXQncyBsaXR0bGUgdGhlb3JlbSBcIkNULWxpa2VcIiB2ZXJzaW9uIGludihuKSA9IG5eKG0tMikgbW9kIG0gaXMgMzB4IHNsb3dlci5cbiAgICBsZXQgYSA9IG1vZChudW1iZXIsIG1vZHVsbyk7XG4gICAgbGV0IGIgPSBtb2R1bG87XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgbGV0IHggPSBfMG4sIHkgPSBfMW4sIHUgPSBfMW4sIHYgPSBfMG47XG4gICAgd2hpbGUgKGEgIT09IF8wbikge1xuICAgICAgICAvLyBKSVQgYXBwbGllcyBvcHRpbWl6YXRpb24gaWYgdGhvc2UgdHdvIGxpbmVzIGZvbGxvdyBlYWNoIG90aGVyXG4gICAgICAgIGNvbnN0IHEgPSBiIC8gYTtcbiAgICAgICAgY29uc3QgciA9IGIgJSBhO1xuICAgICAgICBjb25zdCBtID0geCAtIHUgKiBxO1xuICAgICAgICBjb25zdCBuID0geSAtIHYgKiBxO1xuICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgYiA9IGEsIGEgPSByLCB4ID0gdSwgeSA9IHYsIHUgPSBtLCB2ID0gbjtcbiAgICB9XG4gICAgY29uc3QgZ2NkID0gYjtcbiAgICBpZiAoZ2NkICE9PSBfMW4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52ZXJ0OiBkb2VzIG5vdCBleGlzdCcpO1xuICAgIHJldHVybiBtb2QoeCwgbW9kdWxvKTtcbn1cbi8qKlxuICogVG9uZWxsaS1TaGFua3Mgc3F1YXJlIHJvb3Qgc2VhcmNoIGFsZ29yaXRobS5cbiAqIDEuIGh0dHBzOi8vZXByaW50LmlhY3Iub3JnLzIwMTIvNjg1LnBkZiAocGFnZSAxMilcbiAqIDIuIFNxdWFyZSBSb290cyBmcm9tIDE7IDI0LCA1MSwgMTAgdG8gRGFuIFNoYW5rc1xuICogV2lsbCBzdGFydCBhbiBpbmZpbml0ZSBsb29wIGlmIGZpZWxkIG9yZGVyIFAgaXMgbm90IHByaW1lLlxuICogQHBhcmFtIFAgZmllbGQgb3JkZXJcbiAqIEByZXR1cm5zIGZ1bmN0aW9uIHRoYXQgdGFrZXMgZmllbGQgRnAgKGNyZWF0ZWQgZnJvbSBQKSBhbmQgbnVtYmVyIG5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvbmVsbGlTaGFua3MoUCkge1xuICAgIC8vIExlZ2VuZHJlIGNvbnN0YW50OiB1c2VkIHRvIGNhbGN1bGF0ZSBMZWdlbmRyZSBzeW1ib2wgKGEgfCBwKSxcbiAgICAvLyB3aGljaCBkZW5vdGVzIHRoZSB2YWx1ZSBvZiBhXigocC0xKS8yKSAobW9kIHApLlxuICAgIC8vIChhIHwgcCkg4omhIDEgICAgaWYgYSBpcyBhIHNxdWFyZSAobW9kIHApXG4gICAgLy8gKGEgfCBwKSDiiaEgLTEgICBpZiBhIGlzIG5vdCBhIHNxdWFyZSAobW9kIHApXG4gICAgLy8gKGEgfCBwKSDiiaEgMCAgICBpZiBhIOKJoSAwIChtb2QgcClcbiAgICBjb25zdCBsZWdlbmRyZUMgPSAoUCAtIF8xbikgLyBfMm47XG4gICAgbGV0IFEsIFMsIFo7XG4gICAgLy8gU3RlcCAxOiBCeSBmYWN0b3Jpbmcgb3V0IHBvd2VycyBvZiAyIGZyb20gcCAtIDEsXG4gICAgLy8gZmluZCBxIGFuZCBzIHN1Y2ggdGhhdCBwIC0gMSA9IHEqKDJecykgd2l0aCBxIG9kZFxuICAgIGZvciAoUSA9IFAgLSBfMW4sIFMgPSAwOyBRICUgXzJuID09PSBfMG47IFEgLz0gXzJuLCBTKyspXG4gICAgICAgIDtcbiAgICAvLyBTdGVwIDI6IFNlbGVjdCBhIG5vbi1zcXVhcmUgeiBzdWNoIHRoYXQgKHogfCBwKSDiiaEgLTEgYW5kIHNldCBjIOKJoSB6cVxuICAgIGZvciAoWiA9IF8ybjsgWiA8IFAgJiYgcG93KFosIGxlZ2VuZHJlQywgUCkgIT09IFAgLSBfMW47IForKykge1xuICAgICAgICAvLyBDcmFzaCBpbnN0ZWFkIG9mIGluZmluaXR5IGxvb3AsIHdlIGNhbm5vdCByZWFzb25hYmxlIGNvdW50IHVudGlsIFAuXG4gICAgICAgIGlmIChaID4gMTAwMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3Q6IGxpa2VseSBub24tcHJpbWUgUCcpO1xuICAgIH1cbiAgICAvLyBGYXN0LXBhdGhcbiAgICBpZiAoUyA9PT0gMSkge1xuICAgICAgICBjb25zdCBwMWRpdjQgPSAoUCArIF8xbikgLyBfNG47XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiB0b25lbGxpRmFzdChGcCwgbikge1xuICAgICAgICAgICAgY29uc3Qgcm9vdCA9IEZwLnBvdyhuLCBwMWRpdjQpO1xuICAgICAgICAgICAgaWYgKCFGcC5lcWwoRnAuc3FyKHJvb3QpLCBuKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIHNxdWFyZSByb290Jyk7XG4gICAgICAgICAgICByZXR1cm4gcm9vdDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gU2xvdy1wYXRoXG4gICAgY29uc3QgUTFkaXYyID0gKFEgKyBfMW4pIC8gXzJuO1xuICAgIHJldHVybiBmdW5jdGlvbiB0b25lbGxpU2xvdyhGcCwgbikge1xuICAgICAgICAvLyBTdGVwIDA6IENoZWNrIHRoYXQgbiBpcyBpbmRlZWQgYSBzcXVhcmU6IChuIHwgcCkgc2hvdWxkIG5vdCBiZSDiiaEgLTFcbiAgICAgICAgaWYgKEZwLnBvdyhuLCBsZWdlbmRyZUMpID09PSBGcC5uZWcoRnAuT05FKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICAgICAgbGV0IHIgPSBTO1xuICAgICAgICAvLyBUT0RPOiB3aWxsIGZhaWwgYXQgRnAyL2V0Y1xuICAgICAgICBsZXQgZyA9IEZwLnBvdyhGcC5tdWwoRnAuT05FLCBaKSwgUSk7IC8vIHdpbGwgdXBkYXRlIGJvdGggeCBhbmQgYlxuICAgICAgICBsZXQgeCA9IEZwLnBvdyhuLCBRMWRpdjIpOyAvLyBmaXJzdCBndWVzcyBhdCB0aGUgc3F1YXJlIHJvb3RcbiAgICAgICAgbGV0IGIgPSBGcC5wb3cobiwgUSk7IC8vIGZpcnN0IGd1ZXNzIGF0IHRoZSBmdWRnZSBmYWN0b3JcbiAgICAgICAgd2hpbGUgKCFGcC5lcWwoYiwgRnAuT05FKSkge1xuICAgICAgICAgICAgaWYgKEZwLmVxbChiLCBGcC5aRVJPKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gRnAuWkVSTzsgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVG9uZWxsaSVFMiU4MCU5M1NoYW5rc19hbGdvcml0aG0gKDQuIElmIHQgPSAwLCByZXR1cm4gciA9IDApXG4gICAgICAgICAgICAvLyBGaW5kIG0gc3VjaCBiXigyXm0pPT0xXG4gICAgICAgICAgICBsZXQgbSA9IDE7XG4gICAgICAgICAgICBmb3IgKGxldCB0MiA9IEZwLnNxcihiKTsgbSA8IHI7IG0rKykge1xuICAgICAgICAgICAgICAgIGlmIChGcC5lcWwodDIsIEZwLk9ORSkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIHQyID0gRnAuc3FyKHQyKTsgLy8gdDIgKj0gdDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE5PVEU6IHItbS0xIGNhbiBiZSBiaWdnZXIgdGhhbiAzMiwgbmVlZCB0byBjb252ZXJ0IHRvIGJpZ2ludCBiZWZvcmUgc2hpZnQsIG90aGVyd2lzZSB0aGVyZSB3aWxsIGJlIG92ZXJmbG93XG4gICAgICAgICAgICBjb25zdCBnZSA9IEZwLnBvdyhnLCBfMW4gPDwgQmlnSW50KHIgLSBtIC0gMSkpOyAvLyBnZSA9IDJeKHItbS0xKVxuICAgICAgICAgICAgZyA9IEZwLnNxcihnZSk7IC8vIGcgPSBnZSAqIGdlXG4gICAgICAgICAgICB4ID0gRnAubXVsKHgsIGdlKTsgLy8geCAqPSBnZVxuICAgICAgICAgICAgYiA9IEZwLm11bChiLCBnKTsgLy8gYiAqPSBnXG4gICAgICAgICAgICByID0gbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geDtcbiAgICB9O1xufVxuLyoqXG4gKiBTcXVhcmUgcm9vdCBmb3IgYSBmaW5pdGUgZmllbGQuIEl0IHdpbGwgdHJ5IHRvIGNoZWNrIGlmIG9wdGltaXphdGlvbnMgYXJlIGFwcGxpY2FibGUgYW5kIGZhbGwgYmFjayB0byA0OlxuICpcbiAqIDEuIFAg4omhIDMgKG1vZCA0KVxuICogMi4gUCDiiaEgNSAobW9kIDgpXG4gKiAzLiBQIOKJoSA5IChtb2QgMTYpXG4gKiA0LiBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG1cbiAqXG4gKiBEaWZmZXJlbnQgYWxnb3JpdGhtcyBjYW4gZ2l2ZSBkaWZmZXJlbnQgcm9vdHMsIGl0IGlzIHVwIHRvIHVzZXIgdG8gZGVjaWRlIHdoaWNoIG9uZSB0aGV5IHdhbnQuXG4gKiBGb3IgZXhhbXBsZSB0aGVyZSBpcyBGcFNxcnRPZGQvRnBTcXJ0RXZlbiB0byBjaG9pY2Ugcm9vdCBiYXNlZCBvbiBvZGRuZXNzICh1c2VkIGZvciBoYXNoLXRvLWN1cnZlKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEZwU3FydChQKSB7XG4gICAgLy8gUCDiiaEgMyAobW9kIDQpXG4gICAgLy8g4oiabiA9IG5eKChQKzEpLzQpXG4gICAgaWYgKFAgJSBfNG4gPT09IF8zbikge1xuICAgICAgICAvLyBOb3QgYWxsIHJvb3RzIHBvc3NpYmxlIVxuICAgICAgICAvLyBjb25zdCBPUkRFUiA9XG4gICAgICAgIC8vICAgMHgxYTAxMTFlYTM5N2ZlNjlhNGIxYmE3YjY0MzRiYWNkNzY0Nzc0Yjg0ZjM4NTEyYmY2NzMwZDJhMGY2YjBmNjI0MWVhYmZmZmViMTUzZmZmZmI5ZmVmZmZmZmZmZmFhYWJuO1xuICAgICAgICAvLyBjb25zdCBOVU0gPSA3MjA1NzU5NDAzNzkyNzgxNm47XG4gICAgICAgIGNvbnN0IHAxZGl2NCA9IChQICsgXzFuKSAvIF80bjtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNxcnQzbW9kNChGcCwgbikge1xuICAgICAgICAgICAgY29uc3Qgcm9vdCA9IEZwLnBvdyhuLCBwMWRpdjQpO1xuICAgICAgICAgICAgLy8gVGhyb3cgaWYgcm9vdCoqMiAhPSBuXG4gICAgICAgICAgICBpZiAoIUZwLmVxbChGcC5zcXIocm9vdCksIG4pKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICAgICAgICAgIHJldHVybiByb290O1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBBdGtpbiBhbGdvcml0aG0gZm9yIHEg4omhIDUgKG1vZCA4KSwgaHR0cHM6Ly9lcHJpbnQuaWFjci5vcmcvMjAxMi82ODUucGRmIChwYWdlIDEwKVxuICAgIGlmIChQICUgXzhuID09PSBfNW4pIHtcbiAgICAgICAgY29uc3QgYzEgPSAoUCAtIF81bikgLyBfOG47XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBzcXJ0NW1vZDgoRnAsIG4pIHtcbiAgICAgICAgICAgIGNvbnN0IG4yID0gRnAubXVsKG4sIF8ybik7XG4gICAgICAgICAgICBjb25zdCB2ID0gRnAucG93KG4yLCBjMSk7XG4gICAgICAgICAgICBjb25zdCBudiA9IEZwLm11bChuLCB2KTtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBGcC5tdWwoRnAubXVsKG52LCBfMm4pLCB2KTtcbiAgICAgICAgICAgIGNvbnN0IHJvb3QgPSBGcC5tdWwobnYsIEZwLnN1YihpLCBGcC5PTkUpKTtcbiAgICAgICAgICAgIGlmICghRnAuZXFsKEZwLnNxcihyb290KSwgbikpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBzcXVhcmUgcm9vdCcpO1xuICAgICAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFAg4omhIDkgKG1vZCAxNilcbiAgICBpZiAoUCAlIF8xNm4gPT09IF85bikge1xuICAgICAgICAvLyBOT1RFOiB0b25lbGxpIGlzIHRvbyBzbG93IGZvciBibHMtRnAyIGNhbGN1bGF0aW9ucyBldmVuIG9uIHN0YXJ0XG4gICAgICAgIC8vIE1lYW5zIHdlIGNhbm5vdCB1c2Ugc3FydCBmb3IgY29uc3RhbnRzIGF0IGFsbCFcbiAgICAgICAgLy9cbiAgICAgICAgLy8gY29uc3QgYzEgPSBGcC5zcXJ0KEZwLm5lZ2F0ZShGcC5PTkUpKTsgLy8gIDEuIGMxID0gc3FydCgtMSkgaW4gRiwgaS5lLiwgKGMxXjIpID09IC0xIGluIEZcbiAgICAgICAgLy8gY29uc3QgYzIgPSBGcC5zcXJ0KGMxKTsgICAgICAgICAgICAgICAgLy8gIDIuIGMyID0gc3FydChjMSkgaW4gRiwgaS5lLiwgKGMyXjIpID09IGMxIGluIEZcbiAgICAgICAgLy8gY29uc3QgYzMgPSBGcC5zcXJ0KEZwLm5lZ2F0ZShjMSkpOyAgICAgLy8gIDMuIGMzID0gc3FydCgtYzEpIGluIEYsIGkuZS4sIChjM14yKSA9PSAtYzEgaW4gRlxuICAgICAgICAvLyBjb25zdCBjNCA9IChQICsgXzduKSAvIF8xNm47ICAgICAgICAgICAvLyAgNC4gYzQgPSAocSArIDcpIC8gMTYgICAgICAgICMgSW50ZWdlciBhcml0aG1ldGljXG4gICAgICAgIC8vIHNxcnQgPSAoeCkgPT4ge1xuICAgICAgICAvLyAgIGxldCB0djEgPSBGcC5wb3coeCwgYzQpOyAgICAgICAgICAgICAvLyAgMS4gdHYxID0geF5jNFxuICAgICAgICAvLyAgIGxldCB0djIgPSBGcC5tdWwoYzEsIHR2MSk7ICAgICAgICAgICAvLyAgMi4gdHYyID0gYzEgKiB0djFcbiAgICAgICAgLy8gICBjb25zdCB0djMgPSBGcC5tdWwoYzIsIHR2MSk7ICAgICAgICAgLy8gIDMuIHR2MyA9IGMyICogdHYxXG4gICAgICAgIC8vICAgbGV0IHR2NCA9IEZwLm11bChjMywgdHYxKTsgICAgICAgICAgIC8vICA0LiB0djQgPSBjMyAqIHR2MVxuICAgICAgICAvLyAgIGNvbnN0IGUxID0gRnAuZXF1YWxzKEZwLnNxdWFyZSh0djIpLCB4KTsgLy8gIDUuICBlMSA9ICh0djJeMikgPT0geFxuICAgICAgICAvLyAgIGNvbnN0IGUyID0gRnAuZXF1YWxzKEZwLnNxdWFyZSh0djMpLCB4KTsgLy8gIDYuICBlMiA9ICh0djNeMikgPT0geFxuICAgICAgICAvLyAgIHR2MSA9IEZwLmNtb3YodHYxLCB0djIsIGUxKTsgLy8gIDcuIHR2MSA9IENNT1YodHYxLCB0djIsIGUxKSAgIyBTZWxlY3QgdHYyIGlmICh0djJeMikgPT0geFxuICAgICAgICAvLyAgIHR2MiA9IEZwLmNtb3YodHY0LCB0djMsIGUyKTsgLy8gIDguIHR2MiA9IENNT1YodHY0LCB0djMsIGUyKSAgIyBTZWxlY3QgdHYzIGlmICh0djNeMikgPT0geFxuICAgICAgICAvLyAgIGNvbnN0IGUzID0gRnAuZXF1YWxzKEZwLnNxdWFyZSh0djIpLCB4KTsgLy8gIDkuICBlMyA9ICh0djJeMikgPT0geFxuICAgICAgICAvLyAgIHJldHVybiBGcC5jbW92KHR2MSwgdHYyLCBlMyk7IC8vICAxMC4gIHogPSBDTU9WKHR2MSwgdHYyLCBlMykgICMgU2VsZWN0IHRoZSBzcXJ0IGZyb20gdHYxIGFuZCB0djJcbiAgICAgICAgLy8gfVxuICAgIH1cbiAgICAvLyBPdGhlciBjYXNlczogVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtXG4gICAgcmV0dXJuIHRvbmVsbGlTaGFua3MoUCk7XG59XG4vLyBMaXR0bGUtZW5kaWFuIGNoZWNrIGZvciBmaXJzdCBMRSBiaXQgKGxhc3QgQkUgYml0KTtcbmV4cG9ydCBjb25zdCBpc05lZ2F0aXZlTEUgPSAobnVtLCBtb2R1bG8pID0+IChtb2QobnVtLCBtb2R1bG8pICYgXzFuKSA9PT0gXzFuO1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBGSUVMRF9GSUVMRFMgPSBbXG4gICAgJ2NyZWF0ZScsICdpc1ZhbGlkJywgJ2lzMCcsICduZWcnLCAnaW52JywgJ3NxcnQnLCAnc3FyJyxcbiAgICAnZXFsJywgJ2FkZCcsICdzdWInLCAnbXVsJywgJ3BvdycsICdkaXYnLFxuICAgICdhZGROJywgJ3N1Yk4nLCAnbXVsTicsICdzcXJOJ1xuXTtcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUZpZWxkKGZpZWxkKSB7XG4gICAgY29uc3QgaW5pdGlhbCA9IHtcbiAgICAgICAgT1JERVI6ICdiaWdpbnQnLFxuICAgICAgICBNQVNLOiAnYmlnaW50JyxcbiAgICAgICAgQllURVM6ICdpc1NhZmVJbnRlZ2VyJyxcbiAgICAgICAgQklUUzogJ2lzU2FmZUludGVnZXInLFxuICAgIH07XG4gICAgY29uc3Qgb3B0cyA9IEZJRUxEX0ZJRUxEUy5yZWR1Y2UoKG1hcCwgdmFsKSA9PiB7XG4gICAgICAgIG1hcFt2YWxdID0gJ2Z1bmN0aW9uJztcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LCBpbml0aWFsKTtcbiAgICByZXR1cm4gdmFsaWRhdGVPYmplY3QoZmllbGQsIG9wdHMpO1xufVxuLy8gR2VuZXJpYyBmaWVsZCBmdW5jdGlvbnNcbi8qKlxuICogU2FtZSBhcyBgcG93YCBidXQgZm9yIEZwOiBub24tY29uc3RhbnQtdGltZS5cbiAqIFVuc2FmZSBpbiBzb21lIGNvbnRleHRzOiB1c2VzIGxhZGRlciwgc28gY2FuIGV4cG9zZSBiaWdpbnQgYml0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEZwUG93KGYsIG51bSwgcG93ZXIpIHtcbiAgICAvLyBTaG91bGQgaGF2ZSBzYW1lIHNwZWVkIGFzIHBvdyBmb3IgYmlnaW50c1xuICAgIC8vIFRPRE86IGJlbmNobWFyayFcbiAgICBpZiAocG93ZXIgPCBfMG4pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBleHBvbmVudCwgbmVnYXRpdmVzIHVuc3VwcG9ydGVkJyk7XG4gICAgaWYgKHBvd2VyID09PSBfMG4pXG4gICAgICAgIHJldHVybiBmLk9ORTtcbiAgICBpZiAocG93ZXIgPT09IF8xbilcbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICBsZXQgcCA9IGYuT05FO1xuICAgIGxldCBkID0gbnVtO1xuICAgIHdoaWxlIChwb3dlciA+IF8wbikge1xuICAgICAgICBpZiAocG93ZXIgJiBfMW4pXG4gICAgICAgICAgICBwID0gZi5tdWwocCwgZCk7XG4gICAgICAgIGQgPSBmLnNxcihkKTtcbiAgICAgICAgcG93ZXIgPj49IF8xbjtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG59XG4vKipcbiAqIEVmZmljaWVudGx5IGludmVydCBhbiBhcnJheSBvZiBGaWVsZCBlbGVtZW50cy5cbiAqIGBpbnYoMClgIHdpbGwgcmV0dXJuIGB1bmRlZmluZWRgIGhlcmU6IG1ha2Ugc3VyZSB0byB0aHJvdyBhbiBlcnJvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEZwSW52ZXJ0QmF0Y2goZiwgbnVtcykge1xuICAgIGNvbnN0IHRtcCA9IG5ldyBBcnJheShudW1zLmxlbmd0aCk7XG4gICAgLy8gV2FsayBmcm9tIGZpcnN0IHRvIGxhc3QsIG11bHRpcGx5IHRoZW0gYnkgZWFjaCBvdGhlciBNT0QgcFxuICAgIGNvbnN0IGxhc3RNdWx0aXBsaWVkID0gbnVtcy5yZWR1Y2UoKGFjYywgbnVtLCBpKSA9PiB7XG4gICAgICAgIGlmIChmLmlzMChudW0pKVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgdG1wW2ldID0gYWNjO1xuICAgICAgICByZXR1cm4gZi5tdWwoYWNjLCBudW0pO1xuICAgIH0sIGYuT05FKTtcbiAgICAvLyBJbnZlcnQgbGFzdCBlbGVtZW50XG4gICAgY29uc3QgaW52ZXJ0ZWQgPSBmLmludihsYXN0TXVsdGlwbGllZCk7XG4gICAgLy8gV2FsayBmcm9tIGxhc3QgdG8gZmlyc3QsIG11bHRpcGx5IHRoZW0gYnkgaW52ZXJ0ZWQgZWFjaCBvdGhlciBNT0QgcFxuICAgIG51bXMucmVkdWNlUmlnaHQoKGFjYywgbnVtLCBpKSA9PiB7XG4gICAgICAgIGlmIChmLmlzMChudW0pKVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgdG1wW2ldID0gZi5tdWwoYWNjLCB0bXBbaV0pO1xuICAgICAgICByZXR1cm4gZi5tdWwoYWNjLCBudW0pO1xuICAgIH0sIGludmVydGVkKTtcbiAgICByZXR1cm4gdG1wO1xufVxuZXhwb3J0IGZ1bmN0aW9uIEZwRGl2KGYsIGxocywgcmhzKSB7XG4gICAgcmV0dXJuIGYubXVsKGxocywgdHlwZW9mIHJocyA9PT0gJ2JpZ2ludCcgPyBpbnZlcnQocmhzLCBmLk9SREVSKSA6IGYuaW52KHJocykpO1xufVxuLyoqXG4gKiBMZWdlbmRyZSBzeW1ib2wuXG4gKiAqIChhIHwgcCkg4omhIDEgICAgaWYgYSBpcyBhIHNxdWFyZSAobW9kIHApLCBxdWFkcmF0aWMgcmVzaWR1ZVxuICogKiAoYSB8IHApIOKJoSAtMSAgIGlmIGEgaXMgbm90IGEgc3F1YXJlIChtb2QgcCksIHF1YWRyYXRpYyBub24gcmVzaWR1ZVxuICogKiAoYSB8IHApIOKJoSAwICAgIGlmIGEg4omhIDAgKG1vZCBwKVxuICovXG5leHBvcnQgZnVuY3Rpb24gRnBMZWdlbmRyZShvcmRlcikge1xuICAgIGNvbnN0IGxlZ2VuZHJlQ29uc3QgPSAob3JkZXIgLSBfMW4pIC8gXzJuOyAvLyBJbnRlZ2VyIGFyaXRobWV0aWNcbiAgICByZXR1cm4gKGYsIHgpID0+IGYucG93KHgsIGxlZ2VuZHJlQ29uc3QpO1xufVxuLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIFRydWUgd2hlbmV2ZXIgdGhlIHZhbHVlIHggaXMgYSBzcXVhcmUgaW4gdGhlIGZpZWxkIEYuXG5leHBvcnQgZnVuY3Rpb24gRnBJc1NxdWFyZShmKSB7XG4gICAgY29uc3QgbGVnZW5kcmUgPSBGcExlZ2VuZHJlKGYuT1JERVIpO1xuICAgIHJldHVybiAoeCkgPT4ge1xuICAgICAgICBjb25zdCBwID0gbGVnZW5kcmUoZiwgeCk7XG4gICAgICAgIHJldHVybiBmLmVxbChwLCBmLlpFUk8pIHx8IGYuZXFsKHAsIGYuT05FKTtcbiAgICB9O1xufVxuLy8gQ1VSVkUubiBsZW5ndGhzXG5leHBvcnQgZnVuY3Rpb24gbkxlbmd0aChuLCBuQml0TGVuZ3RoKSB7XG4gICAgLy8gQml0IHNpemUsIGJ5dGUgc2l6ZSBvZiBDVVJWRS5uXG4gICAgY29uc3QgX25CaXRMZW5ndGggPSBuQml0TGVuZ3RoICE9PSB1bmRlZmluZWQgPyBuQml0TGVuZ3RoIDogbi50b1N0cmluZygyKS5sZW5ndGg7XG4gICAgY29uc3QgbkJ5dGVMZW5ndGggPSBNYXRoLmNlaWwoX25CaXRMZW5ndGggLyA4KTtcbiAgICByZXR1cm4geyBuQml0TGVuZ3RoOiBfbkJpdExlbmd0aCwgbkJ5dGVMZW5ndGggfTtcbn1cbi8qKlxuICogSW5pdGlhbGl6ZXMgYSBmaW5pdGUgZmllbGQgb3ZlciBwcmltZS5cbiAqIE1ham9yIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbnM6XG4gKiAqIGEpIGRlbm9ybWFsaXplZCBvcGVyYXRpb25zIGxpa2UgbXVsTiBpbnN0ZWFkIG9mIG11bFxuICogKiBiKSBzYW1lIG9iamVjdCBzaGFwZTogbmV2ZXIgYWRkIG9yIHJlbW92ZSBrZXlzXG4gKiAqIGMpIE9iamVjdC5mcmVlemVcbiAqIEZyYWdpbGU6IGFsd2F5cyBydW4gYSBiZW5jaG1hcmsgb24gYSBjaGFuZ2UuXG4gKiBTZWN1cml0eSBub3RlOiBvcGVyYXRpb25zIGRvbid0IGNoZWNrICdpc1ZhbGlkJyBmb3IgYWxsIGVsZW1lbnRzIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLFxuICogaXQgaXMgY2FsbGVyIHJlc3BvbnNpYmlsaXR5IHRvIGNoZWNrIHRoaXMuXG4gKiBUaGlzIGlzIGxvdy1sZXZlbCBjb2RlLCBwbGVhc2UgbWFrZSBzdXJlIHlvdSBrbm93IHdoYXQgeW91J3JlIGRvaW5nLlxuICogQHBhcmFtIE9SREVSIHByaW1lIHBvc2l0aXZlIGJpZ2ludFxuICogQHBhcmFtIGJpdExlbiBob3cgbWFueSBiaXRzIHRoZSBmaWVsZCBjb25zdW1lc1xuICogQHBhcmFtIGlzTEUgKGRlZjogZmFsc2UpIGlmIGVuY29kaW5nIC8gZGVjb2Rpbmcgc2hvdWxkIGJlIGluIGxpdHRsZS1lbmRpYW5cbiAqIEBwYXJhbSByZWRlZiBvcHRpb25hbCBmYXN0ZXIgcmVkZWZpbml0aW9ucyBvZiBzcXJ0IGFuZCBvdGhlciBtZXRob2RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBGaWVsZChPUkRFUiwgYml0TGVuLCBpc0xFID0gZmFsc2UsIHJlZGVmID0ge30pIHtcbiAgICBpZiAoT1JERVIgPD0gXzBuKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgZmllbGQ6IGV4cGVjdGVkIE9SREVSID4gMCwgZ290ICcgKyBPUkRFUik7XG4gICAgY29uc3QgeyBuQml0TGVuZ3RoOiBCSVRTLCBuQnl0ZUxlbmd0aDogQllURVMgfSA9IG5MZW5ndGgoT1JERVIsIGJpdExlbik7XG4gICAgaWYgKEJZVEVTID4gMjA0OClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGZpZWxkOiBleHBlY3RlZCBPUkRFUiBvZiA8PSAyMDQ4IGJ5dGVzJyk7XG4gICAgbGV0IHNxcnRQOyAvLyBjYWNoZWQgc3FydFBcbiAgICBjb25zdCBmID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIE9SREVSLFxuICAgICAgICBpc0xFLFxuICAgICAgICBCSVRTLFxuICAgICAgICBCWVRFUyxcbiAgICAgICAgTUFTSzogYml0TWFzayhCSVRTKSxcbiAgICAgICAgWkVSTzogXzBuLFxuICAgICAgICBPTkU6IF8xbixcbiAgICAgICAgY3JlYXRlOiAobnVtKSA9PiBtb2QobnVtLCBPUkRFUiksXG4gICAgICAgIGlzVmFsaWQ6IChudW0pID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbnVtICE9PSAnYmlnaW50JylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgZmllbGQgZWxlbWVudDogZXhwZWN0ZWQgYmlnaW50LCBnb3QgJyArIHR5cGVvZiBudW0pO1xuICAgICAgICAgICAgcmV0dXJuIF8wbiA8PSBudW0gJiYgbnVtIDwgT1JERVI7IC8vIDAgaXMgdmFsaWQgZWxlbWVudCwgYnV0IGl0J3Mgbm90IGludmVydGlibGVcbiAgICAgICAgfSxcbiAgICAgICAgaXMwOiAobnVtKSA9PiBudW0gPT09IF8wbixcbiAgICAgICAgaXNPZGQ6IChudW0pID0+IChudW0gJiBfMW4pID09PSBfMW4sXG4gICAgICAgIG5lZzogKG51bSkgPT4gbW9kKC1udW0sIE9SREVSKSxcbiAgICAgICAgZXFsOiAobGhzLCByaHMpID0+IGxocyA9PT0gcmhzLFxuICAgICAgICBzcXI6IChudW0pID0+IG1vZChudW0gKiBudW0sIE9SREVSKSxcbiAgICAgICAgYWRkOiAobGhzLCByaHMpID0+IG1vZChsaHMgKyByaHMsIE9SREVSKSxcbiAgICAgICAgc3ViOiAobGhzLCByaHMpID0+IG1vZChsaHMgLSByaHMsIE9SREVSKSxcbiAgICAgICAgbXVsOiAobGhzLCByaHMpID0+IG1vZChsaHMgKiByaHMsIE9SREVSKSxcbiAgICAgICAgcG93OiAobnVtLCBwb3dlcikgPT4gRnBQb3coZiwgbnVtLCBwb3dlciksXG4gICAgICAgIGRpdjogKGxocywgcmhzKSA9PiBtb2QobGhzICogaW52ZXJ0KHJocywgT1JERVIpLCBPUkRFUiksXG4gICAgICAgIC8vIFNhbWUgYXMgYWJvdmUsIGJ1dCBkb2Vzbid0IG5vcm1hbGl6ZVxuICAgICAgICBzcXJOOiAobnVtKSA9PiBudW0gKiBudW0sXG4gICAgICAgIGFkZE46IChsaHMsIHJocykgPT4gbGhzICsgcmhzLFxuICAgICAgICBzdWJOOiAobGhzLCByaHMpID0+IGxocyAtIHJocyxcbiAgICAgICAgbXVsTjogKGxocywgcmhzKSA9PiBsaHMgKiByaHMsXG4gICAgICAgIGludjogKG51bSkgPT4gaW52ZXJ0KG51bSwgT1JERVIpLFxuICAgICAgICBzcXJ0OiByZWRlZi5zcXJ0IHx8XG4gICAgICAgICAgICAoKG4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXNxcnRQKVxuICAgICAgICAgICAgICAgICAgICBzcXJ0UCA9IEZwU3FydChPUkRFUik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNxcnRQKGYsIG4pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIGludmVydEJhdGNoOiAobHN0KSA9PiBGcEludmVydEJhdGNoKGYsIGxzdCksXG4gICAgICAgIC8vIFRPRE86IGRvIHdlIHJlYWxseSBuZWVkIGNvbnN0YW50IGNtb3Y/XG4gICAgICAgIC8vIFdlIGRvbid0IGhhdmUgY29uc3QtdGltZSBiaWdpbnRzIGFueXdheSwgc28gcHJvYmFibHkgd2lsbCBiZSBub3QgdmVyeSB1c2VmdWxcbiAgICAgICAgY21vdjogKGEsIGIsIGMpID0+IChjID8gYiA6IGEpLFxuICAgICAgICB0b0J5dGVzOiAobnVtKSA9PiAoaXNMRSA/IG51bWJlclRvQnl0ZXNMRShudW0sIEJZVEVTKSA6IG51bWJlclRvQnl0ZXNCRShudW0sIEJZVEVTKSksXG4gICAgICAgIGZyb21CeXRlczogKGJ5dGVzKSA9PiB7XG4gICAgICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSBCWVRFUylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpZWxkLmZyb21CeXRlczogZXhwZWN0ZWQgJyArIEJZVEVTICsgJyBieXRlcywgZ290ICcgKyBieXRlcy5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIGlzTEUgPyBieXRlc1RvTnVtYmVyTEUoYnl0ZXMpIDogYnl0ZXNUb051bWJlckJFKGJ5dGVzKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShmKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBGcFNxcnRPZGQoRnAsIGVsbSkge1xuICAgIGlmICghRnAuaXNPZGQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZpZWxkIGRvZXNuJ3QgaGF2ZSBpc09kZFwiKTtcbiAgICBjb25zdCByb290ID0gRnAuc3FydChlbG0pO1xuICAgIHJldHVybiBGcC5pc09kZChyb290KSA/IHJvb3QgOiBGcC5uZWcocm9vdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gRnBTcXJ0RXZlbihGcCwgZWxtKSB7XG4gICAgaWYgKCFGcC5pc09kZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmllbGQgZG9lc24ndCBoYXZlIGlzT2RkXCIpO1xuICAgIGNvbnN0IHJvb3QgPSBGcC5zcXJ0KGVsbSk7XG4gICAgcmV0dXJuIEZwLmlzT2RkKHJvb3QpID8gRnAubmVnKHJvb3QpIDogcm9vdDtcbn1cbi8qKlxuICogXCJDb25zdGFudC10aW1lXCIgcHJpdmF0ZSBrZXkgZ2VuZXJhdGlvbiB1dGlsaXR5LlxuICogU2FtZSBhcyBtYXBLZXlUb0ZpZWxkLCBidXQgYWNjZXB0cyBsZXNzIGJ5dGVzICg0MCBpbnN0ZWFkIG9mIDQ4IGZvciAzMi1ieXRlIGZpZWxkKS5cbiAqIFdoaWNoIG1ha2VzIGl0IHNsaWdodGx5IG1vcmUgYmlhc2VkLCBsZXNzIHNlY3VyZS5cbiAqIEBkZXByZWNhdGVkIHVzZSBgbWFwS2V5VG9GaWVsZGAgaW5zdGVhZFxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzaFRvUHJpdmF0ZVNjYWxhcihoYXNoLCBncm91cE9yZGVyLCBpc0xFID0gZmFsc2UpIHtcbiAgICBoYXNoID0gZW5zdXJlQnl0ZXMoJ3ByaXZhdGVIYXNoJywgaGFzaCk7XG4gICAgY29uc3QgaGFzaExlbiA9IGhhc2gubGVuZ3RoO1xuICAgIGNvbnN0IG1pbkxlbiA9IG5MZW5ndGgoZ3JvdXBPcmRlcikubkJ5dGVMZW5ndGggKyA4O1xuICAgIGlmIChtaW5MZW4gPCAyNCB8fCBoYXNoTGVuIDwgbWluTGVuIHx8IGhhc2hMZW4gPiAxMDI0KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hhc2hUb1ByaXZhdGVTY2FsYXI6IGV4cGVjdGVkICcgKyBtaW5MZW4gKyAnLTEwMjQgYnl0ZXMgb2YgaW5wdXQsIGdvdCAnICsgaGFzaExlbik7XG4gICAgY29uc3QgbnVtID0gaXNMRSA/IGJ5dGVzVG9OdW1iZXJMRShoYXNoKSA6IGJ5dGVzVG9OdW1iZXJCRShoYXNoKTtcbiAgICByZXR1cm4gbW9kKG51bSwgZ3JvdXBPcmRlciAtIF8xbikgKyBfMW47XG59XG4vKipcbiAqIFJldHVybnMgdG90YWwgbnVtYmVyIG9mIGJ5dGVzIGNvbnN1bWVkIGJ5IHRoZSBmaWVsZCBlbGVtZW50LlxuICogRm9yIGV4YW1wbGUsIDMyIGJ5dGVzIGZvciB1c3VhbCAyNTYtYml0IHdlaWVyc3RyYXNzIGN1cnZlLlxuICogQHBhcmFtIGZpZWxkT3JkZXIgbnVtYmVyIG9mIGZpZWxkIGVsZW1lbnRzLCB1c3VhbGx5IENVUlZFLm5cbiAqIEByZXR1cm5zIGJ5dGUgbGVuZ3RoIG9mIGZpZWxkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWVsZEJ5dGVzTGVuZ3RoKGZpZWxkT3JkZXIpIHtcbiAgICBpZiAodHlwZW9mIGZpZWxkT3JkZXIgIT09ICdiaWdpbnQnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpZWxkIG9yZGVyIG11c3QgYmUgYmlnaW50Jyk7XG4gICAgY29uc3QgYml0TGVuZ3RoID0gZmllbGRPcmRlci50b1N0cmluZygyKS5sZW5ndGg7XG4gICAgcmV0dXJuIE1hdGguY2VpbChiaXRMZW5ndGggLyA4KTtcbn1cbi8qKlxuICogUmV0dXJucyBtaW5pbWFsIGFtb3VudCBvZiBieXRlcyB0aGF0IGNhbiBiZSBzYWZlbHkgcmVkdWNlZFxuICogYnkgZmllbGQgb3JkZXIuXG4gKiBTaG91bGQgYmUgMl4tMTI4IGZvciAxMjgtYml0IGN1cnZlIHN1Y2ggYXMgUDI1Ni5cbiAqIEBwYXJhbSBmaWVsZE9yZGVyIG51bWJlciBvZiBmaWVsZCBlbGVtZW50cywgdXN1YWxseSBDVVJWRS5uXG4gKiBAcmV0dXJucyBieXRlIGxlbmd0aCBvZiB0YXJnZXQgaGFzaFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWluSGFzaExlbmd0aChmaWVsZE9yZGVyKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gZ2V0RmllbGRCeXRlc0xlbmd0aChmaWVsZE9yZGVyKTtcbiAgICByZXR1cm4gbGVuZ3RoICsgTWF0aC5jZWlsKGxlbmd0aCAvIDIpO1xufVxuLyoqXG4gKiBcIkNvbnN0YW50LXRpbWVcIiBwcml2YXRlIGtleSBnZW5lcmF0aW9uIHV0aWxpdHkuXG4gKiBDYW4gdGFrZSAobiArIG4vMikgb3IgbW9yZSBieXRlcyBvZiB1bmlmb3JtIGlucHV0IGUuZy4gZnJvbSBDU1BSTkcgb3IgS0RGXG4gKiBhbmQgY29udmVydCB0aGVtIGludG8gcHJpdmF0ZSBzY2FsYXIsIHdpdGggdGhlIG1vZHVsbyBiaWFzIGJlaW5nIG5lZ2xpZ2libGUuXG4gKiBOZWVkcyBhdCBsZWFzdCA0OCBieXRlcyBvZiBpbnB1dCBmb3IgMzItYnl0ZSBwcml2YXRlIGtleS5cbiAqIGh0dHBzOi8vcmVzZWFyY2gua3VkZWxza2lzZWN1cml0eS5jb20vMjAyMC8wNy8yOC90aGUtZGVmaW5pdGl2ZS1ndWlkZS10by1tb2R1bG8tYmlhcy1hbmQtaG93LXRvLWF2b2lkLWl0L1xuICogRklQUyAxODYtNSwgQS4yIGh0dHBzOi8vY3NyYy5uaXN0Lmdvdi9wdWJsaWNhdGlvbnMvZGV0YWlsL2ZpcHMvMTg2LzUvZmluYWxcbiAqIFJGQyA5MzgwLCBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTM4MCNzZWN0aW9uLTVcbiAqIEBwYXJhbSBoYXNoIGhhc2ggb3V0cHV0IGZyb20gU0hBMyBvciBhIHNpbWlsYXIgZnVuY3Rpb25cbiAqIEBwYXJhbSBncm91cE9yZGVyIHNpemUgb2Ygc3ViZ3JvdXAgLSAoZS5nLiBzZWNwMjU2azEuQ1VSVkUubilcbiAqIEBwYXJhbSBpc0xFIGludGVycHJldCBoYXNoIGJ5dGVzIGFzIExFIG51bVxuICogQHJldHVybnMgdmFsaWQgcHJpdmF0ZSBzY2FsYXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcEhhc2hUb0ZpZWxkKGtleSwgZmllbGRPcmRlciwgaXNMRSA9IGZhbHNlKSB7XG4gICAgY29uc3QgbGVuID0ga2V5Lmxlbmd0aDtcbiAgICBjb25zdCBmaWVsZExlbiA9IGdldEZpZWxkQnl0ZXNMZW5ndGgoZmllbGRPcmRlcik7XG4gICAgY29uc3QgbWluTGVuID0gZ2V0TWluSGFzaExlbmd0aChmaWVsZE9yZGVyKTtcbiAgICAvLyBObyBzbWFsbCBudW1iZXJzOiBuZWVkIHRvIHVuZGVyc3RhbmQgYmlhcyBzdG9yeS4gTm8gaHVnZSBudW1iZXJzOiBlYXNpZXIgdG8gZGV0ZWN0IEpTIHRpbWluZ3MuXG4gICAgaWYgKGxlbiA8IDE2IHx8IGxlbiA8IG1pbkxlbiB8fCBsZW4gPiAxMDI0KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkICcgKyBtaW5MZW4gKyAnLTEwMjQgYnl0ZXMgb2YgaW5wdXQsIGdvdCAnICsgbGVuKTtcbiAgICBjb25zdCBudW0gPSBpc0xFID8gYnl0ZXNUb051bWJlckxFKGtleSkgOiBieXRlc1RvTnVtYmVyQkUoa2V5KTtcbiAgICAvLyBgbW9kKHgsIDExKWAgY2FuIHNvbWV0aW1lcyBwcm9kdWNlIDAuIGBtb2QoeCwgMTApICsgMWAgaXMgdGhlIHNhbWUsIGJ1dCBubyAwXG4gICAgY29uc3QgcmVkdWNlZCA9IG1vZChudW0sIGZpZWxkT3JkZXIgLSBfMW4pICsgXzFuO1xuICAgIHJldHVybiBpc0xFID8gbnVtYmVyVG9CeXRlc0xFKHJlZHVjZWQsIGZpZWxkTGVuKSA6IG51bWJlclRvQnl0ZXNCRShyZWR1Y2VkLCBmaWVsZExlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGFyLmpzLm1hcCIsIi8qKlxuICogTWV0aG9kcyBmb3IgZWxsaXB0aWMgY3VydmUgbXVsdGlwbGljYXRpb24gYnkgc2NhbGFycy5cbiAqIENvbnRhaW5zIHdOQUYsIHBpcHBlbmdlclxuICogQG1vZHVsZVxuICovXG4vKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQgeyBuTGVuZ3RoLCB2YWxpZGF0ZUZpZWxkIH0gZnJvbSAnLi9tb2R1bGFyLmpzJztcbmltcG9ydCB7IGJpdExlbiwgdmFsaWRhdGVPYmplY3QgfSBmcm9tICcuL3V0aWxzLmpzJztcbmNvbnN0IF8wbiA9IEJpZ0ludCgwKTtcbmNvbnN0IF8xbiA9IEJpZ0ludCgxKTtcbmZ1bmN0aW9uIGNvbnN0VGltZU5lZ2F0ZShjb25kaXRpb24sIGl0ZW0pIHtcbiAgICBjb25zdCBuZWcgPSBpdGVtLm5lZ2F0ZSgpO1xuICAgIHJldHVybiBjb25kaXRpb24gPyBuZWcgOiBpdGVtO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVXKFcsIGJpdHMpIHtcbiAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKFcpIHx8IFcgPD0gMCB8fCBXID4gYml0cylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHdpbmRvdyBzaXplLCBleHBlY3RlZCBbMS4uJyArIGJpdHMgKyAnXSwgZ290IFc9JyArIFcpO1xufVxuZnVuY3Rpb24gY2FsY1dPcHRzKFcsIGJpdHMpIHtcbiAgICB2YWxpZGF0ZVcoVywgYml0cyk7XG4gICAgY29uc3Qgd2luZG93cyA9IE1hdGguY2VpbChiaXRzIC8gVykgKyAxOyAvLyArMSwgYmVjYXVzZVxuICAgIGNvbnN0IHdpbmRvd1NpemUgPSAyICoqIChXIC0gMSk7IC8vIC0xIGJlY2F1c2Ugd2Ugc2tpcCB6ZXJvXG4gICAgcmV0dXJuIHsgd2luZG93cywgd2luZG93U2l6ZSB9O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVNU01Qb2ludHMocG9pbnRzLCBjKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBvaW50cykpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXJyYXkgZXhwZWN0ZWQnKTtcbiAgICBwb2ludHMuZm9yRWFjaCgocCwgaSkgPT4ge1xuICAgICAgICBpZiAoIShwIGluc3RhbmNlb2YgYykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQgYXQgaW5kZXggJyArIGkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVNU01TY2FsYXJzKHNjYWxhcnMsIGZpZWxkKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHNjYWxhcnMpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FycmF5IG9mIHNjYWxhcnMgZXhwZWN0ZWQnKTtcbiAgICBzY2FsYXJzLmZvckVhY2goKHMsIGkpID0+IHtcbiAgICAgICAgaWYgKCFmaWVsZC5pc1ZhbGlkKHMpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNjYWxhciBhdCBpbmRleCAnICsgaSk7XG4gICAgfSk7XG59XG4vLyBTaW5jZSBwb2ludHMgaW4gZGlmZmVyZW50IGdyb3VwcyBjYW5ub3QgYmUgZXF1YWwgKGRpZmZlcmVudCBvYmplY3QgY29uc3RydWN0b3IpLFxuLy8gd2UgY2FuIGhhdmUgc2luZ2xlIHBsYWNlIHRvIHN0b3JlIHByZWNvbXB1dGVzXG5jb25zdCBwb2ludFByZWNvbXB1dGVzID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHBvaW50V2luZG93U2l6ZXMgPSBuZXcgV2Vha01hcCgpOyAvLyBUaGlzIGFsbG93cyB1c2UgbWFrZSBwb2ludHMgaW1tdXRhYmxlIChub3RoaW5nIGNoYW5nZXMgaW5zaWRlKVxuZnVuY3Rpb24gZ2V0VyhQKSB7XG4gICAgcmV0dXJuIHBvaW50V2luZG93U2l6ZXMuZ2V0KFApIHx8IDE7XG59XG4vKipcbiAqIEVsbGlwdGljIGN1cnZlIG11bHRpcGxpY2F0aW9uIG9mIFBvaW50IGJ5IHNjYWxhci4gRnJhZ2lsZS5cbiAqIFNjYWxhcnMgc2hvdWxkIGFsd2F5cyBiZSBsZXNzIHRoYW4gY3VydmUgb3JkZXI6IHRoaXMgc2hvdWxkIGJlIGNoZWNrZWQgaW5zaWRlIG9mIGEgY3VydmUgaXRzZWxmLlxuICogQ3JlYXRlcyBwcmVjb21wdXRhdGlvbiB0YWJsZXMgZm9yIGZhc3QgbXVsdGlwbGljYXRpb246XG4gKiAtIHByaXZhdGUgc2NhbGFyIGlzIHNwbGl0IGJ5IGZpeGVkIHNpemUgd2luZG93cyBvZiBXIGJpdHNcbiAqIC0gZXZlcnkgd2luZG93IHBvaW50IGlzIGNvbGxlY3RlZCBmcm9tIHdpbmRvdydzIHRhYmxlICYgYWRkZWQgdG8gYWNjdW11bGF0b3JcbiAqIC0gc2luY2Ugd2luZG93cyBhcmUgZGlmZmVyZW50LCBzYW1lIHBvaW50IGluc2lkZSB0YWJsZXMgd29uJ3QgYmUgYWNjZXNzZWQgbW9yZSB0aGFuIG9uY2UgcGVyIGNhbGNcbiAqIC0gZWFjaCBtdWx0aXBsaWNhdGlvbiBpcyAnTWF0aC5jZWlsKENVUlZFX09SREVSIC8g8J2RiikgKyAxJyBwb2ludCBhZGRpdGlvbnMgKGZpeGVkIGZvciBhbnkgc2NhbGFyKVxuICogLSArMSB3aW5kb3cgaXMgbmVjY2Vzc2FyeSBmb3Igd05BRlxuICogLSB3TkFGIHJlZHVjZXMgdGFibGUgc2l6ZTogMnggbGVzcyBtZW1vcnkgKyAyeCBmYXN0ZXIgZ2VuZXJhdGlvbiwgYnV0IDEwJSBzbG93ZXIgbXVsdGlwbGljYXRpb25cbiAqXG4gKiBAdG9kbyBSZXNlYXJjaCByZXR1cm5pbmcgMmQgSlMgYXJyYXkgb2Ygd2luZG93cywgaW5zdGVhZCBvZiBhIHNpbmdsZSB3aW5kb3cuXG4gKiBUaGlzIHdvdWxkIGFsbG93IHdpbmRvd3MgdG8gYmUgaW4gZGlmZmVyZW50IG1lbW9yeSBsb2NhdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdOQUYoYywgYml0cykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbnN0VGltZU5lZ2F0ZSxcbiAgICAgICAgaGFzUHJlY29tcHV0ZXMoZWxtKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0VyhlbG0pICE9PSAxO1xuICAgICAgICB9LFxuICAgICAgICAvLyBub24tY29uc3QgdGltZSBtdWx0aXBsaWNhdGlvbiBsYWRkZXJcbiAgICAgICAgdW5zYWZlTGFkZGVyKGVsbSwgbiwgcCA9IGMuWkVSTykge1xuICAgICAgICAgICAgbGV0IGQgPSBlbG07XG4gICAgICAgICAgICB3aGlsZSAobiA+IF8wbikge1xuICAgICAgICAgICAgICAgIGlmIChuICYgXzFuKVxuICAgICAgICAgICAgICAgICAgICBwID0gcC5hZGQoZCk7XG4gICAgICAgICAgICAgICAgZCA9IGQuZG91YmxlKCk7XG4gICAgICAgICAgICAgICAgbiA+Pj0gXzFuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgd05BRiBwcmVjb21wdXRhdGlvbiB3aW5kb3cuIFVzZWQgZm9yIGNhY2hpbmcuXG4gICAgICAgICAqIERlZmF1bHQgd2luZG93IHNpemUgaXMgc2V0IGJ5IGB1dGlscy5wcmVjb21wdXRlKClgIGFuZCBpcyBlcXVhbCB0byA4LlxuICAgICAgICAgKiBOdW1iZXIgb2YgcHJlY29tcHV0ZWQgcG9pbnRzIGRlcGVuZHMgb24gdGhlIGN1cnZlIHNpemU6XG4gICAgICAgICAqIDJeKPCdkYriiJIxKSAqIChNYXRoLmNlaWwo8J2RmyAvIPCdkYopICsgMSksIHdoZXJlOlxuICAgICAgICAgKiAtIPCdkYogaXMgdGhlIHdpbmRvdyBzaXplXG4gICAgICAgICAqIC0g8J2RmyBpcyB0aGUgYml0bGVuZ3RoIG9mIHRoZSBjdXJ2ZSBvcmRlci5cbiAgICAgICAgICogRm9yIGEgMjU2LWJpdCBjdXJ2ZSBhbmQgd2luZG93IHNpemUgOCwgdGhlIG51bWJlciBvZiBwcmVjb21wdXRlZCBwb2ludHMgaXMgMTI4ICogMzMgPSA0MjI0LlxuICAgICAgICAgKiBAcGFyYW0gZWxtIFBvaW50IGluc3RhbmNlXG4gICAgICAgICAqIEBwYXJhbSBXIHdpbmRvdyBzaXplXG4gICAgICAgICAqIEByZXR1cm5zIHByZWNvbXB1dGVkIHBvaW50IHRhYmxlcyBmbGF0dGVuZWQgdG8gYSBzaW5nbGUgYXJyYXlcbiAgICAgICAgICovXG4gICAgICAgIHByZWNvbXB1dGVXaW5kb3coZWxtLCBXKSB7XG4gICAgICAgICAgICBjb25zdCB7IHdpbmRvd3MsIHdpbmRvd1NpemUgfSA9IGNhbGNXT3B0cyhXLCBiaXRzKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50cyA9IFtdO1xuICAgICAgICAgICAgbGV0IHAgPSBlbG07XG4gICAgICAgICAgICBsZXQgYmFzZSA9IHA7XG4gICAgICAgICAgICBmb3IgKGxldCB3aW5kb3cgPSAwOyB3aW5kb3cgPCB3aW5kb3dzOyB3aW5kb3crKykge1xuICAgICAgICAgICAgICAgIGJhc2UgPSBwO1xuICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKGJhc2UpO1xuICAgICAgICAgICAgICAgIC8vID0xLCBiZWNhdXNlIHdlIHNraXAgemVyb1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgd2luZG93U2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2UgPSBiYXNlLmFkZChwKTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goYmFzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHAgPSBiYXNlLmRvdWJsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEltcGxlbWVudHMgZWMgbXVsdGlwbGljYXRpb24gdXNpbmcgcHJlY29tcHV0ZWQgdGFibGVzIGFuZCB3LWFyeSBub24tYWRqYWNlbnQgZm9ybS5cbiAgICAgICAgICogQHBhcmFtIFcgd2luZG93IHNpemVcbiAgICAgICAgICogQHBhcmFtIHByZWNvbXB1dGVzIHByZWNvbXB1dGVkIHRhYmxlc1xuICAgICAgICAgKiBAcGFyYW0gbiBzY2FsYXIgKHdlIGRvbid0IGNoZWNrIGhlcmUsIGJ1dCBzaG91bGQgYmUgbGVzcyB0aGFuIGN1cnZlIG9yZGVyKVxuICAgICAgICAgKiBAcmV0dXJucyByZWFsIGFuZCBmYWtlIChmb3IgY29uc3QtdGltZSkgcG9pbnRzXG4gICAgICAgICAqL1xuICAgICAgICB3TkFGKFcsIHByZWNvbXB1dGVzLCBuKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBtYXliZSBjaGVjayB0aGF0IHNjYWxhciBpcyBsZXNzIHRoYW4gZ3JvdXAgb3JkZXI/IHdOQUYgYmVoYXZpb3VzIGlzIHVuZGVmaW5lZCBvdGhlcndpc2VcbiAgICAgICAgICAgIC8vIEJ1dCBuZWVkIHRvIGNhcmVmdWxseSByZW1vdmUgb3RoZXIgY2hlY2tzIGJlZm9yZSB3TkFGLiBPUkRFUiA9PSBiaXRzIGhlcmVcbiAgICAgICAgICAgIGNvbnN0IHsgd2luZG93cywgd2luZG93U2l6ZSB9ID0gY2FsY1dPcHRzKFcsIGJpdHMpO1xuICAgICAgICAgICAgbGV0IHAgPSBjLlpFUk87XG4gICAgICAgICAgICBsZXQgZiA9IGMuQkFTRTtcbiAgICAgICAgICAgIGNvbnN0IG1hc2sgPSBCaWdJbnQoMiAqKiBXIC0gMSk7IC8vIENyZWF0ZSBtYXNrIHdpdGggVyBvbmVzOiAwYjExMTEgZm9yIFc9NCBldGMuXG4gICAgICAgICAgICBjb25zdCBtYXhOdW1iZXIgPSAyICoqIFc7XG4gICAgICAgICAgICBjb25zdCBzaGlmdEJ5ID0gQmlnSW50KFcpO1xuICAgICAgICAgICAgZm9yIChsZXQgd2luZG93ID0gMDsgd2luZG93IDwgd2luZG93czsgd2luZG93KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB3aW5kb3cgKiB3aW5kb3dTaXplO1xuICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgVyBiaXRzLlxuICAgICAgICAgICAgICAgIGxldCB3Yml0cyA9IE51bWJlcihuICYgbWFzayk7XG4gICAgICAgICAgICAgICAgLy8gU2hpZnQgbnVtYmVyIGJ5IFcgYml0cy5cbiAgICAgICAgICAgICAgICBuID4+PSBzaGlmdEJ5O1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBiaXRzIGFyZSBiaWdnZXIgdGhhbiBtYXggc2l6ZSwgd2UnbGwgc3BsaXQgdGhvc2UuXG4gICAgICAgICAgICAgICAgLy8gKzIyNCA9PiAyNTYgLSAzMlxuICAgICAgICAgICAgICAgIGlmICh3Yml0cyA+IHdpbmRvd1NpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgd2JpdHMgLT0gbWF4TnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICBuICs9IF8xbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBjb2RlIHdhcyBmaXJzdCB3cml0dGVuIHdpdGggYXNzdW1wdGlvbiB0aGF0ICdmJyBhbmQgJ3AnIHdpbGwgbmV2ZXIgYmUgaW5maW5pdHkgcG9pbnQ6XG4gICAgICAgICAgICAgICAgLy8gc2luY2UgZWFjaCBhZGRpdGlvbiBpcyBtdWx0aXBsaWVkIGJ5IDIgKiogVywgaXQgY2Fubm90IGNhbmNlbCBlYWNoIG90aGVyLiBIb3dldmVyLFxuICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5lZ2F0ZSBub3c6IGl0IGlzIHBvc3NpYmxlIHRoYXQgbmVnYXRlZCBlbGVtZW50IGZyb20gbG93IHZhbHVlXG4gICAgICAgICAgICAgICAgLy8gd291bGQgYmUgdGhlIHNhbWUgYXMgaGlnaCBlbGVtZW50LCB3aGljaCB3aWxsIGNyZWF0ZSBjYXJyeSBpbnRvIG5leHQgd2luZG93LlxuICAgICAgICAgICAgICAgIC8vIEl0J3Mgbm90IG9idmlvdXMgaG93IHRoaXMgY2FuIGZhaWwsIGJ1dCBzdGlsbCB3b3J0aCBpbnZlc3RpZ2F0aW5nIGxhdGVyLlxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlJ3JlIG9udG8gWmVybyBwb2ludC5cbiAgICAgICAgICAgICAgICAvLyBBZGQgcmFuZG9tIHBvaW50IGluc2lkZSBjdXJyZW50IHdpbmRvdyB0byBmLlxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldDEgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0MiA9IG9mZnNldCArIE1hdGguYWJzKHdiaXRzKSAtIDE7IC8vIC0xIGJlY2F1c2Ugd2Ugc2tpcCB6ZXJvXG4gICAgICAgICAgICAgICAgY29uc3QgY29uZDEgPSB3aW5kb3cgJSAyICE9PSAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmQyID0gd2JpdHMgPCAwO1xuICAgICAgICAgICAgICAgIGlmICh3Yml0cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgcGFydCBmb3IgY29uc3QtdGltZSBnZXRQdWJsaWNLZXlcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYuYWRkKGNvbnN0VGltZU5lZ2F0ZShjb25kMSwgcHJlY29tcHV0ZXNbb2Zmc2V0MV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBwLmFkZChjb25zdFRpbWVOZWdhdGUoY29uZDIsIHByZWNvbXB1dGVzW29mZnNldDJdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSklULWNvbXBpbGVyIHNob3VsZCBub3QgZWxpbWluYXRlIGYgaGVyZSwgc2luY2UgaXQgd2lsbCBsYXRlciBiZSB1c2VkIGluIG5vcm1hbGl6ZVooKVxuICAgICAgICAgICAgLy8gRXZlbiBpZiB0aGUgdmFyaWFibGUgaXMgc3RpbGwgdW51c2VkLCB0aGVyZSBhcmUgc29tZSBjaGVja3Mgd2hpY2ggd2lsbFxuICAgICAgICAgICAgLy8gdGhyb3cgYW4gZXhjZXB0aW9uLCBzbyBjb21waWxlciBuZWVkcyB0byBwcm92ZSB0aGV5IHdvbid0IGhhcHBlbiwgd2hpY2ggaXMgaGFyZC5cbiAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlcmUgaXMgYSB3YXkgdG8gRiBiZSBpbmZpbml0eS1wb2ludCBldmVuIGlmIHAgaXMgbm90LFxuICAgICAgICAgICAgLy8gd2hpY2ggbWFrZXMgaXQgbGVzcyBjb25zdC10aW1lOiBhcm91bmQgMSBiaWdpbnQgbXVsdGlwbHkuXG4gICAgICAgICAgICByZXR1cm4geyBwLCBmIH07XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbXBsZW1lbnRzIGVjIHVuc2FmZSAobm9uIGNvbnN0LXRpbWUpIG11bHRpcGxpY2F0aW9uIHVzaW5nIHByZWNvbXB1dGVkIHRhYmxlcyBhbmQgdy1hcnkgbm9uLWFkamFjZW50IGZvcm0uXG4gICAgICAgICAqIEBwYXJhbSBXIHdpbmRvdyBzaXplXG4gICAgICAgICAqIEBwYXJhbSBwcmVjb21wdXRlcyBwcmVjb21wdXRlZCB0YWJsZXNcbiAgICAgICAgICogQHBhcmFtIG4gc2NhbGFyICh3ZSBkb24ndCBjaGVjayBoZXJlLCBidXQgc2hvdWxkIGJlIGxlc3MgdGhhbiBjdXJ2ZSBvcmRlcilcbiAgICAgICAgICogQHBhcmFtIGFjYyBhY2N1bXVsYXRvciBwb2ludCB0byBhZGQgcmVzdWx0IG9mIG11bHRpcGxpY2F0aW9uXG4gICAgICAgICAqIEByZXR1cm5zIHBvaW50XG4gICAgICAgICAqL1xuICAgICAgICB3TkFGVW5zYWZlKFcsIHByZWNvbXB1dGVzLCBuLCBhY2MgPSBjLlpFUk8pIHtcbiAgICAgICAgICAgIGNvbnN0IHsgd2luZG93cywgd2luZG93U2l6ZSB9ID0gY2FsY1dPcHRzKFcsIGJpdHMpO1xuICAgICAgICAgICAgY29uc3QgbWFzayA9IEJpZ0ludCgyICoqIFcgLSAxKTsgLy8gQ3JlYXRlIG1hc2sgd2l0aCBXIG9uZXM6IDBiMTExMSBmb3IgVz00IGV0Yy5cbiAgICAgICAgICAgIGNvbnN0IG1heE51bWJlciA9IDIgKiogVztcbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0QnkgPSBCaWdJbnQoVyk7XG4gICAgICAgICAgICBmb3IgKGxldCB3aW5kb3cgPSAwOyB3aW5kb3cgPCB3aW5kb3dzOyB3aW5kb3crKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHdpbmRvdyAqIHdpbmRvd1NpemU7XG4gICAgICAgICAgICAgICAgaWYgKG4gPT09IF8wbilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIE5vIG5lZWQgdG8gZ28gb3ZlciBlbXB0eSBzY2FsYXJcbiAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IFcgYml0cy5cbiAgICAgICAgICAgICAgICBsZXQgd2JpdHMgPSBOdW1iZXIobiAmIG1hc2spO1xuICAgICAgICAgICAgICAgIC8vIFNoaWZ0IG51bWJlciBieSBXIGJpdHMuXG4gICAgICAgICAgICAgICAgbiA+Pj0gc2hpZnRCeTtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYml0cyBhcmUgYmlnZ2VyIHRoYW4gbWF4IHNpemUsIHdlJ2xsIHNwbGl0IHRob3NlLlxuICAgICAgICAgICAgICAgIC8vICsyMjQgPT4gMjU2IC0gMzJcbiAgICAgICAgICAgICAgICBpZiAod2JpdHMgPiB3aW5kb3dTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHdiaXRzIC09IG1heE51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgbiArPSBfMW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh3Yml0cyA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnIgPSBwcmVjb21wdXRlc1tvZmZzZXQgKyBNYXRoLmFicyh3Yml0cykgLSAxXTsgLy8gLTEgYmVjYXVzZSB3ZSBza2lwIHplcm9cbiAgICAgICAgICAgICAgICBpZiAod2JpdHMgPCAwKVxuICAgICAgICAgICAgICAgICAgICBjdXJyID0gY3Vyci5uZWdhdGUoKTtcbiAgICAgICAgICAgICAgICAvLyBOT1RFOiBieSByZS11c2luZyBhY2MsIHdlIGNhbiBzYXZlIGEgbG90IG9mIGFkZGl0aW9ucyBpbiBjYXNlIG9mIE1TTVxuICAgICAgICAgICAgICAgIGFjYyA9IGFjYy5hZGQoY3Vycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LFxuICAgICAgICBnZXRQcmVjb21wdXRlcyhXLCBQLCB0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBwcmVjb21wdXRlcyBvbiBhIGZpcnN0IHJ1biwgcmV1c2UgdGhlbSBhZnRlclxuICAgICAgICAgICAgbGV0IGNvbXAgPSBwb2ludFByZWNvbXB1dGVzLmdldChQKTtcbiAgICAgICAgICAgIGlmICghY29tcCkge1xuICAgICAgICAgICAgICAgIGNvbXAgPSB0aGlzLnByZWNvbXB1dGVXaW5kb3coUCwgVyk7XG4gICAgICAgICAgICAgICAgaWYgKFcgIT09IDEpXG4gICAgICAgICAgICAgICAgICAgIHBvaW50UHJlY29tcHV0ZXMuc2V0KFAsIHRyYW5zZm9ybShjb21wKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tcDtcbiAgICAgICAgfSxcbiAgICAgICAgd05BRkNhY2hlZChQLCBuLCB0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIGNvbnN0IFcgPSBnZXRXKFApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud05BRihXLCB0aGlzLmdldFByZWNvbXB1dGVzKFcsIFAsIHRyYW5zZm9ybSksIG4pO1xuICAgICAgICB9LFxuICAgICAgICB3TkFGQ2FjaGVkVW5zYWZlKFAsIG4sIHRyYW5zZm9ybSwgcHJldikge1xuICAgICAgICAgICAgY29uc3QgVyA9IGdldFcoUCk7XG4gICAgICAgICAgICBpZiAoVyA9PT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy51bnNhZmVMYWRkZXIoUCwgbiwgcHJldik7IC8vIEZvciBXPTEgbGFkZGVyIGlzIH54MiBmYXN0ZXJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndOQUZVbnNhZmUoVywgdGhpcy5nZXRQcmVjb21wdXRlcyhXLCBQLCB0cmFuc2Zvcm0pLCBuLCBwcmV2KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gV2UgY2FsY3VsYXRlIHByZWNvbXB1dGVzIGZvciBlbGxpcHRpYyBjdXJ2ZSBwb2ludCBtdWx0aXBsaWNhdGlvblxuICAgICAgICAvLyB1c2luZyB3aW5kb3dlZCBtZXRob2QuIFRoaXMgc3BlY2lmaWVzIHdpbmRvdyBzaXplIGFuZFxuICAgICAgICAvLyBzdG9yZXMgcHJlY29tcHV0ZWQgdmFsdWVzLiBVc3VhbGx5IG9ubHkgYmFzZSBwb2ludCB3b3VsZCBiZSBwcmVjb21wdXRlZC5cbiAgICAgICAgc2V0V2luZG93U2l6ZShQLCBXKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZVcoVywgYml0cyk7XG4gICAgICAgICAgICBwb2ludFdpbmRvd1NpemVzLnNldChQLCBXKTtcbiAgICAgICAgICAgIHBvaW50UHJlY29tcHV0ZXMuZGVsZXRlKFApO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIFBpcHBlbmdlciBhbGdvcml0aG0gZm9yIG11bHRpLXNjYWxhciBtdWx0aXBsaWNhdGlvbiAoTVNNLCBQYSArIFFiICsgUmMgKyAuLi4pLlxuICogMzB4IGZhc3RlciB2cyBuYWl2ZSBhZGRpdGlvbiBvbiBMPTQwOTYsIDEweCBmYXN0ZXIgd2l0aCBwcmVjb21wdXRlcy5cbiAqIEZvciBOPTI1NGJpdCwgTD0xLCBpdCBkb2VzOiAxMDI0IEFERCArIDI1NCBEQkwuIEZvciBMPTU6IDE1MzYgQUREICsgMjU0IERCTC5cbiAqIEFsZ29yaXRobWljYWxseSBjb25zdGFudC10aW1lIChmb3Igc2FtZSBMKSwgZXZlbiB3aGVuIDEgcG9pbnQgKyBzY2FsYXIsIG9yIHdoZW4gc2NhbGFyID0gMC5cbiAqIEBwYXJhbSBjIEN1cnZlIFBvaW50IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0gZmllbGROIGZpZWxkIG92ZXIgQ1VSVkUuTiAtIGltcG9ydGFudCB0aGF0IGl0J3Mgbm90IG92ZXIgQ1VSVkUuUFxuICogQHBhcmFtIHBvaW50cyBhcnJheSBvZiBMIGN1cnZlIHBvaW50c1xuICogQHBhcmFtIHNjYWxhcnMgYXJyYXkgb2YgTCBzY2FsYXJzIChha2EgcHJpdmF0ZSBrZXlzIC8gYmlnaW50cylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBpcHBlbmdlcihjLCBmaWVsZE4sIHBvaW50cywgc2NhbGFycykge1xuICAgIC8vIElmIHdlIHNwbGl0IHNjYWxhcnMgYnkgc29tZSB3aW5kb3cgKGxldCdzIHNheSA4IGJpdHMpLCBldmVyeSBjaHVuayB3aWxsIG9ubHlcbiAgICAvLyB0YWtlIDI1NiBidWNrZXRzIGV2ZW4gaWYgdGhlcmUgYXJlIDQwOTYgc2NhbGFycywgYWxzbyByZS11c2VzIGRvdWJsZS5cbiAgICAvLyBUT0RPOlxuICAgIC8vIC0gaHR0cHM6Ly9lcHJpbnQuaWFjci5vcmcvMjAyNC83NTAucGRmXG4gICAgLy8gLSBodHRwczovL3RjaGVzLmlhY3Iub3JnL2luZGV4LnBocC9UQ0hFUy9hcnRpY2xlL3ZpZXcvMTAyODdcbiAgICAvLyAwIGlzIGFjY2VwdGVkIGluIHNjYWxhcnNcbiAgICB2YWxpZGF0ZU1TTVBvaW50cyhwb2ludHMsIGMpO1xuICAgIHZhbGlkYXRlTVNNU2NhbGFycyhzY2FsYXJzLCBmaWVsZE4pO1xuICAgIGlmIChwb2ludHMubGVuZ3RoICE9PSBzY2FsYXJzLmxlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcnJheXMgb2YgcG9pbnRzIGFuZCBzY2FsYXJzIG11c3QgaGF2ZSBlcXVhbCBsZW5ndGgnKTtcbiAgICBjb25zdCB6ZXJvID0gYy5aRVJPO1xuICAgIGNvbnN0IHdiaXRzID0gYml0TGVuKEJpZ0ludChwb2ludHMubGVuZ3RoKSk7XG4gICAgY29uc3Qgd2luZG93U2l6ZSA9IHdiaXRzID4gMTIgPyB3Yml0cyAtIDMgOiB3Yml0cyA+IDQgPyB3Yml0cyAtIDIgOiB3Yml0cyA/IDIgOiAxOyAvLyBpbiBiaXRzXG4gICAgY29uc3QgTUFTSyA9ICgxIDw8IHdpbmRvd1NpemUpIC0gMTtcbiAgICBjb25zdCBidWNrZXRzID0gbmV3IEFycmF5KE1BU0sgKyAxKS5maWxsKHplcm8pOyAvLyArMSBmb3IgemVybyBhcnJheVxuICAgIGNvbnN0IGxhc3RCaXRzID0gTWF0aC5mbG9vcigoZmllbGROLkJJVFMgLSAxKSAvIHdpbmRvd1NpemUpICogd2luZG93U2l6ZTtcbiAgICBsZXQgc3VtID0gemVybztcbiAgICBmb3IgKGxldCBpID0gbGFzdEJpdHM7IGkgPj0gMDsgaSAtPSB3aW5kb3dTaXplKSB7XG4gICAgICAgIGJ1Y2tldHMuZmlsbCh6ZXJvKTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzY2FsYXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBzY2FsYXIgPSBzY2FsYXJzW2pdO1xuICAgICAgICAgICAgY29uc3Qgd2JpdHMgPSBOdW1iZXIoKHNjYWxhciA+PiBCaWdJbnQoaSkpICYgQmlnSW50KE1BU0spKTtcbiAgICAgICAgICAgIGJ1Y2tldHNbd2JpdHNdID0gYnVja2V0c1t3Yml0c10uYWRkKHBvaW50c1tqXSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc0kgPSB6ZXJvOyAvLyBub3QgdXNpbmcgdGhpcyB3aWxsIGRvIHNtYWxsIHNwZWVkLXVwLCBidXQgd2lsbCBsb3NlIGN0XG4gICAgICAgIC8vIFNraXAgZmlyc3QgYnVja2V0LCBiZWNhdXNlIGl0IGlzIHplcm9cbiAgICAgICAgZm9yIChsZXQgaiA9IGJ1Y2tldHMubGVuZ3RoIC0gMSwgc3VtSSA9IHplcm87IGogPiAwOyBqLS0pIHtcbiAgICAgICAgICAgIHN1bUkgPSBzdW1JLmFkZChidWNrZXRzW2pdKTtcbiAgICAgICAgICAgIHJlc0kgPSByZXNJLmFkZChzdW1JKTtcbiAgICAgICAgfVxuICAgICAgICBzdW0gPSBzdW0uYWRkKHJlc0kpO1xuICAgICAgICBpZiAoaSAhPT0gMClcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgd2luZG93U2l6ZTsgaisrKVxuICAgICAgICAgICAgICAgIHN1bSA9IHN1bS5kb3VibGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1bTtcbn1cbi8qKlxuICogUHJlY29tcHV0ZWQgbXVsdGktc2NhbGFyIG11bHRpcGxpY2F0aW9uIChNU00sIFBhICsgUWIgKyBSYyArIC4uLikuXG4gKiBAcGFyYW0gYyBDdXJ2ZSBQb2ludCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIGZpZWxkTiBmaWVsZCBvdmVyIENVUlZFLk4gLSBpbXBvcnRhbnQgdGhhdCBpdCdzIG5vdCBvdmVyIENVUlZFLlBcbiAqIEBwYXJhbSBwb2ludHMgYXJyYXkgb2YgTCBjdXJ2ZSBwb2ludHNcbiAqIEByZXR1cm5zIGZ1bmN0aW9uIHdoaWNoIG11bHRpcGxpZXMgcG9pbnRzIHdpdGggc2NhYXJzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVjb21wdXRlTVNNVW5zYWZlKGMsIGZpZWxkTiwgcG9pbnRzLCB3aW5kb3dTaXplKSB7XG4gICAgLyoqXG4gICAgICogUGVyZm9ybWFuY2UgQW5hbHlzaXMgb2YgV2luZG93LWJhc2VkIFByZWNvbXB1dGF0aW9uXG4gICAgICpcbiAgICAgKiBCYXNlIENhc2UgKDI1Ni1iaXQgc2NhbGFyLCA4LWJpdCB3aW5kb3cpOlxuICAgICAqIC0gU3RhbmRhcmQgcHJlY29tcHV0YXRpb24gcmVxdWlyZXM6XG4gICAgICogICAtIDMxIGFkZGl0aW9ucyBwZXIgc2NhbGFyIMOXIDI1NiBzY2FsYXJzID0gNyw5MzYgb3BzXG4gICAgICogICAtIFBsdXMgMjU1IHN1bW1hcnkgYWRkaXRpb25zID0gOCwxOTEgdG90YWwgb3BzXG4gICAgICogICBOb3RlOiBTdW1tYXJ5IGFkZGl0aW9ucyBjYW4gYmUgb3B0aW1pemVkIHZpYSBhY2N1bXVsYXRvclxuICAgICAqXG4gICAgICogQ2h1bmtlZCBQcmVjb21wdXRhdGlvbiBBbmFseXNpczpcbiAgICAgKiAtIFVzaW5nIDMyIGNodW5rcyByZXF1aXJlczpcbiAgICAgKiAgIC0gMjU1IGFkZGl0aW9ucyBwZXIgY2h1bmtcbiAgICAgKiAgIC0gMjU2IGRvdWJsaW5nc1xuICAgICAqICAgLSBUb3RhbDogKDI1NSDDlyAzMikgKyAyNTYgPSA4LDQxNiBvcHNcbiAgICAgKlxuICAgICAqIE1lbW9yeSBVc2FnZSBDb21wYXJpc29uOlxuICAgICAqIFdpbmRvdyBTaXplIHwgU3RhbmRhcmQgUG9pbnRzIHwgQ2h1bmtlZCBQb2ludHNcbiAgICAgKiAtLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tXG4gICAgICogICAgIDQtYml0ICAgfCAgICAgNTIwICAgICAgICAgfCAgICAgIDE1XG4gICAgICogICAgIDgtYml0ICAgfCAgICA0LDIyNCAgICAgICAgfCAgICAgMjU1XG4gICAgICogICAgMTAtYml0ICAgfCAgIDEzLDgyNCAgICAgICAgfCAgIDEsMDIzXG4gICAgICogICAgMTYtYml0ICAgfCAgNTU3LDA1NiAgICAgICAgfCAgNjUsNTM1XG4gICAgICpcbiAgICAgKiBLZXkgQWR2YW50YWdlczpcbiAgICAgKiAxLiBFbmFibGVzIGxhcmdlciB3aW5kb3cgc2l6ZXMgZHVlIHRvIHJlZHVjZWQgbWVtb3J5IG92ZXJoZWFkXG4gICAgICogMi4gTW9yZSBlZmZpY2llbnQgZm9yIHNtYWxsZXIgc2NhbGFyIGNvdW50czpcbiAgICAgKiAgICAtIDE2IGNodW5rczogKDE2IMOXIDI1NSkgKyAyNTYgPSA0LDMzNiBvcHNcbiAgICAgKiAgICAtIH4yeCBmYXN0ZXIgdGhhbiBzdGFuZGFyZCA4LDE5MSBvcHNcbiAgICAgKlxuICAgICAqIExpbWl0YXRpb25zOlxuICAgICAqIC0gTm90IHN1aXRhYmxlIGZvciBwbGFpbiBwcmVjb21wdXRlcyAocmVxdWlyZXMgMjU2IGNvbnN0YW50IGRvdWJsaW5ncylcbiAgICAgKiAtIFBlcmZvcm1hbmNlIGRlZ3JhZGVzIHdpdGggbGFyZ2VyIHNjYWxhciBjb3VudHM6XG4gICAgICogICAtIE9wdGltYWwgZm9yIH4yNTYgc2NhbGFyc1xuICAgICAqICAgLSBMZXNzIGVmZmljaWVudCBmb3IgNDA5Nisgc2NhbGFycyAoUGlwcGVuZ2VyIHByZWZlcnJlZClcbiAgICAgKi9cbiAgICB2YWxpZGF0ZVcod2luZG93U2l6ZSwgZmllbGROLkJJVFMpO1xuICAgIHZhbGlkYXRlTVNNUG9pbnRzKHBvaW50cywgYyk7XG4gICAgY29uc3QgemVybyA9IGMuWkVSTztcbiAgICBjb25zdCB0YWJsZVNpemUgPSAyICoqIHdpbmRvd1NpemUgLSAxOyAvLyB0YWJsZSBzaXplICh3aXRob3V0IHplcm8pXG4gICAgY29uc3QgY2h1bmtzID0gTWF0aC5jZWlsKGZpZWxkTi5CSVRTIC8gd2luZG93U2l6ZSk7IC8vIGNodW5rcyBvZiBpdGVtXG4gICAgY29uc3QgTUFTSyA9IEJpZ0ludCgoMSA8PCB3aW5kb3dTaXplKSAtIDEpO1xuICAgIGNvbnN0IHRhYmxlcyA9IHBvaW50cy5tYXAoKHApID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBhY2MgPSBwOyBpIDwgdGFibGVTaXplOyBpKyspIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGFjYyk7XG4gICAgICAgICAgICBhY2MgPSBhY2MuYWRkKHApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSk7XG4gICAgcmV0dXJuIChzY2FsYXJzKSA9PiB7XG4gICAgICAgIHZhbGlkYXRlTVNNU2NhbGFycyhzY2FsYXJzLCBmaWVsZE4pO1xuICAgICAgICBpZiAoc2NhbGFycy5sZW5ndGggPiBwb2ludHMubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcnJheSBvZiBzY2FsYXJzIG11c3QgYmUgc21hbGxlciB0aGFuIGFycmF5IG9mIHBvaW50cycpO1xuICAgICAgICBsZXQgcmVzID0gemVybztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaHVua3M7IGkrKykge1xuICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBkb3VibGUgaWYgYWNjdW11bGF0b3IgaXMgc3RpbGwgemVyby5cbiAgICAgICAgICAgIGlmIChyZXMgIT09IHplcm8pXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB3aW5kb3dTaXplOyBqKyspXG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IHJlcy5kb3VibGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHNoaWZ0QnkgPSBCaWdJbnQoY2h1bmtzICogd2luZG93U2l6ZSAtIChpICsgMSkgKiB3aW5kb3dTaXplKTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2NhbGFycy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBzY2FsYXJzW2pdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnIgPSBOdW1iZXIoKG4gPj4gc2hpZnRCeSkgJiBNQVNLKTtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnIpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBza2lwIHplcm8gc2NhbGFycyBjaHVua3NcbiAgICAgICAgICAgICAgICByZXMgPSByZXMuYWRkKHRhYmxlc1tqXVtjdXJyIC0gMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUJhc2ljKGN1cnZlKSB7XG4gICAgdmFsaWRhdGVGaWVsZChjdXJ2ZS5GcCk7XG4gICAgdmFsaWRhdGVPYmplY3QoY3VydmUsIHtcbiAgICAgICAgbjogJ2JpZ2ludCcsXG4gICAgICAgIGg6ICdiaWdpbnQnLFxuICAgICAgICBHeDogJ2ZpZWxkJyxcbiAgICAgICAgR3k6ICdmaWVsZCcsXG4gICAgfSwge1xuICAgICAgICBuQml0TGVuZ3RoOiAnaXNTYWZlSW50ZWdlcicsXG4gICAgICAgIG5CeXRlTGVuZ3RoOiAnaXNTYWZlSW50ZWdlcicsXG4gICAgfSk7XG4gICAgLy8gU2V0IGRlZmF1bHRzXG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoe1xuICAgICAgICAuLi5uTGVuZ3RoKGN1cnZlLm4sIGN1cnZlLm5CaXRMZW5ndGgpLFxuICAgICAgICAuLi5jdXJ2ZSxcbiAgICAgICAgLi4ueyBwOiBjdXJ2ZS5GcC5PUkRFUiB9LFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VydmUuanMubWFwIiwiLyoqXG4gKiBUd2lzdGVkIEVkd2FyZHMgY3VydmUuIFRoZSBmb3JtdWxhIGlzOiBheMKyICsgecKyID0gMSArIGR4wrJ5wrIuXG4gKiBGb3IgZGVzaWduIHJhdGlvbmFsZSBvZiB0eXBlcyAvIGV4cG9ydHMsIHNlZSB3ZWllcnN0cmFzcyBtb2R1bGUgZG9jdW1lbnRhdGlvbi5cbiAqIEBtb2R1bGVcbiAqL1xuLyohIG5vYmxlLWN1cnZlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuaW1wb3J0IHsgcGlwcGVuZ2VyLCB2YWxpZGF0ZUJhc2ljLCB3TkFGLCB9IGZyb20gJy4vY3VydmUuanMnO1xuaW1wb3J0IHsgRmllbGQsIG1vZCB9IGZyb20gJy4vbW9kdWxhci5qcyc7XG5pbXBvcnQgKiBhcyB1dCBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IGFib29sLCBlbnN1cmVCeXRlcywgbWVtb2l6ZWQgfSBmcm9tICcuL3V0aWxzLmpzJztcbi8vIEJlIGZyaWVuZGx5IHRvIGJhZCBFQ01BU2NyaXB0IHBhcnNlcnMgYnkgbm90IHVzaW5nIGJpZ2ludCBsaXRlcmFsc1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBfMG4gPSBCaWdJbnQoMCksIF8xbiA9IEJpZ0ludCgxKSwgXzJuID0gQmlnSW50KDIpLCBfOG4gPSBCaWdJbnQoOCk7XG4vLyB2ZXJpZmljYXRpb24gcnVsZSBpcyBlaXRoZXIgemlwMjE1IG9yIHJmYzgwMzIgLyBuaXN0MTg2LTUuIENvbnN1bHQgZnJvbUhleDpcbmNvbnN0IFZFUklGWV9ERUZBVUxUID0geyB6aXAyMTU6IHRydWUgfTtcbmZ1bmN0aW9uIHZhbGlkYXRlT3B0cyhjdXJ2ZSkge1xuICAgIGNvbnN0IG9wdHMgPSB2YWxpZGF0ZUJhc2ljKGN1cnZlKTtcbiAgICB1dC52YWxpZGF0ZU9iamVjdChjdXJ2ZSwge1xuICAgICAgICBoYXNoOiAnZnVuY3Rpb24nLFxuICAgICAgICBhOiAnYmlnaW50JyxcbiAgICAgICAgZDogJ2JpZ2ludCcsXG4gICAgICAgIHJhbmRvbUJ5dGVzOiAnZnVuY3Rpb24nLFxuICAgIH0sIHtcbiAgICAgICAgYWRqdXN0U2NhbGFyQnl0ZXM6ICdmdW5jdGlvbicsXG4gICAgICAgIGRvbWFpbjogJ2Z1bmN0aW9uJyxcbiAgICAgICAgdXZSYXRpbzogJ2Z1bmN0aW9uJyxcbiAgICAgICAgbWFwVG9DdXJ2ZTogJ2Z1bmN0aW9uJyxcbiAgICB9KTtcbiAgICAvLyBTZXQgZGVmYXVsdHNcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLm9wdHMgfSk7XG59XG4vKipcbiAqIENyZWF0ZXMgVHdpc3RlZCBFZHdhcmRzIGN1cnZlIHdpdGggRWREU0Egc2lnbmF0dXJlcy5cbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBGaWVsZCB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvYWJzdHJhY3QvbW9kdWxhcic7XG4gKiAvLyBCZWZvcmUgdGhhdCwgZGVmaW5lIEJpZ0ludC1zOiBhLCBkLCBwLCBuLCBHeCwgR3ksIGhcbiAqIGNvbnN0IGN1cnZlID0gdHdpc3RlZEVkd2FyZHMoeyBhLCBkLCBGcDogRmllbGQocCksIG4sIEd4LCBHeSwgaCB9KVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHdpc3RlZEVkd2FyZHMoY3VydmVEZWYpIHtcbiAgICBjb25zdCBDVVJWRSA9IHZhbGlkYXRlT3B0cyhjdXJ2ZURlZik7XG4gICAgY29uc3QgeyBGcCwgbjogQ1VSVkVfT1JERVIsIHByZWhhc2g6IHByZWhhc2gsIGhhc2g6IGNIYXNoLCByYW5kb21CeXRlcywgbkJ5dGVMZW5ndGgsIGg6IGNvZmFjdG9yLCB9ID0gQ1VSVkU7XG4gICAgLy8gSW1wb3J0YW50OlxuICAgIC8vIFRoZXJlIGFyZSBzb21lIHBsYWNlcyB3aGVyZSBGcC5CWVRFUyBpcyB1c2VkIGluc3RlYWQgb2YgbkJ5dGVMZW5ndGguXG4gICAgLy8gU28gZmFyLCBldmVyeXRoaW5nIGhhcyBiZWVuIHRlc3RlZCB3aXRoIGN1cnZlcyBvZiBGcC5CWVRFUyA9PSBuQnl0ZUxlbmd0aC5cbiAgICAvLyBUT0RPOiB0ZXN0IGFuZCBmaW5kIGN1cnZlcyB3aGljaCBiZWhhdmUgb3RoZXJ3aXNlLlxuICAgIGNvbnN0IE1BU0sgPSBfMm4gPDwgKEJpZ0ludChuQnl0ZUxlbmd0aCAqIDgpIC0gXzFuKTtcbiAgICBjb25zdCBtb2RQID0gRnAuY3JlYXRlOyAvLyBGdW5jdGlvbiBvdmVycmlkZXNcbiAgICBjb25zdCBGbiA9IEZpZWxkKENVUlZFLm4sIENVUlZFLm5CaXRMZW5ndGgpO1xuICAgIC8vIHNxcnQodS92KVxuICAgIGNvbnN0IHV2UmF0aW8gPSBDVVJWRS51dlJhdGlvIHx8XG4gICAgICAgICgodSwgdikgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBpc1ZhbGlkOiB0cnVlLCB2YWx1ZTogRnAuc3FydCh1ICogRnAuaW52KHYpKSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgdmFsdWU6IF8wbiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICBjb25zdCBhZGp1c3RTY2FsYXJCeXRlcyA9IENVUlZFLmFkanVzdFNjYWxhckJ5dGVzIHx8ICgoYnl0ZXMpID0+IGJ5dGVzKTsgLy8gTk9PUFxuICAgIGNvbnN0IGRvbWFpbiA9IENVUlZFLmRvbWFpbiB8fFxuICAgICAgICAoKGRhdGEsIGN0eCwgcGhmbGFnKSA9PiB7XG4gICAgICAgICAgICBhYm9vbCgncGhmbGFnJywgcGhmbGFnKTtcbiAgICAgICAgICAgIGlmIChjdHgubGVuZ3RoIHx8IHBoZmxhZylcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbnRleHRzL3ByZS1oYXNoIGFyZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSk7IC8vIE5PT1BcbiAgICAvLyAwIDw9IG4gPCBNQVNLXG4gICAgLy8gQ29vcmRpbmF0ZXMgbGFyZ2VyIHRoYW4gRnAuT1JERVIgYXJlIGFsbG93ZWQgZm9yIHppcDIxNVxuICAgIGZ1bmN0aW9uIGFDb29yZGluYXRlKHRpdGxlLCBuKSB7XG4gICAgICAgIHV0LmFJblJhbmdlKCdjb29yZGluYXRlICcgKyB0aXRsZSwgbiwgXzBuLCBNQVNLKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNzZXJ0UG9pbnQob3RoZXIpIHtcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBQb2ludCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4dGVuZGVkUG9pbnQgZXhwZWN0ZWQnKTtcbiAgICB9XG4gICAgLy8gQ29udmVydHMgRXh0ZW5kZWQgcG9pbnQgdG8gZGVmYXVsdCAoeCwgeSkgY29vcmRpbmF0ZXMuXG4gICAgLy8gQ2FuIGFjY2VwdCBwcmVjb21wdXRlZCBaXi0xIC0gZm9yIGV4YW1wbGUsIGZyb20gaW52ZXJ0QmF0Y2guXG4gICAgY29uc3QgdG9BZmZpbmVNZW1vID0gbWVtb2l6ZWQoKHAsIGl6KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZXg6IHgsIGV5OiB5LCBlejogeiB9ID0gcDtcbiAgICAgICAgY29uc3QgaXMwID0gcC5pczAoKTtcbiAgICAgICAgaWYgKGl6ID09IG51bGwpXG4gICAgICAgICAgICBpeiA9IGlzMCA/IF84biA6IEZwLmludih6KTsgLy8gOCB3YXMgY2hvc2VuIGFyYml0cmFyaWx5XG4gICAgICAgIGNvbnN0IGF4ID0gbW9kUCh4ICogaXopO1xuICAgICAgICBjb25zdCBheSA9IG1vZFAoeSAqIGl6KTtcbiAgICAgICAgY29uc3QgenogPSBtb2RQKHogKiBpeik7XG4gICAgICAgIGlmIChpczApXG4gICAgICAgICAgICByZXR1cm4geyB4OiBfMG4sIHk6IF8xbiB9O1xuICAgICAgICBpZiAoenogIT09IF8xbilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52WiB3YXMgaW52YWxpZCcpO1xuICAgICAgICByZXR1cm4geyB4OiBheCwgeTogYXkgfTtcbiAgICB9KTtcbiAgICBjb25zdCBhc3NlcnRWYWxpZE1lbW8gPSBtZW1vaXplZCgocCkgPT4ge1xuICAgICAgICBjb25zdCB7IGEsIGQgfSA9IENVUlZFO1xuICAgICAgICBpZiAocC5pczAoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIHBvaW50OiBaRVJPJyk7IC8vIFRPRE86IG9wdGltaXplLCB3aXRoIHZhcnMgYmVsb3c/XG4gICAgICAgIC8vIEVxdWF0aW9uIGluIGFmZmluZSBjb29yZGluYXRlczogYXjCsiArIHnCsiA9IDEgKyBkeMKyecKyXG4gICAgICAgIC8vIEVxdWF0aW9uIGluIHByb2plY3RpdmUgY29vcmRpbmF0ZXMgKFgvWiwgWS9aLCBaKTogIChhWMKyICsgWcKyKVrCsiA9IFrigbQgKyBkWMKyWcKyXG4gICAgICAgIGNvbnN0IHsgZXg6IFgsIGV5OiBZLCBlejogWiwgZXQ6IFQgfSA9IHA7XG4gICAgICAgIGNvbnN0IFgyID0gbW9kUChYICogWCk7IC8vIFjCslxuICAgICAgICBjb25zdCBZMiA9IG1vZFAoWSAqIFkpOyAvLyBZwrJcbiAgICAgICAgY29uc3QgWjIgPSBtb2RQKFogKiBaKTsgLy8gWsKyXG4gICAgICAgIGNvbnN0IFo0ID0gbW9kUChaMiAqIFoyKTsgLy8gWuKBtFxuICAgICAgICBjb25zdCBhWDIgPSBtb2RQKFgyICogYSk7IC8vIGFYwrJcbiAgICAgICAgY29uc3QgbGVmdCA9IG1vZFAoWjIgKiBtb2RQKGFYMiArIFkyKSk7IC8vIChhWMKyICsgWcKyKVrCslxuICAgICAgICBjb25zdCByaWdodCA9IG1vZFAoWjQgKyBtb2RQKGQgKiBtb2RQKFgyICogWTIpKSk7IC8vIFrigbQgKyBkWMKyWcKyXG4gICAgICAgIGlmIChsZWZ0ICE9PSByaWdodClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIHBvaW50OiBlcXVhdGlvbiBsZWZ0ICE9IHJpZ2h0ICgxKScpO1xuICAgICAgICAvLyBJbiBFeHRlbmRlZCBjb29yZGluYXRlcyB3ZSBhbHNvIGhhdmUgVCwgd2hpY2ggaXMgeCp5PVQvWjogY2hlY2sgWCpZID09IFoqVFxuICAgICAgICBjb25zdCBYWSA9IG1vZFAoWCAqIFkpO1xuICAgICAgICBjb25zdCBaVCA9IG1vZFAoWiAqIFQpO1xuICAgICAgICBpZiAoWFkgIT09IFpUKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcG9pbnQ6IGVxdWF0aW9uIGxlZnQgIT0gcmlnaHQgKDIpJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIC8vIEV4dGVuZGVkIFBvaW50IHdvcmtzIGluIGV4dGVuZGVkIGNvb3JkaW5hdGVzOiAoeCwgeSwgeiwgdCkg4oiLICh4PXgveiwgeT15L3osIHQ9eHkpLlxuICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1R3aXN0ZWRfRWR3YXJkc19jdXJ2ZSNFeHRlbmRlZF9jb29yZGluYXRlc1xuICAgIGNsYXNzIFBvaW50IHtcbiAgICAgICAgY29uc3RydWN0b3IoZXgsIGV5LCBleiwgZXQpIHtcbiAgICAgICAgICAgIHRoaXMuZXggPSBleDtcbiAgICAgICAgICAgIHRoaXMuZXkgPSBleTtcbiAgICAgICAgICAgIHRoaXMuZXogPSBlejtcbiAgICAgICAgICAgIHRoaXMuZXQgPSBldDtcbiAgICAgICAgICAgIGFDb29yZGluYXRlKCd4JywgZXgpO1xuICAgICAgICAgICAgYUNvb3JkaW5hdGUoJ3knLCBleSk7XG4gICAgICAgICAgICBhQ29vcmRpbmF0ZSgneicsIGV6KTtcbiAgICAgICAgICAgIGFDb29yZGluYXRlKCd0JywgZXQpO1xuICAgICAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBnZXQgeCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQWZmaW5lKCkueDtcbiAgICAgICAgfVxuICAgICAgICBnZXQgeSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQWZmaW5lKCkueTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgZnJvbUFmZmluZShwKSB7XG4gICAgICAgICAgICBpZiAocCBpbnN0YW5jZW9mIFBvaW50KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXh0ZW5kZWQgcG9pbnQgbm90IGFsbG93ZWQnKTtcbiAgICAgICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gcCB8fCB7fTtcbiAgICAgICAgICAgIGFDb29yZGluYXRlKCd4JywgeCk7XG4gICAgICAgICAgICBhQ29vcmRpbmF0ZSgneScsIHkpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh4LCB5LCBfMW4sIG1vZFAoeCAqIHkpKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgbm9ybWFsaXplWihwb2ludHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvSW52ID0gRnAuaW52ZXJ0QmF0Y2gocG9pbnRzLm1hcCgocCkgPT4gcC5leikpO1xuICAgICAgICAgICAgcmV0dXJuIHBvaW50cy5tYXAoKHAsIGkpID0+IHAudG9BZmZpbmUodG9JbnZbaV0pKS5tYXAoUG9pbnQuZnJvbUFmZmluZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTXVsdGlzY2FsYXIgTXVsdGlwbGljYXRpb25cbiAgICAgICAgc3RhdGljIG1zbShwb2ludHMsIHNjYWxhcnMpIHtcbiAgICAgICAgICAgIHJldHVybiBwaXBwZW5nZXIoUG9pbnQsIEZuLCBwb2ludHMsIHNjYWxhcnMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFwiUHJpdmF0ZSBtZXRob2RcIiwgZG9uJ3QgdXNlIGl0IGRpcmVjdGx5XG4gICAgICAgIF9zZXRXaW5kb3dTaXplKHdpbmRvd1NpemUpIHtcbiAgICAgICAgICAgIHduYWYuc2V0V2luZG93U2l6ZSh0aGlzLCB3aW5kb3dTaXplKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3QgcmVxdWlyZWQgZm9yIGZyb21IZXgoKSwgd2hpY2ggYWx3YXlzIGNyZWF0ZXMgdmFsaWQgcG9pbnRzLlxuICAgICAgICAvLyBDb3VsZCBiZSB1c2VmdWwgZm9yIGZyb21BZmZpbmUoKS5cbiAgICAgICAgYXNzZXJ0VmFsaWRpdHkoKSB7XG4gICAgICAgICAgICBhc3NlcnRWYWxpZE1lbW8odGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29tcGFyZSBvbmUgcG9pbnQgdG8gYW5vdGhlci5cbiAgICAgICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgICAgICBhc3NlcnRQb2ludChvdGhlcik7XG4gICAgICAgICAgICBjb25zdCB7IGV4OiBYMSwgZXk6IFkxLCBlejogWjEgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGV4OiBYMiwgZXk6IFkyLCBlejogWjIgfSA9IG90aGVyO1xuICAgICAgICAgICAgY29uc3QgWDFaMiA9IG1vZFAoWDEgKiBaMik7XG4gICAgICAgICAgICBjb25zdCBYMloxID0gbW9kUChYMiAqIFoxKTtcbiAgICAgICAgICAgIGNvbnN0IFkxWjIgPSBtb2RQKFkxICogWjIpO1xuICAgICAgICAgICAgY29uc3QgWTJaMSA9IG1vZFAoWTIgKiBaMSk7XG4gICAgICAgICAgICByZXR1cm4gWDFaMiA9PT0gWDJaMSAmJiBZMVoyID09PSBZMloxO1xuICAgICAgICB9XG4gICAgICAgIGlzMCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVxdWFscyhQb2ludC5aRVJPKTtcbiAgICAgICAgfVxuICAgICAgICBuZWdhdGUoKSB7XG4gICAgICAgICAgICAvLyBGbGlwcyBwb2ludCBzaWduIHRvIGEgbmVnYXRpdmUgb25lICgteCwgeSBpbiBhZmZpbmUgY29vcmRzKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludChtb2RQKC10aGlzLmV4KSwgdGhpcy5leSwgdGhpcy5leiwgbW9kUCgtdGhpcy5ldCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZhc3QgYWxnbyBmb3IgZG91YmxpbmcgRXh0ZW5kZWQgUG9pbnQuXG4gICAgICAgIC8vIGh0dHBzOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQuaHRtbCNkb3VibGluZy1kYmwtMjAwOC1od2NkXG4gICAgICAgIC8vIENvc3Q6IDRNICsgNFMgKyAxKmEgKyA2YWRkICsgMSoyLlxuICAgICAgICBkb3VibGUoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGEgfSA9IENVUlZFO1xuICAgICAgICAgICAgY29uc3QgeyBleDogWDEsIGV5OiBZMSwgZXo6IFoxIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgQSA9IG1vZFAoWDEgKiBYMSk7IC8vIEEgPSBYMTJcbiAgICAgICAgICAgIGNvbnN0IEIgPSBtb2RQKFkxICogWTEpOyAvLyBCID0gWTEyXG4gICAgICAgICAgICBjb25zdCBDID0gbW9kUChfMm4gKiBtb2RQKFoxICogWjEpKTsgLy8gQyA9IDIqWjEyXG4gICAgICAgICAgICBjb25zdCBEID0gbW9kUChhICogQSk7IC8vIEQgPSBhKkFcbiAgICAgICAgICAgIGNvbnN0IHgxeTEgPSBYMSArIFkxO1xuICAgICAgICAgICAgY29uc3QgRSA9IG1vZFAobW9kUCh4MXkxICogeDF5MSkgLSBBIC0gQik7IC8vIEUgPSAoWDErWTEpMi1BLUJcbiAgICAgICAgICAgIGNvbnN0IEcgPSBEICsgQjsgLy8gRyA9IEQrQlxuICAgICAgICAgICAgY29uc3QgRiA9IEcgLSBDOyAvLyBGID0gRy1DXG4gICAgICAgICAgICBjb25zdCBIID0gRCAtIEI7IC8vIEggPSBELUJcbiAgICAgICAgICAgIGNvbnN0IFgzID0gbW9kUChFICogRik7IC8vIFgzID0gRSpGXG4gICAgICAgICAgICBjb25zdCBZMyA9IG1vZFAoRyAqIEgpOyAvLyBZMyA9IEcqSFxuICAgICAgICAgICAgY29uc3QgVDMgPSBtb2RQKEUgKiBIKTsgLy8gVDMgPSBFKkhcbiAgICAgICAgICAgIGNvbnN0IFozID0gbW9kUChGICogRyk7IC8vIFozID0gRipHXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KFgzLCBZMywgWjMsIFQzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGYXN0IGFsZ28gZm9yIGFkZGluZyAyIEV4dGVuZGVkIFBvaW50cy5cbiAgICAgICAgLy8gaHR0cHM6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1leHRlbmRlZC5odG1sI2FkZGl0aW9uLWFkZC0yMDA4LWh3Y2RcbiAgICAgICAgLy8gQ29zdDogOU0gKyAxKmEgKyAxKmQgKyA3YWRkLlxuICAgICAgICBhZGQob3RoZXIpIHtcbiAgICAgICAgICAgIGFzc2VydFBvaW50KG90aGVyKTtcbiAgICAgICAgICAgIGNvbnN0IHsgYSwgZCB9ID0gQ1VSVkU7XG4gICAgICAgICAgICBjb25zdCB7IGV4OiBYMSwgZXk6IFkxLCBlejogWjEsIGV0OiBUMSB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgZXg6IFgyLCBleTogWTIsIGV6OiBaMiwgZXQ6IFQyIH0gPSBvdGhlcjtcbiAgICAgICAgICAgIC8vIEZhc3RlciBhbGdvIGZvciBhZGRpbmcgMiBFeHRlbmRlZCBQb2ludHMgd2hlbiBjdXJ2ZSdzIGE9LTEuXG4gICAgICAgICAgICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQtMS5odG1sI2FkZGl0aW9uLWFkZC0yMDA4LWh3Y2QtNFxuICAgICAgICAgICAgLy8gQ29zdDogOE0gKyA4YWRkICsgMioyLlxuICAgICAgICAgICAgLy8gTm90ZTogSXQgZG9lcyBub3QgY2hlY2sgd2hldGhlciB0aGUgYG90aGVyYCBwb2ludCBpcyB2YWxpZC5cbiAgICAgICAgICAgIGlmIChhID09PSBCaWdJbnQoLTEpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgQSA9IG1vZFAoKFkxIC0gWDEpICogKFkyICsgWDIpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBCID0gbW9kUCgoWTEgKyBYMSkgKiAoWTIgLSBYMikpO1xuICAgICAgICAgICAgICAgIGNvbnN0IEYgPSBtb2RQKEIgLSBBKTtcbiAgICAgICAgICAgICAgICBpZiAoRiA9PT0gXzBuKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb3VibGUoKTsgLy8gU2FtZSBwb2ludC4gVGVzdHMgc2F5IGl0IGRvZXNuJ3QgYWZmZWN0IHRpbWluZ1xuICAgICAgICAgICAgICAgIGNvbnN0IEMgPSBtb2RQKFoxICogXzJuICogVDIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IEQgPSBtb2RQKFQxICogXzJuICogWjIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IEUgPSBEICsgQztcbiAgICAgICAgICAgICAgICBjb25zdCBHID0gQiArIEE7XG4gICAgICAgICAgICAgICAgY29uc3QgSCA9IEQgLSBDO1xuICAgICAgICAgICAgICAgIGNvbnN0IFgzID0gbW9kUChFICogRik7XG4gICAgICAgICAgICAgICAgY29uc3QgWTMgPSBtb2RQKEcgKiBIKTtcbiAgICAgICAgICAgICAgICBjb25zdCBUMyA9IG1vZFAoRSAqIEgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IFozID0gbW9kUChGICogRyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludChYMywgWTMsIFozLCBUMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBBID0gbW9kUChYMSAqIFgyKTsgLy8gQSA9IFgxKlgyXG4gICAgICAgICAgICBjb25zdCBCID0gbW9kUChZMSAqIFkyKTsgLy8gQiA9IFkxKlkyXG4gICAgICAgICAgICBjb25zdCBDID0gbW9kUChUMSAqIGQgKiBUMik7IC8vIEMgPSBUMSpkKlQyXG4gICAgICAgICAgICBjb25zdCBEID0gbW9kUChaMSAqIFoyKTsgLy8gRCA9IFoxKloyXG4gICAgICAgICAgICBjb25zdCBFID0gbW9kUCgoWDEgKyBZMSkgKiAoWDIgKyBZMikgLSBBIC0gQik7IC8vIEUgPSAoWDErWTEpKihYMitZMiktQS1CXG4gICAgICAgICAgICBjb25zdCBGID0gRCAtIEM7IC8vIEYgPSBELUNcbiAgICAgICAgICAgIGNvbnN0IEcgPSBEICsgQzsgLy8gRyA9IEQrQ1xuICAgICAgICAgICAgY29uc3QgSCA9IG1vZFAoQiAtIGEgKiBBKTsgLy8gSCA9IEItYSpBXG4gICAgICAgICAgICBjb25zdCBYMyA9IG1vZFAoRSAqIEYpOyAvLyBYMyA9IEUqRlxuICAgICAgICAgICAgY29uc3QgWTMgPSBtb2RQKEcgKiBIKTsgLy8gWTMgPSBHKkhcbiAgICAgICAgICAgIGNvbnN0IFQzID0gbW9kUChFICogSCk7IC8vIFQzID0gRSpIXG4gICAgICAgICAgICBjb25zdCBaMyA9IG1vZFAoRiAqIEcpOyAvLyBaMyA9IEYqR1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludChYMywgWTMsIFozLCBUMyk7XG4gICAgICAgIH1cbiAgICAgICAgc3VidHJhY3Qob3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChvdGhlci5uZWdhdGUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgd05BRihuKSB7XG4gICAgICAgICAgICByZXR1cm4gd25hZi53TkFGQ2FjaGVkKHRoaXMsIG4sIFBvaW50Lm5vcm1hbGl6ZVopO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnN0YW50LXRpbWUgbXVsdGlwbGljYXRpb24uXG4gICAgICAgIG11bHRpcGx5KHNjYWxhcikge1xuICAgICAgICAgICAgY29uc3QgbiA9IHNjYWxhcjtcbiAgICAgICAgICAgIHV0LmFJblJhbmdlKCdzY2FsYXInLCBuLCBfMW4sIENVUlZFX09SREVSKTsgLy8gMSA8PSBzY2FsYXIgPCBMXG4gICAgICAgICAgICBjb25zdCB7IHAsIGYgfSA9IHRoaXMud05BRihuKTtcbiAgICAgICAgICAgIHJldHVybiBQb2ludC5ub3JtYWxpemVaKFtwLCBmXSlbMF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm9uLWNvbnN0YW50LXRpbWUgbXVsdGlwbGljYXRpb24uIFVzZXMgZG91YmxlLWFuZC1hZGQgYWxnb3JpdGhtLlxuICAgICAgICAvLyBJdCdzIGZhc3RlciwgYnV0IHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiB5b3UgZG9uJ3QgY2FyZSBhYm91dFxuICAgICAgICAvLyBhbiBleHBvc2VkIHByaXZhdGUga2V5IGUuZy4gc2lnIHZlcmlmaWNhdGlvbi5cbiAgICAgICAgLy8gRG9lcyBOT1QgYWxsb3cgc2NhbGFycyBoaWdoZXIgdGhhbiBDVVJWRS5uLlxuICAgICAgICAvLyBBY2NlcHRzIG9wdGlvbmFsIGFjY3VtdWxhdG9yIHRvIG1lcmdlIHdpdGggbXVsdGlwbHkgKGltcG9ydGFudCBmb3Igc3BhcnNlIHNjYWxhcnMpXG4gICAgICAgIG11bHRpcGx5VW5zYWZlKHNjYWxhciwgYWNjID0gUG9pbnQuWkVSTykge1xuICAgICAgICAgICAgY29uc3QgbiA9IHNjYWxhcjtcbiAgICAgICAgICAgIHV0LmFJblJhbmdlKCdzY2FsYXInLCBuLCBfMG4sIENVUlZFX09SREVSKTsgLy8gMCA8PSBzY2FsYXIgPCBMXG4gICAgICAgICAgICBpZiAobiA9PT0gXzBuKVxuICAgICAgICAgICAgICAgIHJldHVybiBJO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXMwKCkgfHwgbiA9PT0gXzFuKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIHduYWYud05BRkNhY2hlZFVuc2FmZSh0aGlzLCBuLCBQb2ludC5ub3JtYWxpemVaLCBhY2MpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrcyBpZiBwb2ludCBpcyBvZiBzbWFsbCBvcmRlci5cbiAgICAgICAgLy8gSWYgeW91IGFkZCBzb21ldGhpbmcgdG8gc21hbGwgb3JkZXIgcG9pbnQsIHlvdSB3aWxsIGhhdmUgXCJkaXJ0eVwiXG4gICAgICAgIC8vIHBvaW50IHdpdGggdG9yc2lvbiBjb21wb25lbnQuXG4gICAgICAgIC8vIE11bHRpcGxpZXMgcG9pbnQgYnkgY29mYWN0b3IgYW5kIGNoZWNrcyBpZiB0aGUgcmVzdWx0IGlzIDAuXG4gICAgICAgIGlzU21hbGxPcmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5VW5zYWZlKGNvZmFjdG9yKS5pczAoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNdWx0aXBsaWVzIHBvaW50IGJ5IGN1cnZlIG9yZGVyIGFuZCBjaGVja3MgaWYgdGhlIHJlc3VsdCBpcyAwLlxuICAgICAgICAvLyBSZXR1cm5zIGBmYWxzZWAgaXMgdGhlIHBvaW50IGlzIGRpcnR5LlxuICAgICAgICBpc1RvcnNpb25GcmVlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHduYWYudW5zYWZlTGFkZGVyKHRoaXMsIENVUlZFX09SREVSKS5pczAoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0cyBFeHRlbmRlZCBwb2ludCB0byBkZWZhdWx0ICh4LCB5KSBjb29yZGluYXRlcy5cbiAgICAgICAgLy8gQ2FuIGFjY2VwdCBwcmVjb21wdXRlZCBaXi0xIC0gZm9yIGV4YW1wbGUsIGZyb20gaW52ZXJ0QmF0Y2guXG4gICAgICAgIHRvQWZmaW5lKGl6KSB7XG4gICAgICAgICAgICByZXR1cm4gdG9BZmZpbmVNZW1vKHRoaXMsIGl6KTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhckNvZmFjdG9yKCkge1xuICAgICAgICAgICAgY29uc3QgeyBoOiBjb2ZhY3RvciB9ID0gQ1VSVkU7XG4gICAgICAgICAgICBpZiAoY29mYWN0b3IgPT09IF8xbilcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5VW5zYWZlKGNvZmFjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDb252ZXJ0cyBoYXNoIHN0cmluZyBvciBVaW50OEFycmF5IHRvIFBvaW50LlxuICAgICAgICAvLyBVc2VzIGFsZ28gZnJvbSBSRkM4MDMyIDUuMS4zLlxuICAgICAgICBzdGF0aWMgZnJvbUhleChoZXgsIHppcDIxNSA9IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCB7IGQsIGEgfSA9IENVUlZFO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gRnAuQllURVM7XG4gICAgICAgICAgICBoZXggPSBlbnN1cmVCeXRlcygncG9pbnRIZXgnLCBoZXgsIGxlbik7IC8vIGNvcHkgaGV4IHRvIGEgbmV3IGFycmF5XG4gICAgICAgICAgICBhYm9vbCgnemlwMjE1JywgemlwMjE1KTtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1lZCA9IGhleC5zbGljZSgpOyAvLyBjb3B5IGFnYWluLCB3ZSdsbCBtYW5pcHVsYXRlIGl0XG4gICAgICAgICAgICBjb25zdCBsYXN0Qnl0ZSA9IGhleFtsZW4gLSAxXTsgLy8gc2VsZWN0IGxhc3QgYnl0ZVxuICAgICAgICAgICAgbm9ybWVkW2xlbiAtIDFdID0gbGFzdEJ5dGUgJiB+MHg4MDsgLy8gY2xlYXIgbGFzdCBiaXRcbiAgICAgICAgICAgIGNvbnN0IHkgPSB1dC5ieXRlc1RvTnVtYmVyTEUobm9ybWVkKTtcbiAgICAgICAgICAgIC8vIHppcDIxNT10cnVlIGlzIGdvb2QgZm9yIGNvbnNlbnN1cy1jcml0aWNhbCBhcHBzLiA9ZmFsc2UgZm9sbG93cyBSRkM4MDMyIC8gTklTVDE4Ni01LlxuICAgICAgICAgICAgLy8gUkZDODAzMiBwcm9oaWJpdHMgPj0gcCwgYnV0IFpJUDIxNSBkb2Vzbid0XG4gICAgICAgICAgICAvLyB6aXAyMTU9dHJ1ZTogIDAgPD0geSA8IE1BU0sgKDJeMjU2IGZvciBlZDI1NTE5KVxuICAgICAgICAgICAgLy8gemlwMjE1PWZhbHNlOiAwIDw9IHkgPCBQICgyXjI1NS0xOSBmb3IgZWQyNTUxOSlcbiAgICAgICAgICAgIGNvbnN0IG1heCA9IHppcDIxNSA/IE1BU0sgOiBGcC5PUkRFUjtcbiAgICAgICAgICAgIHV0LmFJblJhbmdlKCdwb2ludEhleC55JywgeSwgXzBuLCBtYXgpO1xuICAgICAgICAgICAgLy8gRWQyNTUxOTogeMKyID0gKHnCsi0xKS8oZHnCsisxKSBtb2QgcC4gRWQ0NDg6IHjCsiA9ICh5wrItMSkvKGR5wrItMSkgbW9kIHAuIEdlbmVyaWMgY2FzZTpcbiAgICAgICAgICAgIC8vIGF4wrIrecKyPTErZHjCsnnCsiA9PiB5wrItMT1keMKyecKyLWF4wrIgPT4gecKyLTE9eMKyKGR5wrItYSkgPT4geMKyPSh5wrItMSkvKGR5wrItYSlcbiAgICAgICAgICAgIGNvbnN0IHkyID0gbW9kUCh5ICogeSk7IC8vIGRlbm9taW5hdG9yIGlzIGFsd2F5cyBub24tMCBtb2QgcC5cbiAgICAgICAgICAgIGNvbnN0IHUgPSBtb2RQKHkyIC0gXzFuKTsgLy8gdSA9IHnCsiAtIDFcbiAgICAgICAgICAgIGNvbnN0IHYgPSBtb2RQKGQgKiB5MiAtIGEpOyAvLyB2ID0gZCB5wrIgKyAxLlxuICAgICAgICAgICAgbGV0IHsgaXNWYWxpZCwgdmFsdWU6IHggfSA9IHV2UmF0aW8odSwgdik7IC8vIOKImih1L3YpXG4gICAgICAgICAgICBpZiAoIWlzVmFsaWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb2ludC5mcm9tSGV4OiBpbnZhbGlkIHkgY29vcmRpbmF0ZScpO1xuICAgICAgICAgICAgY29uc3QgaXNYT2RkID0gKHggJiBfMW4pID09PSBfMW47IC8vIFRoZXJlIGFyZSAyIHNxdWFyZSByb290cy4gVXNlIHhfMCBiaXQgdG8gc2VsZWN0IHByb3BlclxuICAgICAgICAgICAgY29uc3QgaXNMYXN0Qnl0ZU9kZCA9IChsYXN0Qnl0ZSAmIDB4ODApICE9PSAwOyAvLyB4XzAsIGxhc3QgYml0XG4gICAgICAgICAgICBpZiAoIXppcDIxNSAmJiB4ID09PSBfMG4gJiYgaXNMYXN0Qnl0ZU9kZClcbiAgICAgICAgICAgICAgICAvLyBpZiB4PTAgYW5kIHhfMCA9IDEsIGZhaWxcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BvaW50LmZyb21IZXg6IHg9MCBhbmQgeF8wPTEnKTtcbiAgICAgICAgICAgIGlmIChpc0xhc3RCeXRlT2RkICE9PSBpc1hPZGQpXG4gICAgICAgICAgICAgICAgeCA9IG1vZFAoLXgpOyAvLyBpZiB4XzAgIT0geCBtb2QgMiwgc2V0IHggPSBwLXhcbiAgICAgICAgICAgIHJldHVybiBQb2ludC5mcm9tQWZmaW5lKHsgeCwgeSB9KTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0aWMgZnJvbVByaXZhdGVLZXkocHJpdktleSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEV4dGVuZGVkUHVibGljS2V5KHByaXZLZXkpLnBvaW50O1xuICAgICAgICB9XG4gICAgICAgIHRvUmF3Qnl0ZXMoKSB7XG4gICAgICAgICAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXMudG9BZmZpbmUoKTtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gdXQubnVtYmVyVG9CeXRlc0xFKHksIEZwLkJZVEVTKTsgLy8gZWFjaCB5IGhhcyAyIHggdmFsdWVzICh4LCAteSlcbiAgICAgICAgICAgIGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdIHw9IHggJiBfMW4gPyAweDgwIDogMDsgLy8gd2hlbiBjb21wcmVzc2luZywgaXQncyBlbm91Z2ggdG8gc3RvcmUgeVxuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzOyAvLyBhbmQgdXNlIHRoZSBsYXN0IGJ5dGUgdG8gZW5jb2RlIHNpZ24gb2YgeFxuICAgICAgICB9XG4gICAgICAgIHRvSGV4KCkge1xuICAgICAgICAgICAgcmV0dXJuIHV0LmJ5dGVzVG9IZXgodGhpcy50b1Jhd0J5dGVzKCkpOyAvLyBTYW1lIGFzIHRvUmF3Qnl0ZXMsIGJ1dCByZXR1cm5zIHN0cmluZy5cbiAgICAgICAgfVxuICAgIH1cbiAgICBQb2ludC5CQVNFID0gbmV3IFBvaW50KENVUlZFLkd4LCBDVVJWRS5HeSwgXzFuLCBtb2RQKENVUlZFLkd4ICogQ1VSVkUuR3kpKTtcbiAgICBQb2ludC5aRVJPID0gbmV3IFBvaW50KF8wbiwgXzFuLCBfMW4sIF8wbik7IC8vIDAsIDEsIDEsIDBcbiAgICBjb25zdCB7IEJBU0U6IEcsIFpFUk86IEkgfSA9IFBvaW50O1xuICAgIGNvbnN0IHduYWYgPSB3TkFGKFBvaW50LCBuQnl0ZUxlbmd0aCAqIDgpO1xuICAgIGZ1bmN0aW9uIG1vZE4oYSkge1xuICAgICAgICByZXR1cm4gbW9kKGEsIENVUlZFX09SREVSKTtcbiAgICB9XG4gICAgLy8gTGl0dGxlLWVuZGlhbiBTSEE1MTIgd2l0aCBtb2R1bG8gblxuICAgIGZ1bmN0aW9uIG1vZE5fTEUoaGFzaCkge1xuICAgICAgICByZXR1cm4gbW9kTih1dC5ieXRlc1RvTnVtYmVyTEUoaGFzaCkpO1xuICAgIH1cbiAgICAvKiogQ29udmVuaWVuY2UgbWV0aG9kIHRoYXQgY3JlYXRlcyBwdWJsaWMga2V5IGFuZCBvdGhlciBzdHVmZi4gUkZDODAzMiA1LjEuNSAqL1xuICAgIGZ1bmN0aW9uIGdldEV4dGVuZGVkUHVibGljS2V5KGtleSkge1xuICAgICAgICBjb25zdCBsZW4gPSBGcC5CWVRFUztcbiAgICAgICAga2V5ID0gZW5zdXJlQnl0ZXMoJ3ByaXZhdGUga2V5Jywga2V5LCBsZW4pO1xuICAgICAgICAvLyBIYXNoIHByaXZhdGUga2V5IHdpdGggY3VydmUncyBoYXNoIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdW5pZm9ybWluZ2x5IHJhbmRvbSBpbnB1dFxuICAgICAgICAvLyBDaGVjayBieXRlIGxlbmd0aHM6IGVuc3VyZSg2NCwgaChlbnN1cmUoMzIsIGtleSkpKVxuICAgICAgICBjb25zdCBoYXNoZWQgPSBlbnN1cmVCeXRlcygnaGFzaGVkIHByaXZhdGUga2V5JywgY0hhc2goa2V5KSwgMiAqIGxlbik7XG4gICAgICAgIGNvbnN0IGhlYWQgPSBhZGp1c3RTY2FsYXJCeXRlcyhoYXNoZWQuc2xpY2UoMCwgbGVuKSk7IC8vIGNsZWFyIGZpcnN0IGhhbGYgYml0cywgcHJvZHVjZSBGRVxuICAgICAgICBjb25zdCBwcmVmaXggPSBoYXNoZWQuc2xpY2UobGVuLCAyICogbGVuKTsgLy8gc2Vjb25kIGhhbGYgaXMgY2FsbGVkIGtleSBwcmVmaXggKDUuMS42KVxuICAgICAgICBjb25zdCBzY2FsYXIgPSBtb2ROX0xFKGhlYWQpOyAvLyBUaGUgYWN0dWFsIHByaXZhdGUgc2NhbGFyXG4gICAgICAgIGNvbnN0IHBvaW50ID0gRy5tdWx0aXBseShzY2FsYXIpOyAvLyBQb2ludCBvbiBFZHdhcmRzIGN1cnZlIGFrYSBwdWJsaWMga2V5XG4gICAgICAgIGNvbnN0IHBvaW50Qnl0ZXMgPSBwb2ludC50b1Jhd0J5dGVzKCk7IC8vIFVpbnQ4QXJyYXkgcmVwcmVzZW50YXRpb25cbiAgICAgICAgcmV0dXJuIHsgaGVhZCwgcHJlZml4LCBzY2FsYXIsIHBvaW50LCBwb2ludEJ5dGVzIH07XG4gICAgfVxuICAgIC8vIENhbGN1bGF0ZXMgRWREU0EgcHViIGtleS4gUkZDODAzMiA1LjEuNS4gUHJpdmtleSBpcyBoYXNoZWQuIFVzZSBmaXJzdCBoYWxmIHdpdGggMyBiaXRzIGNsZWFyZWRcbiAgICBmdW5jdGlvbiBnZXRQdWJsaWNLZXkocHJpdktleSkge1xuICAgICAgICByZXR1cm4gZ2V0RXh0ZW5kZWRQdWJsaWNLZXkocHJpdktleSkucG9pbnRCeXRlcztcbiAgICB9XG4gICAgLy8gaW50KCdMRScsIFNIQTUxMihkb20yKEYsIEMpIHx8IG1zZ3MpKSBtb2QgTlxuICAgIGZ1bmN0aW9uIGhhc2hEb21haW5Ub1NjYWxhcihjb250ZXh0ID0gbmV3IFVpbnQ4QXJyYXkoKSwgLi4ubXNncykge1xuICAgICAgICBjb25zdCBtc2cgPSB1dC5jb25jYXRCeXRlcyguLi5tc2dzKTtcbiAgICAgICAgcmV0dXJuIG1vZE5fTEUoY0hhc2goZG9tYWluKG1zZywgZW5zdXJlQnl0ZXMoJ2NvbnRleHQnLCBjb250ZXh0KSwgISFwcmVoYXNoKSkpO1xuICAgIH1cbiAgICAvKiogU2lnbnMgbWVzc2FnZSB3aXRoIHByaXZhdGVLZXkuIFJGQzgwMzIgNS4xLjYgKi9cbiAgICBmdW5jdGlvbiBzaWduKG1zZywgcHJpdktleSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG1zZyA9IGVuc3VyZUJ5dGVzKCdtZXNzYWdlJywgbXNnKTtcbiAgICAgICAgaWYgKHByZWhhc2gpXG4gICAgICAgICAgICBtc2cgPSBwcmVoYXNoKG1zZyk7IC8vIGZvciBlZDI1NTE5cGggZXRjLlxuICAgICAgICBjb25zdCB7IHByZWZpeCwgc2NhbGFyLCBwb2ludEJ5dGVzIH0gPSBnZXRFeHRlbmRlZFB1YmxpY0tleShwcml2S2V5KTtcbiAgICAgICAgY29uc3QgciA9IGhhc2hEb21haW5Ub1NjYWxhcihvcHRpb25zLmNvbnRleHQsIHByZWZpeCwgbXNnKTsgLy8gciA9IGRvbTIoRiwgQykgfHwgcHJlZml4IHx8IFBIKE0pXG4gICAgICAgIGNvbnN0IFIgPSBHLm11bHRpcGx5KHIpLnRvUmF3Qnl0ZXMoKTsgLy8gUiA9IHJHXG4gICAgICAgIGNvbnN0IGsgPSBoYXNoRG9tYWluVG9TY2FsYXIob3B0aW9ucy5jb250ZXh0LCBSLCBwb2ludEJ5dGVzLCBtc2cpOyAvLyBSIHx8IEEgfHwgUEgoTSlcbiAgICAgICAgY29uc3QgcyA9IG1vZE4ociArIGsgKiBzY2FsYXIpOyAvLyBTID0gKHIgKyBrICogcykgbW9kIExcbiAgICAgICAgdXQuYUluUmFuZ2UoJ3NpZ25hdHVyZS5zJywgcywgXzBuLCBDVVJWRV9PUkRFUik7IC8vIDAgPD0gcyA8IGxcbiAgICAgICAgY29uc3QgcmVzID0gdXQuY29uY2F0Qnl0ZXMoUiwgdXQubnVtYmVyVG9CeXRlc0xFKHMsIEZwLkJZVEVTKSk7XG4gICAgICAgIHJldHVybiBlbnN1cmVCeXRlcygncmVzdWx0JywgcmVzLCBGcC5CWVRFUyAqIDIpOyAvLyA2NC1ieXRlIHNpZ25hdHVyZVxuICAgIH1cbiAgICBjb25zdCB2ZXJpZnlPcHRzID0gVkVSSUZZX0RFRkFVTFQ7XG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgRWREU0Egc2lnbmF0dXJlIGFnYWluc3QgbWVzc2FnZSBhbmQgcHVibGljIGtleS4gUkZDODAzMiA1LjEuNy5cbiAgICAgKiBBbiBleHRlbmRlZCBncm91cCBlcXVhdGlvbiBpcyBjaGVja2VkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZlcmlmeShzaWcsIG1zZywgcHVibGljS2V5LCBvcHRpb25zID0gdmVyaWZ5T3B0cykge1xuICAgICAgICBjb25zdCB7IGNvbnRleHQsIHppcDIxNSB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgbGVuID0gRnAuQllURVM7IC8vIFZlcmlmaWVzIEVkRFNBIHNpZ25hdHVyZSBhZ2FpbnN0IG1lc3NhZ2UgYW5kIHB1YmxpYyBrZXkuIFJGQzgwMzIgNS4xLjcuXG4gICAgICAgIHNpZyA9IGVuc3VyZUJ5dGVzKCdzaWduYXR1cmUnLCBzaWcsIDIgKiBsZW4pOyAvLyBBbiBleHRlbmRlZCBncm91cCBlcXVhdGlvbiBpcyBjaGVja2VkLlxuICAgICAgICBtc2cgPSBlbnN1cmVCeXRlcygnbWVzc2FnZScsIG1zZyk7XG4gICAgICAgIHB1YmxpY0tleSA9IGVuc3VyZUJ5dGVzKCdwdWJsaWNLZXknLCBwdWJsaWNLZXksIGxlbik7XG4gICAgICAgIGlmICh6aXAyMTUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGFib29sKCd6aXAyMTUnLCB6aXAyMTUpO1xuICAgICAgICBpZiAocHJlaGFzaClcbiAgICAgICAgICAgIG1zZyA9IHByZWhhc2gobXNnKTsgLy8gZm9yIGVkMjU1MTlwaCwgZXRjXG4gICAgICAgIGNvbnN0IHMgPSB1dC5ieXRlc1RvTnVtYmVyTEUoc2lnLnNsaWNlKGxlbiwgMiAqIGxlbikpO1xuICAgICAgICBsZXQgQSwgUiwgU0I7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyB6aXAyMTU9dHJ1ZSBpcyBnb29kIGZvciBjb25zZW5zdXMtY3JpdGljYWwgYXBwcy4gPWZhbHNlIGZvbGxvd3MgUkZDODAzMiAvIE5JU1QxODYtNS5cbiAgICAgICAgICAgIC8vIHppcDIxNT10cnVlOiAgMCA8PSB5IDwgTUFTSyAoMl4yNTYgZm9yIGVkMjU1MTkpXG4gICAgICAgICAgICAvLyB6aXAyMTU9ZmFsc2U6IDAgPD0geSA8IFAgKDJeMjU1LTE5IGZvciBlZDI1NTE5KVxuICAgICAgICAgICAgQSA9IFBvaW50LmZyb21IZXgocHVibGljS2V5LCB6aXAyMTUpO1xuICAgICAgICAgICAgUiA9IFBvaW50LmZyb21IZXgoc2lnLnNsaWNlKDAsIGxlbiksIHppcDIxNSk7XG4gICAgICAgICAgICBTQiA9IEcubXVsdGlwbHlVbnNhZmUocyk7IC8vIDAgPD0gcyA8IGwgaXMgZG9uZSBpbnNpZGVcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXppcDIxNSAmJiBBLmlzU21hbGxPcmRlcigpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBrID0gaGFzaERvbWFpblRvU2NhbGFyKGNvbnRleHQsIFIudG9SYXdCeXRlcygpLCBBLnRvUmF3Qnl0ZXMoKSwgbXNnKTtcbiAgICAgICAgY29uc3QgUmtBID0gUi5hZGQoQS5tdWx0aXBseVVuc2FmZShrKSk7XG4gICAgICAgIC8vIEV4dGVuZGVkIGdyb3VwIGVxdWF0aW9uXG4gICAgICAgIC8vIFs4XVtTXUIgPSBbOF1SICsgWzhdW2tdQSdcbiAgICAgICAgcmV0dXJuIFJrQS5zdWJ0cmFjdChTQikuY2xlYXJDb2ZhY3RvcigpLmVxdWFscyhQb2ludC5aRVJPKTtcbiAgICB9XG4gICAgRy5fc2V0V2luZG93U2l6ZSg4KTsgLy8gRW5hYmxlIHByZWNvbXB1dGVzLiBTbG93cyBkb3duIGZpcnN0IHB1YmxpY0tleSBjb21wdXRhdGlvbiBieSAyMG1zLlxuICAgIGNvbnN0IHV0aWxzID0ge1xuICAgICAgICBnZXRFeHRlbmRlZFB1YmxpY0tleSxcbiAgICAgICAgLy8gZWQyNTUxOSBwcml2YXRlIGtleXMgYXJlIHVuaWZvcm0gMzJiLiBObyBuZWVkIHRvIGNoZWNrIGZvciBtb2R1bG8gYmlhcywgbGlrZSBpbiBzZWNwMjU2azEuXG4gICAgICAgIHJhbmRvbVByaXZhdGVLZXk6ICgpID0+IHJhbmRvbUJ5dGVzKEZwLkJZVEVTKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdlJ3JlIGRvaW5nIHNjYWxhciBtdWx0aXBsaWNhdGlvbiAodXNlZCBpbiBnZXRQdWJsaWNLZXkgZXRjKSB3aXRoIHByZWNvbXB1dGVkIEJBU0VfUE9JTlRcbiAgICAgICAgICogdmFsdWVzLiBUaGlzIHNsb3dzIGRvd24gZmlyc3QgZ2V0UHVibGljS2V5KCkgYnkgbWlsbGlzZWNvbmRzIChzZWUgU3BlZWQgc2VjdGlvbiksXG4gICAgICAgICAqIGJ1dCBhbGxvd3MgdG8gc3BlZWQtdXAgc3Vic2VxdWVudCBnZXRQdWJsaWNLZXkoKSBjYWxscyB1cCB0byAyMHguXG4gICAgICAgICAqIEBwYXJhbSB3aW5kb3dTaXplIDIsIDQsIDgsIDE2XG4gICAgICAgICAqL1xuICAgICAgICBwcmVjb21wdXRlKHdpbmRvd1NpemUgPSA4LCBwb2ludCA9IFBvaW50LkJBU0UpIHtcbiAgICAgICAgICAgIHBvaW50Ll9zZXRXaW5kb3dTaXplKHdpbmRvd1NpemUpO1xuICAgICAgICAgICAgcG9pbnQubXVsdGlwbHkoQmlnSW50KDMpKTtcbiAgICAgICAgICAgIHJldHVybiBwb2ludDtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIENVUlZFLFxuICAgICAgICBnZXRQdWJsaWNLZXksXG4gICAgICAgIHNpZ24sXG4gICAgICAgIHZlcmlmeSxcbiAgICAgICAgRXh0ZW5kZWRQb2ludDogUG9pbnQsXG4gICAgICAgIHV0aWxzLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lZHdhcmRzLmpzLm1hcCIsIi8qKlxuICogZWQyNTUxOSBUd2lzdGVkIEVkd2FyZHMgY3VydmUgd2l0aCBmb2xsb3dpbmcgYWRkb25zOlxuICogLSBYMjU1MTkgRUNESFxuICogLSBSaXN0cmV0dG8gY29mYWN0b3IgZWxpbWluYXRpb25cbiAqIC0gRWxsaWdhdG9yIGhhc2gtdG8tZ3JvdXAgLyBwb2ludCBpbmRpc3Rpbmd1aXNoYWJpbGl0eVxuICogQG1vZHVsZVxuICovXG4vKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQgeyBzaGE1MTIgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3NoYTUxMic7XG5pbXBvcnQgeyBjb25jYXRCeXRlcywgcmFuZG9tQnl0ZXMsIHV0ZjhUb0J5dGVzIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy91dGlscyc7XG5pbXBvcnQgeyBwaXBwZW5nZXIgfSBmcm9tICcuL2Fic3RyYWN0L2N1cnZlLmpzJztcbmltcG9ydCB7IHR3aXN0ZWRFZHdhcmRzIH0gZnJvbSAnLi9hYnN0cmFjdC9lZHdhcmRzLmpzJztcbmltcG9ydCB7IGNyZWF0ZUhhc2hlciwgZXhwYW5kX21lc3NhZ2VfeG1kLCB9IGZyb20gJy4vYWJzdHJhY3QvaGFzaC10by1jdXJ2ZS5qcyc7XG5pbXBvcnQgeyBGaWVsZCwgRnBTcXJ0RXZlbiwgaXNOZWdhdGl2ZUxFLCBtb2QsIHBvdzIgfSBmcm9tICcuL2Fic3RyYWN0L21vZHVsYXIuanMnO1xuaW1wb3J0IHsgbW9udGdvbWVyeSB9IGZyb20gJy4vYWJzdHJhY3QvbW9udGdvbWVyeS5qcyc7XG5pbXBvcnQgeyBieXRlc1RvSGV4LCBieXRlc1RvTnVtYmVyTEUsIGVuc3VyZUJ5dGVzLCBlcXVhbEJ5dGVzLCBudW1iZXJUb0J5dGVzTEUsIH0gZnJvbSAnLi9hYnN0cmFjdC91dGlscy5qcyc7XG5jb25zdCBFRDI1NTE5X1AgPSBCaWdJbnQoJzU3ODk2MDQ0NjE4NjU4MDk3NzExNzg1NDkyNTA0MzQzOTUzOTI2NjM0OTkyMzMyODIwMjgyMDE5NzI4NzkyMDAzOTU2NTY0ODE5OTQ5Jyk7XG4vLyDiiJooLTEpIGFrYSDiiJooYSkgYWthIDJeKChwLTEpLzQpXG5jb25zdCBFRDI1NTE5X1NRUlRfTTEgPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KCcxOTY4MTE2MTM3NjcwNzUwNTk1NjgwNzA3OTMwNDk4ODU0MjAxNTQ0NjA2NjUxNTkyMzg5MDE2Mjc0NDAyMTA3MzEyMzgyOTc4NDc1MicpO1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBfMG4gPSBCaWdJbnQoMCksIF8xbiA9IEJpZ0ludCgxKSwgXzJuID0gQmlnSW50KDIpLCBfM24gPSBCaWdJbnQoMyk7XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IF81biA9IEJpZ0ludCg1KSwgXzhuID0gQmlnSW50KDgpO1xuZnVuY3Rpb24gZWQyNTUxOV9wb3dfMl8yNTJfMyh4KSB7XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgY29uc3QgXzEwbiA9IEJpZ0ludCgxMCksIF8yMG4gPSBCaWdJbnQoMjApLCBfNDBuID0gQmlnSW50KDQwKSwgXzgwbiA9IEJpZ0ludCg4MCk7XG4gICAgY29uc3QgUCA9IEVEMjU1MTlfUDtcbiAgICBjb25zdCB4MiA9ICh4ICogeCkgJSBQO1xuICAgIGNvbnN0IGIyID0gKHgyICogeCkgJSBQOyAvLyB4XjMsIDExXG4gICAgY29uc3QgYjQgPSAocG93MihiMiwgXzJuLCBQKSAqIGIyKSAlIFA7IC8vIHheMTUsIDExMTFcbiAgICBjb25zdCBiNSA9IChwb3cyKGI0LCBfMW4sIFApICogeCkgJSBQOyAvLyB4XjMxXG4gICAgY29uc3QgYjEwID0gKHBvdzIoYjUsIF81biwgUCkgKiBiNSkgJSBQO1xuICAgIGNvbnN0IGIyMCA9IChwb3cyKGIxMCwgXzEwbiwgUCkgKiBiMTApICUgUDtcbiAgICBjb25zdCBiNDAgPSAocG93MihiMjAsIF8yMG4sIFApICogYjIwKSAlIFA7XG4gICAgY29uc3QgYjgwID0gKHBvdzIoYjQwLCBfNDBuLCBQKSAqIGI0MCkgJSBQO1xuICAgIGNvbnN0IGIxNjAgPSAocG93MihiODAsIF84MG4sIFApICogYjgwKSAlIFA7XG4gICAgY29uc3QgYjI0MCA9IChwb3cyKGIxNjAsIF84MG4sIFApICogYjgwKSAlIFA7XG4gICAgY29uc3QgYjI1MCA9IChwb3cyKGIyNDAsIF8xMG4sIFApICogYjEwKSAlIFA7XG4gICAgY29uc3QgcG93X3BfNV84ID0gKHBvdzIoYjI1MCwgXzJuLCBQKSAqIHgpICUgUDtcbiAgICAvLyBeIFRvIHBvdyB0byAocCszKS84LCBtdWx0aXBseSBpdCBieSB4LlxuICAgIHJldHVybiB7IHBvd19wXzVfOCwgYjIgfTtcbn1cbmZ1bmN0aW9uIGFkanVzdFNjYWxhckJ5dGVzKGJ5dGVzKSB7XG4gICAgLy8gU2VjdGlvbiA1OiBGb3IgWDI1NTE5LCBpbiBvcmRlciB0byBkZWNvZGUgMzIgcmFuZG9tIGJ5dGVzIGFzIGFuIGludGVnZXIgc2NhbGFyLFxuICAgIC8vIHNldCB0aGUgdGhyZWUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0cyBvZiB0aGUgZmlyc3QgYnl0ZVxuICAgIGJ5dGVzWzBdICY9IDI0ODsgLy8gMGIxMTExXzEwMDBcbiAgICAvLyBhbmQgdGhlIG1vc3Qgc2lnbmlmaWNhbnQgYml0IG9mIHRoZSBsYXN0IHRvIHplcm8sXG4gICAgYnl0ZXNbMzFdICY9IDEyNzsgLy8gMGIwMTExXzExMTFcbiAgICAvLyBzZXQgdGhlIHNlY29uZCBtb3N0IHNpZ25pZmljYW50IGJpdCBvZiB0aGUgbGFzdCBieXRlIHRvIDFcbiAgICBieXRlc1szMV0gfD0gNjQ7IC8vIDBiMDEwMF8wMDAwXG4gICAgcmV0dXJuIGJ5dGVzO1xufVxuLy8gc3FydCh1L3YpXG5mdW5jdGlvbiB1dlJhdGlvKHUsIHYpIHtcbiAgICBjb25zdCBQID0gRUQyNTUxOV9QO1xuICAgIGNvbnN0IHYzID0gbW9kKHYgKiB2ICogdiwgUCk7IC8vIHbCs1xuICAgIGNvbnN0IHY3ID0gbW9kKHYzICogdjMgKiB2LCBQKTsgLy8gduKBt1xuICAgIC8vIChwKzMpLzggYW5kIChwLTUpLzhcbiAgICBjb25zdCBwb3cgPSBlZDI1NTE5X3Bvd18yXzI1Ml8zKHUgKiB2NykucG93X3BfNV84O1xuICAgIGxldCB4ID0gbW9kKHUgKiB2MyAqIHBvdywgUCk7IC8vICh1dsKzKSh1duKBtyleKHAtNSkvOFxuICAgIGNvbnN0IHZ4MiA9IG1vZCh2ICogeCAqIHgsIFApOyAvLyB2eMKyXG4gICAgY29uc3Qgcm9vdDEgPSB4OyAvLyBGaXJzdCByb290IGNhbmRpZGF0ZVxuICAgIGNvbnN0IHJvb3QyID0gbW9kKHggKiBFRDI1NTE5X1NRUlRfTTEsIFApOyAvLyBTZWNvbmQgcm9vdCBjYW5kaWRhdGVcbiAgICBjb25zdCB1c2VSb290MSA9IHZ4MiA9PT0gdTsgLy8gSWYgdnjCsiA9IHUgKG1vZCBwKSwgeCBpcyBhIHNxdWFyZSByb290XG4gICAgY29uc3QgdXNlUm9vdDIgPSB2eDIgPT09IG1vZCgtdSwgUCk7IC8vIElmIHZ4wrIgPSAtdSwgc2V0IHggPC0tIHggKiAyXigocC0xKS80KVxuICAgIGNvbnN0IG5vUm9vdCA9IHZ4MiA9PT0gbW9kKC11ICogRUQyNTUxOV9TUVJUX00xLCBQKTsgLy8gVGhlcmUgaXMgbm8gdmFsaWQgcm9vdCwgdnjCsiA9IC114oiaKC0xKVxuICAgIGlmICh1c2VSb290MSlcbiAgICAgICAgeCA9IHJvb3QxO1xuICAgIGlmICh1c2VSb290MiB8fCBub1Jvb3QpXG4gICAgICAgIHggPSByb290MjsgLy8gV2UgcmV0dXJuIHJvb3QyIGFueXdheSwgZm9yIGNvbnN0LXRpbWVcbiAgICBpZiAoaXNOZWdhdGl2ZUxFKHgsIFApKVxuICAgICAgICB4ID0gbW9kKC14LCBQKTtcbiAgICByZXR1cm4geyBpc1ZhbGlkOiB1c2VSb290MSB8fCB1c2VSb290MiwgdmFsdWU6IHggfTtcbn1cbi8vIEp1c3QgaW4gY2FzZVxuZXhwb3J0IGNvbnN0IEVEMjU1MTlfVE9SU0lPTl9TVUJHUk9VUCA9IFtcbiAgICAnMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJ2M3MTc2YTcwM2Q0ZGQ4NGZiYTNjMGI3NjBkMTA2NzBmMmEyMDUzZmEyYzM5Y2NjNjRlYzdmZDc3OTJhYzAzN2EnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwJyxcbiAgICAnMjZlODk1OGZjMmIyMjdiMDQ1YzNmNDg5ZjJlZjk4ZjBkNWRmYWMwNWQzYzYzMzM5YjEzODAyODg2ZDUzZmMwNScsXG4gICAgJ2VjZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmN2YnLFxuICAgICcyNmU4OTU4ZmMyYjIyN2IwNDVjM2Y0ODlmMmVmOThmMGQ1ZGZhYzA1ZDNjNjMzMzliMTM4MDI4ODZkNTNmYzg1JyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJ2M3MTc2YTcwM2Q0ZGQ4NGZiYTNjMGI3NjBkMTA2NzBmMmEyMDUzZmEyYzM5Y2NjNjRlYzdmZDc3OTJhYzAzZmEnLFxuXTtcbmNvbnN0IEZwID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBGaWVsZChFRDI1NTE5X1AsIHVuZGVmaW5lZCwgdHJ1ZSkpKCk7XG5jb25zdCBlZDI1NTE5RGVmYXVsdHMgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+ICh7XG4gICAgLy8gUGFyYW06IGFcbiAgICBhOiBCaWdJbnQoLTEpLCAvLyBGcC5jcmVhdGUoLTEpIGlzIHByb3Blcjsgb3VyIHdheSBzdGlsbCB3b3JrcyBhbmQgaXMgZmFzdGVyXG4gICAgLy8gZCBpcyBlcXVhbCB0byAtMTIxNjY1LzEyMTY2NiBvdmVyIGZpbml0ZSBmaWVsZC5cbiAgICAvLyBOZWdhdGl2ZSBudW1iZXIgaXMgUCAtIG51bWJlciwgYW5kIGRpdmlzaW9uIGlzIGludmVydChudW1iZXIsIFApXG4gICAgZDogQmlnSW50KCczNzA5NTcwNTkzNDY2OTQzOTM0MzEzODA4MzUwODc1NDU2NTE4OTU0MjExMzg3OTg0MzIxOTAxNjM4ODc4NTUzMzA4NTk0MDI4MzU1NScpLFxuICAgIC8vIEZpbml0ZSBmaWVsZCDwnZS9cCBvdmVyIHdoaWNoIHdlJ2xsIGRvIGNhbGN1bGF0aW9uczsgMm4qKjI1NW4gLSAxOW5cbiAgICBGcCxcbiAgICAvLyBTdWJncm91cCBvcmRlcjogaG93IG1hbnkgcG9pbnRzIGN1cnZlIGhhc1xuICAgIC8vIDJuKioyNTJuICsgMjc3NDIzMTc3NzczNzIzNTM1MzU4NTE5Mzc3OTA4ODM2NDg0OTNuO1xuICAgIG46IEJpZ0ludCgnNzIzNzAwNTU3NzMzMjI2MjIxMzk3MzE4NjU2MzA0Mjk5NDI0MDg1NzExNjM1OTM3OTkwNzYwNjAwMTk1MDkzODI4NTQ1NDI1MDk4OScpLFxuICAgIC8vIENvZmFjdG9yXG4gICAgaDogXzhuLFxuICAgIC8vIEJhc2UgcG9pbnQgKHgsIHkpIGFrYSBnZW5lcmF0b3IgcG9pbnRcbiAgICBHeDogQmlnSW50KCcxNTExMjIyMTM0OTUzNTQwMDc3MjUwMTE1MTQwOTU4ODUzMTUxMTQ1NDAxMjY5MzA0MTg1NzIwNjA0NjExMzI4Mzk0OTg0Nzc2MjIwMicpLFxuICAgIEd5OiBCaWdJbnQoJzQ2MzE2ODM1Njk0OTI2NDc4MTY5NDI4Mzk0MDAzNDc1MTYzMTQxMzA3OTkzODY2MjU2MjI1NjE1NzgzMDMzNjAzMTY1MjUxODU1OTYwJyksXG4gICAgaGFzaDogc2hhNTEyLFxuICAgIHJhbmRvbUJ5dGVzLFxuICAgIGFkanVzdFNjYWxhckJ5dGVzLFxuICAgIC8vIGRvbTJcbiAgICAvLyBSYXRpbyBvZiB1IHRvIHYuIEFsbG93cyB1cyB0byBjb21iaW5lIGludmVyc2lvbiBhbmQgc3F1YXJlIHJvb3QuIFVzZXMgYWxnbyBmcm9tIFJGQzgwMzIgNS4xLjMuXG4gICAgLy8gQ29uc3RhbnQtdGltZSwgdS/iiJp2XG4gICAgdXZSYXRpbyxcbn0pKSgpO1xuLyoqXG4gKiBlZDI1NTE5IGN1cnZlIHdpdGggRWREU0Egc2lnbmF0dXJlcy5cbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBlZDI1NTE5IH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9lZDI1NTE5JztcbiAqIGNvbnN0IHByaXYgPSBlZDI1NTE5LnV0aWxzLnJhbmRvbVByaXZhdGVLZXkoKTtcbiAqIGNvbnN0IHB1YiA9IGVkMjU1MTkuZ2V0UHVibGljS2V5KHByaXYpO1xuICogY29uc3QgbXNnID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKCdoZWxsbycpO1xuICogY29uc3Qgc2lnID0gZWQyNTUxOS5zaWduKG1zZywgcHJpdik7XG4gKiBlZDI1NTE5LnZlcmlmeShzaWcsIG1zZywgcHViKTsgLy8gRGVmYXVsdCBtb2RlOiBmb2xsb3dzIFpJUDIxNVxuICogZWQyNTUxOS52ZXJpZnkoc2lnLCBtc2csIHB1YiwgeyB6aXAyMTU6IGZhbHNlIH0pOyAvLyBSRkM4MDMyIC8gRklQUyAxODYtNVxuICovXG5leHBvcnQgY29uc3QgZWQyNTUxOSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gdHdpc3RlZEVkd2FyZHMoZWQyNTUxOURlZmF1bHRzKSkoKTtcbmZ1bmN0aW9uIGVkMjU1MTlfZG9tYWluKGRhdGEsIGN0eCwgcGhmbGFnKSB7XG4gICAgaWYgKGN0eC5sZW5ndGggPiAyNTUpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29udGV4dCBpcyB0b28gYmlnJyk7XG4gICAgcmV0dXJuIGNvbmNhdEJ5dGVzKHV0ZjhUb0J5dGVzKCdTaWdFZDI1NTE5IG5vIEVkMjU1MTkgY29sbGlzaW9ucycpLCBuZXcgVWludDhBcnJheShbcGhmbGFnID8gMSA6IDAsIGN0eC5sZW5ndGhdKSwgY3R4LCBkYXRhKTtcbn1cbmV4cG9ydCBjb25zdCBlZDI1NTE5Y3R4ID0gLyogQF9fUFVSRV9fICovICgoKSA9PiB0d2lzdGVkRWR3YXJkcyh7XG4gICAgLi4uZWQyNTUxOURlZmF1bHRzLFxuICAgIGRvbWFpbjogZWQyNTUxOV9kb21haW4sXG59KSkoKTtcbmV4cG9ydCBjb25zdCBlZDI1NTE5cGggPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IHR3aXN0ZWRFZHdhcmRzKE9iamVjdC5hc3NpZ24oe30sIGVkMjU1MTlEZWZhdWx0cywge1xuICAgIGRvbWFpbjogZWQyNTUxOV9kb21haW4sXG4gICAgcHJlaGFzaDogc2hhNTEyLFxufSkpKSgpO1xuLyoqXG4gKiBFQ0RIIHVzaW5nIGN1cnZlMjU1MTkgYWthIHgyNTUxOS5cbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyB4MjU1MTkgfSBmcm9tICdAbm9ibGUvY3VydmVzL2VkMjU1MTknO1xuICogY29uc3QgcHJpdiA9ICdhNTQ2ZTM2YmYwNTI3YzlkM2IxNjE1NGI4MjQ2NWVkZDYyMTQ0YzBhYzFmYzVhMTg1MDZhMjI0NGJhNDQ5YWM0JztcbiAqIGNvbnN0IHB1YiA9ICdlNmRiNjg2NzU4MzAzMGRiMzU5NGMxYTQyNGIxNWY3YzcyNjYyNGVjMjZiMzM1M2IxMGE5MDNhNmQwYWIxYzRjJztcbiAqIHgyNTUxOS5nZXRTaGFyZWRTZWNyZXQocHJpdiwgcHViKSA9PT0geDI1NTE5LnNjYWxhck11bHQocHJpdiwgcHViKTsgLy8gYWxpYXNlc1xuICogeDI1NTE5LmdldFB1YmxpY0tleShwcml2KSA9PT0geDI1NTE5LnNjYWxhck11bHRCYXNlKHByaXYpO1xuICogeDI1NTE5LmdldFB1YmxpY0tleSh4MjU1MTkudXRpbHMucmFuZG9tUHJpdmF0ZUtleSgpKTtcbiAqL1xuZXhwb3J0IGNvbnN0IHgyNTUxOSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gbW9udGdvbWVyeSh7XG4gICAgUDogRUQyNTUxOV9QLFxuICAgIGE6IEJpZ0ludCg0ODY2NjIpLFxuICAgIG1vbnRnb21lcnlCaXRzOiAyNTUsIC8vIG4gaXMgMjUzIGJpdHNcbiAgICBuQnl0ZUxlbmd0aDogMzIsXG4gICAgR3U6IEJpZ0ludCg5KSxcbiAgICBwb3dQbWludXMyOiAoeCkgPT4ge1xuICAgICAgICBjb25zdCBQID0gRUQyNTUxOV9QO1xuICAgICAgICAvLyB4XihwLTIpIGFrYSB4XigyXjI1NS0yMSlcbiAgICAgICAgY29uc3QgeyBwb3dfcF81XzgsIGIyIH0gPSBlZDI1NTE5X3Bvd18yXzI1Ml8zKHgpO1xuICAgICAgICByZXR1cm4gbW9kKHBvdzIocG93X3BfNV84LCBfM24sIFApICogYjIsIFApO1xuICAgIH0sXG4gICAgYWRqdXN0U2NhbGFyQnl0ZXMsXG4gICAgcmFuZG9tQnl0ZXMsXG59KSkoKTtcbi8qKlxuICogQ29udmVydHMgZWQyNTUxOSBwdWJsaWMga2V5IHRvIHgyNTUxOSBwdWJsaWMga2V5LiBVc2VzIGZvcm11bGE6XG4gKiAqIGAodSwgdikgPSAoKDEreSkvKDEteSksIHNxcnQoLTQ4NjY2NCkqdS94KWBcbiAqICogYCh4LCB5KSA9IChzcXJ0KC00ODY2NjQpKnUvdiwgKHUtMSkvKHUrMSkpYFxuICogQGV4YW1wbGVcbiAqICAgY29uc3Qgc29tZW9uZXNQdWIgPSBlZDI1NTE5LmdldFB1YmxpY0tleShlZDI1NTE5LnV0aWxzLnJhbmRvbVByaXZhdGVLZXkoKSk7XG4gKiAgIGNvbnN0IGFQcml2ID0geDI1NTE5LnV0aWxzLnJhbmRvbVByaXZhdGVLZXkoKTtcbiAqICAgeDI1NTE5LmdldFNoYXJlZFNlY3JldChhUHJpdiwgZWR3YXJkc1RvTW9udGdvbWVyeVB1Yihzb21lb25lc1B1YikpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZHdhcmRzVG9Nb250Z29tZXJ5UHViKGVkd2FyZHNQdWIpIHtcbiAgICBjb25zdCB7IHkgfSA9IGVkMjU1MTkuRXh0ZW5kZWRQb2ludC5mcm9tSGV4KGVkd2FyZHNQdWIpO1xuICAgIGNvbnN0IF8xbiA9IEJpZ0ludCgxKTtcbiAgICByZXR1cm4gRnAudG9CeXRlcyhGcC5jcmVhdGUoKF8xbiArIHkpICogRnAuaW52KF8xbiAtIHkpKSk7XG59XG5leHBvcnQgY29uc3QgZWR3YXJkc1RvTW9udGdvbWVyeSA9IGVkd2FyZHNUb01vbnRnb21lcnlQdWI7IC8vIGRlcHJlY2F0ZWRcbi8qKlxuICogQ29udmVydHMgZWQyNTUxOSBzZWNyZXQga2V5IHRvIHgyNTUxOSBzZWNyZXQga2V5LlxuICogQGV4YW1wbGVcbiAqICAgY29uc3Qgc29tZW9uZXNQdWIgPSB4MjU1MTkuZ2V0UHVibGljS2V5KHgyNTUxOS51dGlscy5yYW5kb21Qcml2YXRlS2V5KCkpO1xuICogICBjb25zdCBhUHJpdiA9IGVkMjU1MTkudXRpbHMucmFuZG9tUHJpdmF0ZUtleSgpO1xuICogICB4MjU1MTkuZ2V0U2hhcmVkU2VjcmV0KGVkd2FyZHNUb01vbnRnb21lcnlQcml2KGFQcml2KSwgc29tZW9uZXNQdWIpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZHdhcmRzVG9Nb250Z29tZXJ5UHJpdihlZHdhcmRzUHJpdikge1xuICAgIGNvbnN0IGhhc2hlZCA9IGVkMjU1MTlEZWZhdWx0cy5oYXNoKGVkd2FyZHNQcml2LnN1YmFycmF5KDAsIDMyKSk7XG4gICAgcmV0dXJuIGVkMjU1MTlEZWZhdWx0cy5hZGp1c3RTY2FsYXJCeXRlcyhoYXNoZWQpLnN1YmFycmF5KDAsIDMyKTtcbn1cbi8vIEhhc2ggVG8gQ3VydmUgRWxsaWdhdG9yMiBNYXAgKE5PVEU6IGRpZmZlcmVudCBmcm9tIHJpc3RyZXR0bzI1NSBlbGxpZ2F0b3IpXG4vLyBOT1RFOiB2ZXJ5IGltcG9ydGFudCBwYXJ0IGlzIHVzYWdlIG9mIEZwU3FydEV2ZW4gZm9yIEVMTDJfQzFfRURXQVJEUywgc2luY2Vcbi8vIFNhZ2VNYXRoIHJldHVybnMgZGlmZmVyZW50IHJvb3QgZmlyc3QgYW5kIGV2ZXJ5dGhpbmcgZmFsbHMgYXBhcnRcbmNvbnN0IEVMTDJfQzEgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IChGcC5PUkRFUiArIF8zbikgLyBfOG4pKCk7IC8vIDEuIGMxID0gKHEgKyAzKSAvIDggICAgICAgIyBJbnRlZ2VyIGFyaXRobWV0aWNcbmNvbnN0IEVMTDJfQzIgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IEZwLnBvdyhfMm4sIEVMTDJfQzEpKSgpOyAvLyAyLiBjMiA9IDJeYzFcbmNvbnN0IEVMTDJfQzMgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IEZwLnNxcnQoRnAubmVnKEZwLk9ORSkpKSgpOyAvLyAzLiBjMyA9IHNxcnQoLTEpXG4vLyBwcmV0dGllci1pZ25vcmVcbmZ1bmN0aW9uIG1hcF90b19jdXJ2ZV9lbGxpZ2F0b3IyX2N1cnZlMjU1MTkodSkge1xuICAgIGNvbnN0IEVMTDJfQzQgPSAoRnAuT1JERVIgLSBfNW4pIC8gXzhuOyAvLyA0LiBjNCA9IChxIC0gNSkgLyA4ICAgICAgICMgSW50ZWdlciBhcml0aG1ldGljXG4gICAgY29uc3QgRUxMMl9KID0gQmlnSW50KDQ4NjY2Mik7XG4gICAgbGV0IHR2MSA9IEZwLnNxcih1KTsgLy8gIDEuICB0djEgPSB1XjJcbiAgICB0djEgPSBGcC5tdWwodHYxLCBfMm4pOyAvLyAgMi4gIHR2MSA9IDIgKiB0djFcbiAgICBsZXQgeGQgPSBGcC5hZGQodHYxLCBGcC5PTkUpOyAvLyAgMy4gICB4ZCA9IHR2MSArIDEgICAgICAgICAjIE5vbnplcm86IC0xIGlzIHNxdWFyZSAobW9kIHApLCB0djEgaXMgbm90XG4gICAgbGV0IHgxbiA9IEZwLm5lZyhFTEwyX0opOyAvLyAgNC4gIHgxbiA9IC1KICAgICAgICAgICAgICAjIHgxID0geDFuIC8geGQgPSAtSiAvICgxICsgMiAqIHVeMilcbiAgICBsZXQgdHYyID0gRnAuc3FyKHhkKTsgLy8gIDUuICB0djIgPSB4ZF4yXG4gICAgbGV0IGd4ZCA9IEZwLm11bCh0djIsIHhkKTsgLy8gIDYuICBneGQgPSB0djIgKiB4ZCAgICAgICAgIyBneGQgPSB4ZF4zXG4gICAgbGV0IGd4MSA9IEZwLm11bCh0djEsIEVMTDJfSik7IC8vICA3LiAgZ3gxID0gSiAqIHR2MSAgICAgICAgICMgeDFuICsgSiAqIHhkXG4gICAgZ3gxID0gRnAubXVsKGd4MSwgeDFuKTsgLy8gIDguICBneDEgPSBneDEgKiB4MW4gICAgICAgIyB4MW5eMiArIEogKiB4MW4gKiB4ZFxuICAgIGd4MSA9IEZwLmFkZChneDEsIHR2Mik7IC8vICA5LiAgZ3gxID0gZ3gxICsgdHYyICAgICAgICMgeDFuXjIgKyBKICogeDFuICogeGQgKyB4ZF4yXG4gICAgZ3gxID0gRnAubXVsKGd4MSwgeDFuKTsgLy8gIDEwLiBneDEgPSBneDEgKiB4MW4gICAgICAgIyB4MW5eMyArIEogKiB4MW5eMiAqIHhkICsgeDFuICogeGReMlxuICAgIGxldCB0djMgPSBGcC5zcXIoZ3hkKTsgLy8gIDExLiB0djMgPSBneGReMlxuICAgIHR2MiA9IEZwLnNxcih0djMpOyAvLyAgMTIuIHR2MiA9IHR2M14yICAgICAgICAgICAjIGd4ZF40XG4gICAgdHYzID0gRnAubXVsKHR2MywgZ3hkKTsgLy8gIDEzLiB0djMgPSB0djMgKiBneGQgICAgICAgIyBneGReM1xuICAgIHR2MyA9IEZwLm11bCh0djMsIGd4MSk7IC8vICAxNC4gdHYzID0gdHYzICogZ3gxICAgICAgICMgZ3gxICogZ3hkXjNcbiAgICB0djIgPSBGcC5tdWwodHYyLCB0djMpOyAvLyAgMTUuIHR2MiA9IHR2MiAqIHR2MyAgICAgICAjIGd4MSAqIGd4ZF43XG4gICAgbGV0IHkxMSA9IEZwLnBvdyh0djIsIEVMTDJfQzQpOyAvLyAgMTYuIHkxMSA9IHR2Ml5jNCAgICAgICAgIyAoZ3gxICogZ3hkXjcpXigocCAtIDUpIC8gOClcbiAgICB5MTEgPSBGcC5tdWwoeTExLCB0djMpOyAvLyAgMTcuIHkxMSA9IHkxMSAqIHR2MyAgICAgICAjIGd4MSpneGReMyooZ3gxKmd4ZF43KV4oKHAtNSkvOClcbiAgICBsZXQgeTEyID0gRnAubXVsKHkxMSwgRUxMMl9DMyk7IC8vICAxOC4geTEyID0geTExICogYzNcbiAgICB0djIgPSBGcC5zcXIoeTExKTsgLy8gIDE5LiB0djIgPSB5MTFeMlxuICAgIHR2MiA9IEZwLm11bCh0djIsIGd4ZCk7IC8vICAyMC4gdHYyID0gdHYyICogZ3hkXG4gICAgbGV0IGUxID0gRnAuZXFsKHR2MiwgZ3gxKTsgLy8gIDIxLiAgZTEgPSB0djIgPT0gZ3gxXG4gICAgbGV0IHkxID0gRnAuY21vdih5MTIsIHkxMSwgZTEpOyAvLyAgMjIuICB5MSA9IENNT1YoeTEyLCB5MTEsIGUxKSAgIyBJZiBnKHgxKSBpcyBzcXVhcmUsIHRoaXMgaXMgaXRzIHNxcnRcbiAgICBsZXQgeDJuID0gRnAubXVsKHgxbiwgdHYxKTsgLy8gIDIzLiB4Mm4gPSB4MW4gKiB0djEgICAgICAgIyB4MiA9IHgybiAvIHhkID0gMiAqIHVeMiAqIHgxbiAvIHhkXG4gICAgbGV0IHkyMSA9IEZwLm11bCh5MTEsIHUpOyAvLyAgMjQuIHkyMSA9IHkxMSAqIHVcbiAgICB5MjEgPSBGcC5tdWwoeTIxLCBFTEwyX0MyKTsgLy8gIDI1LiB5MjEgPSB5MjEgKiBjMlxuICAgIGxldCB5MjIgPSBGcC5tdWwoeTIxLCBFTEwyX0MzKTsgLy8gIDI2LiB5MjIgPSB5MjEgKiBjM1xuICAgIGxldCBneDIgPSBGcC5tdWwoZ3gxLCB0djEpOyAvLyAgMjcuIGd4MiA9IGd4MSAqIHR2MSAgICAgICAjIGcoeDIpID0gZ3gyIC8gZ3hkID0gMiAqIHVeMiAqIGcoeDEpXG4gICAgdHYyID0gRnAuc3FyKHkyMSk7IC8vICAyOC4gdHYyID0geTIxXjJcbiAgICB0djIgPSBGcC5tdWwodHYyLCBneGQpOyAvLyAgMjkuIHR2MiA9IHR2MiAqIGd4ZFxuICAgIGxldCBlMiA9IEZwLmVxbCh0djIsIGd4Mik7IC8vICAzMC4gIGUyID0gdHYyID09IGd4MlxuICAgIGxldCB5MiA9IEZwLmNtb3YoeTIyLCB5MjEsIGUyKTsgLy8gIDMxLiAgeTIgPSBDTU9WKHkyMiwgeTIxLCBlMikgICMgSWYgZyh4MikgaXMgc3F1YXJlLCB0aGlzIGlzIGl0cyBzcXJ0XG4gICAgdHYyID0gRnAuc3FyKHkxKTsgLy8gIDMyLiB0djIgPSB5MV4yXG4gICAgdHYyID0gRnAubXVsKHR2MiwgZ3hkKTsgLy8gIDMzLiB0djIgPSB0djIgKiBneGRcbiAgICBsZXQgZTMgPSBGcC5lcWwodHYyLCBneDEpOyAvLyAgMzQuICBlMyA9IHR2MiA9PSBneDFcbiAgICBsZXQgeG4gPSBGcC5jbW92KHgybiwgeDFuLCBlMyk7IC8vICAzNS4gIHhuID0gQ01PVih4Mm4sIHgxbiwgZTMpICAjIElmIGUzLCB4ID0geDEsIGVsc2UgeCA9IHgyXG4gICAgbGV0IHkgPSBGcC5jbW92KHkyLCB5MSwgZTMpOyAvLyAgMzYuICAgeSA9IENNT1YoeTIsIHkxLCBlMykgICAgIyBJZiBlMywgeSA9IHkxLCBlbHNlIHkgPSB5MlxuICAgIGxldCBlNCA9IEZwLmlzT2RkKHkpOyAvLyAgMzcuICBlNCA9IHNnbjAoeSkgPT0gMSAgICAgICAgIyBGaXggc2lnbiBvZiB5XG4gICAgeSA9IEZwLmNtb3YoeSwgRnAubmVnKHkpLCBlMyAhPT0gZTQpOyAvLyAgMzguICAgeSA9IENNT1YoeSwgLXksIGUzIFhPUiBlNClcbiAgICByZXR1cm4geyB4TW46IHhuLCB4TWQ6IHhkLCB5TW46IHksIHlNZDogXzFuIH07IC8vICAzOS4gcmV0dXJuICh4biwgeGQsIHksIDEpXG59XG5jb25zdCBFTEwyX0MxX0VEV0FSRFMgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IEZwU3FydEV2ZW4oRnAsIEZwLm5lZyhCaWdJbnQoNDg2NjY0KSkpKSgpOyAvLyBzZ24wKGMxKSBNVVNUIGVxdWFsIDBcbmZ1bmN0aW9uIG1hcF90b19jdXJ2ZV9lbGxpZ2F0b3IyX2Vkd2FyZHMyNTUxOSh1KSB7XG4gICAgY29uc3QgeyB4TW4sIHhNZCwgeU1uLCB5TWQgfSA9IG1hcF90b19jdXJ2ZV9lbGxpZ2F0b3IyX2N1cnZlMjU1MTkodSk7IC8vICAxLiAgKHhNbiwgeE1kLCB5TW4sIHlNZCkgPVxuICAgIC8vIG1hcF90b19jdXJ2ZV9lbGxpZ2F0b3IyX2N1cnZlMjU1MTkodSlcbiAgICBsZXQgeG4gPSBGcC5tdWwoeE1uLCB5TWQpOyAvLyAgMi4gIHhuID0geE1uICogeU1kXG4gICAgeG4gPSBGcC5tdWwoeG4sIEVMTDJfQzFfRURXQVJEUyk7IC8vICAzLiAgeG4gPSB4biAqIGMxXG4gICAgbGV0IHhkID0gRnAubXVsKHhNZCwgeU1uKTsgLy8gIDQuICB4ZCA9IHhNZCAqIHlNbiAgICAjIHhuIC8geGQgPSBjMSAqIHhNIC8geU1cbiAgICBsZXQgeW4gPSBGcC5zdWIoeE1uLCB4TWQpOyAvLyAgNS4gIHluID0geE1uIC0geE1kXG4gICAgbGV0IHlkID0gRnAuYWRkKHhNbiwgeE1kKTsgLy8gIDYuICB5ZCA9IHhNbiArIHhNZCAgICAjIChuIC8gZCAtIDEpIC8gKG4gLyBkICsgMSkgPSAobiAtIGQpIC8gKG4gKyBkKVxuICAgIGxldCB0djEgPSBGcC5tdWwoeGQsIHlkKTsgLy8gIDcuIHR2MSA9IHhkICogeWRcbiAgICBsZXQgZSA9IEZwLmVxbCh0djEsIEZwLlpFUk8pOyAvLyAgOC4gICBlID0gdHYxID09IDBcbiAgICB4biA9IEZwLmNtb3YoeG4sIEZwLlpFUk8sIGUpOyAvLyAgOS4gIHhuID0gQ01PVih4biwgMCwgZSlcbiAgICB4ZCA9IEZwLmNtb3YoeGQsIEZwLk9ORSwgZSk7IC8vICAxMC4geGQgPSBDTU9WKHhkLCAxLCBlKVxuICAgIHluID0gRnAuY21vdih5biwgRnAuT05FLCBlKTsgLy8gIDExLiB5biA9IENNT1YoeW4sIDEsIGUpXG4gICAgeWQgPSBGcC5jbW92KHlkLCBGcC5PTkUsIGUpOyAvLyAgMTIuIHlkID0gQ01PVih5ZCwgMSwgZSlcbiAgICBjb25zdCBpbnYgPSBGcC5pbnZlcnRCYXRjaChbeGQsIHlkXSk7IC8vIGJhdGNoIGRpdmlzaW9uXG4gICAgcmV0dXJuIHsgeDogRnAubXVsKHhuLCBpbnZbMF0pLCB5OiBGcC5tdWwoeW4sIGludlsxXSkgfTsgLy8gIDEzLiByZXR1cm4gKHhuLCB4ZCwgeW4sIHlkKVxufVxuY29uc3QgaHRmID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBjcmVhdGVIYXNoZXIoZWQyNTUxOS5FeHRlbmRlZFBvaW50LCAoc2NhbGFycykgPT4gbWFwX3RvX2N1cnZlX2VsbGlnYXRvcjJfZWR3YXJkczI1NTE5KHNjYWxhcnNbMF0pLCB7XG4gICAgRFNUOiAnZWR3YXJkczI1NTE5X1hNRDpTSEEtNTEyX0VMTDJfUk9fJyxcbiAgICBlbmNvZGVEU1Q6ICdlZHdhcmRzMjU1MTlfWE1EOlNIQS01MTJfRUxMMl9OVV8nLFxuICAgIHA6IEZwLk9SREVSLFxuICAgIG06IDEsXG4gICAgazogMTI4LFxuICAgIGV4cGFuZDogJ3htZCcsXG4gICAgaGFzaDogc2hhNTEyLFxufSkpKCk7XG5leHBvcnQgY29uc3QgaGFzaFRvQ3VydmUgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IGh0Zi5oYXNoVG9DdXJ2ZSkoKTtcbmV4cG9ydCBjb25zdCBlbmNvZGVUb0N1cnZlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBodGYuZW5jb2RlVG9DdXJ2ZSkoKTtcbmZ1bmN0aW9uIGFzc2VydFJzdFBvaW50KG90aGVyKSB7XG4gICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBSaXN0UG9pbnQpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jpc3RyZXR0b1BvaW50IGV4cGVjdGVkJyk7XG59XG4vLyDiiJooLTEpIGFrYSDiiJooYSkgYWthIDJeKChwLTEpLzQpXG5jb25zdCBTUVJUX00xID0gRUQyNTUxOV9TUVJUX00xO1xuLy8g4oiaKGFkIC0gMSlcbmNvbnN0IFNRUlRfQURfTUlOVVNfT05FID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgnMjUwNjMwNjg5NTMzODQ2MjM0NzQxMTE0MTQxNTg3MDIxNTI3MDEyNDQ1MzE1MDI0OTI2NTY0NjAwNzkyMTA0ODI2MTA0MzA3NTAyMzUnKTtcbi8vIDEgLyDiiJooYS1kKVxuY29uc3QgSU5WU1FSVF9BX01JTlVTX0QgPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KCc1NDQ2OTMwNzAwODkwOTMxNjkyMDk5NTgxMzg2ODc0NTE0MTYwNTM5MzU5NzI5MjkyNzQ1NjkyMTIwNTMxMjg5NjMxMTcyMTAxNzU3OCcpO1xuLy8gMS1kwrJcbmNvbnN0IE9ORV9NSU5VU19EX1NRID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgnMTE1OTg0MzAyMTY2ODc3OTg3OTE5Mzc3NTUyMTg1NTU4NjY0NzkzNzM1Nzc1OTcxNTQxNzY1NDQzOTg3OTcyMDg3NjExMTgwNjgzOCcpO1xuLy8gKGQtMSnCslxuY29uc3QgRF9NSU5VU19PTkVfU1EgPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KCc0MDQ0MDgzNDM0NjMwODUzNjg1ODEwMTA0MjQ2OTMyMzE5MDgyNjI0ODM5OTE0NjIzODcwODM1MjI0MDEzMzIyMDg2NTEzNzI2NTk1MicpO1xuLy8gQ2FsY3VsYXRlcyAxL+KImihudW1iZXIpXG5jb25zdCBpbnZlcnRTcXJ0ID0gKG51bWJlcikgPT4gdXZSYXRpbyhfMW4sIG51bWJlcik7XG5jb25zdCBNQVhfMjU1QiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoJzB4N2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZicpO1xuY29uc3QgYnl0ZXMyNTVUb051bWJlckxFID0gKGJ5dGVzKSA9PiBlZDI1NTE5LkNVUlZFLkZwLmNyZWF0ZShieXRlc1RvTnVtYmVyTEUoYnl0ZXMpICYgTUFYXzI1NUIpO1xuLy8gQ29tcHV0ZXMgRWxsaWdhdG9yIG1hcCBmb3IgUmlzdHJldHRvXG4vLyBodHRwczovL3Jpc3RyZXR0by5ncm91cC9mb3JtdWxhcy9lbGxpZ2F0b3IuaHRtbFxuZnVuY3Rpb24gY2FsY0VsbGlnYXRvclJpc3RyZXR0b01hcChyMCkge1xuICAgIGNvbnN0IHsgZCB9ID0gZWQyNTUxOS5DVVJWRTtcbiAgICBjb25zdCBQID0gZWQyNTUxOS5DVVJWRS5GcC5PUkRFUjtcbiAgICBjb25zdCBtb2QgPSBlZDI1NTE5LkNVUlZFLkZwLmNyZWF0ZTtcbiAgICBjb25zdCByID0gbW9kKFNRUlRfTTEgKiByMCAqIHIwKTsgLy8gMVxuICAgIGNvbnN0IE5zID0gbW9kKChyICsgXzFuKSAqIE9ORV9NSU5VU19EX1NRKTsgLy8gMlxuICAgIGxldCBjID0gQmlnSW50KC0xKTsgLy8gM1xuICAgIGNvbnN0IEQgPSBtb2QoKGMgLSBkICogcikgKiBtb2QociArIGQpKTsgLy8gNFxuICAgIGxldCB7IGlzVmFsaWQ6IE5zX0RfaXNfc3EsIHZhbHVlOiBzIH0gPSB1dlJhdGlvKE5zLCBEKTsgLy8gNVxuICAgIGxldCBzXyA9IG1vZChzICogcjApOyAvLyA2XG4gICAgaWYgKCFpc05lZ2F0aXZlTEUoc18sIFApKVxuICAgICAgICBzXyA9IG1vZCgtc18pO1xuICAgIGlmICghTnNfRF9pc19zcSlcbiAgICAgICAgcyA9IHNfOyAvLyA3XG4gICAgaWYgKCFOc19EX2lzX3NxKVxuICAgICAgICBjID0gcjsgLy8gOFxuICAgIGNvbnN0IE50ID0gbW9kKGMgKiAociAtIF8xbikgKiBEX01JTlVTX09ORV9TUSAtIEQpOyAvLyA5XG4gICAgY29uc3QgczIgPSBzICogcztcbiAgICBjb25zdCBXMCA9IG1vZCgocyArIHMpICogRCk7IC8vIDEwXG4gICAgY29uc3QgVzEgPSBtb2QoTnQgKiBTUVJUX0FEX01JTlVTX09ORSk7IC8vIDExXG4gICAgY29uc3QgVzIgPSBtb2QoXzFuIC0gczIpOyAvLyAxMlxuICAgIGNvbnN0IFczID0gbW9kKF8xbiArIHMyKTsgLy8gMTNcbiAgICByZXR1cm4gbmV3IGVkMjU1MTkuRXh0ZW5kZWRQb2ludChtb2QoVzAgKiBXMyksIG1vZChXMiAqIFcxKSwgbW9kKFcxICogVzMpLCBtb2QoVzAgKiBXMikpO1xufVxuLyoqXG4gKiBFYWNoIGVkMjU1MTkvRXh0ZW5kZWRQb2ludCBoYXMgOCBkaWZmZXJlbnQgZXF1aXZhbGVudCBwb2ludHMuIFRoaXMgY2FuIGJlXG4gKiBhIHNvdXJjZSBvZiBidWdzIGZvciBwcm90b2NvbHMgbGlrZSByaW5nIHNpZ25hdHVyZXMuIFJpc3RyZXR0byB3YXMgY3JlYXRlZCB0byBzb2x2ZSB0aGlzLlxuICogUmlzdHJldHRvIHBvaW50IG9wZXJhdGVzIGluIFg6WTpaOlQgZXh0ZW5kZWQgY29vcmRpbmF0ZXMgbGlrZSBFeHRlbmRlZFBvaW50LFxuICogYnV0IGl0IHNob3VsZCB3b3JrIGluIGl0cyBvd24gbmFtZXNwYWNlOiBkbyBub3QgY29tYmluZSB0aG9zZSB0d28uXG4gKiBodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL2RyYWZ0LWlydGYtY2ZyZy1yaXN0cmV0dG8yNTUtZGVjYWY0NDhcbiAqL1xuY2xhc3MgUmlzdFBvaW50IHtcbiAgICAvLyBQcml2YXRlIHByb3BlcnR5IHRvIGRpc2NvdXJhZ2UgY29tYmluaW5nIEV4dGVuZGVkUG9pbnQgKyBSaXN0cmV0dG9Qb2ludFxuICAgIC8vIEFsd2F5cyB1c2UgUmlzdHJldHRvIGVuY29kaW5nL2RlY29kaW5nIGluc3RlYWQuXG4gICAgY29uc3RydWN0b3IoZXApIHtcbiAgICAgICAgdGhpcy5lcCA9IGVwO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUFmZmluZShhcCkge1xuICAgICAgICByZXR1cm4gbmV3IFJpc3RQb2ludChlZDI1NTE5LkV4dGVuZGVkUG9pbnQuZnJvbUFmZmluZShhcCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUYWtlcyB1bmlmb3JtIG91dHB1dCBvZiA2NC1ieXRlIGhhc2ggZnVuY3Rpb24gbGlrZSBzaGE1MTIgYW5kIGNvbnZlcnRzIGl0IHRvIGBSaXN0cmV0dG9Qb2ludGAuXG4gICAgICogVGhlIGhhc2gtdG8tZ3JvdXAgb3BlcmF0aW9uIGFwcGxpZXMgRWxsaWdhdG9yIHR3aWNlIGFuZCBhZGRzIHRoZSByZXN1bHRzLlxuICAgICAqICoqTm90ZToqKiB0aGlzIGlzIG9uZS13YXkgbWFwLCB0aGVyZSBpcyBubyBjb252ZXJzaW9uIGZyb20gcG9pbnQgdG8gaGFzaC5cbiAgICAgKiBodHRwczovL3Jpc3RyZXR0by5ncm91cC9mb3JtdWxhcy9lbGxpZ2F0b3IuaHRtbFxuICAgICAqIEBwYXJhbSBoZXggNjQtYnl0ZSBvdXRwdXQgb2YgYSBoYXNoIGZ1bmN0aW9uXG4gICAgICovXG4gICAgc3RhdGljIGhhc2hUb0N1cnZlKGhleCkge1xuICAgICAgICBoZXggPSBlbnN1cmVCeXRlcygncmlzdHJldHRvSGFzaCcsIGhleCwgNjQpO1xuICAgICAgICBjb25zdCByMSA9IGJ5dGVzMjU1VG9OdW1iZXJMRShoZXguc2xpY2UoMCwgMzIpKTtcbiAgICAgICAgY29uc3QgUjEgPSBjYWxjRWxsaWdhdG9yUmlzdHJldHRvTWFwKHIxKTtcbiAgICAgICAgY29uc3QgcjIgPSBieXRlczI1NVRvTnVtYmVyTEUoaGV4LnNsaWNlKDMyLCA2NCkpO1xuICAgICAgICBjb25zdCBSMiA9IGNhbGNFbGxpZ2F0b3JSaXN0cmV0dG9NYXAocjIpO1xuICAgICAgICByZXR1cm4gbmV3IFJpc3RQb2ludChSMS5hZGQoUjIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgcmlzdHJldHRvLWVuY29kZWQgc3RyaW5nIHRvIHJpc3RyZXR0byBwb2ludC5cbiAgICAgKiBodHRwczovL3Jpc3RyZXR0by5ncm91cC9mb3JtdWxhcy9kZWNvZGluZy5odG1sXG4gICAgICogQHBhcmFtIGhleCBSaXN0cmV0dG8tZW5jb2RlZCAzMiBieXRlcy4gTm90IGV2ZXJ5IDMyLWJ5dGUgc3RyaW5nIGlzIHZhbGlkIHJpc3RyZXR0byBlbmNvZGluZ1xuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tSGV4KGhleCkge1xuICAgICAgICBoZXggPSBlbnN1cmVCeXRlcygncmlzdHJldHRvSGV4JywgaGV4LCAzMik7XG4gICAgICAgIGNvbnN0IHsgYSwgZCB9ID0gZWQyNTUxOS5DVVJWRTtcbiAgICAgICAgY29uc3QgUCA9IGVkMjU1MTkuQ1VSVkUuRnAuT1JERVI7XG4gICAgICAgIGNvbnN0IG1vZCA9IGVkMjU1MTkuQ1VSVkUuRnAuY3JlYXRlO1xuICAgICAgICBjb25zdCBlbXNnID0gJ1Jpc3RyZXR0b1BvaW50LmZyb21IZXg6IHRoZSBoZXggaXMgbm90IHZhbGlkIGVuY29kaW5nIG9mIFJpc3RyZXR0b1BvaW50JztcbiAgICAgICAgY29uc3QgcyA9IGJ5dGVzMjU1VG9OdW1iZXJMRShoZXgpO1xuICAgICAgICAvLyAxLiBDaGVjayB0aGF0IHNfYnl0ZXMgaXMgdGhlIGNhbm9uaWNhbCBlbmNvZGluZyBvZiBhIGZpZWxkIGVsZW1lbnQsIG9yIGVsc2UgYWJvcnQuXG4gICAgICAgIC8vIDMuIENoZWNrIHRoYXQgcyBpcyBub24tbmVnYXRpdmUsIG9yIGVsc2UgYWJvcnRcbiAgICAgICAgaWYgKCFlcXVhbEJ5dGVzKG51bWJlclRvQnl0ZXNMRShzLCAzMiksIGhleCkgfHwgaXNOZWdhdGl2ZUxFKHMsIFApKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVtc2cpO1xuICAgICAgICBjb25zdCBzMiA9IG1vZChzICogcyk7XG4gICAgICAgIGNvbnN0IHUxID0gbW9kKF8xbiArIGEgKiBzMik7IC8vIDQgKGEgaXMgLTEpXG4gICAgICAgIGNvbnN0IHUyID0gbW9kKF8xbiAtIGEgKiBzMik7IC8vIDVcbiAgICAgICAgY29uc3QgdTFfMiA9IG1vZCh1MSAqIHUxKTtcbiAgICAgICAgY29uc3QgdTJfMiA9IG1vZCh1MiAqIHUyKTtcbiAgICAgICAgY29uc3QgdiA9IG1vZChhICogZCAqIHUxXzIgLSB1Ml8yKTsgLy8gNlxuICAgICAgICBjb25zdCB7IGlzVmFsaWQsIHZhbHVlOiBJIH0gPSBpbnZlcnRTcXJ0KG1vZCh2ICogdTJfMikpOyAvLyA3XG4gICAgICAgIGNvbnN0IER4ID0gbW9kKEkgKiB1Mik7IC8vIDhcbiAgICAgICAgY29uc3QgRHkgPSBtb2QoSSAqIER4ICogdik7IC8vIDlcbiAgICAgICAgbGV0IHggPSBtb2QoKHMgKyBzKSAqIER4KTsgLy8gMTBcbiAgICAgICAgaWYgKGlzTmVnYXRpdmVMRSh4LCBQKSlcbiAgICAgICAgICAgIHggPSBtb2QoLXgpOyAvLyAxMFxuICAgICAgICBjb25zdCB5ID0gbW9kKHUxICogRHkpOyAvLyAxMVxuICAgICAgICBjb25zdCB0ID0gbW9kKHggKiB5KTsgLy8gMTJcbiAgICAgICAgaWYgKCFpc1ZhbGlkIHx8IGlzTmVnYXRpdmVMRSh0LCBQKSB8fCB5ID09PSBfMG4pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZW1zZyk7XG4gICAgICAgIHJldHVybiBuZXcgUmlzdFBvaW50KG5ldyBlZDI1NTE5LkV4dGVuZGVkUG9pbnQoeCwgeSwgXzFuLCB0KSk7XG4gICAgfVxuICAgIHN0YXRpYyBtc20ocG9pbnRzLCBzY2FsYXJzKSB7XG4gICAgICAgIGNvbnN0IEZuID0gRmllbGQoZWQyNTUxOS5DVVJWRS5uLCBlZDI1NTE5LkNVUlZFLm5CaXRMZW5ndGgpO1xuICAgICAgICByZXR1cm4gcGlwcGVuZ2VyKFJpc3RQb2ludCwgRm4sIHBvaW50cywgc2NhbGFycyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgcmlzdHJldHRvIHBvaW50IHRvIFVpbnQ4QXJyYXkuXG4gICAgICogaHR0cHM6Ly9yaXN0cmV0dG8uZ3JvdXAvZm9ybXVsYXMvZW5jb2RpbmcuaHRtbFxuICAgICAqL1xuICAgIHRvUmF3Qnl0ZXMoKSB7XG4gICAgICAgIGxldCB7IGV4OiB4LCBleTogeSwgZXo6IHosIGV0OiB0IH0gPSB0aGlzLmVwO1xuICAgICAgICBjb25zdCBQID0gZWQyNTUxOS5DVVJWRS5GcC5PUkRFUjtcbiAgICAgICAgY29uc3QgbW9kID0gZWQyNTUxOS5DVVJWRS5GcC5jcmVhdGU7XG4gICAgICAgIGNvbnN0IHUxID0gbW9kKG1vZCh6ICsgeSkgKiBtb2QoeiAtIHkpKTsgLy8gMVxuICAgICAgICBjb25zdCB1MiA9IG1vZCh4ICogeSk7IC8vIDJcbiAgICAgICAgLy8gU3F1YXJlIHJvb3QgYWx3YXlzIGV4aXN0c1xuICAgICAgICBjb25zdCB1MnNxID0gbW9kKHUyICogdTIpO1xuICAgICAgICBjb25zdCB7IHZhbHVlOiBpbnZzcXJ0IH0gPSBpbnZlcnRTcXJ0KG1vZCh1MSAqIHUyc3EpKTsgLy8gM1xuICAgICAgICBjb25zdCBEMSA9IG1vZChpbnZzcXJ0ICogdTEpOyAvLyA0XG4gICAgICAgIGNvbnN0IEQyID0gbW9kKGludnNxcnQgKiB1Mik7IC8vIDVcbiAgICAgICAgY29uc3QgekludiA9IG1vZChEMSAqIEQyICogdCk7IC8vIDZcbiAgICAgICAgbGV0IEQ7IC8vIDdcbiAgICAgICAgaWYgKGlzTmVnYXRpdmVMRSh0ICogekludiwgUCkpIHtcbiAgICAgICAgICAgIGxldCBfeCA9IG1vZCh5ICogU1FSVF9NMSk7XG4gICAgICAgICAgICBsZXQgX3kgPSBtb2QoeCAqIFNRUlRfTTEpO1xuICAgICAgICAgICAgeCA9IF94O1xuICAgICAgICAgICAgeSA9IF95O1xuICAgICAgICAgICAgRCA9IG1vZChEMSAqIElOVlNRUlRfQV9NSU5VU19EKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIEQgPSBEMjsgLy8gOFxuICAgICAgICB9XG4gICAgICAgIGlmIChpc05lZ2F0aXZlTEUoeCAqIHpJbnYsIFApKVxuICAgICAgICAgICAgeSA9IG1vZCgteSk7IC8vIDlcbiAgICAgICAgbGV0IHMgPSBtb2QoKHogLSB5KSAqIEQpOyAvLyAxMCAoY2hlY2sgZm9vdGVyJ3Mgbm90ZSwgbm8gc3FydCgtYSkpXG4gICAgICAgIGlmIChpc05lZ2F0aXZlTEUocywgUCkpXG4gICAgICAgICAgICBzID0gbW9kKC1zKTtcbiAgICAgICAgcmV0dXJuIG51bWJlclRvQnl0ZXNMRShzLCAzMik7IC8vIDExXG4gICAgfVxuICAgIHRvSGV4KCkge1xuICAgICAgICByZXR1cm4gYnl0ZXNUb0hleCh0aGlzLnRvUmF3Qnl0ZXMoKSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b0hleCgpO1xuICAgIH1cbiAgICAvLyBDb21wYXJlIG9uZSBwb2ludCB0byBhbm90aGVyLlxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICBhc3NlcnRSc3RQb2ludChvdGhlcik7XG4gICAgICAgIGNvbnN0IHsgZXg6IFgxLCBleTogWTEgfSA9IHRoaXMuZXA7XG4gICAgICAgIGNvbnN0IHsgZXg6IFgyLCBleTogWTIgfSA9IG90aGVyLmVwO1xuICAgICAgICBjb25zdCBtb2QgPSBlZDI1NTE5LkNVUlZFLkZwLmNyZWF0ZTtcbiAgICAgICAgLy8gKHgxICogeTIgPT0geTEgKiB4MikgfCAoeTEgKiB5MiA9PSB4MSAqIHgyKVxuICAgICAgICBjb25zdCBvbmUgPSBtb2QoWDEgKiBZMikgPT09IG1vZChZMSAqIFgyKTtcbiAgICAgICAgY29uc3QgdHdvID0gbW9kKFkxICogWTIpID09PSBtb2QoWDEgKiBYMik7XG4gICAgICAgIHJldHVybiBvbmUgfHwgdHdvO1xuICAgIH1cbiAgICBhZGQob3RoZXIpIHtcbiAgICAgICAgYXNzZXJ0UnN0UG9pbnQob3RoZXIpO1xuICAgICAgICByZXR1cm4gbmV3IFJpc3RQb2ludCh0aGlzLmVwLmFkZChvdGhlci5lcCkpO1xuICAgIH1cbiAgICBzdWJ0cmFjdChvdGhlcikge1xuICAgICAgICBhc3NlcnRSc3RQb2ludChvdGhlcik7XG4gICAgICAgIHJldHVybiBuZXcgUmlzdFBvaW50KHRoaXMuZXAuc3VidHJhY3Qob3RoZXIuZXApKTtcbiAgICB9XG4gICAgbXVsdGlwbHkoc2NhbGFyKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmlzdFBvaW50KHRoaXMuZXAubXVsdGlwbHkoc2NhbGFyKSk7XG4gICAgfVxuICAgIG11bHRpcGx5VW5zYWZlKHNjYWxhcikge1xuICAgICAgICByZXR1cm4gbmV3IFJpc3RQb2ludCh0aGlzLmVwLm11bHRpcGx5VW5zYWZlKHNjYWxhcikpO1xuICAgIH1cbiAgICBkb3VibGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmlzdFBvaW50KHRoaXMuZXAuZG91YmxlKCkpO1xuICAgIH1cbiAgICBuZWdhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmlzdFBvaW50KHRoaXMuZXAubmVnYXRlKCkpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBSaXN0cmV0dG9Qb2ludCA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4ge1xuICAgIGlmICghUmlzdFBvaW50LkJBU0UpXG4gICAgICAgIFJpc3RQb2ludC5CQVNFID0gbmV3IFJpc3RQb2ludChlZDI1NTE5LkV4dGVuZGVkUG9pbnQuQkFTRSk7XG4gICAgaWYgKCFSaXN0UG9pbnQuWkVSTylcbiAgICAgICAgUmlzdFBvaW50LlpFUk8gPSBuZXcgUmlzdFBvaW50KGVkMjU1MTkuRXh0ZW5kZWRQb2ludC5aRVJPKTtcbiAgICByZXR1cm4gUmlzdFBvaW50O1xufSkoKTtcbi8vIEhhc2hpbmcgdG8gcmlzdHJldHRvMjU1LiBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTM4MCNhcHBlbmRpeC1CXG5leHBvcnQgY29uc3QgaGFzaFRvUmlzdHJldHRvMjU1ID0gKG1zZywgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGQgPSBvcHRpb25zLkRTVDtcbiAgICBjb25zdCBEU1QgPSB0eXBlb2YgZCA9PT0gJ3N0cmluZycgPyB1dGY4VG9CeXRlcyhkKSA6IGQ7XG4gICAgY29uc3QgdW5pZm9ybV9ieXRlcyA9IGV4cGFuZF9tZXNzYWdlX3htZChtc2csIERTVCwgNjQsIHNoYTUxMik7XG4gICAgY29uc3QgUCA9IFJpc3RQb2ludC5oYXNoVG9DdXJ2ZSh1bmlmb3JtX2J5dGVzKTtcbiAgICByZXR1cm4gUDtcbn07XG5leHBvcnQgY29uc3QgaGFzaF90b19yaXN0cmV0dG8yNTUgPSBoYXNoVG9SaXN0cmV0dG8yNTU7IC8vIGxlZ2FjeVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWQyNTUxOS5qcy5tYXAiLCIvKipcbiAqIFNIQTItMjU2IGEuay5hLiBzaGEyNTYuIEluIEpTLCBpdCBpcyB0aGUgZmFzdGVzdCBoYXNoLCBldmVuIGZhc3RlciB0aGFuIEJsYWtlMy5cbiAqXG4gKiBUbyBicmVhayBzaGEyNTYgdXNpbmcgYmlydGhkYXkgYXR0YWNrLCBhdHRhY2tlcnMgbmVlZCB0byB0cnkgMl4xMjggaGFzaGVzLlxuICogQlRDIG5ldHdvcmsgaXMgZG9pbmcgMl43MCBoYXNoZXMvc2VjICgyXjk1IGhhc2hlcy95ZWFyKSBhcyBwZXIgMjAyNS5cbiAqXG4gKiBDaGVjayBvdXQgW0ZJUFMgMTgwLTRdKGh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9GSVBTL05JU1QuRklQUy4xODAtNC5wZGYpLlxuICogQG1vZHVsZVxuICovXG5pbXBvcnQgeyBDaGksIEhhc2hNRCwgTWFqIH0gZnJvbSAnLi9fbWQuanMnO1xuaW1wb3J0IHsgcm90ciwgd3JhcENvbnN0cnVjdG9yIH0gZnJvbSAnLi91dGlscy5qcyc7XG4vKiogUm91bmQgY29uc3RhbnRzOiBmaXJzdCAzMiBiaXRzIG9mIGZyYWN0aW9uYWwgcGFydHMgb2YgdGhlIGN1YmUgcm9vdHMgb2YgdGhlIGZpcnN0IDY0IHByaW1lcyAyLi4zMTEpLiAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBTSEEyNTZfSyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVWludDMyQXJyYXkoW1xuICAgIDB4NDI4YTJmOTgsIDB4NzEzNzQ0OTEsIDB4YjVjMGZiY2YsIDB4ZTliNWRiYTUsIDB4Mzk1NmMyNWIsIDB4NTlmMTExZjEsIDB4OTIzZjgyYTQsIDB4YWIxYzVlZDUsXG4gICAgMHhkODA3YWE5OCwgMHgxMjgzNWIwMSwgMHgyNDMxODViZSwgMHg1NTBjN2RjMywgMHg3MmJlNWQ3NCwgMHg4MGRlYjFmZSwgMHg5YmRjMDZhNywgMHhjMTliZjE3NCxcbiAgICAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLCAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAgIDB4OTgzZTUxNTIsIDB4YTgzMWM2NmQsIDB4YjAwMzI3YzgsIDB4YmY1OTdmYzcsIDB4YzZlMDBiZjMsIDB4ZDVhNzkxNDcsIDB4MDZjYTYzNTEsIDB4MTQyOTI5NjcsXG4gICAgMHgyN2I3MGE4NSwgMHgyZTFiMjEzOCwgMHg0ZDJjNmRmYywgMHg1MzM4MGQxMywgMHg2NTBhNzM1NCwgMHg3NjZhMGFiYiwgMHg4MWMyYzkyZSwgMHg5MjcyMmM4NSxcbiAgICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLCAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAgIDB4MTlhNGMxMTYsIDB4MWUzNzZjMDgsIDB4Mjc0ODc3NGMsIDB4MzRiMGJjYjUsIDB4MzkxYzBjYjMsIDB4NGVkOGFhNGEsIDB4NWI5Y2NhNGYsIDB4NjgyZTZmZjMsXG4gICAgMHg3NDhmODJlZSwgMHg3OGE1NjM2ZiwgMHg4NGM4NzgxNCwgMHg4Y2M3MDIwOCwgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMlxuXSk7XG4vKiogSW5pdGlhbCBzdGF0ZTogZmlyc3QgMzIgYml0cyBvZiBmcmFjdGlvbmFsIHBhcnRzIG9mIHRoZSBzcXVhcmUgcm9vdHMgb2YgdGhlIGZpcnN0IDggcHJpbWVzIDIuLjE5LiAqL1xuLy8gcHJldHRpZXItaWdub3JlXG5jb25zdCBTSEEyNTZfSVYgPSAvKiBAX19QVVJFX18gKi8gbmV3IFVpbnQzMkFycmF5KFtcbiAgICAweDZhMDllNjY3LCAweGJiNjdhZTg1LCAweDNjNmVmMzcyLCAweGE1NGZmNTNhLCAweDUxMGU1MjdmLCAweDliMDU2ODhjLCAweDFmODNkOWFiLCAweDViZTBjZDE5XG5dKTtcbi8qKlxuICogVGVtcG9yYXJ5IGJ1ZmZlciwgbm90IHVzZWQgdG8gc3RvcmUgYW55dGhpbmcgYmV0d2VlbiBydW5zLlxuICogTmFtZWQgdGhpcyB3YXkgYmVjYXVzZSBpdCBtYXRjaGVzIHNwZWNpZmljYXRpb24uXG4gKi9cbmNvbnN0IFNIQTI1Nl9XID0gLyogQF9fUFVSRV9fICovIG5ldyBVaW50MzJBcnJheSg2NCk7XG5leHBvcnQgY2xhc3MgU0hBMjU2IGV4dGVuZHMgSGFzaE1EIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoNjQsIDMyLCA4LCBmYWxzZSk7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB1c2UgYXJyYXkgaGVyZSBzaW5jZSBhcnJheSBhbGxvd3MgaW5kZXhpbmcgYnkgdmFyaWFibGVcbiAgICAgICAgLy8gd2hpY2ggbWVhbnMgb3B0aW1pemVyL2NvbXBpbGVyIGNhbm5vdCB1c2UgcmVnaXN0ZXJzLlxuICAgICAgICB0aGlzLkEgPSBTSEEyNTZfSVZbMF0gfCAwO1xuICAgICAgICB0aGlzLkIgPSBTSEEyNTZfSVZbMV0gfCAwO1xuICAgICAgICB0aGlzLkMgPSBTSEEyNTZfSVZbMl0gfCAwO1xuICAgICAgICB0aGlzLkQgPSBTSEEyNTZfSVZbM10gfCAwO1xuICAgICAgICB0aGlzLkUgPSBTSEEyNTZfSVZbNF0gfCAwO1xuICAgICAgICB0aGlzLkYgPSBTSEEyNTZfSVZbNV0gfCAwO1xuICAgICAgICB0aGlzLkcgPSBTSEEyNTZfSVZbNl0gfCAwO1xuICAgICAgICB0aGlzLkggPSBTSEEyNTZfSVZbN10gfCAwO1xuICAgIH1cbiAgICBnZXQoKSB7XG4gICAgICAgIGNvbnN0IHsgQSwgQiwgQywgRCwgRSwgRiwgRywgSCB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIFtBLCBCLCBDLCBELCBFLCBGLCBHLCBIXTtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgc2V0KEEsIEIsIEMsIEQsIEUsIEYsIEcsIEgpIHtcbiAgICAgICAgdGhpcy5BID0gQSB8IDA7XG4gICAgICAgIHRoaXMuQiA9IEIgfCAwO1xuICAgICAgICB0aGlzLkMgPSBDIHwgMDtcbiAgICAgICAgdGhpcy5EID0gRCB8IDA7XG4gICAgICAgIHRoaXMuRSA9IEUgfCAwO1xuICAgICAgICB0aGlzLkYgPSBGIHwgMDtcbiAgICAgICAgdGhpcy5HID0gRyB8IDA7XG4gICAgICAgIHRoaXMuSCA9IEggfCAwO1xuICAgIH1cbiAgICBwcm9jZXNzKHZpZXcsIG9mZnNldCkge1xuICAgICAgICAvLyBFeHRlbmQgdGhlIGZpcnN0IDE2IHdvcmRzIGludG8gdGhlIHJlbWFpbmluZyA0OCB3b3JkcyB3WzE2Li42M10gb2YgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgYXJyYXlcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrLCBvZmZzZXQgKz0gNClcbiAgICAgICAgICAgIFNIQTI1Nl9XW2ldID0gdmlldy5nZXRVaW50MzIob2Zmc2V0LCBmYWxzZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAxNjsgaSA8IDY0OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IFcxNSA9IFNIQTI1Nl9XW2kgLSAxNV07XG4gICAgICAgICAgICBjb25zdCBXMiA9IFNIQTI1Nl9XW2kgLSAyXTtcbiAgICAgICAgICAgIGNvbnN0IHMwID0gcm90cihXMTUsIDcpIF4gcm90cihXMTUsIDE4KSBeIChXMTUgPj4+IDMpO1xuICAgICAgICAgICAgY29uc3QgczEgPSByb3RyKFcyLCAxNykgXiByb3RyKFcyLCAxOSkgXiAoVzIgPj4+IDEwKTtcbiAgICAgICAgICAgIFNIQTI1Nl9XW2ldID0gKHMxICsgU0hBMjU2X1dbaSAtIDddICsgczAgKyBTSEEyNTZfV1tpIC0gMTZdKSB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29tcHJlc3Npb24gZnVuY3Rpb24gbWFpbiBsb29wLCA2NCByb3VuZHNcbiAgICAgICAgbGV0IHsgQSwgQiwgQywgRCwgRSwgRiwgRywgSCB9ID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzaWdtYTEgPSByb3RyKEUsIDYpIF4gcm90cihFLCAxMSkgXiByb3RyKEUsIDI1KTtcbiAgICAgICAgICAgIGNvbnN0IFQxID0gKEggKyBzaWdtYTEgKyBDaGkoRSwgRiwgRykgKyBTSEEyNTZfS1tpXSArIFNIQTI1Nl9XW2ldKSB8IDA7XG4gICAgICAgICAgICBjb25zdCBzaWdtYTAgPSByb3RyKEEsIDIpIF4gcm90cihBLCAxMykgXiByb3RyKEEsIDIyKTtcbiAgICAgICAgICAgIGNvbnN0IFQyID0gKHNpZ21hMCArIE1haihBLCBCLCBDKSkgfCAwO1xuICAgICAgICAgICAgSCA9IEc7XG4gICAgICAgICAgICBHID0gRjtcbiAgICAgICAgICAgIEYgPSBFO1xuICAgICAgICAgICAgRSA9IChEICsgVDEpIHwgMDtcbiAgICAgICAgICAgIEQgPSBDO1xuICAgICAgICAgICAgQyA9IEI7XG4gICAgICAgICAgICBCID0gQTtcbiAgICAgICAgICAgIEEgPSAoVDEgKyBUMikgfCAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCB0aGUgY29tcHJlc3NlZCBjaHVuayB0byB0aGUgY3VycmVudCBoYXNoIHZhbHVlXG4gICAgICAgIEEgPSAoQSArIHRoaXMuQSkgfCAwO1xuICAgICAgICBCID0gKEIgKyB0aGlzLkIpIHwgMDtcbiAgICAgICAgQyA9IChDICsgdGhpcy5DKSB8IDA7XG4gICAgICAgIEQgPSAoRCArIHRoaXMuRCkgfCAwO1xuICAgICAgICBFID0gKEUgKyB0aGlzLkUpIHwgMDtcbiAgICAgICAgRiA9IChGICsgdGhpcy5GKSB8IDA7XG4gICAgICAgIEcgPSAoRyArIHRoaXMuRykgfCAwO1xuICAgICAgICBIID0gKEggKyB0aGlzLkgpIHwgMDtcbiAgICAgICAgdGhpcy5zZXQoQSwgQiwgQywgRCwgRSwgRiwgRywgSCk7XG4gICAgfVxuICAgIHJvdW5kQ2xlYW4oKSB7XG4gICAgICAgIFNIQTI1Nl9XLmZpbGwoMCk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc2V0KDAsIDAsIDAsIDAsIDAsIDAsIDAsIDApO1xuICAgICAgICB0aGlzLmJ1ZmZlci5maWxsKDApO1xuICAgIH1cbn1cbi8qKlxuICogQ29uc3RhbnRzIHRha2VuIGZyb20gaHR0cHM6Ly9udmxwdWJzLm5pc3QuZ292L25pc3RwdWJzL0ZJUFMvTklTVC5GSVBTLjE4MC00LnBkZi5cbiAqL1xuY2xhc3MgU0hBMjI0IGV4dGVuZHMgU0hBMjU2IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5BID0gMHhjMTA1OWVkOCB8IDA7XG4gICAgICAgIHRoaXMuQiA9IDB4MzY3Y2Q1MDcgfCAwO1xuICAgICAgICB0aGlzLkMgPSAweDMwNzBkZDE3IHwgMDtcbiAgICAgICAgdGhpcy5EID0gMHhmNzBlNTkzOSB8IDA7XG4gICAgICAgIHRoaXMuRSA9IDB4ZmZjMDBiMzEgfCAwO1xuICAgICAgICB0aGlzLkYgPSAweDY4NTgxNTExIHwgMDtcbiAgICAgICAgdGhpcy5HID0gMHg2NGY5OGZhNyB8IDA7XG4gICAgICAgIHRoaXMuSCA9IDB4YmVmYTRmYTQgfCAwO1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IDI4O1xuICAgIH1cbn1cbi8qKiBTSEEyLTI1NiBoYXNoIGZ1bmN0aW9uICovXG5leHBvcnQgY29uc3Qgc2hhMjU2ID0gLyogQF9fUFVSRV9fICovIHdyYXBDb25zdHJ1Y3RvcigoKSA9PiBuZXcgU0hBMjU2KCkpO1xuLyoqIFNIQTItMjI0IGhhc2ggZnVuY3Rpb24gKi9cbmV4cG9ydCBjb25zdCBzaGEyMjQgPSAvKiBAX19QVVJFX18gKi8gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBTSEEyMjQoKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGEyNTYuanMubWFwIiwiLyoqXG4gKiBBIGBTdHJ1Y3RGYWlsdXJlYCByZXByZXNlbnRzIGEgc2luZ2xlIHNwZWNpZmljIGZhaWx1cmUgaW4gdmFsaWRhdGlvbi5cbiAqL1xuLyoqXG4gKiBgU3RydWN0RXJyb3JgIG9iamVjdHMgYXJlIHRocm93biAob3IgcmV0dXJuZWQpIHdoZW4gdmFsaWRhdGlvbiBmYWlscy5cbiAqXG4gKiBWYWxpZGF0aW9uIGxvZ2ljIGlzIGRlc2lnbiB0byBleGl0IGVhcmx5IGZvciBtYXhpbXVtIHBlcmZvcm1hbmNlLiBUaGUgZXJyb3JcbiAqIHJlcHJlc2VudHMgdGhlIGZpcnN0IGVycm9yIGVuY291bnRlcmVkIGR1cmluZyB2YWxpZGF0aW9uLiBGb3IgbW9yZSBkZXRhaWwsXG4gKiB0aGUgYGVycm9yLmZhaWx1cmVzYCBwcm9wZXJ0eSBpcyBhIGdlbmVyYXRvciBmdW5jdGlvbiB0aGF0IGNhbiBiZSBydW4gdG9cbiAqIGNvbnRpbnVlIHZhbGlkYXRpb24gYW5kIHJlY2VpdmUgYWxsIHRoZSBmYWlsdXJlcyBpbiB0aGUgZGF0YS5cbiAqL1xuY2xhc3MgU3RydWN0RXJyb3IgZXh0ZW5kcyBUeXBlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGZhaWx1cmUsIGZhaWx1cmVzKSB7XG4gICAgICAgIGxldCBjYWNoZWQ7XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgZXhwbGFuYXRpb24sIC4uLnJlc3QgfSA9IGZhaWx1cmU7XG4gICAgICAgIGNvbnN0IHsgcGF0aCB9ID0gZmFpbHVyZTtcbiAgICAgICAgY29uc3QgbXNnID0gcGF0aC5sZW5ndGggPT09IDAgPyBtZXNzYWdlIDogYEF0IHBhdGg6ICR7cGF0aC5qb2luKCcuJyl9IC0tICR7bWVzc2FnZX1gO1xuICAgICAgICBzdXBlcihleHBsYW5hdGlvbiA/PyBtc2cpO1xuICAgICAgICBpZiAoZXhwbGFuYXRpb24gIT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMuY2F1c2UgPSBtc2c7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgcmVzdCk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgdGhpcy5mYWlsdXJlcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoY2FjaGVkID8/IChjYWNoZWQgPSBbZmFpbHVyZSwgLi4uZmFpbHVyZXMoKV0pKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhbiBpdGVyYXRvci5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYWJsZSh4KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHgpICYmIHR5cGVvZiB4W1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG59XG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT0gbnVsbDtcbn1cbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhIG5vbi1hcnJheSBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzTm9uQXJyYXlPYmplY3QoeCkge1xuICAgIHJldHVybiBpc09iamVjdCh4KSAmJiAhQXJyYXkuaXNBcnJheSh4KTtcbn1cbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh4KSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoeCk7XG4gICAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG4vKipcbiAqIFJldHVybiBhIHZhbHVlIGFzIGEgcHJpbnRhYmxlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gcHJpbnQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiBgJHt2YWx1ZX1gO1xufVxuLyoqXG4gKiBTaGlmdHMgKHJlbW92ZXMgYW5kIHJldHVybnMpIHRoZSBmaXJzdCB2YWx1ZSBmcm9tIHRoZSBgaW5wdXRgIGl0ZXJhdG9yLlxuICogTGlrZSBgQXJyYXkucHJvdG90eXBlLnNoaWZ0KClgIGJ1dCBmb3IgYW4gYEl0ZXJhdG9yYC5cbiAqL1xuZnVuY3Rpb24gc2hpZnRJdGVyYXRvcihpbnB1dCkge1xuICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGlucHV0Lm5leHQoKTtcbiAgICByZXR1cm4gZG9uZSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgc2luZ2xlIHZhbGlkYXRpb24gcmVzdWx0IHRvIGEgZmFpbHVyZS5cbiAqL1xuZnVuY3Rpb24gdG9GYWlsdXJlKHJlc3VsdCwgY29udGV4dCwgc3RydWN0LCB2YWx1ZSkge1xuICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgIHJlc3VsdCA9IHt9O1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXN1bHQgPSB7IG1lc3NhZ2U6IHJlc3VsdCB9O1xuICAgIH1cbiAgICBjb25zdCB7IHBhdGgsIGJyYW5jaCB9ID0gY29udGV4dDtcbiAgICBjb25zdCB7IHR5cGUgfSA9IHN0cnVjdDtcbiAgICBjb25zdCB7IHJlZmluZW1lbnQsIG1lc3NhZ2UgPSBgRXhwZWN0ZWQgYSB2YWx1ZSBvZiB0eXBlIFxcYCR7dHlwZX1cXGAke3JlZmluZW1lbnQgPyBgIHdpdGggcmVmaW5lbWVudCBcXGAke3JlZmluZW1lbnR9XFxgYCA6ICcnfSwgYnV0IHJlY2VpdmVkOiBcXGAke3ByaW50KHZhbHVlKX1cXGBgLCB9ID0gcmVzdWx0O1xuICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICB0eXBlLFxuICAgICAgICByZWZpbmVtZW50LFxuICAgICAgICBrZXk6IHBhdGhbcGF0aC5sZW5ndGggLSAxXSxcbiAgICAgICAgcGF0aCxcbiAgICAgICAgYnJhbmNoLFxuICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgfTtcbn1cbi8qKlxuICogQ29udmVydCBhIHZhbGlkYXRpb24gcmVzdWx0IHRvIGFuIGl0ZXJhYmxlIG9mIGZhaWx1cmVzLlxuICovXG5mdW5jdGlvbiogdG9GYWlsdXJlcyhyZXN1bHQsIGNvbnRleHQsIHN0cnVjdCwgdmFsdWUpIHtcbiAgICBpZiAoIWlzSXRlcmFibGUocmVzdWx0KSkge1xuICAgICAgICByZXN1bHQgPSBbcmVzdWx0XTtcbiAgICB9XG4gICAgZm9yIChjb25zdCByIG9mIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBmYWlsdXJlID0gdG9GYWlsdXJlKHIsIGNvbnRleHQsIHN0cnVjdCwgdmFsdWUpO1xuICAgICAgICBpZiAoZmFpbHVyZSkge1xuICAgICAgICAgICAgeWllbGQgZmFpbHVyZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQ2hlY2sgYSB2YWx1ZSBhZ2FpbnN0IGEgc3RydWN0LCB0cmF2ZXJzaW5nIGRlZXBseSBpbnRvIG5lc3RlZCB2YWx1ZXMsIGFuZFxuICogcmV0dXJuaW5nIGFuIGl0ZXJhdG9yIG9mIGZhaWx1cmVzIG9yIHN1Y2Nlc3MuXG4gKi9cbmZ1bmN0aW9uKiBydW4odmFsdWUsIHN0cnVjdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBwYXRoID0gW10sIGJyYW5jaCA9IFt2YWx1ZV0sIGNvZXJjZSA9IGZhbHNlLCBtYXNrID0gZmFsc2UgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgY3R4ID0geyBwYXRoLCBicmFuY2gsIG1hc2sgfTtcbiAgICBpZiAoY29lcmNlKSB7XG4gICAgICAgIHZhbHVlID0gc3RydWN0LmNvZXJjZXIodmFsdWUsIGN0eCk7XG4gICAgfVxuICAgIGxldCBzdGF0dXMgPSAndmFsaWQnO1xuICAgIGZvciAoY29uc3QgZmFpbHVyZSBvZiBzdHJ1Y3QudmFsaWRhdG9yKHZhbHVlLCBjdHgpKSB7XG4gICAgICAgIGZhaWx1cmUuZXhwbGFuYXRpb24gPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgICAgIHN0YXR1cyA9ICdub3RfdmFsaWQnO1xuICAgICAgICB5aWVsZCBbZmFpbHVyZSwgdW5kZWZpbmVkXTtcbiAgICB9XG4gICAgZm9yIChsZXQgW2ssIHYsIHNdIG9mIHN0cnVjdC5lbnRyaWVzKHZhbHVlLCBjdHgpKSB7XG4gICAgICAgIGNvbnN0IHRzID0gcnVuKHYsIHMsIHtcbiAgICAgICAgICAgIHBhdGg6IGsgPT09IHVuZGVmaW5lZCA/IHBhdGggOiBbLi4ucGF0aCwga10sXG4gICAgICAgICAgICBicmFuY2g6IGsgPT09IHVuZGVmaW5lZCA/IGJyYW5jaCA6IFsuLi5icmFuY2gsIHZdLFxuICAgICAgICAgICAgY29lcmNlLFxuICAgICAgICAgICAgbWFzayxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0cykge1xuICAgICAgICAgICAgaWYgKHRbMF0pIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMgPSB0WzBdLnJlZmluZW1lbnQgIT0gbnVsbCA/ICdub3RfcmVmaW5lZCcgOiAnbm90X3ZhbGlkJztcbiAgICAgICAgICAgICAgICB5aWVsZCBbdFswXSwgdW5kZWZpbmVkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvZXJjZSkge1xuICAgICAgICAgICAgICAgIHYgPSB0WzFdO1xuICAgICAgICAgICAgICAgIGlmIChrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5zZXQoaywgdik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLmFkZCh2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ICE9PSB1bmRlZmluZWQgfHwgayBpbiB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlW2tdID0gdjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0YXR1cyAhPT0gJ25vdF92YWxpZCcpIHtcbiAgICAgICAgZm9yIChjb25zdCBmYWlsdXJlIG9mIHN0cnVjdC5yZWZpbmVyKHZhbHVlLCBjdHgpKSB7XG4gICAgICAgICAgICBmYWlsdXJlLmV4cGxhbmF0aW9uID0gb3B0aW9ucy5tZXNzYWdlO1xuICAgICAgICAgICAgc3RhdHVzID0gJ25vdF9yZWZpbmVkJztcbiAgICAgICAgICAgIHlpZWxkIFtmYWlsdXJlLCB1bmRlZmluZWRdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09ICd2YWxpZCcpIHtcbiAgICAgICAgeWllbGQgW3VuZGVmaW5lZCwgdmFsdWVdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBgU3RydWN0YCBvYmplY3RzIGVuY2Fwc3VsYXRlIHRoZSB2YWxpZGF0aW9uIGxvZ2ljIGZvciBhIHNwZWNpZmljIHR5cGUgb2ZcbiAqIHZhbHVlcy4gT25jZSBjb25zdHJ1Y3RlZCwgeW91IHVzZSB0aGUgYGFzc2VydGAsIGBpc2Agb3IgYHZhbGlkYXRlYCBoZWxwZXJzIHRvXG4gKiB2YWxpZGF0ZSB1bmtub3duIGlucHV0IGRhdGEgYWdhaW5zdCB0aGUgc3RydWN0LlxuICovXG5jbGFzcyBTdHJ1Y3Qge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgc2NoZW1hLCB2YWxpZGF0b3IsIHJlZmluZXIsIGNvZXJjZXIgPSAodmFsdWUpID0+IHZhbHVlLCBlbnRyaWVzID0gZnVuY3Rpb24qICgpIHsgfSwgfSA9IHByb3BzO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgICAgICAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbiAgICAgICAgdGhpcy5jb2VyY2VyID0gY29lcmNlcjtcbiAgICAgICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0b3IgPSAodmFsdWUsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0b3IodmFsdWUsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0b0ZhaWx1cmVzKHJlc3VsdCwgY29udGV4dCwgdGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdG9yID0gKCkgPT4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZmluZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVmaW5lciA9ICh2YWx1ZSwgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlZmluZXIodmFsdWUsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0b0ZhaWx1cmVzKHJlc3VsdCwgY29udGV4dCwgdGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVmaW5lciA9ICgpID0+IFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFzc2VydCB0aGF0IGEgdmFsdWUgcGFzc2VzIHRoZSBzdHJ1Y3QncyB2YWxpZGF0aW9uLCB0aHJvd2luZyBpZiBpdCBkb2Vzbid0LlxuICAgICAqL1xuICAgIGFzc2VydCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gYXNzZXJ0KHZhbHVlLCB0aGlzLCBtZXNzYWdlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgdmFsdWUgd2l0aCB0aGUgc3RydWN0J3MgY29lcmNpb24gbG9naWMsIHRoZW4gdmFsaWRhdGUgaXQuXG4gICAgICovXG4gICAgY3JlYXRlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUodmFsdWUsIHRoaXMsIG1lc3NhZ2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHZhbHVlIHBhc3NlcyB0aGUgc3RydWN0J3MgdmFsaWRhdGlvbi5cbiAgICAgKi9cbiAgICBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXModmFsdWUsIHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXNrIGEgdmFsdWUsIGNvZXJjaW5nIGFuZCB2YWxpZGF0aW5nIGl0LCBidXQgcmV0dXJuaW5nIG9ubHkgdGhlIHN1YnNldCBvZlxuICAgICAqIHByb3BlcnRpZXMgZGVmaW5lZCBieSB0aGUgc3RydWN0J3Mgc2NoZW1hLiBNYXNraW5nIGFwcGxpZXMgcmVjdXJzaXZlbHkgdG9cbiAgICAgKiBwcm9wcyBvZiBgb2JqZWN0YCBzdHJ1Y3RzIG9ubHkuXG4gICAgICovXG4gICAgbWFzayh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbWFzayh2YWx1ZSwgdGhpcywgbWVzc2FnZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGEgdmFsdWUgd2l0aCB0aGUgc3RydWN0J3MgdmFsaWRhdGlvbiBsb2dpYywgcmV0dXJuaW5nIGEgdHVwbGVcbiAgICAgKiByZXByZXNlbnRpbmcgdGhlIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIFlvdSBtYXkgb3B0aW9uYWxseSBwYXNzIGB0cnVlYCBmb3IgdGhlIGBjb2VyY2VgIGFyZ3VtZW50IHRvIGNvZXJjZVxuICAgICAqIHRoZSB2YWx1ZSBiZWZvcmUgYXR0ZW1wdGluZyB0byB2YWxpZGF0ZSBpdC4gSWYgeW91IGRvLCB0aGUgcmVzdWx0IHdpbGxcbiAgICAgKiBjb250YWluIHRoZSBjb2VyY2VkIHJlc3VsdCB3aGVuIHN1Y2Nlc3NmdWwuIEFsc28sIGBtYXNrYCB3aWxsIHR1cm4gb25cbiAgICAgKiBtYXNraW5nIG9mIHRoZSB1bmtub3duIGBvYmplY3RgIHByb3BzIHJlY3Vyc2l2ZWx5IGlmIHBhc3NlZC5cbiAgICAgKi9cbiAgICB2YWxpZGF0ZSh2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh2YWx1ZSwgdGhpcywgb3B0aW9ucyk7XG4gICAgfVxufVxuLyoqXG4gKiBBc3NlcnQgdGhhdCBhIHZhbHVlIHBhc3NlcyBhIHN0cnVjdCwgdGhyb3dpbmcgaWYgaXQgZG9lc24ndC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KHZhbHVlLCBzdHJ1Y3QsIG1lc3NhZ2UpIHtcbiAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0ZSh2YWx1ZSwgc3RydWN0LCB7IG1lc3NhZ2UgfSk7XG4gICAgaWYgKHJlc3VsdFswXSkge1xuICAgICAgICB0aHJvdyByZXN1bHRbMF07XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGUgYSB2YWx1ZSB3aXRoIHRoZSBjb2VyY2lvbiBsb2dpYyBvZiBzdHJ1Y3QgYW5kIHZhbGlkYXRlIGl0LlxuICovXG5mdW5jdGlvbiBjcmVhdGUodmFsdWUsIHN0cnVjdCwgbWVzc2FnZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlKHZhbHVlLCBzdHJ1Y3QsIHsgY29lcmNlOiB0cnVlLCBtZXNzYWdlIH0pO1xuICAgIGlmIChyZXN1bHRbMF0pIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0WzBdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFsxXTtcbiAgICB9XG59XG4vKipcbiAqIE1hc2sgYSB2YWx1ZSwgcmV0dXJuaW5nIG9ubHkgdGhlIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGRlZmluZWQgYnkgYSBzdHJ1Y3QuXG4gKi9cbmZ1bmN0aW9uIG1hc2sodmFsdWUsIHN0cnVjdCwgbWVzc2FnZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlKHZhbHVlLCBzdHJ1Y3QsIHsgY29lcmNlOiB0cnVlLCBtYXNrOiB0cnVlLCBtZXNzYWdlIH0pO1xuICAgIGlmIChyZXN1bHRbMF0pIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0WzBdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFsxXTtcbiAgICB9XG59XG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgcGFzc2VzIGEgc3RydWN0LlxuICovXG5mdW5jdGlvbiBpcyh2YWx1ZSwgc3RydWN0KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdmFsaWRhdGUodmFsdWUsIHN0cnVjdCk7XG4gICAgcmV0dXJuICFyZXN1bHRbMF07XG59XG4vKipcbiAqIFZhbGlkYXRlIGEgdmFsdWUgYWdhaW5zdCBhIHN0cnVjdCwgcmV0dXJuaW5nIGFuIGVycm9yIGlmIGludmFsaWQsIG9yIHRoZVxuICogdmFsdWUgKHdpdGggcG90ZW50aWFsIGNvZXJjaW9uKSBpZiB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGUodmFsdWUsIHN0cnVjdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgdHVwbGVzID0gcnVuKHZhbHVlLCBzdHJ1Y3QsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHR1cGxlID0gc2hpZnRJdGVyYXRvcih0dXBsZXMpO1xuICAgIGlmICh0dXBsZVswXSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBTdHJ1Y3RFcnJvcih0dXBsZVswXSwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0dXBsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodFswXSkge1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCB0WzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbZXJyb3IsIHVuZGVmaW5lZF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB2ID0gdHVwbGVbMV07XG4gICAgICAgIHJldHVybiBbdW5kZWZpbmVkLCB2XTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnbiguLi5TdHJ1Y3RzKSB7XG4gICAgY29uc3QgaXNUeXBlID0gU3RydWN0c1swXS50eXBlID09PSAndHlwZSc7XG4gICAgY29uc3Qgc2NoZW1hcyA9IFN0cnVjdHMubWFwKChzKSA9PiBzLnNjaGVtYSk7XG4gICAgY29uc3Qgc2NoZW1hID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uc2NoZW1hcyk7XG4gICAgcmV0dXJuIGlzVHlwZSA/IHR5cGUoc2NoZW1hKSA6IG9iamVjdChzY2hlbWEpO1xufVxuLyoqXG4gKiBEZWZpbmUgYSBuZXcgc3RydWN0IHR5cGUgd2l0aCBhIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBkZWZpbmUobmFtZSwgdmFsaWRhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJ1Y3QoeyB0eXBlOiBuYW1lLCBzY2hlbWE6IG51bGwsIHZhbGlkYXRvciB9KTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHN0cnVjdCBiYXNlZCBvbiBhbiBleGlzdGluZyBzdHJ1Y3QsIGJ1dCB0aGUgdmFsdWUgaXMgYWxsb3dlZCB0b1xuICogYmUgYHVuZGVmaW5lZGAuIGBsb2dgIHdpbGwgYmUgY2FsbGVkIGlmIHRoZSB2YWx1ZSBpcyBub3QgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGRlcHJlY2F0ZWQoc3RydWN0LCBsb2cpIHtcbiAgICByZXR1cm4gbmV3IFN0cnVjdCh7XG4gICAgICAgIC4uLnN0cnVjdCxcbiAgICAgICAgcmVmaW5lcjogKHZhbHVlLCBjdHgpID0+IHZhbHVlID09PSB1bmRlZmluZWQgfHwgc3RydWN0LnJlZmluZXIodmFsdWUsIGN0eCksXG4gICAgICAgIHZhbGlkYXRvcih2YWx1ZSwgY3R4KSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nKHZhbHVlLCBjdHgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJ1Y3QudmFsaWRhdG9yKHZhbHVlLCBjdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBzdHJ1Y3Qgd2l0aCBkeW5hbWljIHZhbGlkYXRpb24gbG9naWMuXG4gKlxuICogVGhlIGNhbGxiYWNrIHdpbGwgcmVjZWl2ZSB0aGUgdmFsdWUgY3VycmVudGx5IGJlaW5nIHZhbGlkYXRlZCwgYW5kIG11c3RcbiAqIHJldHVybiBhIHN0cnVjdCBvYmplY3QgdG8gdmFsaWRhdGUgaXQgd2l0aC4gVGhpcyBjYW4gYmUgdXNlZnVsIHRvIG1vZGVsXG4gKiB2YWxpZGF0aW9uIGxvZ2ljIHRoYXQgY2hhbmdlcyBiYXNlZCBvbiBpdHMgaW5wdXQuXG4gKi9cbmZ1bmN0aW9uIGR5bmFtaWMoZm4pIHtcbiAgICByZXR1cm4gbmV3IFN0cnVjdCh7XG4gICAgICAgIHR5cGU6ICdkeW5hbWljJyxcbiAgICAgICAgc2NoZW1hOiBudWxsLFxuICAgICAgICAqZW50cmllcyh2YWx1ZSwgY3R4KSB7XG4gICAgICAgICAgICBjb25zdCBzdHJ1Y3QgPSBmbih2YWx1ZSwgY3R4KTtcbiAgICAgICAgICAgIHlpZWxkKiBzdHJ1Y3QuZW50cmllcyh2YWx1ZSwgY3R4KTtcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdG9yKHZhbHVlLCBjdHgpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cnVjdCA9IGZuKHZhbHVlLCBjdHgpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cnVjdC52YWxpZGF0b3IodmFsdWUsIGN0eCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvZXJjZXIodmFsdWUsIGN0eCkge1xuICAgICAgICAgICAgY29uc3Qgc3RydWN0ID0gZm4odmFsdWUsIGN0eCk7XG4gICAgICAgICAgICByZXR1cm4gc3RydWN0LmNvZXJjZXIodmFsdWUsIGN0eCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlZmluZXIodmFsdWUsIGN0eCkge1xuICAgICAgICAgICAgY29uc3Qgc3RydWN0ID0gZm4odmFsdWUsIGN0eCk7XG4gICAgICAgICAgICByZXR1cm4gc3RydWN0LnJlZmluZXIodmFsdWUsIGN0eCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4vKipcbiAqIENyZWF0ZSBhIHN0cnVjdCB3aXRoIGxhemlseSBldmFsdWF0ZWQgdmFsaWRhdGlvbiBsb2dpYy5cbiAqXG4gKiBUaGUgZmlyc3QgdGltZSB2YWxpZGF0aW9uIGlzIHJ1biB3aXRoIHRoZSBzdHJ1Y3QsIHRoZSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZFxuICogYW5kIG11c3QgcmV0dXJuIGEgc3RydWN0IG9iamVjdCB0byB1c2UuIFRoaXMgaXMgdXNlZnVsIGZvciBjYXNlcyB3aGVyZSB5b3VcbiAqIHdhbnQgdG8gaGF2ZSBzZWxmLXJlZmVyZW50aWFsIHN0cnVjdHMgZm9yIG5lc3RlZCBkYXRhIHN0cnVjdHVyZXMgdG8gYXZvaWQgYVxuICogY2lyY3VsYXIgZGVmaW5pdGlvbiBwcm9ibGVtLlxuICovXG5mdW5jdGlvbiBsYXp5KGZuKSB7XG4gICAgbGV0IHN0cnVjdDtcbiAgICByZXR1cm4gbmV3IFN0cnVjdCh7XG4gICAgICAgIHR5cGU6ICdsYXp5JyxcbiAgICAgICAgc2NoZW1hOiBudWxsLFxuICAgICAgICAqZW50cmllcyh2YWx1ZSwgY3R4KSB7XG4gICAgICAgICAgICBzdHJ1Y3QgPz8gKHN0cnVjdCA9IGZuKCkpO1xuICAgICAgICAgICAgeWllbGQqIHN0cnVjdC5lbnRyaWVzKHZhbHVlLCBjdHgpO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0b3IodmFsdWUsIGN0eCkge1xuICAgICAgICAgICAgc3RydWN0ID8/IChzdHJ1Y3QgPSBmbigpKTtcbiAgICAgICAgICAgIHJldHVybiBzdHJ1Y3QudmFsaWRhdG9yKHZhbHVlLCBjdHgpO1xuICAgICAgICB9LFxuICAgICAgICBjb2VyY2VyKHZhbHVlLCBjdHgpIHtcbiAgICAgICAgICAgIHN0cnVjdCA/PyAoc3RydWN0ID0gZm4oKSk7XG4gICAgICAgICAgICByZXR1cm4gc3RydWN0LmNvZXJjZXIodmFsdWUsIGN0eCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlZmluZXIodmFsdWUsIGN0eCkge1xuICAgICAgICAgICAgc3RydWN0ID8/IChzdHJ1Y3QgPSBmbigpKTtcbiAgICAgICAgICAgIHJldHVybiBzdHJ1Y3QucmVmaW5lcih2YWx1ZSwgY3R4KTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHN0cnVjdCBiYXNlZCBvbiBhbiBleGlzdGluZyBvYmplY3Qgc3RydWN0LCBidXQgZXhjbHVkaW5nXG4gKiBzcGVjaWZpYyBwcm9wZXJ0aWVzLlxuICpcbiAqIExpa2UgVHlwZVNjcmlwdCdzIGBPbWl0YCB1dGlsaXR5LlxuICovXG5mdW5jdGlvbiBvbWl0KHN0cnVjdCwga2V5cykge1xuICAgIGNvbnN0IHsgc2NoZW1hIH0gPSBzdHJ1Y3Q7XG4gICAgY29uc3Qgc3Vic2NoZW1hID0geyAuLi5zY2hlbWEgfTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGRlbGV0ZSBzdWJzY2hlbWFba2V5XTtcbiAgICB9XG4gICAgc3dpdGNoIChzdHJ1Y3QudHlwZSkge1xuICAgICAgICBjYXNlICd0eXBlJzpcbiAgICAgICAgICAgIHJldHVybiB0eXBlKHN1YnNjaGVtYSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0KHN1YnNjaGVtYSk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc3RydWN0IGJhc2VkIG9uIGFuIGV4aXN0aW5nIG9iamVjdCBzdHJ1Y3QsIGJ1dCB3aXRoIGFsbCBvZiBpdHNcbiAqIHByb3BlcnRpZXMgYWxsb3dlZCB0byBiZSBgdW5kZWZpbmVkYC5cbiAqXG4gKiBMaWtlIFR5cGVTY3JpcHQncyBgUGFydGlhbGAgdXRpbGl0eS5cbiAqL1xuZnVuY3Rpb24gcGFydGlhbChzdHJ1Y3QpIHtcbiAgICBjb25zdCBpc1N0cnVjdCA9IHN0cnVjdCBpbnN0YW5jZW9mIFN0cnVjdDtcbiAgICBjb25zdCBzY2hlbWEgPSBpc1N0cnVjdCA/IHsgLi4uc3RydWN0LnNjaGVtYSB9IDogeyAuLi5zdHJ1Y3QgfTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2hlbWEpIHtcbiAgICAgICAgc2NoZW1hW2tleV0gPSBvcHRpb25hbChzY2hlbWFba2V5XSk7XG4gICAgfVxuICAgIGlmIChpc1N0cnVjdCAmJiBzdHJ1Y3QudHlwZSA9PT0gJ3R5cGUnKSB7XG4gICAgICAgIHJldHVybiB0eXBlKHNjaGVtYSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Qoc2NoZW1hKTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHN0cnVjdCBiYXNlZCBvbiBhbiBleGlzdGluZyBvYmplY3Qgc3RydWN0LCBidXQgb25seSBpbmNsdWRpbmdcbiAqIHNwZWNpZmljIHByb3BlcnRpZXMuXG4gKlxuICogTGlrZSBUeXBlU2NyaXB0J3MgYFBpY2tgIHV0aWxpdHkuXG4gKi9cbmZ1bmN0aW9uIHBpY2soc3RydWN0LCBrZXlzKSB7XG4gICAgY29uc3QgeyBzY2hlbWEgfSA9IHN0cnVjdDtcbiAgICBjb25zdCBzdWJzY2hlbWEgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIHN1YnNjaGVtYVtrZXldID0gc2NoZW1hW2tleV07XG4gICAgfVxuICAgIHN3aXRjaCAoc3RydWN0LnR5cGUpIHtcbiAgICAgICAgY2FzZSAndHlwZSc6XG4gICAgICAgICAgICByZXR1cm4gdHlwZShzdWJzY2hlbWEpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdChzdWJzY2hlbWEpO1xuICAgIH1cbn1cbi8qKlxuICogRGVmaW5lIGEgbmV3IHN0cnVjdCB0eXBlIHdpdGggYSBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbi5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGhhcyBiZWVuIHJlbmFtZWQgdG8gYGRlZmluZWAuXG4gKi9cbmZ1bmN0aW9uIHN0cnVjdChuYW1lLCB2YWxpZGF0b3IpIHtcbiAgICBjb25zb2xlLndhcm4oJ3N1cGVyc3RydWN0QDAuMTEgLSBUaGUgYHN0cnVjdGAgaGVscGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gYGRlZmluZWAuJyk7XG4gICAgcmV0dXJuIGRlZmluZShuYW1lLCB2YWxpZGF0b3IpO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IGFueSB2YWx1ZSBwYXNzZXMgdmFsaWRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gYW55KCkge1xuICAgIHJldHVybiBkZWZpbmUoJ2FueScsICgpID0+IHRydWUpO1xufVxuZnVuY3Rpb24gYXJyYXkoRWxlbWVudCkge1xuICAgIHJldHVybiBuZXcgU3RydWN0KHtcbiAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgc2NoZW1hOiBFbGVtZW50LFxuICAgICAgICAqZW50cmllcyh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKEVsZW1lbnQgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtpLCB2XSBvZiB2YWx1ZS5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgW2ksIHYsIEVsZW1lbnRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29lcmNlcih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuc2xpY2UoKSA6IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0b3IodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHxcbiAgICAgICAgICAgICAgICBgRXhwZWN0ZWQgYW4gYXJyYXkgdmFsdWUsIGJ1dCByZWNlaXZlZDogJHtwcmludCh2YWx1ZSl9YCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGEgdmFsdWUgaXMgYSBiaWdpbnQuXG4gKi9cbmZ1bmN0aW9uIGJpZ2ludCgpIHtcbiAgICByZXR1cm4gZGVmaW5lKCdiaWdpbnQnLCAodmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCc7XG4gICAgfSk7XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGEgdmFsdWUgaXMgYSBib29sZWFuLlxuICovXG5mdW5jdGlvbiBib29sZWFuKCkge1xuICAgIHJldHVybiBkZWZpbmUoJ2Jvb2xlYW4nLCAodmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nO1xuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIHZhbHVlIGlzIGEgdmFsaWQgYERhdGVgLlxuICpcbiAqIE5vdGU6IHRoaXMgYWxzbyBlbnN1cmVzIHRoYXQgdGhlIHZhbHVlIGlzICpub3QqIGFuIGludmFsaWQgYERhdGVgIG9iamVjdCxcbiAqIHdoaWNoIGNhbiBvY2N1ciB3aGVuIHBhcnNpbmcgYSBkYXRlIGZhaWxzIGJ1dCBzdGlsbCByZXR1cm5zIGEgYERhdGVgLlxuICovXG5mdW5jdGlvbiBkYXRlKCkge1xuICAgIHJldHVybiBkZWZpbmUoJ2RhdGUnLCAodmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuICgodmFsdWUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTih2YWx1ZS5nZXRUaW1lKCkpKSB8fFxuICAgICAgICAgICAgYEV4cGVjdGVkIGEgdmFsaWQgXFxgRGF0ZVxcYCBvYmplY3QsIGJ1dCByZWNlaXZlZDogJHtwcmludCh2YWx1ZSl9YCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBlbnVtcyh2YWx1ZXMpIHtcbiAgICBjb25zdCBzY2hlbWEgPSB7fTtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHZhbHVlcy5tYXAoKHYpID0+IHByaW50KHYpKS5qb2luKCk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgdmFsdWVzKSB7XG4gICAgICAgIHNjaGVtYVtrZXldID0ga2V5O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN0cnVjdCh7XG4gICAgICAgIHR5cGU6ICdlbnVtcycsXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgdmFsaWRhdG9yKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlcy5pbmNsdWRlcyh2YWx1ZSkgfHxcbiAgICAgICAgICAgICAgICBgRXhwZWN0ZWQgb25lIG9mIFxcYCR7ZGVzY3JpcHRpb259XFxgLCBidXQgcmVjZWl2ZWQ6ICR7cHJpbnQodmFsdWUpfWApO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIHZhbHVlIGlzIGEgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGZ1bmMoKSB7XG4gICAgcmV0dXJuIGRlZmluZSgnZnVuYycsICh2YWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgYEV4cGVjdGVkIGEgZnVuY3Rpb24sIGJ1dCByZWNlaXZlZDogJHtwcmludCh2YWx1ZSl9YCk7XG4gICAgfSk7XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGEgdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgYSBzcGVjaWZpYyBjbGFzcy5cbiAqL1xuZnVuY3Rpb24gaW5zdGFuY2UoQ2xhc3MpIHtcbiAgICByZXR1cm4gZGVmaW5lKCdpbnN0YW5jZScsICh2YWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4gKHZhbHVlIGluc3RhbmNlb2YgQ2xhc3MgfHxcbiAgICAgICAgICAgIGBFeHBlY3RlZCBhIFxcYCR7Q2xhc3MubmFtZX1cXGAgaW5zdGFuY2UsIGJ1dCByZWNlaXZlZDogJHtwcmludCh2YWx1ZSl9YCk7XG4gICAgfSk7XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGEgdmFsdWUgaXMgYW4gaW50ZWdlci5cbiAqL1xuZnVuY3Rpb24gaW50ZWdlcigpIHtcbiAgICByZXR1cm4gZGVmaW5lKCdpbnRlZ2VyJywgKHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbHVlKSAmJiBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkgfHxcbiAgICAgICAgICAgIGBFeHBlY3RlZCBhbiBpbnRlZ2VyLCBidXQgcmVjZWl2ZWQ6ICR7cHJpbnQodmFsdWUpfWApO1xuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIHZhbHVlIG1hdGNoZXMgYWxsIG9mIGEgc2V0IG9mIHR5cGVzLlxuICovXG5mdW5jdGlvbiBpbnRlcnNlY3Rpb24oU3RydWN0cykge1xuICAgIHJldHVybiBuZXcgU3RydWN0KHtcbiAgICAgICAgdHlwZTogJ2ludGVyc2VjdGlvbicsXG4gICAgICAgIHNjaGVtYTogbnVsbCxcbiAgICAgICAgKmVudHJpZXModmFsdWUsIGN0eCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBTIG9mIFN0cnVjdHMpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCogUy5lbnRyaWVzKHZhbHVlLCBjdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAqdmFsaWRhdG9yKHZhbHVlLCBjdHgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgUyBvZiBTdHJ1Y3RzKSB7XG4gICAgICAgICAgICAgICAgeWllbGQqIFMudmFsaWRhdG9yKHZhbHVlLCBjdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAqcmVmaW5lcih2YWx1ZSwgY3R4KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFMgb2YgU3RydWN0cykge1xuICAgICAgICAgICAgICAgIHlpZWxkKiBTLnJlZmluZXIodmFsdWUsIGN0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5mdW5jdGlvbiBsaXRlcmFsKGNvbnN0YW50KSB7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBwcmludChjb25zdGFudCk7XG4gICAgY29uc3QgdCA9IHR5cGVvZiBjb25zdGFudDtcbiAgICByZXR1cm4gbmV3IFN0cnVjdCh7XG4gICAgICAgIHR5cGU6ICdsaXRlcmFsJyxcbiAgICAgICAgc2NoZW1hOiB0ID09PSAnc3RyaW5nJyB8fCB0ID09PSAnbnVtYmVyJyB8fCB0ID09PSAnYm9vbGVhbicgPyBjb25zdGFudCA6IG51bGwsXG4gICAgICAgIHZhbGlkYXRvcih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSA9PT0gY29uc3RhbnQgfHxcbiAgICAgICAgICAgICAgICBgRXhwZWN0ZWQgdGhlIGxpdGVyYWwgXFxgJHtkZXNjcmlwdGlvbn1cXGAsIGJ1dCByZWNlaXZlZDogJHtwcmludCh2YWx1ZSl9YCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5mdW5jdGlvbiBtYXAoS2V5LCBWYWx1ZSkge1xuICAgIHJldHVybiBuZXcgU3RydWN0KHtcbiAgICAgICAgdHlwZTogJ21hcCcsXG4gICAgICAgIHNjaGVtYTogbnVsbCxcbiAgICAgICAgKmVudHJpZXModmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChLZXkgJiYgVmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiB2YWx1ZS5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgW2ssIGssIEtleV07XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIFtrLCB2LCBWYWx1ZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb2VyY2VyKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBNYXAgPyBuZXcgTWFwKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0b3IodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBNYXAgfHxcbiAgICAgICAgICAgICAgICBgRXhwZWN0ZWQgYSBcXGBNYXBcXGAgb2JqZWN0LCBidXQgcmVjZWl2ZWQ6ICR7cHJpbnQodmFsdWUpfWApO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBubyB2YWx1ZSBldmVyIHBhc3NlcyB2YWxpZGF0aW9uLlxuICovXG5mdW5jdGlvbiBuZXZlcigpIHtcbiAgICByZXR1cm4gZGVmaW5lKCduZXZlcicsICgpID0+IGZhbHNlKTtcbn1cbi8qKlxuICogQXVnbWVudCBhbiBleGlzdGluZyBzdHJ1Y3QgdG8gYWxsb3cgYG51bGxgIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gbnVsbGFibGUoc3RydWN0KSB7XG4gICAgcmV0dXJuIG5ldyBTdHJ1Y3Qoe1xuICAgICAgICAuLi5zdHJ1Y3QsXG4gICAgICAgIHZhbGlkYXRvcjogKHZhbHVlLCBjdHgpID0+IHZhbHVlID09PSBudWxsIHx8IHN0cnVjdC52YWxpZGF0b3IodmFsdWUsIGN0eCksXG4gICAgICAgIHJlZmluZXI6ICh2YWx1ZSwgY3R4KSA9PiB2YWx1ZSA9PT0gbnVsbCB8fCBzdHJ1Y3QucmVmaW5lcih2YWx1ZSwgY3R4KSxcbiAgICB9KTtcbn1cbi8qKlxuICogRW5zdXJlIHRoYXQgYSB2YWx1ZSBpcyBhIG51bWJlci5cbiAqL1xuZnVuY3Rpb24gbnVtYmVyKCkge1xuICAgIHJldHVybiBkZWZpbmUoJ251bWJlcicsICh2YWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4gKCh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmICFpc05hTih2YWx1ZSkpIHx8XG4gICAgICAgICAgICBgRXhwZWN0ZWQgYSBudW1iZXIsIGJ1dCByZWNlaXZlZDogJHtwcmludCh2YWx1ZSl9YCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBvYmplY3Qoc2NoZW1hKSB7XG4gICAgY29uc3Qga25vd25zID0gc2NoZW1hID8gT2JqZWN0LmtleXMoc2NoZW1hKSA6IFtdO1xuICAgIGNvbnN0IE5ldmVyID0gbmV2ZXIoKTtcbiAgICByZXR1cm4gbmV3IFN0cnVjdCh7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBzY2hlbWE6IHNjaGVtYSA/IHNjaGVtYSA6IG51bGwsXG4gICAgICAgICplbnRyaWVzKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoc2NoZW1hICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVua25vd25zID0gbmV3IFNldChPYmplY3Qua2V5cyh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtub3ducykge1xuICAgICAgICAgICAgICAgICAgICB1bmtub3ducy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgW2tleSwgdmFsdWVba2V5XSwgc2NoZW1hW2tleV1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB1bmtub3ducykge1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCBba2V5LCB2YWx1ZVtrZXldLCBOZXZlcl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2YWxpZGF0b3IodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiAoaXNOb25BcnJheU9iamVjdCh2YWx1ZSkgfHxcbiAgICAgICAgICAgICAgICBgRXhwZWN0ZWQgYW4gb2JqZWN0LCBidXQgcmVjZWl2ZWQ6ICR7cHJpbnQodmFsdWUpfWApO1xuICAgICAgICB9LFxuICAgICAgICBjb2VyY2VyKHZhbHVlLCBjdHgpIHtcbiAgICAgICAgICAgIGlmICghaXNOb25BcnJheU9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2VyY2VkID0geyAuLi52YWx1ZSB9O1xuICAgICAgICAgICAgLy8gVGhlIGBvYmplY3RgIHN0cnVjdCBoYXMgc3BlY2lhbCBiZWhhdmlvdXIgZW5hYmxlZCBieSB0aGUgbWFzayBmbGFnLlxuICAgICAgICAgICAgLy8gV2hlbiBtYXNraW5nLCBwcm9wZXJ0aWVzIHRoYXQgYXJlIG5vdCBpbiB0aGUgc2NoZW1hIGFyZSBkZWxldGVkIGZyb21cbiAgICAgICAgICAgIC8vIHRoZSBjb2VyY2VkIG9iamVjdCBpbnN0ZWFkIG9mIGV2ZW50dWFsbHkgZmFpbGluZyB2YWxpZGFpdG9uLlxuICAgICAgICAgICAgaWYgKGN0eC5tYXNrICYmIHNjaGVtYSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvZXJjZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjaGVtYVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb2VyY2VkW2tleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29lcmNlZDtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbi8qKlxuICogQXVnbWVudCBhIHN0cnVjdCB0byBhbGxvdyBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIG9wdGlvbmFsKHN0cnVjdCkge1xuICAgIHJldHVybiBuZXcgU3RydWN0KHtcbiAgICAgICAgLi4uc3RydWN0LFxuICAgICAgICB2YWxpZGF0b3I6ICh2YWx1ZSwgY3R4KSA9PiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHN0cnVjdC52YWxpZGF0b3IodmFsdWUsIGN0eCksXG4gICAgICAgIHJlZmluZXI6ICh2YWx1ZSwgY3R4KSA9PiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHN0cnVjdC5yZWZpbmVyKHZhbHVlLCBjdHgpLFxuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGtleXMgYW5kIHZhbHVlcyBvZiBzcGVjaWZpYyB0eXBlcywgYnV0XG4gKiB3aXRob3V0IGVuc3VyaW5nIGFueSBzcGVjaWZpYyBzaGFwZSBvZiBwcm9wZXJ0aWVzLlxuICpcbiAqIExpa2UgVHlwZVNjcmlwdCdzIGBSZWNvcmRgIHV0aWxpdHkuXG4gKi9cbmZ1bmN0aW9uIHJlY29yZChLZXksIFZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJ1Y3Qoe1xuICAgICAgICB0eXBlOiAncmVjb3JkJyxcbiAgICAgICAgc2NoZW1hOiBudWxsLFxuICAgICAgICAqZW50cmllcyh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgayBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ID0gdmFsdWVba107XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIFtrLCBrLCBLZXldO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCBbaywgdiwgVmFsdWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdG9yKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gKGlzTm9uQXJyYXlPYmplY3QodmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgYEV4cGVjdGVkIGFuIG9iamVjdCwgYnV0IHJlY2VpdmVkOiAke3ByaW50KHZhbHVlKX1gKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29lcmNlcih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTm9uQXJyYXlPYmplY3QodmFsdWUpID8geyAuLi52YWx1ZSB9IDogdmFsdWU7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGEgdmFsdWUgaXMgYSBgUmVnRXhwYC5cbiAqXG4gKiBOb3RlOiB0aGlzIGRvZXMgbm90IHRlc3QgdGhlIHZhbHVlIGFnYWluc3QgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiEgRm9yIHRoYXRcbiAqIHlvdSBuZWVkIHRvIHVzZSB0aGUgYHBhdHRlcm4oKWAgcmVmaW5lbWVudC5cbiAqL1xuZnVuY3Rpb24gcmVnZXhwKCkge1xuICAgIHJldHVybiBkZWZpbmUoJ3JlZ2V4cCcsICh2YWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBSZWdFeHA7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZXQoRWxlbWVudCkge1xuICAgIHJldHVybiBuZXcgU3RydWN0KHtcbiAgICAgICAgdHlwZTogJ3NldCcsXG4gICAgICAgIHNjaGVtYTogbnVsbCxcbiAgICAgICAgKmVudHJpZXModmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChFbGVtZW50ICYmIHZhbHVlIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB2IG9mIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIFt2LCB2LCBFbGVtZW50XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvZXJjZXIodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFNldCA/IG5ldyBTZXQodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFNldCB8fFxuICAgICAgICAgICAgICAgIGBFeHBlY3RlZCBhIFxcYFNldFxcYCBvYmplY3QsIGJ1dCByZWNlaXZlZDogJHtwcmludCh2YWx1ZSl9YCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGEgdmFsdWUgaXMgYSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZygpIHtcbiAgICByZXR1cm4gZGVmaW5lKCdzdHJpbmcnLCAodmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICBgRXhwZWN0ZWQgYSBzdHJpbmcsIGJ1dCByZWNlaXZlZDogJHtwcmludCh2YWx1ZSl9YCk7XG4gICAgfSk7XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGEgdmFsdWUgaXMgYSB0dXBsZSBvZiBhIHNwZWNpZmljIGxlbmd0aCwgYW5kIHRoYXQgZWFjaCBvZiBpdHNcbiAqIGVsZW1lbnRzIGlzIG9mIGEgc3BlY2lmaWMgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdHVwbGUoU3RydWN0cykge1xuICAgIGNvbnN0IE5ldmVyID0gbmV2ZXIoKTtcbiAgICByZXR1cm4gbmV3IFN0cnVjdCh7XG4gICAgICAgIHR5cGU6ICd0dXBsZScsXG4gICAgICAgIHNjaGVtYTogbnVsbCxcbiAgICAgICAgKmVudHJpZXModmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KFN0cnVjdHMubGVuZ3RoLCB2YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgW2ksIHZhbHVlW2ldLCBTdHJ1Y3RzW2ldIHx8IE5ldmVyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fFxuICAgICAgICAgICAgICAgIGBFeHBlY3RlZCBhbiBhcnJheSwgYnV0IHJlY2VpdmVkOiAke3ByaW50KHZhbHVlKX1gKTtcbiAgICAgICAgfSxcbiAgICAgICAgY29lcmNlcih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuc2xpY2UoKSA6IHZhbHVlO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIHZhbHVlIGhhcyBhIHNldCBvZiBrbm93biBwcm9wZXJ0aWVzIG9mIHNwZWNpZmljIHR5cGVzLlxuICpcbiAqIE5vdGU6IFVucmVjb2duaXplZCBwcm9wZXJ0aWVzIGFyZSBhbGxvd2VkIGFuZCB1bnRvdWNoZWQuIFRoaXMgaXMgc2ltaWxhciB0b1xuICogaG93IFR5cGVTY3JpcHQncyBzdHJ1Y3R1cmFsIHR5cGluZyB3b3Jrcy5cbiAqL1xuZnVuY3Rpb24gdHlwZShzY2hlbWEpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc2NoZW1hKTtcbiAgICByZXR1cm4gbmV3IFN0cnVjdCh7XG4gICAgICAgIHR5cGU6ICd0eXBlJyxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICAqZW50cmllcyh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgayBvZiBrZXlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIFtrLCB2YWx1ZVtrXSwgc2NoZW1hW2tdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIChpc05vbkFycmF5T2JqZWN0KHZhbHVlKSB8fFxuICAgICAgICAgICAgICAgIGBFeHBlY3RlZCBhbiBvYmplY3QsIGJ1dCByZWNlaXZlZDogJHtwcmludCh2YWx1ZSl9YCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvZXJjZXIodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBpc05vbkFycmF5T2JqZWN0KHZhbHVlKSA/IHsgLi4udmFsdWUgfSA6IHZhbHVlO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIHZhbHVlIG1hdGNoZXMgb25lIG9mIGEgc2V0IG9mIHR5cGVzLlxuICovXG5mdW5jdGlvbiB1bmlvbihTdHJ1Y3RzKSB7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBTdHJ1Y3RzLm1hcCgocykgPT4gcy50eXBlKS5qb2luKCcgfCAnKTtcbiAgICByZXR1cm4gbmV3IFN0cnVjdCh7XG4gICAgICAgIHR5cGU6ICd1bmlvbicsXG4gICAgICAgIHNjaGVtYTogbnVsbCxcbiAgICAgICAgY29lcmNlcih2YWx1ZSwgY3R4KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFMgb2YgU3RydWN0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtlcnJvciwgY29lcmNlZF0gPSBTLnZhbGlkYXRlKHZhbHVlLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvZXJjZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbWFzazogY3R4Lm1hc2ssXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29lcmNlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRvcih2YWx1ZSwgY3R4KSB7XG4gICAgICAgICAgICBjb25zdCBmYWlsdXJlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBTIG9mIFN0cnVjdHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbLi4udHVwbGVzXSA9IHJ1bih2YWx1ZSwgUywgY3R4KTtcbiAgICAgICAgICAgICAgICBjb25zdCBbZmlyc3RdID0gdHVwbGVzO1xuICAgICAgICAgICAgICAgIGlmICghZmlyc3RbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZmFpbHVyZV0gb2YgdHVwbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmFpbHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWx1cmVzLnB1c2goZmFpbHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGBFeHBlY3RlZCB0aGUgdmFsdWUgdG8gc2F0aXNmeSBhIHVuaW9uIG9mIFxcYCR7ZGVzY3JpcHRpb259XFxgLCBidXQgcmVjZWl2ZWQ6ICR7cHJpbnQodmFsdWUpfWAsXG4gICAgICAgICAgICAgICAgLi4uZmFpbHVyZXMsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhbnkgdmFsdWUgcGFzc2VzIHZhbGlkYXRpb24sIHdpdGhvdXQgd2lkZW5pbmcgaXRzIHR5cGUgdG8gYGFueWAuXG4gKi9cbmZ1bmN0aW9uIHVua25vd24oKSB7XG4gICAgcmV0dXJuIGRlZmluZSgndW5rbm93bicsICgpID0+IHRydWUpO1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSBgU3RydWN0YCB0byBhZGQgYW4gYWRkaXRpb25hbCBjb2VyY2lvbiBzdGVwIHRvIGl0cyBpbnB1dC5cbiAqXG4gKiBUaGlzIGFsbG93cyB5b3UgdG8gdHJhbnNmb3JtIGlucHV0IGRhdGEgYmVmb3JlIHZhbGlkYXRpbmcgaXQsIHRvIGluY3JlYXNlIHRoZVxuICogbGlrZWxpaG9vZCB0aGF0IGl0IHBhc3NlcyB2YWxpZGF0aW9u4oCUZm9yIGV4YW1wbGUgZm9yIGRlZmF1bHQgdmFsdWVzLCBwYXJzaW5nXG4gKiBkaWZmZXJlbnQgZm9ybWF0cywgZXRjLlxuICpcbiAqIE5vdGU6IFlvdSBtdXN0IHVzZSBgY3JlYXRlKHZhbHVlLCBTdHJ1Y3QpYCBvbiB0aGUgdmFsdWUgdG8gaGF2ZSB0aGUgY29lcmNpb25cbiAqIHRha2UgZWZmZWN0ISBVc2luZyBzaW1wbHkgYGFzc2VydCgpYCBvciBgaXMoKWAgd2lsbCBub3QgdXNlIGNvZXJjaW9uLlxuICovXG5mdW5jdGlvbiBjb2VyY2Uoc3RydWN0LCBjb25kaXRpb24sIGNvZXJjZXIpIHtcbiAgICByZXR1cm4gbmV3IFN0cnVjdCh7XG4gICAgICAgIC4uLnN0cnVjdCxcbiAgICAgICAgY29lcmNlcjogKHZhbHVlLCBjdHgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpcyh2YWx1ZSwgY29uZGl0aW9uKVxuICAgICAgICAgICAgICAgID8gc3RydWN0LmNvZXJjZXIoY29lcmNlcih2YWx1ZSwgY3R4KSwgY3R4KVxuICAgICAgICAgICAgICAgIDogc3RydWN0LmNvZXJjZXIodmFsdWUsIGN0eCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4vKipcbiAqIEF1Z21lbnQgYSBzdHJ1Y3QgdG8gcmVwbGFjZSBgdW5kZWZpbmVkYCB2YWx1ZXMgd2l0aCBhIGRlZmF1bHQuXG4gKlxuICogTm90ZTogWW91IG11c3QgdXNlIGBjcmVhdGUodmFsdWUsIFN0cnVjdClgIG9uIHRoZSB2YWx1ZSB0byBoYXZlIHRoZSBjb2VyY2lvblxuICogdGFrZSBlZmZlY3QhIFVzaW5nIHNpbXBseSBgYXNzZXJ0KClgIG9yIGBpcygpYCB3aWxsIG5vdCB1c2UgY29lcmNpb24uXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRlZChzdHJ1Y3QsIGZhbGxiYWNrLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gY29lcmNlKHN0cnVjdCwgdW5rbm93bigpLCAoeCkgPT4ge1xuICAgICAgICBjb25zdCBmID0gdHlwZW9mIGZhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gZmFsbGJhY2soKSA6IGZhbGxiYWNrO1xuICAgICAgICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuc3RyaWN0ICYmIGlzUGxhaW5PYmplY3QoeCkgJiYgaXNQbGFpbk9iamVjdChmKSkge1xuICAgICAgICAgICAgY29uc3QgcmV0ID0geyAuLi54IH07XG4gICAgICAgICAgICBsZXQgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZikge1xuICAgICAgICAgICAgICAgIGlmIChyZXRba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldFtrZXldID0gZltrZXldO1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfSk7XG59XG4vKipcbiAqIEF1Z21lbnQgYSBzdHJ1Y3QgdG8gdHJpbSBzdHJpbmcgaW5wdXRzLlxuICpcbiAqIE5vdGU6IFlvdSBtdXN0IHVzZSBgY3JlYXRlKHZhbHVlLCBTdHJ1Y3QpYCBvbiB0aGUgdmFsdWUgdG8gaGF2ZSB0aGUgY29lcmNpb25cbiAqIHRha2UgZWZmZWN0ISBVc2luZyBzaW1wbHkgYGFzc2VydCgpYCBvciBgaXMoKWAgd2lsbCBub3QgdXNlIGNvZXJjaW9uLlxuICovXG5mdW5jdGlvbiB0cmltbWVkKHN0cnVjdCkge1xuICAgIHJldHVybiBjb2VyY2Uoc3RydWN0LCBzdHJpbmcoKSwgKHgpID0+IHgudHJpbSgpKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIHN0cmluZywgYXJyYXksIG1hcCwgb3Igc2V0IGlzIGVtcHR5LlxuICovXG5mdW5jdGlvbiBlbXB0eShzdHJ1Y3QpIHtcbiAgICByZXR1cm4gcmVmaW5lKHN0cnVjdCwgJ2VtcHR5JywgKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBnZXRTaXplKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIChzaXplID09PSAwIHx8XG4gICAgICAgICAgICBgRXhwZWN0ZWQgYW4gZW1wdHkgJHtzdHJ1Y3QudHlwZX0gYnV0IHJlY2VpdmVkIG9uZSB3aXRoIGEgc2l6ZSBvZiBcXGAke3NpemV9XFxgYCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRTaXplKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTWFwIHx8IHZhbHVlIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5zaXplO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmxlbmd0aDtcbiAgICB9XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGEgbnVtYmVyIG9yIGRhdGUgaXMgYmVsb3cgYSB0aHJlc2hvbGQuXG4gKi9cbmZ1bmN0aW9uIG1heChzdHJ1Y3QsIHRocmVzaG9sZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBleGNsdXNpdmUgfSA9IG9wdGlvbnM7XG4gICAgcmV0dXJuIHJlZmluZShzdHJ1Y3QsICdtYXgnLCAodmFsdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIGV4Y2x1c2l2ZVxuICAgICAgICAgICAgPyB2YWx1ZSA8IHRocmVzaG9sZFxuICAgICAgICAgICAgOiB2YWx1ZSA8PSB0aHJlc2hvbGQgfHxcbiAgICAgICAgICAgICAgICBgRXhwZWN0ZWQgYSAke3N0cnVjdC50eXBlfSBsZXNzIHRoYW4gJHtleGNsdXNpdmUgPyAnJyA6ICdvciBlcXVhbCB0byAnfSR7dGhyZXNob2xkfSBidXQgcmVjZWl2ZWQgXFxgJHt2YWx1ZX1cXGBgO1xuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIG51bWJlciBvciBkYXRlIGlzIGFib3ZlIGEgdGhyZXNob2xkLlxuICovXG5mdW5jdGlvbiBtaW4oc3RydWN0LCB0aHJlc2hvbGQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgZXhjbHVzaXZlIH0gPSBvcHRpb25zO1xuICAgIHJldHVybiByZWZpbmUoc3RydWN0LCAnbWluJywgKHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiBleGNsdXNpdmVcbiAgICAgICAgICAgID8gdmFsdWUgPiB0aHJlc2hvbGRcbiAgICAgICAgICAgIDogdmFsdWUgPj0gdGhyZXNob2xkIHx8XG4gICAgICAgICAgICAgICAgYEV4cGVjdGVkIGEgJHtzdHJ1Y3QudHlwZX0gZ3JlYXRlciB0aGFuICR7ZXhjbHVzaXZlID8gJycgOiAnb3IgZXF1YWwgdG8gJ30ke3RocmVzaG9sZH0gYnV0IHJlY2VpdmVkIFxcYCR7dmFsdWV9XFxgYDtcbiAgICB9KTtcbn1cbi8qKlxuICogRW5zdXJlIHRoYXQgYSBzdHJpbmcsIGFycmF5LCBtYXAgb3Igc2V0IGlzIG5vdCBlbXB0eS5cbiAqL1xuZnVuY3Rpb24gbm9uZW1wdHkoc3RydWN0KSB7XG4gICAgcmV0dXJuIHJlZmluZShzdHJ1Y3QsICdub25lbXB0eScsICh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBzaXplID0gZ2V0U2l6ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiAoc2l6ZSA+IDAgfHwgYEV4cGVjdGVkIGEgbm9uZW1wdHkgJHtzdHJ1Y3QudHlwZX0gYnV0IHJlY2VpdmVkIGFuIGVtcHR5IG9uZWApO1xuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIHN0cmluZyBtYXRjaGVzIGEgcmVndWxhciBleHByZXNzaW9uLlxuICovXG5mdW5jdGlvbiBwYXR0ZXJuKHN0cnVjdCwgcmVnZXhwKSB7XG4gICAgcmV0dXJuIHJlZmluZShzdHJ1Y3QsICdwYXR0ZXJuJywgKHZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiAocmVnZXhwLnRlc3QodmFsdWUpIHx8XG4gICAgICAgICAgICBgRXhwZWN0ZWQgYSAke3N0cnVjdC50eXBlfSBtYXRjaGluZyBcXGAvJHtyZWdleHAuc291cmNlfS9cXGAgYnV0IHJlY2VpdmVkIFwiJHt2YWx1ZX1cImApO1xuICAgIH0pO1xufVxuLyoqXG4gKiBFbnN1cmUgdGhhdCBhIHN0cmluZywgYXJyYXksIG51bWJlciwgZGF0ZSwgbWFwLCBvciBzZXQgaGFzIGEgc2l6ZSAob3IgbGVuZ3RoLCBvciB0aW1lKSBiZXR3ZWVuIGBtaW5gIGFuZCBgbWF4YC5cbiAqL1xuZnVuY3Rpb24gc2l6ZShzdHJ1Y3QsIG1pbiwgbWF4ID0gbWluKSB7XG4gICAgY29uc3QgZXhwZWN0ZWQgPSBgRXhwZWN0ZWQgYSAke3N0cnVjdC50eXBlfWA7XG4gICAgY29uc3Qgb2YgPSBtaW4gPT09IG1heCA/IGBvZiBcXGAke21pbn1cXGBgIDogYGJldHdlZW4gXFxgJHttaW59XFxgIGFuZCBcXGAke21heH1cXGBgO1xuICAgIHJldHVybiByZWZpbmUoc3RydWN0LCAnc2l6ZScsICh2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiAoKG1pbiA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBtYXgpIHx8XG4gICAgICAgICAgICAgICAgYCR7ZXhwZWN0ZWR9ICR7b2Z9IGJ1dCByZWNlaXZlZCBcXGAke3ZhbHVlfVxcYGApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgTWFwIHx8IHZhbHVlIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICBjb25zdCB7IHNpemUgfSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuICgobWluIDw9IHNpemUgJiYgc2l6ZSA8PSBtYXgpIHx8XG4gICAgICAgICAgICAgICAgYCR7ZXhwZWN0ZWR9IHdpdGggYSBzaXplICR7b2Z9IGJ1dCByZWNlaXZlZCBvbmUgd2l0aCBhIHNpemUgb2YgXFxgJHtzaXplfVxcYGApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuICgobWluIDw9IGxlbmd0aCAmJiBsZW5ndGggPD0gbWF4KSB8fFxuICAgICAgICAgICAgICAgIGAke2V4cGVjdGVkfSB3aXRoIGEgbGVuZ3RoICR7b2Z9IGJ1dCByZWNlaXZlZCBvbmUgd2l0aCBhIGxlbmd0aCBvZiBcXGAke2xlbmd0aH1cXGBgKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLyoqXG4gKiBBdWdtZW50IGEgYFN0cnVjdGAgdG8gYWRkIGFuIGFkZGl0aW9uYWwgcmVmaW5lbWVudCB0byB0aGUgdmFsaWRhdGlvbi5cbiAqXG4gKiBUaGUgcmVmaW5lciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJlY2VpdmUgYSB2YWx1ZSBvZiB0aGUgc3RydWN0J3MgdHlwZSxcbiAqIGJlY2F1c2UgdGhlIHN0cnVjdCdzIGV4aXN0aW5nIHZhbGlkYXRpb24gd2lsbCBhbHJlYWR5IGhhdmUgcGFzc2VkLiBUaGlzXG4gKiBhbGxvd3MgeW91IHRvIGxheWVyIGFkZGl0aW9uYWwgdmFsaWRhdGlvbiBvbiB0b3Agb2YgZXhpc3Rpbmcgc3RydWN0cy5cbiAqL1xuZnVuY3Rpb24gcmVmaW5lKHN0cnVjdCwgbmFtZSwgcmVmaW5lcikge1xuICAgIHJldHVybiBuZXcgU3RydWN0KHtcbiAgICAgICAgLi4uc3RydWN0LFxuICAgICAgICAqcmVmaW5lcih2YWx1ZSwgY3R4KSB7XG4gICAgICAgICAgICB5aWVsZCogc3RydWN0LnJlZmluZXIodmFsdWUsIGN0eCk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSByZWZpbmVyKHZhbHVlLCBjdHgpO1xuICAgICAgICAgICAgY29uc3QgZmFpbHVyZXMgPSB0b0ZhaWx1cmVzKHJlc3VsdCwgY3R4LCBzdHJ1Y3QsIHZhbHVlKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmFpbHVyZSBvZiBmYWlsdXJlcykge1xuICAgICAgICAgICAgICAgIHlpZWxkIHsgLi4uZmFpbHVyZSwgcmVmaW5lbWVudDogbmFtZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xufVxuXG5leHBvcnQgeyBTdHJ1Y3QsIFN0cnVjdEVycm9yLCBhbnksIGFycmF5LCBhc3NlcnQsIGFzc2lnbiwgYmlnaW50LCBib29sZWFuLCBjb2VyY2UsIGNyZWF0ZSwgZGF0ZSwgZGVmYXVsdGVkLCBkZWZpbmUsIGRlcHJlY2F0ZWQsIGR5bmFtaWMsIGVtcHR5LCBlbnVtcywgZnVuYywgaW5zdGFuY2UsIGludGVnZXIsIGludGVyc2VjdGlvbiwgaXMsIGxhenksIGxpdGVyYWwsIG1hcCwgbWFzaywgbWF4LCBtaW4sIG5ldmVyLCBub25lbXB0eSwgbnVsbGFibGUsIG51bWJlciwgb2JqZWN0LCBvbWl0LCBvcHRpb25hbCwgcGFydGlhbCwgcGF0dGVybiwgcGljaywgcmVjb3JkLCByZWZpbmUsIHJlZ2V4cCwgc2V0LCBzaXplLCBzdHJpbmcsIHN0cnVjdCwgdHJpbW1lZCwgdHVwbGUsIHR5cGUsIHVuaW9uLCB1bmtub3duLCB2YWxpZGF0ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIiwiaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50ZW1pdHRlcjMnO1xuXG4vLyBub2RlX21vZHVsZXMvZXNidWlsZC1wbHVnaW4tcG9seWZpbGwtbm9kZS9wb2x5ZmlsbHMvYnVmZmVyLmpzXG52YXIgV2ViU29ja2V0QnJvd3NlckltcGwgPSBjbGFzcyBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIHNvY2tldDtcbiAgLyoqIEluc3RhbnRpYXRlIGEgV2ViU29ja2V0IGNsYXNzXG4gICogQGNvbnN0cnVjdG9yXG4gICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgLSB1cmwgdG8gYSB3ZWJzb2NrZXQgc2VydmVyXG4gICogQHBhcmFtIHsoT2JqZWN0KX0gb3B0aW9ucyAtIHdlYnNvY2tldCBvcHRpb25zXG4gICogQHBhcmFtIHsoU3RyaW5nfEFycmF5KX0gcHJvdG9jb2xzIC0gYSBsaXN0IG9mIHByb3RvY29sc1xuICAqIEByZXR1cm4ge1dlYlNvY2tldEJyb3dzZXJJbXBsfSAtIHJldHVybnMgYSBXZWJTb2NrZXQgaW5zdGFuY2VcbiAgKi9cbiAgY29uc3RydWN0b3IoYWRkcmVzcywgb3B0aW9ucywgcHJvdG9jb2xzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnNvY2tldCA9IG5ldyB3aW5kb3cuV2ViU29ja2V0KGFkZHJlc3MsIHByb3RvY29scyk7XG4gICAgdGhpcy5zb2NrZXQub25vcGVuID0gKCkgPT4gdGhpcy5lbWl0KFwib3BlblwiKTtcbiAgICB0aGlzLnNvY2tldC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHRoaXMuZW1pdChcIm1lc3NhZ2VcIiwgZXZlbnQuZGF0YSk7XG4gICAgdGhpcy5zb2NrZXQub25lcnJvciA9IChlcnJvcikgPT4gdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgIHRoaXMuc29ja2V0Lm9uY2xvc2UgPSAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMuZW1pdChcImNsb3NlXCIsIGV2ZW50LmNvZGUsIGV2ZW50LnJlYXNvbik7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgKiBTZW5kcyBkYXRhIHRocm91Z2ggYSB3ZWJzb2NrZXQgY29ubmVjdGlvblxuICAqIEBtZXRob2RcbiAgKiBAcGFyYW0geyhTdHJpbmd8T2JqZWN0KX0gZGF0YSAtIGRhdGEgdG8gYmUgc2VudCB2aWEgd2Vic29ja2V0XG4gICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNPckNhbGxiYWNrIC0gd3Mgb3B0aW9uc1xuICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gYSBjYWxsYmFjayBjYWxsZWQgb25jZSB0aGUgZGF0YSBpcyBzZW50XG4gICogQHJldHVybiB7VW5kZWZpbmVkfVxuICAqL1xuICBzZW5kKGRhdGEsIG9wdGlvbnNPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGNiID0gY2FsbGJhY2sgfHwgb3B0aW9uc09yQ2FsbGJhY2s7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuc29ja2V0LnNlbmQoZGF0YSk7XG4gICAgICBjYigpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYihlcnJvcik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAqIENsb3NlcyBhbiB1bmRlcmx5aW5nIHNvY2tldFxuICAqIEBtZXRob2RcbiAgKiBAcGFyYW0ge051bWJlcn0gY29kZSAtIHN0YXR1cyBjb2RlIGV4cGxhaW5pbmcgd2h5IHRoZSBjb25uZWN0aW9uIGlzIGJlaW5nIGNsb3NlZFxuICAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb24gLSBhIGRlc2NyaXB0aW9uIHdoeSB0aGUgY29ubmVjdGlvbiBpcyBjbG9zaW5nXG4gICogQHJldHVybiB7VW5kZWZpbmVkfVxuICAqIEB0aHJvd3Mge0Vycm9yfVxuICAqL1xuICBjbG9zZShjb2RlLCByZWFzb24pIHtcbiAgICB0aGlzLnNvY2tldC5jbG9zZShjb2RlLCByZWFzb24pO1xuICB9XG4gIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgfVxufTtcbmZ1bmN0aW9uIFdlYlNvY2tldChhZGRyZXNzLCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgV2ViU29ja2V0QnJvd3NlckltcGwoYWRkcmVzcywgb3B0aW9ucyk7XG59XG5cbi8vIHNyYy9saWIvdXRpbHMudHNcbnZhciBEZWZhdWx0RGF0YVBhY2sgPSBjbGFzcyB7XG4gIGVuY29kZSh2YWx1ZSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gIH1cbiAgZGVjb2RlKHZhbHVlKSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xuICB9XG59O1xuXG4vLyBzcmMvbGliL2NsaWVudC50c1xudmFyIENvbW1vbkNsaWVudCA9IGNsYXNzIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgYWRkcmVzcztcbiAgcnBjX2lkO1xuICBxdWV1ZTtcbiAgb3B0aW9ucztcbiAgYXV0b2Nvbm5lY3Q7XG4gIHJlYWR5O1xuICByZWNvbm5lY3Q7XG4gIHJlY29ubmVjdF90aW1lcl9pZDtcbiAgcmVjb25uZWN0X2ludGVydmFsO1xuICBtYXhfcmVjb25uZWN0cztcbiAgcmVzdF9vcHRpb25zO1xuICBjdXJyZW50X3JlY29ubmVjdHM7XG4gIGdlbmVyYXRlX3JlcXVlc3RfaWQ7XG4gIHNvY2tldDtcbiAgd2ViU29ja2V0RmFjdG9yeTtcbiAgZGF0YVBhY2s7XG4gIC8qKlxuICAqIEluc3RhbnRpYXRlIGEgQ2xpZW50IGNsYXNzLlxuICAqIEBjb25zdHJ1Y3RvclxuICAqIEBwYXJhbSB7d2ViU29ja2V0RmFjdG9yeX0gd2ViU29ja2V0RmFjdG9yeSAtIGZhY3RvcnkgbWV0aG9kIGZvciBXZWJTb2NrZXRcbiAgKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyAtIHVybCB0byBhIHdlYnNvY2tldCBzZXJ2ZXJcbiAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHdzIG9wdGlvbnMgb2JqZWN0IHdpdGggcmVjb25uZWN0IHBhcmFtZXRlcnNcbiAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZW5lcmF0ZV9yZXF1ZXN0X2lkIC0gY3VzdG9tIGdlbmVyYXRpb24gcmVxdWVzdCBJZFxuICAqIEBwYXJhbSB7RGF0YVBhY2t9IGRhdGFQYWNrIC0gZGF0YSBwYWNrIGNvbnRhaW5zIGVuY29kZXIgYW5kIGRlY29kZXJcbiAgKiBAcmV0dXJuIHtDb21tb25DbGllbnR9XG4gICovXG4gIGNvbnN0cnVjdG9yKHdlYlNvY2tldEZhY3RvcnksIGFkZHJlc3MgPSBcIndzOi8vbG9jYWxob3N0OjgwODBcIiwge1xuICAgIGF1dG9jb25uZWN0ID0gdHJ1ZSxcbiAgICByZWNvbm5lY3QgPSB0cnVlLFxuICAgIHJlY29ubmVjdF9pbnRlcnZhbCA9IDFlMyxcbiAgICBtYXhfcmVjb25uZWN0cyA9IDUsXG4gICAgLi4ucmVzdF9vcHRpb25zXG4gIH0gPSB7fSwgZ2VuZXJhdGVfcmVxdWVzdF9pZCwgZGF0YVBhY2spIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMud2ViU29ja2V0RmFjdG9yeSA9IHdlYlNvY2tldEZhY3Rvcnk7XG4gICAgdGhpcy5xdWV1ZSA9IHt9O1xuICAgIHRoaXMucnBjX2lkID0gMDtcbiAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIHRoaXMuYXV0b2Nvbm5lY3QgPSBhdXRvY29ubmVjdDtcbiAgICB0aGlzLnJlYWR5ID0gZmFsc2U7XG4gICAgdGhpcy5yZWNvbm5lY3QgPSByZWNvbm5lY3Q7XG4gICAgdGhpcy5yZWNvbm5lY3RfdGltZXJfaWQgPSB2b2lkIDA7XG4gICAgdGhpcy5yZWNvbm5lY3RfaW50ZXJ2YWwgPSByZWNvbm5lY3RfaW50ZXJ2YWw7XG4gICAgdGhpcy5tYXhfcmVjb25uZWN0cyA9IG1heF9yZWNvbm5lY3RzO1xuICAgIHRoaXMucmVzdF9vcHRpb25zID0gcmVzdF9vcHRpb25zO1xuICAgIHRoaXMuY3VycmVudF9yZWNvbm5lY3RzID0gMDtcbiAgICB0aGlzLmdlbmVyYXRlX3JlcXVlc3RfaWQgPSBnZW5lcmF0ZV9yZXF1ZXN0X2lkIHx8ICgoKSA9PiB0eXBlb2YgdGhpcy5ycGNfaWQgPT09IFwibnVtYmVyXCIgPyArK3RoaXMucnBjX2lkIDogTnVtYmVyKHRoaXMucnBjX2lkKSArIDEpO1xuICAgIGlmICghZGF0YVBhY2spIHRoaXMuZGF0YVBhY2sgPSBuZXcgRGVmYXVsdERhdGFQYWNrKCk7XG4gICAgZWxzZSB0aGlzLmRhdGFQYWNrID0gZGF0YVBhY2s7XG4gICAgaWYgKHRoaXMuYXV0b2Nvbm5lY3QpXG4gICAgICB0aGlzLl9jb25uZWN0KHRoaXMuYWRkcmVzcywge1xuICAgICAgICBhdXRvY29ubmVjdDogdGhpcy5hdXRvY29ubmVjdCxcbiAgICAgICAgcmVjb25uZWN0OiB0aGlzLnJlY29ubmVjdCxcbiAgICAgICAgcmVjb25uZWN0X2ludGVydmFsOiB0aGlzLnJlY29ubmVjdF9pbnRlcnZhbCxcbiAgICAgICAgbWF4X3JlY29ubmVjdHM6IHRoaXMubWF4X3JlY29ubmVjdHMsXG4gICAgICAgIC4uLnRoaXMucmVzdF9vcHRpb25zXG4gICAgICB9KTtcbiAgfVxuICAvKipcbiAgKiBDb25uZWN0cyB0byBhIGRlZmluZWQgc2VydmVyIGlmIG5vdCBjb25uZWN0ZWQgYWxyZWFkeS5cbiAgKiBAbWV0aG9kXG4gICogQHJldHVybiB7VW5kZWZpbmVkfVxuICAqL1xuICBjb25uZWN0KCkge1xuICAgIGlmICh0aGlzLnNvY2tldCkgcmV0dXJuO1xuICAgIHRoaXMuX2Nvbm5lY3QodGhpcy5hZGRyZXNzLCB7XG4gICAgICBhdXRvY29ubmVjdDogdGhpcy5hdXRvY29ubmVjdCxcbiAgICAgIHJlY29ubmVjdDogdGhpcy5yZWNvbm5lY3QsXG4gICAgICByZWNvbm5lY3RfaW50ZXJ2YWw6IHRoaXMucmVjb25uZWN0X2ludGVydmFsLFxuICAgICAgbWF4X3JlY29ubmVjdHM6IHRoaXMubWF4X3JlY29ubmVjdHMsXG4gICAgICAuLi50aGlzLnJlc3Rfb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAqIENhbGxzIGEgcmVnaXN0ZXJlZCBSUEMgbWV0aG9kIG9uIHNlcnZlci5cbiAgKiBAbWV0aG9kXG4gICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCAtIFJQQyBtZXRob2QgbmFtZVxuICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBwYXJhbXMgLSBvcHRpb25hbCBtZXRob2QgcGFyYW1ldGVyc1xuICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0IC0gUlBDIHJlcGx5IHRpbWVvdXQgdmFsdWVcbiAgKiBAcGFyYW0ge09iamVjdH0gd3Nfb3B0cyAtIG9wdGlvbnMgcGFzc2VkIHRvIHdzXG4gICogQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgY2FsbChtZXRob2QsIHBhcmFtcywgdGltZW91dCwgd3Nfb3B0cykge1xuICAgIGlmICghd3Nfb3B0cyAmJiBcIm9iamVjdFwiID09PSB0eXBlb2YgdGltZW91dCkge1xuICAgICAgd3Nfb3B0cyA9IHRpbWVvdXQ7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICghdGhpcy5yZWFkeSkgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJzb2NrZXQgbm90IHJlYWR5XCIpKTtcbiAgICAgIGNvbnN0IHJwY19pZCA9IHRoaXMuZ2VuZXJhdGVfcmVxdWVzdF9pZChtZXRob2QsIHBhcmFtcyk7XG4gICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICBtZXRob2QsXG4gICAgICAgIHBhcmFtczogcGFyYW1zIHx8IHZvaWQgMCxcbiAgICAgICAgaWQ6IHJwY19pZFxuICAgICAgfTtcbiAgICAgIHRoaXMuc29ja2V0LnNlbmQodGhpcy5kYXRhUGFjay5lbmNvZGUobWVzc2FnZSksIHdzX29wdHMsIChlcnJvcikgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICB0aGlzLnF1ZXVlW3JwY19pZF0gPSB7IHByb21pc2U6IFtyZXNvbHZlLCByZWplY3RdIH07XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgdGhpcy5xdWV1ZVtycGNfaWRdLnRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnF1ZXVlW3JwY19pZF07XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwicmVwbHkgdGltZW91dFwiKSk7XG4gICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAqIExvZ2lucyB3aXRoIHRoZSBvdGhlciBzaWRlIG9mIHRoZSBjb25uZWN0aW9uLlxuICAqIEBtZXRob2RcbiAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gTG9naW4gY3JlZGVudGlhbHMgb2JqZWN0XG4gICogQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgYXN5bmMgbG9naW4ocGFyYW1zKSB7XG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IHRoaXMuY2FsbChcInJwYy5sb2dpblwiLCBwYXJhbXMpO1xuICAgIGlmICghcmVzcCkgdGhyb3cgbmV3IEVycm9yKFwiYXV0aGVudGljYXRpb24gZmFpbGVkXCIpO1xuICAgIHJldHVybiByZXNwO1xuICB9XG4gIC8qKlxuICAqIEZldGNoZXMgYSBsaXN0IG9mIGNsaWVudCdzIG1ldGhvZHMgcmVnaXN0ZXJlZCBvbiBzZXJ2ZXIuXG4gICogQG1ldGhvZFxuICAqIEByZXR1cm4ge0FycmF5fVxuICAqL1xuICBhc3luYyBsaXN0TWV0aG9kcygpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jYWxsKFwiX19saXN0TWV0aG9kc1wiKTtcbiAgfVxuICAvKipcbiAgKiBTZW5kcyBhIEpTT04tUlBDIDIuMCBub3RpZmljYXRpb24gdG8gc2VydmVyLlxuICAqIEBtZXRob2RcbiAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kIC0gUlBDIG1ldGhvZCBuYW1lXG4gICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIG9wdGlvbmFsIG1ldGhvZCBwYXJhbWV0ZXJzXG4gICogQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cbiAgbm90aWZ5KG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICghdGhpcy5yZWFkeSkgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJzb2NrZXQgbm90IHJlYWR5XCIpKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcGFyYW1zXG4gICAgICB9O1xuICAgICAgdGhpcy5zb2NrZXQuc2VuZCh0aGlzLmRhdGFQYWNrLmVuY29kZShtZXNzYWdlKSwgKGVycm9yKSA9PiB7XG4gICAgICAgIGlmIChlcnJvcikgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAqIFN1YnNjcmliZXMgZm9yIGEgZGVmaW5lZCBldmVudC5cbiAgKiBAbWV0aG9kXG4gICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGV2ZW50IC0gZXZlbnQgbmFtZVxuICAqIEByZXR1cm4ge1VuZGVmaW5lZH1cbiAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgKi9cbiAgYXN5bmMgc3Vic2NyaWJlKGV2ZW50KSB7XG4gICAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJzdHJpbmdcIikgZXZlbnQgPSBbZXZlbnRdO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY2FsbChcInJwYy5vblwiLCBldmVudCk7XG4gICAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJzdHJpbmdcIiAmJiByZXN1bHRbZXZlbnRdICE9PSBcIm9rXCIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiRmFpbGVkIHN1YnNjcmliaW5nIHRvIGFuIGV2ZW50ICdcIiArIGV2ZW50ICsgXCInIHdpdGg6IFwiICsgcmVzdWx0W2V2ZW50XVxuICAgICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qKlxuICAqIFVuc3Vic2NyaWJlcyBmcm9tIGEgZGVmaW5lZCBldmVudC5cbiAgKiBAbWV0aG9kXG4gICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGV2ZW50IC0gZXZlbnQgbmFtZVxuICAqIEByZXR1cm4ge1VuZGVmaW5lZH1cbiAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgKi9cbiAgYXN5bmMgdW5zdWJzY3JpYmUoZXZlbnQpIHtcbiAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcInN0cmluZ1wiKSBldmVudCA9IFtldmVudF07XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jYWxsKFwicnBjLm9mZlwiLCBldmVudCk7XG4gICAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJzdHJpbmdcIiAmJiByZXN1bHRbZXZlbnRdICE9PSBcIm9rXCIpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdW5zdWJzY3JpYmluZyBmcm9tIGFuIGV2ZW50IHdpdGg6IFwiICsgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qKlxuICAqIENsb3NlcyBhIFdlYlNvY2tldCBjb25uZWN0aW9uIGdyYWNlZnVsbHkuXG4gICogQG1ldGhvZFxuICAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlIC0gc29ja2V0IGNsb3NlIGNvZGVcbiAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSAtIG9wdGlvbmFsIGRhdGEgdG8gYmUgc2VudCBiZWZvcmUgY2xvc2luZ1xuICAqIEByZXR1cm4ge1VuZGVmaW5lZH1cbiAgKi9cbiAgY2xvc2UoY29kZSwgZGF0YSkge1xuICAgIHRoaXMuc29ja2V0LmNsb3NlKGNvZGUgfHwgMWUzLCBkYXRhKTtcbiAgfVxuICAvKipcbiAgKiBFbmFibGUgLyBkaXNhYmxlIGF1dG9tYXRpYyByZWNvbm5lY3Rpb24uXG4gICogQG1ldGhvZFxuICAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVjb25uZWN0IC0gZW5hYmxlIC8gZGlzYWJsZSByZWNvbm5lY3Rpb25cbiAgKiBAcmV0dXJuIHtVbmRlZmluZWR9XG4gICovXG4gIHNldEF1dG9SZWNvbm5lY3QocmVjb25uZWN0KSB7XG4gICAgdGhpcy5yZWNvbm5lY3QgPSByZWNvbm5lY3Q7XG4gIH1cbiAgLyoqXG4gICogU2V0IHRoZSBpbnRlcnZhbCBiZXR3ZWVuIHJlY29ubmVjdGlvbiBhdHRlbXB0cy5cbiAgKiBAbWV0aG9kXG4gICogQHBhcmFtIHtOdW1iZXJ9IGludGVydmFsIC0gcmVjb25uZWN0aW9uIGludGVydmFsIGluIG1pbGxpc2Vjb25kc1xuICAqIEByZXR1cm4ge1VuZGVmaW5lZH1cbiAgKi9cbiAgc2V0UmVjb25uZWN0SW50ZXJ2YWwoaW50ZXJ2YWwpIHtcbiAgICB0aGlzLnJlY29ubmVjdF9pbnRlcnZhbCA9IGludGVydmFsO1xuICB9XG4gIC8qKlxuICAqIFNldCB0aGUgbWF4aW11bSBudW1iZXIgb2YgcmVjb25uZWN0aW9uIGF0dGVtcHRzLlxuICAqIEBtZXRob2RcbiAgKiBAcGFyYW0ge051bWJlcn0gbWF4X3JlY29ubmVjdHMgLSBtYXhpbXVtIHJlY29ubmVjdGlvbiBhdHRlbXB0c1xuICAqIEByZXR1cm4ge1VuZGVmaW5lZH1cbiAgKi9cbiAgc2V0TWF4UmVjb25uZWN0cyhtYXhfcmVjb25uZWN0cykge1xuICAgIHRoaXMubWF4X3JlY29ubmVjdHMgPSBtYXhfcmVjb25uZWN0cztcbiAgfVxuICAvKipcbiAgKiBDb25uZWN0aW9uL01lc3NhZ2UgaGFuZGxlci5cbiAgKiBAbWV0aG9kXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyAtIFdlYlNvY2tldCBBUEkgYWRkcmVzc1xuICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gd3Mgb3B0aW9ucyBvYmplY3RcbiAgKiBAcmV0dXJuIHtVbmRlZmluZWR9XG4gICovXG4gIF9jb25uZWN0KGFkZHJlc3MsIG9wdGlvbnMpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZWNvbm5lY3RfdGltZXJfaWQpO1xuICAgIHRoaXMuc29ja2V0ID0gdGhpcy53ZWJTb2NrZXRGYWN0b3J5KGFkZHJlc3MsIG9wdGlvbnMpO1xuICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsICgpID0+IHtcbiAgICAgIHRoaXMucmVhZHkgPSB0cnVlO1xuICAgICAgdGhpcy5lbWl0KFwib3BlblwiKTtcbiAgICAgIHRoaXMuY3VycmVudF9yZWNvbm5lY3RzID0gMDtcbiAgICB9KTtcbiAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAoeyBkYXRhOiBtZXNzYWdlIH0pID0+IHtcbiAgICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgICAgIG1lc3NhZ2UgPSBCdWZmZXIuZnJvbShtZXNzYWdlKS50b1N0cmluZygpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbWVzc2FnZSA9IHRoaXMuZGF0YVBhY2suZGVjb2RlKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG1lc3NhZ2Uubm90aWZpY2F0aW9uICYmIHRoaXMubGlzdGVuZXJzKG1lc3NhZ2Uubm90aWZpY2F0aW9uKS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhtZXNzYWdlLnBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgIHJldHVybiB0aGlzLmVtaXQobWVzc2FnZS5ub3RpZmljYXRpb24pO1xuICAgICAgICBjb25zdCBhcmdzID0gW21lc3NhZ2Uubm90aWZpY2F0aW9uXTtcbiAgICAgICAgaWYgKG1lc3NhZ2UucGFyYW1zLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIGFyZ3MucHVzaChtZXNzYWdlLnBhcmFtcyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2UucGFyYW1zLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgYXJncy5wdXNoKG1lc3NhZ2UucGFyYW1zW2ldKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMucXVldWVbbWVzc2FnZS5pZF0pIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UubWV0aG9kKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KG1lc3NhZ2UubWV0aG9kLCBtZXNzYWdlPy5wYXJhbXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChcImVycm9yXCIgaW4gbWVzc2FnZSA9PT0gXCJyZXN1bHRcIiBpbiBtZXNzYWdlKVxuICAgICAgICB0aGlzLnF1ZXVlW21lc3NhZ2UuaWRdLnByb21pc2VbMV0oXG4gICAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1NlcnZlciByZXNwb25zZSBtYWxmb3JtZWQuIFJlc3BvbnNlIG11c3QgaW5jbHVkZSBlaXRoZXIgXCJyZXN1bHRcIiBvciBcImVycm9yXCIsIGJ1dCBub3QgYm90aC4nXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgaWYgKHRoaXMucXVldWVbbWVzc2FnZS5pZF0udGltZW91dClcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucXVldWVbbWVzc2FnZS5pZF0udGltZW91dCk7XG4gICAgICBpZiAobWVzc2FnZS5lcnJvcikgdGhpcy5xdWV1ZVttZXNzYWdlLmlkXS5wcm9taXNlWzFdKG1lc3NhZ2UuZXJyb3IpO1xuICAgICAgZWxzZSB0aGlzLnF1ZXVlW21lc3NhZ2UuaWRdLnByb21pc2VbMF0obWVzc2FnZS5yZXN1bHQpO1xuICAgICAgZGVsZXRlIHRoaXMucXVldWVbbWVzc2FnZS5pZF07XG4gICAgfSk7XG4gICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIChlcnJvcikgPT4gdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpKTtcbiAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKFwiY2xvc2VcIiwgKHsgY29kZSwgcmVhc29uIH0pID0+IHtcbiAgICAgIGlmICh0aGlzLnJlYWR5KVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZW1pdChcImNsb3NlXCIsIGNvZGUsIHJlYXNvbiksIDApO1xuICAgICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICAgICAgdGhpcy5zb2NrZXQgPSB2b2lkIDA7XG4gICAgICBpZiAoY29kZSA9PT0gMWUzKSByZXR1cm47XG4gICAgICB0aGlzLmN1cnJlbnRfcmVjb25uZWN0cysrO1xuICAgICAgaWYgKHRoaXMucmVjb25uZWN0ICYmICh0aGlzLm1heF9yZWNvbm5lY3RzID4gdGhpcy5jdXJyZW50X3JlY29ubmVjdHMgfHwgdGhpcy5tYXhfcmVjb25uZWN0cyA9PT0gMCkpXG4gICAgICAgIHRoaXMucmVjb25uZWN0X3RpbWVyX2lkID0gc2V0VGltZW91dChcbiAgICAgICAgICAoKSA9PiB0aGlzLl9jb25uZWN0KGFkZHJlc3MsIG9wdGlvbnMpLFxuICAgICAgICAgIHRoaXMucmVjb25uZWN0X2ludGVydmFsXG4gICAgICAgICk7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIHNyYy9pbmRleC5icm93c2VyLnRzXG52YXIgQ2xpZW50ID0gY2xhc3MgZXh0ZW5kcyBDb21tb25DbGllbnQge1xuICBjb25zdHJ1Y3RvcihhZGRyZXNzID0gXCJ3czovL2xvY2FsaG9zdDo4MDgwXCIsIHtcbiAgICBhdXRvY29ubmVjdCA9IHRydWUsXG4gICAgcmVjb25uZWN0ID0gdHJ1ZSxcbiAgICByZWNvbm5lY3RfaW50ZXJ2YWwgPSAxZTMsXG4gICAgbWF4X3JlY29ubmVjdHMgPSA1XG4gIH0gPSB7fSwgZ2VuZXJhdGVfcmVxdWVzdF9pZCkge1xuICAgIHN1cGVyKFxuICAgICAgV2ViU29ja2V0LFxuICAgICAgYWRkcmVzcyxcbiAgICAgIHtcbiAgICAgICAgYXV0b2Nvbm5lY3QsXG4gICAgICAgIHJlY29ubmVjdCxcbiAgICAgICAgcmVjb25uZWN0X2ludGVydmFsLFxuICAgICAgICBtYXhfcmVjb25uZWN0c1xuICAgICAgfSxcbiAgICAgIGdlbmVyYXRlX3JlcXVlc3RfaWRcbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgeyBDbGllbnQsIENvbW1vbkNsaWVudCwgRGVmYXVsdERhdGFQYWNrLCBXZWJTb2NrZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmJyb3dzZXIubWpzLm1hcCIsIi8qKlxuICogU0hBMyAoa2VjY2FrKSBoYXNoIGZ1bmN0aW9uLCBiYXNlZCBvbiBhIG5ldyBcIlNwb25nZSBmdW5jdGlvblwiIGRlc2lnbi5cbiAqIERpZmZlcmVudCBmcm9tIG9sZGVyIGhhc2hlcywgdGhlIGludGVybmFsIHN0YXRlIGlzIGJpZ2dlciB0aGFuIG91dHB1dCBzaXplLlxuICpcbiAqIENoZWNrIG91dCBbRklQUy0yMDJdKGh0dHBzOi8vbnZscHVicy5uaXN0Lmdvdi9uaXN0cHVicy9GSVBTL05JU1QuRklQUy4yMDIucGRmKSxcbiAqIFtXZWJzaXRlXShodHRwczovL2tlY2Nhay50ZWFtL2tlY2Nhay5odG1sKSxcbiAqIFt0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBTSEEtMyBhbmQgS2VjY2FrXShodHRwczovL2NyeXB0by5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMTU3Mjcvd2hhdC1hcmUtdGhlLWtleS1kaWZmZXJlbmNlcy1iZXR3ZWVuLXRoZS1kcmFmdC1zaGEtMy1zdGFuZGFyZC1hbmQtdGhlLWtlY2Nhay1zdWIpLlxuICpcbiAqIENoZWNrIG91dCBgc2hhMy1hZGRvbnNgIG1vZHVsZSBmb3IgY1NIQUtFLCBrMTIsIGFuZCBvdGhlcnMuXG4gKiBAbW9kdWxlXG4gKi9cbmltcG9ydCB7IGFieXRlcywgYWV4aXN0cywgYW51bWJlciwgYW91dHB1dCB9IGZyb20gJy4vX2Fzc2VydC5qcyc7XG5pbXBvcnQgeyByb3RsQkgsIHJvdGxCTCwgcm90bFNILCByb3RsU0wsIHNwbGl0IH0gZnJvbSAnLi9fdTY0LmpzJztcbmltcG9ydCB7IGJ5dGVTd2FwMzIsIEhhc2gsIGlzTEUsIHRvQnl0ZXMsIHUzMiwgd3JhcENvbnN0cnVjdG9yLCB3cmFwWE9GQ29uc3RydWN0b3JXaXRoT3B0cywgfSBmcm9tICcuL3V0aWxzLmpzJztcbi8vIFZhcmlvdXMgcGVyIHJvdW5kIGNvbnN0YW50cyBjYWxjdWxhdGlvbnNcbmNvbnN0IFNIQTNfUEkgPSBbXTtcbmNvbnN0IFNIQTNfUk9UTCA9IFtdO1xuY29uc3QgX1NIQTNfSU9UQSA9IFtdO1xuY29uc3QgXzBuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgwKTtcbmNvbnN0IF8xbiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMSk7XG5jb25zdCBfMm4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDIpO1xuY29uc3QgXzduID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCg3KTtcbmNvbnN0IF8yNTZuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgyNTYpO1xuY29uc3QgXzB4NzFuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgweDcxKTtcbmZvciAobGV0IHJvdW5kID0gMCwgUiA9IF8xbiwgeCA9IDEsIHkgPSAwOyByb3VuZCA8IDI0OyByb3VuZCsrKSB7XG4gICAgLy8gUGlcbiAgICBbeCwgeV0gPSBbeSwgKDIgKiB4ICsgMyAqIHkpICUgNV07XG4gICAgU0hBM19QSS5wdXNoKDIgKiAoNSAqIHkgKyB4KSk7XG4gICAgLy8gUm90YXRpb25hbFxuICAgIFNIQTNfUk9UTC5wdXNoKCgoKHJvdW5kICsgMSkgKiAocm91bmQgKyAyKSkgLyAyKSAlIDY0KTtcbiAgICAvLyBJb3RhXG4gICAgbGV0IHQgPSBfMG47XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCA3OyBqKyspIHtcbiAgICAgICAgUiA9ICgoUiA8PCBfMW4pIF4gKChSID4+IF83bikgKiBfMHg3MW4pKSAlIF8yNTZuO1xuICAgICAgICBpZiAoUiAmIF8ybilcbiAgICAgICAgICAgIHQgXj0gXzFuIDw8ICgoXzFuIDw8IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoaikpIC0gXzFuKTtcbiAgICB9XG4gICAgX1NIQTNfSU9UQS5wdXNoKHQpO1xufVxuY29uc3QgW1NIQTNfSU9UQV9ILCBTSEEzX0lPVEFfTF0gPSAvKiBAX19QVVJFX18gKi8gc3BsaXQoX1NIQTNfSU9UQSwgdHJ1ZSk7XG4vLyBMZWZ0IHJvdGF0aW9uICh3aXRob3V0IDAsIDMyLCA2NClcbmNvbnN0IHJvdGxIID0gKGgsIGwsIHMpID0+IChzID4gMzIgPyByb3RsQkgoaCwgbCwgcykgOiByb3RsU0goaCwgbCwgcykpO1xuY29uc3Qgcm90bEwgPSAoaCwgbCwgcykgPT4gKHMgPiAzMiA/IHJvdGxCTChoLCBsLCBzKSA6IHJvdGxTTChoLCBsLCBzKSk7XG4vKiogYGtlY2Nha2YxNjAwYCBpbnRlcm5hbCBmdW5jdGlvbiwgYWRkaXRpb25hbGx5IGFsbG93cyB0byBhZGp1c3Qgcm91bmQgY291bnQuICovXG5leHBvcnQgZnVuY3Rpb24ga2VjY2FrUChzLCByb3VuZHMgPSAyNCkge1xuICAgIGNvbnN0IEIgPSBuZXcgVWludDMyQXJyYXkoNSAqIDIpO1xuICAgIC8vIE5PVEU6IGFsbCBpbmRpY2VzIGFyZSB4MiBzaW5jZSB3ZSBzdG9yZSBzdGF0ZSBhcyB1MzIgaW5zdGVhZCBvZiB1NjQgKGJpZ2ludHMgdG8gc2xvdyBpbiBqcylcbiAgICBmb3IgKGxldCByb3VuZCA9IDI0IC0gcm91bmRzOyByb3VuZCA8IDI0OyByb3VuZCsrKSB7XG4gICAgICAgIC8vIFRoZXRhIM64XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgMTA7IHgrKylcbiAgICAgICAgICAgIEJbeF0gPSBzW3hdIF4gc1t4ICsgMTBdIF4gc1t4ICsgMjBdIF4gc1t4ICsgMzBdIF4gc1t4ICsgNDBdO1xuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4ICs9IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkeDEgPSAoeCArIDgpICUgMTA7XG4gICAgICAgICAgICBjb25zdCBpZHgwID0gKHggKyAyKSAlIDEwO1xuICAgICAgICAgICAgY29uc3QgQjAgPSBCW2lkeDBdO1xuICAgICAgICAgICAgY29uc3QgQjEgPSBCW2lkeDAgKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IFRoID0gcm90bEgoQjAsIEIxLCAxKSBeIEJbaWR4MV07XG4gICAgICAgICAgICBjb25zdCBUbCA9IHJvdGxMKEIwLCBCMSwgMSkgXiBCW2lkeDEgKyAxXTtcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgNTA7IHkgKz0gMTApIHtcbiAgICAgICAgICAgICAgICBzW3ggKyB5XSBePSBUaDtcbiAgICAgICAgICAgICAgICBzW3ggKyB5ICsgMV0gXj0gVGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmhvICjPgSkgYW5kIFBpICjPgClcbiAgICAgICAgbGV0IGN1ckggPSBzWzJdO1xuICAgICAgICBsZXQgY3VyTCA9IHNbM107XG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgMjQ7IHQrKykge1xuICAgICAgICAgICAgY29uc3Qgc2hpZnQgPSBTSEEzX1JPVExbdF07XG4gICAgICAgICAgICBjb25zdCBUaCA9IHJvdGxIKGN1ckgsIGN1ckwsIHNoaWZ0KTtcbiAgICAgICAgICAgIGNvbnN0IFRsID0gcm90bEwoY3VySCwgY3VyTCwgc2hpZnQpO1xuICAgICAgICAgICAgY29uc3QgUEkgPSBTSEEzX1BJW3RdO1xuICAgICAgICAgICAgY3VySCA9IHNbUEldO1xuICAgICAgICAgICAgY3VyTCA9IHNbUEkgKyAxXTtcbiAgICAgICAgICAgIHNbUEldID0gVGg7XG4gICAgICAgICAgICBzW1BJICsgMV0gPSBUbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGkgKM+HKVxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IDUwOyB5ICs9IDEwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4KyspXG4gICAgICAgICAgICAgICAgQlt4XSA9IHNbeSArIHhdO1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCAxMDsgeCsrKVxuICAgICAgICAgICAgICAgIHNbeSArIHhdIF49IH5CWyh4ICsgMikgJSAxMF0gJiBCWyh4ICsgNCkgJSAxMF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW90YSAozrkpXG4gICAgICAgIHNbMF0gXj0gU0hBM19JT1RBX0hbcm91bmRdO1xuICAgICAgICBzWzFdIF49IFNIQTNfSU9UQV9MW3JvdW5kXTtcbiAgICB9XG4gICAgQi5maWxsKDApO1xufVxuLyoqIEtlY2NhayBzcG9uZ2UgZnVuY3Rpb24uICovXG5leHBvcnQgY2xhc3MgS2VjY2FrIGV4dGVuZHMgSGFzaCB7XG4gICAgLy8gTk9URTogd2UgYWNjZXB0IGFyZ3VtZW50cyBpbiBieXRlcyBpbnN0ZWFkIG9mIGJpdHMgaGVyZS5cbiAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgc3VmZml4LCBvdXRwdXRMZW4sIGVuYWJsZVhPRiA9IGZhbHNlLCByb3VuZHMgPSAyNCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJsb2NrTGVuID0gYmxvY2tMZW47XG4gICAgICAgIHRoaXMuc3VmZml4ID0gc3VmZml4O1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5lbmFibGVYT0YgPSBlbmFibGVYT0Y7XG4gICAgICAgIHRoaXMucm91bmRzID0gcm91bmRzO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMucG9zT3V0ID0gMDtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICAvLyBDYW4gYmUgcGFzc2VkIGZyb20gdXNlciBhcyBka0xlblxuICAgICAgICBhbnVtYmVyKG91dHB1dExlbik7XG4gICAgICAgIC8vIDE2MDAgPSA1eDUgbWF0cml4IG9mIDY0Yml0LiAgMTYwMCBiaXRzID09PSAyMDAgYnl0ZXNcbiAgICAgICAgLy8gMCA8IGJsb2NrTGVuIDwgMjAwXG4gICAgICAgIGlmICgwID49IHRoaXMuYmxvY2tMZW4gfHwgdGhpcy5ibG9ja0xlbiA+PSAyMDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYTMgc3VwcG9ydHMgb25seSBrZWNjYWstZjE2MDAgZnVuY3Rpb24nKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBVaW50OEFycmF5KDIwMCk7XG4gICAgICAgIHRoaXMuc3RhdGUzMiA9IHUzMih0aGlzLnN0YXRlKTtcbiAgICB9XG4gICAga2VjY2FrKCkge1xuICAgICAgICBpZiAoIWlzTEUpXG4gICAgICAgICAgICBieXRlU3dhcDMyKHRoaXMuc3RhdGUzMik7XG4gICAgICAgIGtlY2Nha1AodGhpcy5zdGF0ZTMyLCB0aGlzLnJvdW5kcyk7XG4gICAgICAgIGlmICghaXNMRSlcbiAgICAgICAgICAgIGJ5dGVTd2FwMzIodGhpcy5zdGF0ZTMyKTtcbiAgICAgICAgdGhpcy5wb3NPdXQgPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgfVxuICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIGFleGlzdHModGhpcyk7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIHN0YXRlIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gdG9CeXRlcyhkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjspIHtcbiAgICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zLCBsZW4gLSBwb3MpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWtlOyBpKyspXG4gICAgICAgICAgICAgICAgc3RhdGVbdGhpcy5wb3MrK10gXj0gZGF0YVtwb3MrK107XG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPT09IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgIHRoaXMua2VjY2FrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZpbmlzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmluaXNoZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCB7IHN0YXRlLCBzdWZmaXgsIHBvcywgYmxvY2tMZW4gfSA9IHRoaXM7XG4gICAgICAgIC8vIERvIHRoZSBwYWRkaW5nXG4gICAgICAgIHN0YXRlW3Bvc10gXj0gc3VmZml4O1xuICAgICAgICBpZiAoKHN1ZmZpeCAmIDB4ODApICE9PSAwICYmIHBvcyA9PT0gYmxvY2tMZW4gLSAxKVxuICAgICAgICAgICAgdGhpcy5rZWNjYWsoKTtcbiAgICAgICAgc3RhdGVbYmxvY2tMZW4gLSAxXSBePSAweDgwO1xuICAgICAgICB0aGlzLmtlY2NhaygpO1xuICAgIH1cbiAgICB3cml0ZUludG8ob3V0KSB7XG4gICAgICAgIGFleGlzdHModGhpcywgZmFsc2UpO1xuICAgICAgICBhYnl0ZXMob3V0KTtcbiAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICAgICAgY29uc3QgYnVmZmVyT3V0ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgeyBibG9ja0xlbiB9ID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMCwgbGVuID0gb3V0Lmxlbmd0aDsgcG9zIDwgbGVuOykge1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zT3V0ID49IGJsb2NrTGVuKVxuICAgICAgICAgICAgICAgIHRoaXMua2VjY2FrKCk7XG4gICAgICAgICAgICBjb25zdCB0YWtlID0gTWF0aC5taW4oYmxvY2tMZW4gLSB0aGlzLnBvc091dCwgbGVuIC0gcG9zKTtcbiAgICAgICAgICAgIG91dC5zZXQoYnVmZmVyT3V0LnN1YmFycmF5KHRoaXMucG9zT3V0LCB0aGlzLnBvc091dCArIHRha2UpLCBwb3MpO1xuICAgICAgICAgICAgdGhpcy5wb3NPdXQgKz0gdGFrZTtcbiAgICAgICAgICAgIHBvcyArPSB0YWtlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIHhvZkludG8ob3V0KSB7XG4gICAgICAgIC8vIFNoYTMvS2VjY2FrIHVzYWdlIHdpdGggWE9GIGlzIHByb2JhYmx5IG1pc3Rha2UsIG9ubHkgU0hBS0UgaW5zdGFuY2VzIGNhbiBkbyBYT0ZcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZVhPRilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWE9GIGlzIG5vdCBwb3NzaWJsZSBmb3IgdGhpcyBpbnN0YW5jZScpO1xuICAgICAgICByZXR1cm4gdGhpcy53cml0ZUludG8ob3V0KTtcbiAgICB9XG4gICAgeG9mKGJ5dGVzKSB7XG4gICAgICAgIGFudW1iZXIoYnl0ZXMpO1xuICAgICAgICByZXR1cm4gdGhpcy54b2ZJbnRvKG5ldyBVaW50OEFycmF5KGJ5dGVzKSk7XG4gICAgfVxuICAgIGRpZ2VzdEludG8ob3V0KSB7XG4gICAgICAgIGFvdXRwdXQob3V0LCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuZmluaXNoZWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpZ2VzdCgpIHdhcyBhbHJlYWR5IGNhbGxlZCcpO1xuICAgICAgICB0aGlzLndyaXRlSW50byhvdXQpO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaWdlc3RJbnRvKG5ldyBVaW50OEFycmF5KHRoaXMub3V0cHV0TGVuKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5maWxsKDApO1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIHN1ZmZpeCwgb3V0cHV0TGVuLCByb3VuZHMsIGVuYWJsZVhPRiB9ID0gdGhpcztcbiAgICAgICAgdG8gfHwgKHRvID0gbmV3IEtlY2NhayhibG9ja0xlbiwgc3VmZml4LCBvdXRwdXRMZW4sIGVuYWJsZVhPRiwgcm91bmRzKSk7XG4gICAgICAgIHRvLnN0YXRlMzIuc2V0KHRoaXMuc3RhdGUzMik7XG4gICAgICAgIHRvLnBvcyA9IHRoaXMucG9zO1xuICAgICAgICB0by5wb3NPdXQgPSB0aGlzLnBvc091dDtcbiAgICAgICAgdG8uZmluaXNoZWQgPSB0aGlzLmZpbmlzaGVkO1xuICAgICAgICB0by5yb3VuZHMgPSByb3VuZHM7XG4gICAgICAgIC8vIFN1ZmZpeCBjYW4gY2hhbmdlIGluIGNTSEFLRVxuICAgICAgICB0by5zdWZmaXggPSBzdWZmaXg7XG4gICAgICAgIHRvLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdG8uZW5hYmxlWE9GID0gZW5hYmxlWE9GO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSB0aGlzLmRlc3Ryb3llZDtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbn1cbmNvbnN0IGdlbiA9IChzdWZmaXgsIGJsb2NrTGVuLCBvdXRwdXRMZW4pID0+IHdyYXBDb25zdHJ1Y3RvcigoKSA9PiBuZXcgS2VjY2FrKGJsb2NrTGVuLCBzdWZmaXgsIG91dHB1dExlbikpO1xuLyoqIFNIQTMtMjI0IGhhc2ggZnVuY3Rpb24uICovXG5leHBvcnQgY29uc3Qgc2hhM18yMjQgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDYsIDE0NCwgMjI0IC8gOCk7XG4vKiogU0hBMy0yNTYgaGFzaCBmdW5jdGlvbi4gRGlmZmVyZW50IGZyb20ga2VjY2FrLTI1Ni4gKi9cbmV4cG9ydCBjb25zdCBzaGEzXzI1NiA9IC8qIEBfX1BVUkVfXyAqLyBnZW4oMHgwNiwgMTM2LCAyNTYgLyA4KTtcbi8qKiBTSEEzLTM4NCBoYXNoIGZ1bmN0aW9uLiAqL1xuZXhwb3J0IGNvbnN0IHNoYTNfMzg0ID0gLyogQF9fUFVSRV9fICovIGdlbigweDA2LCAxMDQsIDM4NCAvIDgpO1xuLyoqIFNIQTMtNTEyIGhhc2ggZnVuY3Rpb24uICovXG5leHBvcnQgY29uc3Qgc2hhM181MTIgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDYsIDcyLCA1MTIgLyA4KTtcbi8qKiBrZWNjYWstMjI0IGhhc2ggZnVuY3Rpb24uICovXG5leHBvcnQgY29uc3Qga2VjY2FrXzIyNCA9IC8qIEBfX1BVUkVfXyAqLyBnZW4oMHgwMSwgMTQ0LCAyMjQgLyA4KTtcbi8qKiBrZWNjYWstMjU2IGhhc2ggZnVuY3Rpb24uIERpZmZlcmVudCBmcm9tIFNIQTMtMjU2LiAqL1xuZXhwb3J0IGNvbnN0IGtlY2Nha18yNTYgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDEsIDEzNiwgMjU2IC8gOCk7XG4vKioga2VjY2FrLTM4NCBoYXNoIGZ1bmN0aW9uLiAqL1xuZXhwb3J0IGNvbnN0IGtlY2Nha18zODQgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDEsIDEwNCwgMzg0IC8gOCk7XG4vKioga2VjY2FrLTUxMiBoYXNoIGZ1bmN0aW9uLiAqL1xuZXhwb3J0IGNvbnN0IGtlY2Nha181MTIgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDB4MDEsIDcyLCA1MTIgLyA4KTtcbmNvbnN0IGdlblNoYWtlID0gKHN1ZmZpeCwgYmxvY2tMZW4sIG91dHB1dExlbikgPT4gd3JhcFhPRkNvbnN0cnVjdG9yV2l0aE9wdHMoKG9wdHMgPSB7fSkgPT4gbmV3IEtlY2NhayhibG9ja0xlbiwgc3VmZml4LCBvcHRzLmRrTGVuID09PSB1bmRlZmluZWQgPyBvdXRwdXRMZW4gOiBvcHRzLmRrTGVuLCB0cnVlKSk7XG4vKiogU0hBS0UxMjggWE9GIHdpdGggMTI4LWJpdCBzZWN1cml0eS4gKi9cbmV4cG9ydCBjb25zdCBzaGFrZTEyOCA9IC8qIEBfX1BVUkVfXyAqLyBnZW5TaGFrZSgweDFmLCAxNjgsIDEyOCAvIDgpO1xuLyoqIFNIQUtFMjU2IFhPRiB3aXRoIDI1Ni1iaXQgc2VjdXJpdHkuICovXG5leHBvcnQgY29uc3Qgc2hha2UyNTYgPSAvKiBAX19QVVJFX18gKi8gZ2VuU2hha2UoMHgxZiwgMTM2LCAyNTYgLyA4KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTMuanMubWFwIiwiLyoqXG4gKiBITUFDOiBSRkMyMTA0IG1lc3NhZ2UgYXV0aGVudGljYXRpb24gY29kZS5cbiAqIEBtb2R1bGVcbiAqL1xuaW1wb3J0IHsgYWJ5dGVzLCBhZXhpc3RzLCBhaGFzaCB9IGZyb20gJy4vX2Fzc2VydC5qcyc7XG5pbXBvcnQgeyBIYXNoLCB0b0J5dGVzIH0gZnJvbSAnLi91dGlscy5qcyc7XG5leHBvcnQgY2xhc3MgSE1BQyBleHRlbmRzIEhhc2gge1xuICAgIGNvbnN0cnVjdG9yKGhhc2gsIF9rZXkpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICBhaGFzaChoYXNoKTtcbiAgICAgICAgY29uc3Qga2V5ID0gdG9CeXRlcyhfa2V5KTtcbiAgICAgICAgdGhpcy5pSGFzaCA9IGhhc2guY3JlYXRlKCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5pSGFzaC51cGRhdGUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGluc3RhbmNlIG9mIGNsYXNzIHdoaWNoIGV4dGVuZHMgdXRpbHMuSGFzaCcpO1xuICAgICAgICB0aGlzLmJsb2NrTGVuID0gdGhpcy5pSGFzaC5ibG9ja0xlbjtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSB0aGlzLmlIYXNoLm91dHB1dExlbjtcbiAgICAgICAgY29uc3QgYmxvY2tMZW4gPSB0aGlzLmJsb2NrTGVuO1xuICAgICAgICBjb25zdCBwYWQgPSBuZXcgVWludDhBcnJheShibG9ja0xlbik7XG4gICAgICAgIC8vIGJsb2NrTGVuIGNhbiBiZSBiaWdnZXIgdGhhbiBvdXRwdXRMZW5cbiAgICAgICAgcGFkLnNldChrZXkubGVuZ3RoID4gYmxvY2tMZW4gPyBoYXNoLmNyZWF0ZSgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpIDoga2V5KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBwYWRbaV0gXj0gMHgzNjtcbiAgICAgICAgdGhpcy5pSGFzaC51cGRhdGUocGFkKTtcbiAgICAgICAgLy8gQnkgZG9pbmcgdXBkYXRlIChwcm9jZXNzaW5nIG9mIGZpcnN0IGJsb2NrKSBvZiBvdXRlciBoYXNoIGhlcmUgd2UgY2FuIHJlLXVzZSBpdCBiZXR3ZWVuIG11bHRpcGxlIGNhbGxzIHZpYSBjbG9uZVxuICAgICAgICB0aGlzLm9IYXNoID0gaGFzaC5jcmVhdGUoKTtcbiAgICAgICAgLy8gVW5kbyBpbnRlcm5hbCBYT1IgJiYgYXBwbHkgb3V0ZXIgWE9SXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgcGFkW2ldIF49IDB4MzYgXiAweDVjO1xuICAgICAgICB0aGlzLm9IYXNoLnVwZGF0ZShwYWQpO1xuICAgICAgICBwYWQuZmlsbCgwKTtcbiAgICB9XG4gICAgdXBkYXRlKGJ1Zikge1xuICAgICAgICBhZXhpc3RzKHRoaXMpO1xuICAgICAgICB0aGlzLmlIYXNoLnVwZGF0ZShidWYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgYWV4aXN0cyh0aGlzKTtcbiAgICAgICAgYWJ5dGVzKG91dCwgdGhpcy5vdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pSGFzaC5kaWdlc3RJbnRvKG91dCk7XG4gICAgICAgIHRoaXMub0hhc2gudXBkYXRlKG91dCk7XG4gICAgICAgIHRoaXMub0hhc2guZGlnZXN0SW50byhvdXQpO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgZGlnZXN0KCkge1xuICAgICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheSh0aGlzLm9IYXNoLm91dHB1dExlbik7XG4gICAgICAgIHRoaXMuZGlnZXN0SW50byhvdXQpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIC8vIENyZWF0ZSBuZXcgaW5zdGFuY2Ugd2l0aG91dCBjYWxsaW5nIGNvbnN0cnVjdG9yIHNpbmNlIGtleSBhbHJlYWR5IGluIHN0YXRlIGFuZCB3ZSBkb24ndCBrbm93IGl0LlxuICAgICAgICB0byB8fCAodG8gPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwge30pKTtcbiAgICAgICAgY29uc3QgeyBvSGFzaCwgaUhhc2gsIGZpbmlzaGVkLCBkZXN0cm95ZWQsIGJsb2NrTGVuLCBvdXRwdXRMZW4gfSA9IHRoaXM7XG4gICAgICAgIHRvID0gdG87XG4gICAgICAgIHRvLmZpbmlzaGVkID0gZmluaXNoZWQ7XG4gICAgICAgIHRvLmRlc3Ryb3llZCA9IGRlc3Ryb3llZDtcbiAgICAgICAgdG8uYmxvY2tMZW4gPSBibG9ja0xlbjtcbiAgICAgICAgdG8ub3V0cHV0TGVuID0gb3V0cHV0TGVuO1xuICAgICAgICB0by5vSGFzaCA9IG9IYXNoLl9jbG9uZUludG8odG8ub0hhc2gpO1xuICAgICAgICB0by5pSGFzaCA9IGlIYXNoLl9jbG9uZUludG8odG8uaUhhc2gpO1xuICAgICAgICByZXR1cm4gdG87XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vSGFzaC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuaUhhc2guZGVzdHJveSgpO1xuICAgIH1cbn1cbi8qKlxuICogSE1BQzogUkZDMjEwNCBtZXNzYWdlIGF1dGhlbnRpY2F0aW9uIGNvZGUuXG4gKiBAcGFyYW0gaGFzaCAtIGZ1bmN0aW9uIHRoYXQgd291bGQgYmUgdXNlZCBlLmcuIHNoYTI1NlxuICogQHBhcmFtIGtleSAtIG1lc3NhZ2Uga2V5XG4gKiBAcGFyYW0gbWVzc2FnZSAtIG1lc3NhZ2UgZGF0YVxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IGhtYWMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL2htYWMnO1xuICogaW1wb3J0IHsgc2hhMjU2IH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zaGEyJztcbiAqIGNvbnN0IG1hYzEgPSBobWFjKHNoYTI1NiwgJ2tleScsICdtZXNzYWdlJyk7XG4gKi9cbmV4cG9ydCBjb25zdCBobWFjID0gKGhhc2gsIGtleSwgbWVzc2FnZSkgPT4gbmV3IEhNQUMoaGFzaCwga2V5KS51cGRhdGUobWVzc2FnZSkuZGlnZXN0KCk7XG5obWFjLmNyZWF0ZSA9IChoYXNoLCBrZXkpID0+IG5ldyBITUFDKGhhc2gsIGtleSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1obWFjLmpzLm1hcCIsIi8qKlxuICogU2hvcnQgV2VpZXJzdHJhc3MgY3VydmUgbWV0aG9kcy4gVGhlIGZvcm11bGEgaXM6IHnCsiA9IHjCsyArIGF4ICsgYi5cbiAqXG4gKiAjIyMgRGVzaWduIHJhdGlvbmFsZSBmb3IgdHlwZXNcbiAqXG4gKiAqIEludGVyYWN0aW9uIGJldHdlZW4gY2xhc3NlcyBmcm9tIGRpZmZlcmVudCBjdXJ2ZXMgc2hvdWxkIGZhaWw6XG4gKiAgIGBrMjU2LlBvaW50LkJBU0UuYWRkKHAyNTYuUG9pbnQuQkFTRSlgXG4gKiAqIEZvciB0aGlzIHB1cnBvc2Ugd2Ugd2FudCB0byB1c2UgYGluc3RhbmNlb2ZgIG9wZXJhdG9yLCB3aGljaCBpcyBmYXN0IGFuZCB3b3JrcyBkdXJpbmcgcnVudGltZVxuICogKiBEaWZmZXJlbnQgY2FsbHMgb2YgYGN1cnZlKClgIHdvdWxkIHJldHVybiBkaWZmZXJlbnQgY2xhc3NlcyAtXG4gKiAgIGBjdXJ2ZShwYXJhbXMpICE9PSBjdXJ2ZShwYXJhbXMpYDogaWYgc29tZWJvZHkgZGVjaWRlZCB0byBtb25rZXktcGF0Y2ggdGhlaXIgY3VydmUsXG4gKiAgIGl0IHdvbid0IGFmZmVjdCBvdGhlcnNcbiAqXG4gKiBUeXBlU2NyaXB0IGNhbid0IGluZmVyIHR5cGVzIGZvciBjbGFzc2VzIGNyZWF0ZWQgaW5zaWRlIGEgZnVuY3Rpb24uIENsYXNzZXMgaXMgb25lIGluc3RhbmNlXG4gKiBvZiBub21pbmF0aXZlIHR5cGVzIGluIFR5cGVTY3JpcHQgYW5kIGludGVyZmFjZXMgb25seSBjaGVjayBmb3Igc2hhcGUsIHNvIGl0J3MgaGFyZCB0byBjcmVhdGVcbiAqIHVuaXF1ZSB0eXBlIGZvciBldmVyeSBmdW5jdGlvbiBjYWxsLlxuICpcbiAqIFdlIGNhbiB1c2UgZ2VuZXJpYyB0eXBlcyB2aWEgc29tZSBwYXJhbSwgbGlrZSBjdXJ2ZSBvcHRzLCBidXQgdGhhdCB3b3VsZDpcbiAqICAgICAxLiBFbmFibGUgaW50ZXJhY3Rpb24gYmV0d2VlbiBgY3VydmUocGFyYW1zKWAgYW5kIGBjdXJ2ZShwYXJhbXMpYCAoY3VydmVzIG9mIHNhbWUgcGFyYW1zKVxuICogICAgIHdoaWNoIGlzIGhhcmQgdG8gZGVidWcuXG4gKiAgICAgMi4gUGFyYW1zIGNhbiBiZSBnZW5lcmljIGFuZCB3ZSBjYW4ndCBlbmZvcmNlIHRoZW0gdG8gYmUgY29uc3RhbnQgdmFsdWU6XG4gKiAgICAgaWYgc29tZWJvZHkgY3JlYXRlcyBjdXJ2ZSBmcm9tIG5vbi1jb25zdGFudCBwYXJhbXMsXG4gKiAgICAgaXQgd291bGQgYmUgYWxsb3dlZCB0byBpbnRlcmFjdCB3aXRoIG90aGVyIGN1cnZlcyB3aXRoIG5vbi1jb25zdGFudCBwYXJhbXNcbiAqXG4gKiBAdG9kbyBodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9yZWxlYXNlLW5vdGVzL3R5cGVzY3JpcHQtMi03Lmh0bWwjdW5pcXVlLXN5bWJvbFxuICogQG1vZHVsZVxuICovXG4vKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQgeyBwaXBwZW5nZXIsIHZhbGlkYXRlQmFzaWMsIHdOQUYsIH0gZnJvbSAnLi9jdXJ2ZS5qcyc7XG5pbXBvcnQgeyBGaWVsZCwgZ2V0TWluSGFzaExlbmd0aCwgaW52ZXJ0LCBtYXBIYXNoVG9GaWVsZCwgbW9kLCB2YWxpZGF0ZUZpZWxkLCB9IGZyb20gJy4vbW9kdWxhci5qcyc7XG5pbXBvcnQgKiBhcyB1dCBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7IGFib29sLCBlbnN1cmVCeXRlcywgbWVtb2l6ZWQgfSBmcm9tICcuL3V0aWxzLmpzJztcbmZ1bmN0aW9uIHZhbGlkYXRlU2lnVmVyT3B0cyhvcHRzKSB7XG4gICAgaWYgKG9wdHMubG93UyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBhYm9vbCgnbG93UycsIG9wdHMubG93Uyk7XG4gICAgaWYgKG9wdHMucHJlaGFzaCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBhYm9vbCgncHJlaGFzaCcsIG9wdHMucHJlaGFzaCk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVBvaW50T3B0cyhjdXJ2ZSkge1xuICAgIGNvbnN0IG9wdHMgPSB2YWxpZGF0ZUJhc2ljKGN1cnZlKTtcbiAgICB1dC52YWxpZGF0ZU9iamVjdChvcHRzLCB7XG4gICAgICAgIGE6ICdmaWVsZCcsXG4gICAgICAgIGI6ICdmaWVsZCcsXG4gICAgfSwge1xuICAgICAgICBhbGxvd2VkUHJpdmF0ZUtleUxlbmd0aHM6ICdhcnJheScsXG4gICAgICAgIHdyYXBQcml2YXRlS2V5OiAnYm9vbGVhbicsXG4gICAgICAgIGlzVG9yc2lvbkZyZWU6ICdmdW5jdGlvbicsXG4gICAgICAgIGNsZWFyQ29mYWN0b3I6ICdmdW5jdGlvbicsXG4gICAgICAgIGFsbG93SW5maW5pdHlQb2ludDogJ2Jvb2xlYW4nLFxuICAgICAgICBmcm9tQnl0ZXM6ICdmdW5jdGlvbicsXG4gICAgICAgIHRvQnl0ZXM6ICdmdW5jdGlvbicsXG4gICAgfSk7XG4gICAgY29uc3QgeyBlbmRvLCBGcCwgYSB9ID0gb3B0cztcbiAgICBpZiAoZW5kbykge1xuICAgICAgICBpZiAoIUZwLmVxbChhLCBGcC5aRVJPKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGVuZG9tb3JwaGlzbSwgY2FuIG9ubHkgYmUgZGVmaW5lZCBmb3IgS29ibGl0eiBjdXJ2ZXMgdGhhdCBoYXZlIGE9MCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZW5kbyAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgICAgIHR5cGVvZiBlbmRvLmJldGEgIT09ICdiaWdpbnQnIHx8XG4gICAgICAgICAgICB0eXBlb2YgZW5kby5zcGxpdFNjYWxhciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGVuZG9tb3JwaGlzbSwgZXhwZWN0ZWQgYmV0YTogYmlnaW50IGFuZCBzcGxpdFNjYWxhcjogZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLm9wdHMgfSk7XG59XG5jb25zdCB7IGJ5dGVzVG9OdW1iZXJCRTogYjJuLCBoZXhUb0J5dGVzOiBoMmIgfSA9IHV0O1xuZXhwb3J0IGNsYXNzIERFUkVyciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtID0gJycpIHtcbiAgICAgICAgc3VwZXIobSk7XG4gICAgfVxufVxuLyoqXG4gKiBBU04uMSBERVIgZW5jb2RpbmcgdXRpbGl0aWVzLiBBU04gaXMgdmVyeSBjb21wbGV4ICYgZnJhZ2lsZS4gRm9ybWF0OlxuICpcbiAqICAgICBbMHgzMCAoU0VRVUVOQ0UpLCBieXRlbGVuZ3RoLCAweDAyIChJTlRFR0VSKSwgaW50TGVuZ3RoLCBSLCAweDAyIChJTlRFR0VSKSwgaW50TGVuZ3RoLCBTXVxuICpcbiAqIERvY3M6IGh0dHBzOi8vbGV0c2VuY3J5cHQub3JnL2RvY3MvYS13YXJtLXdlbGNvbWUtdG8tYXNuMS1hbmQtZGVyLywgaHR0cHM6Ly9sdWNhLm50b3Aub3JnL1RlYWNoaW5nL0FwcHVudGkvYXNuMS5odG1sXG4gKi9cbmV4cG9ydCBjb25zdCBERVIgPSB7XG4gICAgLy8gYXNuLjEgREVSIGVuY29kaW5nIHV0aWxzXG4gICAgRXJyOiBERVJFcnIsXG4gICAgLy8gQmFzaWMgYnVpbGRpbmcgYmxvY2sgaXMgVExWIChUYWctTGVuZ3RoLVZhbHVlKVxuICAgIF90bHY6IHtcbiAgICAgICAgZW5jb2RlOiAodGFnLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IEVycjogRSB9ID0gREVSO1xuICAgICAgICAgICAgaWYgKHRhZyA8IDAgfHwgdGFnID4gMjU2KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFKCd0bHYuZW5jb2RlOiB3cm9uZyB0YWcnKTtcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCAmIDEpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEUoJ3Rsdi5lbmNvZGU6IHVucGFkZGVkIGRhdGEnKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFMZW4gPSBkYXRhLmxlbmd0aCAvIDI7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSB1dC5udW1iZXJUb0hleFVucGFkZGVkKGRhdGFMZW4pO1xuICAgICAgICAgICAgaWYgKChsZW4ubGVuZ3RoIC8gMikgJiAxMjgpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEUoJ3Rsdi5lbmNvZGU6IGxvbmcgZm9ybSBsZW5ndGggdG9vIGJpZycpO1xuICAgICAgICAgICAgLy8gbGVuZ3RoIG9mIGxlbmd0aCB3aXRoIGxvbmcgZm9ybSBmbGFnXG4gICAgICAgICAgICBjb25zdCBsZW5MZW4gPSBkYXRhTGVuID4gMTI3ID8gdXQubnVtYmVyVG9IZXhVbnBhZGRlZCgobGVuLmxlbmd0aCAvIDIpIHwgMTI4KSA6ICcnO1xuICAgICAgICAgICAgY29uc3QgdCA9IHV0Lm51bWJlclRvSGV4VW5wYWRkZWQodGFnKTtcbiAgICAgICAgICAgIHJldHVybiB0ICsgbGVuTGVuICsgbGVuICsgZGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gdiAtIHZhbHVlLCBsIC0gbGVmdCBieXRlcyAodW5wYXJzZWQpXG4gICAgICAgIGRlY29kZSh0YWcsIGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgRXJyOiBFIH0gPSBERVI7XG4gICAgICAgICAgICBsZXQgcG9zID0gMDtcbiAgICAgICAgICAgIGlmICh0YWcgPCAwIHx8IHRhZyA+IDI1NilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRSgndGx2LmVuY29kZTogd3JvbmcgdGFnJyk7XG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCAyIHx8IGRhdGFbcG9zKytdICE9PSB0YWcpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEUoJ3Rsdi5kZWNvZGU6IHdyb25nIHRsdicpO1xuICAgICAgICAgICAgY29uc3QgZmlyc3QgPSBkYXRhW3BvcysrXTtcbiAgICAgICAgICAgIGNvbnN0IGlzTG9uZyA9ICEhKGZpcnN0ICYgMTI4KTsgLy8gRmlyc3QgYml0IG9mIGZpcnN0IGxlbmd0aCBieXRlIGlzIGZsYWcgZm9yIHNob3J0L2xvbmcgZm9ybVxuICAgICAgICAgICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgICAgICAgICBpZiAoIWlzTG9uZylcbiAgICAgICAgICAgICAgICBsZW5ndGggPSBmaXJzdDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIExvbmcgZm9ybTogW2xvbmdGbGFnKDFiaXQpLCBsZW5ndGhMZW5ndGgoN2JpdCksIGxlbmd0aCAoQkUpXVxuICAgICAgICAgICAgICAgIGNvbnN0IGxlbkxlbiA9IGZpcnN0ICYgMTI3O1xuICAgICAgICAgICAgICAgIGlmICghbGVuTGVuKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRSgndGx2LmRlY29kZShsb25nKTogaW5kZWZpbml0ZSBsZW5ndGggbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICAgICAgICAgIGlmIChsZW5MZW4gPiA0KVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRSgndGx2LmRlY29kZShsb25nKTogYnl0ZSBsZW5ndGggaXMgdG9vIGJpZycpOyAvLyB0aGlzIHdpbGwgb3ZlcmZsb3cgdTMyIGluIGpzXG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoQnl0ZXMgPSBkYXRhLnN1YmFycmF5KHBvcywgcG9zICsgbGVuTGVuKTtcbiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoQnl0ZXMubGVuZ3RoICE9PSBsZW5MZW4pXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFKCd0bHYuZGVjb2RlOiBsZW5ndGggYnl0ZXMgbm90IGNvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aEJ5dGVzWzBdID09PSAwKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRSgndGx2LmRlY29kZShsb25nKTogemVybyBsZWZ0bW9zdCBieXRlJyk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBiIG9mIGxlbmd0aEJ5dGVzKVxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSAobGVuZ3RoIDw8IDgpIHwgYjtcbiAgICAgICAgICAgICAgICBwb3MgKz0gbGVuTGVuO1xuICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPCAxMjgpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFKCd0bHYuZGVjb2RlKGxvbmcpOiBub3QgbWluaW1hbCBlbmNvZGluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdiA9IGRhdGEuc3ViYXJyYXkocG9zLCBwb3MgKyBsZW5ndGgpO1xuICAgICAgICAgICAgaWYgKHYubGVuZ3RoICE9PSBsZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEUoJ3Rsdi5kZWNvZGU6IHdyb25nIHZhbHVlIGxlbmd0aCcpO1xuICAgICAgICAgICAgcmV0dXJuIHsgdiwgbDogZGF0YS5zdWJhcnJheShwb3MgKyBsZW5ndGgpIH07XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAvLyBodHRwczovL2NyeXB0by5zdGFja2V4Y2hhbmdlLmNvbS9hLzU3NzM0IExlZnRtb3N0IGJpdCBvZiBmaXJzdCBieXRlIGlzICduZWdhdGl2ZScgZmxhZyxcbiAgICAvLyBzaW5jZSB3ZSBhbHdheXMgdXNlIHBvc2l0aXZlIGludGVnZXJzIGhlcmUuIEl0IG11c3QgYWx3YXlzIGJlIGVtcHR5OlxuICAgIC8vIC0gYWRkIHplcm8gYnl0ZSBpZiBleGlzdHNcbiAgICAvLyAtIGlmIG5leHQgYnl0ZSBkb2Vzbid0IGhhdmUgYSBmbGFnLCBsZWFkaW5nIHplcm8gaXMgbm90IGFsbG93ZWQgKG1pbmltYWwgZW5jb2RpbmcpXG4gICAgX2ludDoge1xuICAgICAgICBlbmNvZGUobnVtKSB7XG4gICAgICAgICAgICBjb25zdCB7IEVycjogRSB9ID0gREVSO1xuICAgICAgICAgICAgaWYgKG51bSA8IF8wbilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRSgnaW50ZWdlcjogbmVnYXRpdmUgaW50ZWdlcnMgYXJlIG5vdCBhbGxvd2VkJyk7XG4gICAgICAgICAgICBsZXQgaGV4ID0gdXQubnVtYmVyVG9IZXhVbnBhZGRlZChudW0pO1xuICAgICAgICAgICAgLy8gUGFkIHdpdGggemVybyBieXRlIGlmIG5lZ2F0aXZlIGZsYWcgaXMgcHJlc2VudFxuICAgICAgICAgICAgaWYgKE51bWJlci5wYXJzZUludChoZXhbMF0sIDE2KSAmIDBiMTAwMClcbiAgICAgICAgICAgICAgICBoZXggPSAnMDAnICsgaGV4O1xuICAgICAgICAgICAgaWYgKGhleC5sZW5ndGggJiAxKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFKCd1bmV4cGVjdGVkIERFUiBwYXJzaW5nIGFzc2VydGlvbjogdW5wYWRkZWQgaGV4Jyk7XG4gICAgICAgICAgICByZXR1cm4gaGV4O1xuICAgICAgICB9LFxuICAgICAgICBkZWNvZGUoZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgeyBFcnI6IEUgfSA9IERFUjtcbiAgICAgICAgICAgIGlmIChkYXRhWzBdICYgMTI4KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFKCdpbnZhbGlkIHNpZ25hdHVyZSBpbnRlZ2VyOiBuZWdhdGl2ZScpO1xuICAgICAgICAgICAgaWYgKGRhdGFbMF0gPT09IDB4MDAgJiYgIShkYXRhWzFdICYgMTI4KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRSgnaW52YWxpZCBzaWduYXR1cmUgaW50ZWdlcjogdW5uZWNlc3NhcnkgbGVhZGluZyB6ZXJvJyk7XG4gICAgICAgICAgICByZXR1cm4gYjJuKGRhdGEpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgdG9TaWcoaGV4KSB7XG4gICAgICAgIC8vIHBhcnNlIERFUiBzaWduYXR1cmVcbiAgICAgICAgY29uc3QgeyBFcnI6IEUsIF9pbnQ6IGludCwgX3RsdjogdGx2IH0gPSBERVI7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0eXBlb2YgaGV4ID09PSAnc3RyaW5nJyA/IGgyYihoZXgpIDogaGV4O1xuICAgICAgICB1dC5hYnl0ZXMoZGF0YSk7XG4gICAgICAgIGNvbnN0IHsgdjogc2VxQnl0ZXMsIGw6IHNlcUxlZnRCeXRlcyB9ID0gdGx2LmRlY29kZSgweDMwLCBkYXRhKTtcbiAgICAgICAgaWYgKHNlcUxlZnRCeXRlcy5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRSgnaW52YWxpZCBzaWduYXR1cmU6IGxlZnQgYnl0ZXMgYWZ0ZXIgcGFyc2luZycpO1xuICAgICAgICBjb25zdCB7IHY6IHJCeXRlcywgbDogckxlZnRCeXRlcyB9ID0gdGx2LmRlY29kZSgweDAyLCBzZXFCeXRlcyk7XG4gICAgICAgIGNvbnN0IHsgdjogc0J5dGVzLCBsOiBzTGVmdEJ5dGVzIH0gPSB0bHYuZGVjb2RlKDB4MDIsIHJMZWZ0Qnl0ZXMpO1xuICAgICAgICBpZiAoc0xlZnRCeXRlcy5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRSgnaW52YWxpZCBzaWduYXR1cmU6IGxlZnQgYnl0ZXMgYWZ0ZXIgcGFyc2luZycpO1xuICAgICAgICByZXR1cm4geyByOiBpbnQuZGVjb2RlKHJCeXRlcyksIHM6IGludC5kZWNvZGUoc0J5dGVzKSB9O1xuICAgIH0sXG4gICAgaGV4RnJvbVNpZyhzaWcpIHtcbiAgICAgICAgY29uc3QgeyBfdGx2OiB0bHYsIF9pbnQ6IGludCB9ID0gREVSO1xuICAgICAgICBjb25zdCBycyA9IHRsdi5lbmNvZGUoMHgwMiwgaW50LmVuY29kZShzaWcucikpO1xuICAgICAgICBjb25zdCBzcyA9IHRsdi5lbmNvZGUoMHgwMiwgaW50LmVuY29kZShzaWcucykpO1xuICAgICAgICBjb25zdCBzZXEgPSBycyArIHNzO1xuICAgICAgICByZXR1cm4gdGx2LmVuY29kZSgweDMwLCBzZXEpO1xuICAgIH0sXG59O1xuLy8gQmUgZnJpZW5kbHkgdG8gYmFkIEVDTUFTY3JpcHQgcGFyc2VycyBieSBub3QgdXNpbmcgYmlnaW50IGxpdGVyYWxzXG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IF8wbiA9IEJpZ0ludCgwKSwgXzFuID0gQmlnSW50KDEpLCBfMm4gPSBCaWdJbnQoMiksIF8zbiA9IEJpZ0ludCgzKSwgXzRuID0gQmlnSW50KDQpO1xuZXhwb3J0IGZ1bmN0aW9uIHdlaWVyc3RyYXNzUG9pbnRzKG9wdHMpIHtcbiAgICBjb25zdCBDVVJWRSA9IHZhbGlkYXRlUG9pbnRPcHRzKG9wdHMpO1xuICAgIGNvbnN0IHsgRnAgfSA9IENVUlZFOyAvLyBBbGwgY3VydmVzIGhhcyBzYW1lIGZpZWxkIC8gZ3JvdXAgbGVuZ3RoIGFzIGZvciBub3csIGJ1dCB0aGV5IGNhbiBkaWZmZXJcbiAgICBjb25zdCBGbiA9IEZpZWxkKENVUlZFLm4sIENVUlZFLm5CaXRMZW5ndGgpO1xuICAgIGNvbnN0IHRvQnl0ZXMgPSBDVVJWRS50b0J5dGVzIHx8XG4gICAgICAgICgoX2MsIHBvaW50LCBfaXNDb21wcmVzc2VkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhID0gcG9pbnQudG9BZmZpbmUoKTtcbiAgICAgICAgICAgIHJldHVybiB1dC5jb25jYXRCeXRlcyhVaW50OEFycmF5LmZyb20oWzB4MDRdKSwgRnAudG9CeXRlcyhhLngpLCBGcC50b0J5dGVzKGEueSkpO1xuICAgICAgICB9KTtcbiAgICBjb25zdCBmcm9tQnl0ZXMgPSBDVVJWRS5mcm9tQnl0ZXMgfHxcbiAgICAgICAgKChieXRlcykgPT4ge1xuICAgICAgICAgICAgLy8gY29uc3QgaGVhZCA9IGJ5dGVzWzBdO1xuICAgICAgICAgICAgY29uc3QgdGFpbCA9IGJ5dGVzLnN1YmFycmF5KDEpO1xuICAgICAgICAgICAgLy8gaWYgKGhlYWQgIT09IDB4MDQpIHRocm93IG5ldyBFcnJvcignT25seSBub24tY29tcHJlc3NlZCBlbmNvZGluZyBpcyBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBGcC5mcm9tQnl0ZXModGFpbC5zdWJhcnJheSgwLCBGcC5CWVRFUykpO1xuICAgICAgICAgICAgY29uc3QgeSA9IEZwLmZyb21CeXRlcyh0YWlsLnN1YmFycmF5KEZwLkJZVEVTLCAyICogRnAuQllURVMpKTtcbiAgICAgICAgICAgIHJldHVybiB7IHgsIHkgfTtcbiAgICAgICAgfSk7XG4gICAgLyoqXG4gICAgICogecKyID0geMKzICsgYXggKyBiOiBTaG9ydCB3ZWllcnN0cmFzcyBjdXJ2ZSBmb3JtdWxhXG4gICAgICogQHJldHVybnMgecKyXG4gICAgICovXG4gICAgZnVuY3Rpb24gd2VpZXJzdHJhc3NFcXVhdGlvbih4KSB7XG4gICAgICAgIGNvbnN0IHsgYSwgYiB9ID0gQ1VSVkU7XG4gICAgICAgIGNvbnN0IHgyID0gRnAuc3FyKHgpOyAvLyB4ICogeFxuICAgICAgICBjb25zdCB4MyA9IEZwLm11bCh4MiwgeCk7IC8vIHgyICogeFxuICAgICAgICByZXR1cm4gRnAuYWRkKEZwLmFkZCh4MywgRnAubXVsKHgsIGEpKSwgYik7IC8vIHgzICsgYSAqIHggKyBiXG4gICAgfVxuICAgIC8vIFZhbGlkYXRlIHdoZXRoZXIgdGhlIHBhc3NlZCBjdXJ2ZSBwYXJhbXMgYXJlIHZhbGlkLlxuICAgIC8vIFdlIGNoZWNrIGlmIGN1cnZlIGVxdWF0aW9uIHdvcmtzIGZvciBnZW5lcmF0b3IgcG9pbnQuXG4gICAgLy8gYGFzc2VydFZhbGlkaXR5KClgIHdvbid0IHdvcms6IGBpc1RvcnNpb25GcmVlKClgIGlzIG5vdCBhdmFpbGFibGUgYXQgdGhpcyBwb2ludCBpbiBibHMxMi0zODEuXG4gICAgLy8gUHJvamVjdGl2ZVBvaW50IGNsYXNzIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXQuXG4gICAgaWYgKCFGcC5lcWwoRnAuc3FyKENVUlZFLkd5KSwgd2VpZXJzdHJhc3NFcXVhdGlvbihDVVJWRS5HeCkpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBnZW5lcmF0b3IgcG9pbnQ6IGVxdWF0aW9uIGxlZnQgIT0gcmlnaHQnKTtcbiAgICAvLyBWYWxpZCBncm91cCBlbGVtZW50cyByZXNpZGUgaW4gcmFuZ2UgMS4ubi0xXG4gICAgZnVuY3Rpb24gaXNXaXRoaW5DdXJ2ZU9yZGVyKG51bSkge1xuICAgICAgICByZXR1cm4gdXQuaW5SYW5nZShudW0sIF8xbiwgQ1VSVkUubik7XG4gICAgfVxuICAgIC8vIFZhbGlkYXRlcyBpZiBwcml2IGtleSBpcyB2YWxpZCBhbmQgY29udmVydHMgaXQgdG8gYmlnaW50LlxuICAgIC8vIFN1cHBvcnRzIG9wdGlvbnMgYWxsb3dlZFByaXZhdGVLZXlMZW5ndGhzIGFuZCB3cmFwUHJpdmF0ZUtleS5cbiAgICBmdW5jdGlvbiBub3JtUHJpdmF0ZUtleVRvU2NhbGFyKGtleSkge1xuICAgICAgICBjb25zdCB7IGFsbG93ZWRQcml2YXRlS2V5TGVuZ3RoczogbGVuZ3RocywgbkJ5dGVMZW5ndGgsIHdyYXBQcml2YXRlS2V5LCBuOiBOIH0gPSBDVVJWRTtcbiAgICAgICAgaWYgKGxlbmd0aHMgJiYgdHlwZW9mIGtleSAhPT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgICAgIGlmICh1dC5pc0J5dGVzKGtleSkpXG4gICAgICAgICAgICAgICAga2V5ID0gdXQuYnl0ZXNUb0hleChrZXkpO1xuICAgICAgICAgICAgLy8gTm9ybWFsaXplIHRvIGhleCBzdHJpbmcsIHBhZC4gRS5nLiBQNTIxIHdvdWxkIG5vcm0gMTMwLTEzMiBjaGFyIGhleCB0byAxMzItY2hhciBieXRlc1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnIHx8ICFsZW5ndGhzLmluY2x1ZGVzKGtleS5sZW5ndGgpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwcml2YXRlIGtleScpO1xuICAgICAgICAgICAga2V5ID0ga2V5LnBhZFN0YXJ0KG5CeXRlTGVuZ3RoICogMiwgJzAnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbnVtO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbnVtID1cbiAgICAgICAgICAgICAgICB0eXBlb2Yga2V5ID09PSAnYmlnaW50J1xuICAgICAgICAgICAgICAgICAgICA/IGtleVxuICAgICAgICAgICAgICAgICAgICA6IHV0LmJ5dGVzVG9OdW1iZXJCRShlbnN1cmVCeXRlcygncHJpdmF0ZSBrZXknLCBrZXksIG5CeXRlTGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcHJpdmF0ZSBrZXksIGV4cGVjdGVkIGhleCBvciAnICsgbkJ5dGVMZW5ndGggKyAnIGJ5dGVzLCBnb3QgJyArIHR5cGVvZiBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3cmFwUHJpdmF0ZUtleSlcbiAgICAgICAgICAgIG51bSA9IG1vZChudW0sIE4pOyAvLyBkaXNhYmxlZCBieSBkZWZhdWx0LCBlbmFibGVkIGZvciBCTFNcbiAgICAgICAgdXQuYUluUmFuZ2UoJ3ByaXZhdGUga2V5JywgbnVtLCBfMW4sIE4pOyAvLyBudW0gaW4gcmFuZ2UgWzEuLk4tMV1cbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNzZXJ0UHJqUG9pbnQob3RoZXIpIHtcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBQb2ludCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2plY3RpdmVQb2ludCBleHBlY3RlZCcpO1xuICAgIH1cbiAgICAvLyBNZW1vaXplZCB0b0FmZmluZSAvIHZhbGlkaXR5IGNoZWNrLiBUaGV5IGFyZSBoZWF2eS4gUG9pbnRzIGFyZSBpbW11dGFibGUuXG4gICAgLy8gQ29udmVydHMgUHJvamVjdGl2ZSBwb2ludCB0byBhZmZpbmUgKHgsIHkpIGNvb3JkaW5hdGVzLlxuICAgIC8vIENhbiBhY2NlcHQgcHJlY29tcHV0ZWQgWl4tMSAtIGZvciBleGFtcGxlLCBmcm9tIGludmVydEJhdGNoLlxuICAgIC8vICh4LCB5LCB6KSDiiIsgKHg9eC96LCB5PXkveilcbiAgICBjb25zdCB0b0FmZmluZU1lbW8gPSBtZW1vaXplZCgocCwgaXopID0+IHtcbiAgICAgICAgY29uc3QgeyBweDogeCwgcHk6IHksIHB6OiB6IH0gPSBwO1xuICAgICAgICAvLyBGYXN0LXBhdGggZm9yIG5vcm1hbGl6ZWQgcG9pbnRzXG4gICAgICAgIGlmIChGcC5lcWwoeiwgRnAuT05FKSlcbiAgICAgICAgICAgIHJldHVybiB7IHgsIHkgfTtcbiAgICAgICAgY29uc3QgaXMwID0gcC5pczAoKTtcbiAgICAgICAgLy8gSWYgaW52WiB3YXMgMCwgd2UgcmV0dXJuIHplcm8gcG9pbnQuIEhvd2V2ZXIgd2Ugc3RpbGwgd2FudCB0byBleGVjdXRlXG4gICAgICAgIC8vIGFsbCBvcGVyYXRpb25zLCBzbyB3ZSByZXBsYWNlIGludlogd2l0aCBhIHJhbmRvbSBudW1iZXIsIDEuXG4gICAgICAgIGlmIChpeiA9PSBudWxsKVxuICAgICAgICAgICAgaXogPSBpczAgPyBGcC5PTkUgOiBGcC5pbnYoeik7XG4gICAgICAgIGNvbnN0IGF4ID0gRnAubXVsKHgsIGl6KTtcbiAgICAgICAgY29uc3QgYXkgPSBGcC5tdWwoeSwgaXopO1xuICAgICAgICBjb25zdCB6eiA9IEZwLm11bCh6LCBpeik7XG4gICAgICAgIGlmIChpczApXG4gICAgICAgICAgICByZXR1cm4geyB4OiBGcC5aRVJPLCB5OiBGcC5aRVJPIH07XG4gICAgICAgIGlmICghRnAuZXFsKHp6LCBGcC5PTkUpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZaIHdhcyBpbnZhbGlkJyk7XG4gICAgICAgIHJldHVybiB7IHg6IGF4LCB5OiBheSB9O1xuICAgIH0pO1xuICAgIC8vIE5PVEU6IG9uIGV4Y2VwdGlvbiB0aGlzIHdpbGwgY3Jhc2ggJ2NhY2hlZCcgYW5kIG5vIHZhbHVlIHdpbGwgYmUgc2V0LlxuICAgIC8vIE90aGVyd2lzZSB0cnVlIHdpbGwgYmUgcmV0dXJuXG4gICAgY29uc3QgYXNzZXJ0VmFsaWRNZW1vID0gbWVtb2l6ZWQoKHApID0+IHtcbiAgICAgICAgaWYgKHAuaXMwKCkpIHtcbiAgICAgICAgICAgIC8vICgwLCAxLCAwKSBha2EgWkVSTyBpcyBpbnZhbGlkIGluIG1vc3QgY29udGV4dHMuXG4gICAgICAgICAgICAvLyBJbiBCTFMsIFpFUk8gY2FuIGJlIHNlcmlhbGl6ZWQsIHNvIHdlIGFsbG93IGl0LlxuICAgICAgICAgICAgLy8gKDAsIDAsIDApIGlzIGludmFsaWQgcmVwcmVzZW50YXRpb24gb2YgWkVSTy5cbiAgICAgICAgICAgIGlmIChDVVJWRS5hbGxvd0luZmluaXR5UG9pbnQgJiYgIUZwLmlzMChwLnB5KSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwb2ludDogWkVSTycpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvbWUgM3JkLXBhcnR5IHRlc3QgdmVjdG9ycyByZXF1aXJlIGRpZmZlcmVudCB3b3JkaW5nIGJldHdlZW4gaGVyZSAmIGBmcm9tQ29tcHJlc3NlZEhleGBcbiAgICAgICAgY29uc3QgeyB4LCB5IH0gPSBwLnRvQWZmaW5lKCk7XG4gICAgICAgIC8vIENoZWNrIGlmIHgsIHkgYXJlIHZhbGlkIGZpZWxkIGVsZW1lbnRzXG4gICAgICAgIGlmICghRnAuaXNWYWxpZCh4KSB8fCAhRnAuaXNWYWxpZCh5KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIHBvaW50OiB4IG9yIHkgbm90IEZFJyk7XG4gICAgICAgIGNvbnN0IGxlZnQgPSBGcC5zcXIoeSk7IC8vIHnCslxuICAgICAgICBjb25zdCByaWdodCA9IHdlaWVyc3RyYXNzRXF1YXRpb24oeCk7IC8vIHjCsyArIGF4ICsgYlxuICAgICAgICBpZiAoIUZwLmVxbChsZWZ0LCByaWdodCkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBwb2ludDogZXF1YXRpb24gbGVmdCAhPSByaWdodCcpO1xuICAgICAgICBpZiAoIXAuaXNUb3JzaW9uRnJlZSgpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgcG9pbnQ6IG5vdCBpbiBwcmltZS1vcmRlciBzdWJncm91cCcpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBQcm9qZWN0aXZlIFBvaW50IHdvcmtzIGluIDNkIC8gcHJvamVjdGl2ZSAoaG9tb2dlbmVvdXMpIGNvb3JkaW5hdGVzOiAoeCwgeSwgeikg4oiLICh4PXgveiwgeT15L3opXG4gICAgICogRGVmYXVsdCBQb2ludCB3b3JrcyBpbiAyZCAvIGFmZmluZSBjb29yZGluYXRlczogKHgsIHkpXG4gICAgICogV2UncmUgZG9pbmcgY2FsY3VsYXRpb25zIGluIHByb2plY3RpdmUsIGJlY2F1c2UgaXRzIG9wZXJhdGlvbnMgZG9uJ3QgcmVxdWlyZSBjb3N0bHkgaW52ZXJzaW9uLlxuICAgICAqL1xuICAgIGNsYXNzIFBvaW50IHtcbiAgICAgICAgY29uc3RydWN0b3IocHgsIHB5LCBweikge1xuICAgICAgICAgICAgdGhpcy5weCA9IHB4O1xuICAgICAgICAgICAgdGhpcy5weSA9IHB5O1xuICAgICAgICAgICAgdGhpcy5weiA9IHB6O1xuICAgICAgICAgICAgaWYgKHB4ID09IG51bGwgfHwgIUZwLmlzVmFsaWQocHgpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneCByZXF1aXJlZCcpO1xuICAgICAgICAgICAgaWYgKHB5ID09IG51bGwgfHwgIUZwLmlzVmFsaWQocHkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneSByZXF1aXJlZCcpO1xuICAgICAgICAgICAgaWYgKHB6ID09IG51bGwgfHwgIUZwLmlzVmFsaWQocHopKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigneiByZXF1aXJlZCcpO1xuICAgICAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEb2VzIG5vdCB2YWxpZGF0ZSBpZiB0aGUgcG9pbnQgaXMgb24tY3VydmUuXG4gICAgICAgIC8vIFVzZSBmcm9tSGV4IGluc3RlYWQsIG9yIGNhbGwgYXNzZXJ0VmFsaWRpdHkoKSBsYXRlci5cbiAgICAgICAgc3RhdGljIGZyb21BZmZpbmUocCkge1xuICAgICAgICAgICAgY29uc3QgeyB4LCB5IH0gPSBwIHx8IHt9O1xuICAgICAgICAgICAgaWYgKCFwIHx8ICFGcC5pc1ZhbGlkKHgpIHx8ICFGcC5pc1ZhbGlkKHkpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhZmZpbmUgcG9pbnQnKTtcbiAgICAgICAgICAgIGlmIChwIGluc3RhbmNlb2YgUG9pbnQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9qZWN0aXZlIHBvaW50IG5vdCBhbGxvd2VkJyk7XG4gICAgICAgICAgICBjb25zdCBpczAgPSAoaSkgPT4gRnAuZXFsKGksIEZwLlpFUk8pO1xuICAgICAgICAgICAgLy8gZnJvbUFmZmluZSh4OjAsIHk6MCkgd291bGQgcHJvZHVjZSAoeDowLCB5OjAsIHo6MSksIGJ1dCB3ZSBuZWVkICh4OjAsIHk6MSwgejowKVxuICAgICAgICAgICAgaWYgKGlzMCh4KSAmJiBpczAoeSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFBvaW50LlpFUk87XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KHgsIHksIEZwLk9ORSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHgoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b0FmZmluZSgpLng7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b0FmZmluZSgpLnk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRha2VzIGEgYnVuY2ggb2YgUHJvamVjdGl2ZSBQb2ludHMgYnV0IGV4ZWN1dGVzIG9ubHkgb25lXG4gICAgICAgICAqIGludmVyc2lvbiBvbiBhbGwgb2YgdGhlbS4gSW52ZXJzaW9uIGlzIHZlcnkgc2xvdyBvcGVyYXRpb24sXG4gICAgICAgICAqIHNvIHRoaXMgaW1wcm92ZXMgcGVyZm9ybWFuY2UgbWFzc2l2ZWx5LlxuICAgICAgICAgKiBPcHRpbWl6YXRpb246IGNvbnZlcnRzIGEgbGlzdCBvZiBwcm9qZWN0aXZlIHBvaW50cyB0byBhIGxpc3Qgb2YgaWRlbnRpY2FsIHBvaW50cyB3aXRoIFo9MS5cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBub3JtYWxpemVaKHBvaW50cykge1xuICAgICAgICAgICAgY29uc3QgdG9JbnYgPSBGcC5pbnZlcnRCYXRjaChwb2ludHMubWFwKChwKSA9PiBwLnB6KSk7XG4gICAgICAgICAgICByZXR1cm4gcG9pbnRzLm1hcCgocCwgaSkgPT4gcC50b0FmZmluZSh0b0ludltpXSkpLm1hcChQb2ludC5mcm9tQWZmaW5lKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgaGFzaCBzdHJpbmcgb3IgVWludDhBcnJheSB0byBQb2ludC5cbiAgICAgICAgICogQHBhcmFtIGhleCBzaG9ydC9sb25nIEVDRFNBIGhleFxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGZyb21IZXgoaGV4KSB7XG4gICAgICAgICAgICBjb25zdCBQID0gUG9pbnQuZnJvbUFmZmluZShmcm9tQnl0ZXMoZW5zdXJlQnl0ZXMoJ3BvaW50SGV4JywgaGV4KSkpO1xuICAgICAgICAgICAgUC5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICAgICAgcmV0dXJuIFA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTXVsdGlwbGllcyBnZW5lcmF0b3IgcG9pbnQgYnkgcHJpdmF0ZUtleS5cbiAgICAgICAgc3RhdGljIGZyb21Qcml2YXRlS2V5KHByaXZhdGVLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBQb2ludC5CQVNFLm11bHRpcGx5KG5vcm1Qcml2YXRlS2V5VG9TY2FsYXIocHJpdmF0ZUtleSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE11bHRpc2NhbGFyIE11bHRpcGxpY2F0aW9uXG4gICAgICAgIHN0YXRpYyBtc20ocG9pbnRzLCBzY2FsYXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gcGlwcGVuZ2VyKFBvaW50LCBGbiwgcG9pbnRzLCBzY2FsYXJzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBcIlByaXZhdGUgbWV0aG9kXCIsIGRvbid0IHVzZSBpdCBkaXJlY3RseVxuICAgICAgICBfc2V0V2luZG93U2l6ZSh3aW5kb3dTaXplKSB7XG4gICAgICAgICAgICB3bmFmLnNldFdpbmRvd1NpemUodGhpcywgd2luZG93U2l6ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQSBwb2ludCBvbiBjdXJ2ZSBpcyB2YWxpZCBpZiBpdCBjb25mb3JtcyB0byBlcXVhdGlvbi5cbiAgICAgICAgYXNzZXJ0VmFsaWRpdHkoKSB7XG4gICAgICAgICAgICBhc3NlcnRWYWxpZE1lbW8odGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaGFzRXZlblkoKSB7XG4gICAgICAgICAgICBjb25zdCB7IHkgfSA9IHRoaXMudG9BZmZpbmUoKTtcbiAgICAgICAgICAgIGlmIChGcC5pc09kZClcbiAgICAgICAgICAgICAgICByZXR1cm4gIUZwLmlzT2RkKHkpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmllbGQgZG9lc24ndCBzdXBwb3J0IGlzT2RkXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb21wYXJlIG9uZSBwb2ludCB0byBhbm90aGVyLlxuICAgICAgICAgKi9cbiAgICAgICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgICAgICBhc3NlcnRQcmpQb2ludChvdGhlcik7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiBYMSwgcHk6IFkxLCBwejogWjEgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiBYMiwgcHk6IFkyLCBwejogWjIgfSA9IG90aGVyO1xuICAgICAgICAgICAgY29uc3QgVTEgPSBGcC5lcWwoRnAubXVsKFgxLCBaMiksIEZwLm11bChYMiwgWjEpKTtcbiAgICAgICAgICAgIGNvbnN0IFUyID0gRnAuZXFsKEZwLm11bChZMSwgWjIpLCBGcC5tdWwoWTIsIFoxKSk7XG4gICAgICAgICAgICByZXR1cm4gVTEgJiYgVTI7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZsaXBzIHBvaW50IHRvIG9uZSBjb3JyZXNwb25kaW5nIHRvICh4LCAteSkgaW4gQWZmaW5lIGNvb3JkaW5hdGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgbmVnYXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLnB4LCBGcC5uZWcodGhpcy5weSksIHRoaXMucHopO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlbmVzLUNvc3RlbGxvLUJhdGluYSBleGNlcHRpb24tZnJlZSBkb3VibGluZyBmb3JtdWxhLlxuICAgICAgICAvLyBUaGVyZSBpcyAzMCUgZmFzdGVyIEphY29iaWFuIGZvcm11bGEsIGJ1dCBpdCBpcyBub3QgY29tcGxldGUuXG4gICAgICAgIC8vIGh0dHBzOi8vZXByaW50LmlhY3Iub3JnLzIwMTUvMTA2MCwgYWxnb3JpdGhtIDNcbiAgICAgICAgLy8gQ29zdDogOE0gKyAzUyArIDMqYSArIDIqYjMgKyAxNWFkZC5cbiAgICAgICAgZG91YmxlKCkge1xuICAgICAgICAgICAgY29uc3QgeyBhLCBiIH0gPSBDVVJWRTtcbiAgICAgICAgICAgIGNvbnN0IGIzID0gRnAubXVsKGIsIF8zbik7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiBYMSwgcHk6IFkxLCBwejogWjEgfSA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgWDMgPSBGcC5aRVJPLCBZMyA9IEZwLlpFUk8sIFozID0gRnAuWkVSTzsgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICBsZXQgdDAgPSBGcC5tdWwoWDEsIFgxKTsgLy8gc3RlcCAxXG4gICAgICAgICAgICBsZXQgdDEgPSBGcC5tdWwoWTEsIFkxKTtcbiAgICAgICAgICAgIGxldCB0MiA9IEZwLm11bChaMSwgWjEpO1xuICAgICAgICAgICAgbGV0IHQzID0gRnAubXVsKFgxLCBZMSk7XG4gICAgICAgICAgICB0MyA9IEZwLmFkZCh0MywgdDMpOyAvLyBzdGVwIDVcbiAgICAgICAgICAgIFozID0gRnAubXVsKFgxLCBaMSk7XG4gICAgICAgICAgICBaMyA9IEZwLmFkZChaMywgWjMpO1xuICAgICAgICAgICAgWDMgPSBGcC5tdWwoYSwgWjMpO1xuICAgICAgICAgICAgWTMgPSBGcC5tdWwoYjMsIHQyKTtcbiAgICAgICAgICAgIFkzID0gRnAuYWRkKFgzLCBZMyk7IC8vIHN0ZXAgMTBcbiAgICAgICAgICAgIFgzID0gRnAuc3ViKHQxLCBZMyk7XG4gICAgICAgICAgICBZMyA9IEZwLmFkZCh0MSwgWTMpO1xuICAgICAgICAgICAgWTMgPSBGcC5tdWwoWDMsIFkzKTtcbiAgICAgICAgICAgIFgzID0gRnAubXVsKHQzLCBYMyk7XG4gICAgICAgICAgICBaMyA9IEZwLm11bChiMywgWjMpOyAvLyBzdGVwIDE1XG4gICAgICAgICAgICB0MiA9IEZwLm11bChhLCB0Mik7XG4gICAgICAgICAgICB0MyA9IEZwLnN1Yih0MCwgdDIpO1xuICAgICAgICAgICAgdDMgPSBGcC5tdWwoYSwgdDMpO1xuICAgICAgICAgICAgdDMgPSBGcC5hZGQodDMsIFozKTtcbiAgICAgICAgICAgIFozID0gRnAuYWRkKHQwLCB0MCk7IC8vIHN0ZXAgMjBcbiAgICAgICAgICAgIHQwID0gRnAuYWRkKFozLCB0MCk7XG4gICAgICAgICAgICB0MCA9IEZwLmFkZCh0MCwgdDIpO1xuICAgICAgICAgICAgdDAgPSBGcC5tdWwodDAsIHQzKTtcbiAgICAgICAgICAgIFkzID0gRnAuYWRkKFkzLCB0MCk7XG4gICAgICAgICAgICB0MiA9IEZwLm11bChZMSwgWjEpOyAvLyBzdGVwIDI1XG4gICAgICAgICAgICB0MiA9IEZwLmFkZCh0MiwgdDIpO1xuICAgICAgICAgICAgdDAgPSBGcC5tdWwodDIsIHQzKTtcbiAgICAgICAgICAgIFgzID0gRnAuc3ViKFgzLCB0MCk7XG4gICAgICAgICAgICBaMyA9IEZwLm11bCh0MiwgdDEpO1xuICAgICAgICAgICAgWjMgPSBGcC5hZGQoWjMsIFozKTsgLy8gc3RlcCAzMFxuICAgICAgICAgICAgWjMgPSBGcC5hZGQoWjMsIFozKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9pbnQoWDMsIFkzLCBaMyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVuZXMtQ29zdGVsbG8tQmF0aW5hIGV4Y2VwdGlvbi1mcmVlIGFkZGl0aW9uIGZvcm11bGEuXG4gICAgICAgIC8vIFRoZXJlIGlzIDMwJSBmYXN0ZXIgSmFjb2JpYW4gZm9ybXVsYSwgYnV0IGl0IGlzIG5vdCBjb21wbGV0ZS5cbiAgICAgICAgLy8gaHR0cHM6Ly9lcHJpbnQuaWFjci5vcmcvMjAxNS8xMDYwLCBhbGdvcml0aG0gMVxuICAgICAgICAvLyBDb3N0OiAxMk0gKyAwUyArIDMqYSArIDMqYjMgKyAyM2FkZC5cbiAgICAgICAgYWRkKG90aGVyKSB7XG4gICAgICAgICAgICBhc3NlcnRQcmpQb2ludChvdGhlcik7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiBYMSwgcHk6IFkxLCBwejogWjEgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IHB4OiBYMiwgcHk6IFkyLCBwejogWjIgfSA9IG90aGVyO1xuICAgICAgICAgICAgbGV0IFgzID0gRnAuWkVSTywgWTMgPSBGcC5aRVJPLCBaMyA9IEZwLlpFUk87IC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgYSA9IENVUlZFLmE7XG4gICAgICAgICAgICBjb25zdCBiMyA9IEZwLm11bChDVVJWRS5iLCBfM24pO1xuICAgICAgICAgICAgbGV0IHQwID0gRnAubXVsKFgxLCBYMik7IC8vIHN0ZXAgMVxuICAgICAgICAgICAgbGV0IHQxID0gRnAubXVsKFkxLCBZMik7XG4gICAgICAgICAgICBsZXQgdDIgPSBGcC5tdWwoWjEsIFoyKTtcbiAgICAgICAgICAgIGxldCB0MyA9IEZwLmFkZChYMSwgWTEpO1xuICAgICAgICAgICAgbGV0IHQ0ID0gRnAuYWRkKFgyLCBZMik7IC8vIHN0ZXAgNVxuICAgICAgICAgICAgdDMgPSBGcC5tdWwodDMsIHQ0KTtcbiAgICAgICAgICAgIHQ0ID0gRnAuYWRkKHQwLCB0MSk7XG4gICAgICAgICAgICB0MyA9IEZwLnN1Yih0MywgdDQpO1xuICAgICAgICAgICAgdDQgPSBGcC5hZGQoWDEsIFoxKTtcbiAgICAgICAgICAgIGxldCB0NSA9IEZwLmFkZChYMiwgWjIpOyAvLyBzdGVwIDEwXG4gICAgICAgICAgICB0NCA9IEZwLm11bCh0NCwgdDUpO1xuICAgICAgICAgICAgdDUgPSBGcC5hZGQodDAsIHQyKTtcbiAgICAgICAgICAgIHQ0ID0gRnAuc3ViKHQ0LCB0NSk7XG4gICAgICAgICAgICB0NSA9IEZwLmFkZChZMSwgWjEpO1xuICAgICAgICAgICAgWDMgPSBGcC5hZGQoWTIsIFoyKTsgLy8gc3RlcCAxNVxuICAgICAgICAgICAgdDUgPSBGcC5tdWwodDUsIFgzKTtcbiAgICAgICAgICAgIFgzID0gRnAuYWRkKHQxLCB0Mik7XG4gICAgICAgICAgICB0NSA9IEZwLnN1Yih0NSwgWDMpO1xuICAgICAgICAgICAgWjMgPSBGcC5tdWwoYSwgdDQpO1xuICAgICAgICAgICAgWDMgPSBGcC5tdWwoYjMsIHQyKTsgLy8gc3RlcCAyMFxuICAgICAgICAgICAgWjMgPSBGcC5hZGQoWDMsIFozKTtcbiAgICAgICAgICAgIFgzID0gRnAuc3ViKHQxLCBaMyk7XG4gICAgICAgICAgICBaMyA9IEZwLmFkZCh0MSwgWjMpO1xuICAgICAgICAgICAgWTMgPSBGcC5tdWwoWDMsIFozKTtcbiAgICAgICAgICAgIHQxID0gRnAuYWRkKHQwLCB0MCk7IC8vIHN0ZXAgMjVcbiAgICAgICAgICAgIHQxID0gRnAuYWRkKHQxLCB0MCk7XG4gICAgICAgICAgICB0MiA9IEZwLm11bChhLCB0Mik7XG4gICAgICAgICAgICB0NCA9IEZwLm11bChiMywgdDQpO1xuICAgICAgICAgICAgdDEgPSBGcC5hZGQodDEsIHQyKTtcbiAgICAgICAgICAgIHQyID0gRnAuc3ViKHQwLCB0Mik7IC8vIHN0ZXAgMzBcbiAgICAgICAgICAgIHQyID0gRnAubXVsKGEsIHQyKTtcbiAgICAgICAgICAgIHQ0ID0gRnAuYWRkKHQ0LCB0Mik7XG4gICAgICAgICAgICB0MCA9IEZwLm11bCh0MSwgdDQpO1xuICAgICAgICAgICAgWTMgPSBGcC5hZGQoWTMsIHQwKTtcbiAgICAgICAgICAgIHQwID0gRnAubXVsKHQ1LCB0NCk7IC8vIHN0ZXAgMzVcbiAgICAgICAgICAgIFgzID0gRnAubXVsKHQzLCBYMyk7XG4gICAgICAgICAgICBYMyA9IEZwLnN1YihYMywgdDApO1xuICAgICAgICAgICAgdDAgPSBGcC5tdWwodDMsIHQxKTtcbiAgICAgICAgICAgIFozID0gRnAubXVsKHQ1LCBaMyk7XG4gICAgICAgICAgICBaMyA9IEZwLmFkZChaMywgdDApOyAvLyBzdGVwIDQwXG4gICAgICAgICAgICByZXR1cm4gbmV3IFBvaW50KFgzLCBZMywgWjMpO1xuICAgICAgICB9XG4gICAgICAgIHN1YnRyYWN0KG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQob3RoZXIubmVnYXRlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlzMCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVxdWFscyhQb2ludC5aRVJPKTtcbiAgICAgICAgfVxuICAgICAgICB3TkFGKG4pIHtcbiAgICAgICAgICAgIHJldHVybiB3bmFmLndOQUZDYWNoZWQodGhpcywgbiwgUG9pbnQubm9ybWFsaXplWik7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vbi1jb25zdGFudC10aW1lIG11bHRpcGxpY2F0aW9uLiBVc2VzIGRvdWJsZS1hbmQtYWRkIGFsZ29yaXRobS5cbiAgICAgICAgICogSXQncyBmYXN0ZXIsIGJ1dCBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4geW91IGRvbid0IGNhcmUgYWJvdXRcbiAgICAgICAgICogYW4gZXhwb3NlZCBwcml2YXRlIGtleSBlLmcuIHNpZyB2ZXJpZmljYXRpb24sIHdoaWNoIHdvcmtzIG92ZXIgKnB1YmxpYyoga2V5cy5cbiAgICAgICAgICovXG4gICAgICAgIG11bHRpcGx5VW5zYWZlKHNjKSB7XG4gICAgICAgICAgICBjb25zdCB7IGVuZG8sIG46IE4gfSA9IENVUlZFO1xuICAgICAgICAgICAgdXQuYUluUmFuZ2UoJ3NjYWxhcicsIHNjLCBfMG4sIE4pO1xuICAgICAgICAgICAgY29uc3QgSSA9IFBvaW50LlpFUk87XG4gICAgICAgICAgICBpZiAoc2MgPT09IF8wbilcbiAgICAgICAgICAgICAgICByZXR1cm4gSTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzMCgpIHx8IHNjID09PSBfMW4pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAvLyBDYXNlIGE6IG5vIGVuZG9tb3JwaGlzbS4gQ2FzZSBiOiBoYXMgcHJlY29tcHV0ZXMuXG4gICAgICAgICAgICBpZiAoIWVuZG8gfHwgd25hZi5oYXNQcmVjb21wdXRlcyh0aGlzKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gd25hZi53TkFGQ2FjaGVkVW5zYWZlKHRoaXMsIHNjLCBQb2ludC5ub3JtYWxpemVaKTtcbiAgICAgICAgICAgIC8vIENhc2UgYzogZW5kb21vcnBoaXNtXG4gICAgICAgICAgICBsZXQgeyBrMW5lZywgazEsIGsybmVnLCBrMiB9ID0gZW5kby5zcGxpdFNjYWxhcihzYyk7XG4gICAgICAgICAgICBsZXQgazFwID0gSTtcbiAgICAgICAgICAgIGxldCBrMnAgPSBJO1xuICAgICAgICAgICAgbGV0IGQgPSB0aGlzO1xuICAgICAgICAgICAgd2hpbGUgKGsxID4gXzBuIHx8IGsyID4gXzBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGsxICYgXzFuKVxuICAgICAgICAgICAgICAgICAgICBrMXAgPSBrMXAuYWRkKGQpO1xuICAgICAgICAgICAgICAgIGlmIChrMiAmIF8xbilcbiAgICAgICAgICAgICAgICAgICAgazJwID0gazJwLmFkZChkKTtcbiAgICAgICAgICAgICAgICBkID0gZC5kb3VibGUoKTtcbiAgICAgICAgICAgICAgICBrMSA+Pj0gXzFuO1xuICAgICAgICAgICAgICAgIGsyID4+PSBfMW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoazFuZWcpXG4gICAgICAgICAgICAgICAgazFwID0gazFwLm5lZ2F0ZSgpO1xuICAgICAgICAgICAgaWYgKGsybmVnKVxuICAgICAgICAgICAgICAgIGsycCA9IGsycC5uZWdhdGUoKTtcbiAgICAgICAgICAgIGsycCA9IG5ldyBQb2ludChGcC5tdWwoazJwLnB4LCBlbmRvLmJldGEpLCBrMnAucHksIGsycC5weik7XG4gICAgICAgICAgICByZXR1cm4gazFwLmFkZChrMnApO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdGFudCB0aW1lIG11bHRpcGxpY2F0aW9uLlxuICAgICAgICAgKiBVc2VzIHdOQUYgbWV0aG9kLiBXaW5kb3dlZCBtZXRob2QgbWF5IGJlIDEwJSBmYXN0ZXIsXG4gICAgICAgICAqIGJ1dCB0YWtlcyAyeCBsb25nZXIgdG8gZ2VuZXJhdGUgYW5kIGNvbnN1bWVzIDJ4IG1lbW9yeS5cbiAgICAgICAgICogVXNlcyBwcmVjb21wdXRlcyB3aGVuIGF2YWlsYWJsZS5cbiAgICAgICAgICogVXNlcyBlbmRvbW9ycGhpc20gZm9yIEtvYmxpdHogY3VydmVzLlxuICAgICAgICAgKiBAcGFyYW0gc2NhbGFyIGJ5IHdoaWNoIHRoZSBwb2ludCB3b3VsZCBiZSBtdWx0aXBsaWVkXG4gICAgICAgICAqIEByZXR1cm5zIE5ldyBwb2ludFxuICAgICAgICAgKi9cbiAgICAgICAgbXVsdGlwbHkoc2NhbGFyKSB7XG4gICAgICAgICAgICBjb25zdCB7IGVuZG8sIG46IE4gfSA9IENVUlZFO1xuICAgICAgICAgICAgdXQuYUluUmFuZ2UoJ3NjYWxhcicsIHNjYWxhciwgXzFuLCBOKTtcbiAgICAgICAgICAgIGxldCBwb2ludCwgZmFrZTsgLy8gRmFrZSBwb2ludCBpcyB1c2VkIHRvIGNvbnN0LXRpbWUgbXVsdFxuICAgICAgICAgICAgaWYgKGVuZG8pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGsxbmVnLCBrMSwgazJuZWcsIGsyIH0gPSBlbmRvLnNwbGl0U2NhbGFyKHNjYWxhcik7XG4gICAgICAgICAgICAgICAgbGV0IHsgcDogazFwLCBmOiBmMXAgfSA9IHRoaXMud05BRihrMSk7XG4gICAgICAgICAgICAgICAgbGV0IHsgcDogazJwLCBmOiBmMnAgfSA9IHRoaXMud05BRihrMik7XG4gICAgICAgICAgICAgICAgazFwID0gd25hZi5jb25zdFRpbWVOZWdhdGUoazFuZWcsIGsxcCk7XG4gICAgICAgICAgICAgICAgazJwID0gd25hZi5jb25zdFRpbWVOZWdhdGUoazJuZWcsIGsycCk7XG4gICAgICAgICAgICAgICAgazJwID0gbmV3IFBvaW50KEZwLm11bChrMnAucHgsIGVuZG8uYmV0YSksIGsycC5weSwgazJwLnB6KTtcbiAgICAgICAgICAgICAgICBwb2ludCA9IGsxcC5hZGQoazJwKTtcbiAgICAgICAgICAgICAgICBmYWtlID0gZjFwLmFkZChmMnApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBwLCBmIH0gPSB0aGlzLndOQUYoc2NhbGFyKTtcbiAgICAgICAgICAgICAgICBwb2ludCA9IHA7XG4gICAgICAgICAgICAgICAgZmFrZSA9IGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBOb3JtYWxpemUgYHpgIGZvciBib3RoIHBvaW50cywgYnV0IHJldHVybiBvbmx5IHJlYWwgb25lXG4gICAgICAgICAgICByZXR1cm4gUG9pbnQubm9ybWFsaXplWihbcG9pbnQsIGZha2VdKVswXTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogRWZmaWNpZW50bHkgY2FsY3VsYXRlIGBhUCArIGJRYC4gVW5zYWZlLCBjYW4gZXhwb3NlIHByaXZhdGUga2V5LCBpZiB1c2VkIGluY29ycmVjdGx5LlxuICAgICAgICAgKiBOb3QgdXNpbmcgU3RyYXVzcy1TaGFtaXIgdHJpY2s6IHByZWNvbXB1dGF0aW9uIHRhYmxlcyBhcmUgZmFzdGVyLlxuICAgICAgICAgKiBUaGUgdHJpY2sgY291bGQgYmUgdXNlZnVsIGlmIGJvdGggUCBhbmQgUSBhcmUgbm90IEcgKG5vdCBpbiBvdXIgY2FzZSkuXG4gICAgICAgICAqIEByZXR1cm5zIG5vbi16ZXJvIGFmZmluZSBwb2ludFxuICAgICAgICAgKi9cbiAgICAgICAgbXVsdGlwbHlBbmRBZGRVbnNhZmUoUSwgYSwgYikge1xuICAgICAgICAgICAgY29uc3QgRyA9IFBvaW50LkJBU0U7IC8vIE5vIFN0cmF1c3MtU2hhbWlyIHRyaWNrOiB3ZSBoYXZlIDEwJSBmYXN0ZXIgRyBwcmVjb21wdXRlc1xuICAgICAgICAgICAgY29uc3QgbXVsID0gKFAsIGEgLy8gU2VsZWN0IGZhc3RlciBtdWx0aXBseSgpIG1ldGhvZFxuICAgICAgICAgICAgKSA9PiAoYSA9PT0gXzBuIHx8IGEgPT09IF8xbiB8fCAhUC5lcXVhbHMoRykgPyBQLm11bHRpcGx5VW5zYWZlKGEpIDogUC5tdWx0aXBseShhKSk7XG4gICAgICAgICAgICBjb25zdCBzdW0gPSBtdWwodGhpcywgYSkuYWRkKG11bChRLCBiKSk7XG4gICAgICAgICAgICByZXR1cm4gc3VtLmlzMCgpID8gdW5kZWZpbmVkIDogc3VtO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnZlcnRzIFByb2plY3RpdmUgcG9pbnQgdG8gYWZmaW5lICh4LCB5KSBjb29yZGluYXRlcy5cbiAgICAgICAgLy8gQ2FuIGFjY2VwdCBwcmVjb21wdXRlZCBaXi0xIC0gZm9yIGV4YW1wbGUsIGZyb20gaW52ZXJ0QmF0Y2guXG4gICAgICAgIC8vICh4LCB5LCB6KSDiiIsgKHg9eC96LCB5PXkveilcbiAgICAgICAgdG9BZmZpbmUoaXopIHtcbiAgICAgICAgICAgIHJldHVybiB0b0FmZmluZU1lbW8odGhpcywgaXopO1xuICAgICAgICB9XG4gICAgICAgIGlzVG9yc2lvbkZyZWUoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGg6IGNvZmFjdG9yLCBpc1RvcnNpb25GcmVlIH0gPSBDVVJWRTtcbiAgICAgICAgICAgIGlmIChjb2ZhY3RvciA9PT0gXzFuKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBObyBzdWJncm91cHMsIGFsd2F5cyB0b3JzaW9uLWZyZWVcbiAgICAgICAgICAgIGlmIChpc1RvcnNpb25GcmVlKVxuICAgICAgICAgICAgICAgIHJldHVybiBpc1RvcnNpb25GcmVlKFBvaW50LCB0aGlzKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaXNUb3JzaW9uRnJlZSgpIGhhcyBub3QgYmVlbiBkZWNsYXJlZCBmb3IgdGhlIGVsbGlwdGljIGN1cnZlJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJDb2ZhY3RvcigpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaDogY29mYWN0b3IsIGNsZWFyQ29mYWN0b3IgfSA9IENVUlZFO1xuICAgICAgICAgICAgaWYgKGNvZmFjdG9yID09PSBfMW4pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7IC8vIEZhc3QtcGF0aFxuICAgICAgICAgICAgaWYgKGNsZWFyQ29mYWN0b3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsZWFyQ29mYWN0b3IoUG9pbnQsIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHlVbnNhZmUoQ1VSVkUuaCk7XG4gICAgICAgIH1cbiAgICAgICAgdG9SYXdCeXRlcyhpc0NvbXByZXNzZWQgPSB0cnVlKSB7XG4gICAgICAgICAgICBhYm9vbCgnaXNDb21wcmVzc2VkJywgaXNDb21wcmVzc2VkKTtcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgICAgIHJldHVybiB0b0J5dGVzKFBvaW50LCB0aGlzLCBpc0NvbXByZXNzZWQpO1xuICAgICAgICB9XG4gICAgICAgIHRvSGV4KGlzQ29tcHJlc3NlZCA9IHRydWUpIHtcbiAgICAgICAgICAgIGFib29sKCdpc0NvbXByZXNzZWQnLCBpc0NvbXByZXNzZWQpO1xuICAgICAgICAgICAgcmV0dXJuIHV0LmJ5dGVzVG9IZXgodGhpcy50b1Jhd0J5dGVzKGlzQ29tcHJlc3NlZCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFBvaW50LkJBU0UgPSBuZXcgUG9pbnQoQ1VSVkUuR3gsIENVUlZFLkd5LCBGcC5PTkUpO1xuICAgIFBvaW50LlpFUk8gPSBuZXcgUG9pbnQoRnAuWkVSTywgRnAuT05FLCBGcC5aRVJPKTtcbiAgICBjb25zdCBfYml0cyA9IENVUlZFLm5CaXRMZW5ndGg7XG4gICAgY29uc3Qgd25hZiA9IHdOQUYoUG9pbnQsIENVUlZFLmVuZG8gPyBNYXRoLmNlaWwoX2JpdHMgLyAyKSA6IF9iaXRzKTtcbiAgICAvLyBWYWxpZGF0ZSBpZiBnZW5lcmF0b3IgcG9pbnQgaXMgb24gY3VydmVcbiAgICByZXR1cm4ge1xuICAgICAgICBDVVJWRSxcbiAgICAgICAgUHJvamVjdGl2ZVBvaW50OiBQb2ludCxcbiAgICAgICAgbm9ybVByaXZhdGVLZXlUb1NjYWxhcixcbiAgICAgICAgd2VpZXJzdHJhc3NFcXVhdGlvbixcbiAgICAgICAgaXNXaXRoaW5DdXJ2ZU9yZGVyLFxuICAgIH07XG59XG5mdW5jdGlvbiB2YWxpZGF0ZU9wdHMoY3VydmUpIHtcbiAgICBjb25zdCBvcHRzID0gdmFsaWRhdGVCYXNpYyhjdXJ2ZSk7XG4gICAgdXQudmFsaWRhdGVPYmplY3Qob3B0cywge1xuICAgICAgICBoYXNoOiAnaGFzaCcsXG4gICAgICAgIGhtYWM6ICdmdW5jdGlvbicsXG4gICAgICAgIHJhbmRvbUJ5dGVzOiAnZnVuY3Rpb24nLFxuICAgIH0sIHtcbiAgICAgICAgYml0czJpbnQ6ICdmdW5jdGlvbicsXG4gICAgICAgIGJpdHMyaW50X21vZE46ICdmdW5jdGlvbicsXG4gICAgICAgIGxvd1M6ICdib29sZWFuJyxcbiAgICB9KTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IGxvd1M6IHRydWUsIC4uLm9wdHMgfSk7XG59XG4vKipcbiAqIENyZWF0ZXMgc2hvcnQgd2VpZXJzdHJhc3MgY3VydmUgYW5kIEVDRFNBIHNpZ25hdHVyZSBtZXRob2RzIGZvciBpdC5cbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBGaWVsZCB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvYWJzdHJhY3QvbW9kdWxhcic7XG4gKiAvLyBCZWZvcmUgdGhhdCwgZGVmaW5lIEJpZ0ludC1zOiBhLCBiLCBwLCBuLCBHeCwgR3lcbiAqIGNvbnN0IGN1cnZlID0gd2VpZXJzdHJhc3MoeyBhLCBiLCBGcDogRmllbGQocCksIG4sIEd4LCBHeSwgaDogMW4gfSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdlaWVyc3RyYXNzKGN1cnZlRGVmKSB7XG4gICAgY29uc3QgQ1VSVkUgPSB2YWxpZGF0ZU9wdHMoY3VydmVEZWYpO1xuICAgIGNvbnN0IHsgRnAsIG46IENVUlZFX09SREVSIH0gPSBDVVJWRTtcbiAgICBjb25zdCBjb21wcmVzc2VkTGVuID0gRnAuQllURVMgKyAxOyAvLyBlLmcuIDMzIGZvciAzMlxuICAgIGNvbnN0IHVuY29tcHJlc3NlZExlbiA9IDIgKiBGcC5CWVRFUyArIDE7IC8vIGUuZy4gNjUgZm9yIDMyXG4gICAgZnVuY3Rpb24gbW9kTihhKSB7XG4gICAgICAgIHJldHVybiBtb2QoYSwgQ1VSVkVfT1JERVIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbnZOKGEpIHtcbiAgICAgICAgcmV0dXJuIGludmVydChhLCBDVVJWRV9PUkRFUik7XG4gICAgfVxuICAgIGNvbnN0IHsgUHJvamVjdGl2ZVBvaW50OiBQb2ludCwgbm9ybVByaXZhdGVLZXlUb1NjYWxhciwgd2VpZXJzdHJhc3NFcXVhdGlvbiwgaXNXaXRoaW5DdXJ2ZU9yZGVyLCB9ID0gd2VpZXJzdHJhc3NQb2ludHMoe1xuICAgICAgICAuLi5DVVJWRSxcbiAgICAgICAgdG9CeXRlcyhfYywgcG9pbnQsIGlzQ29tcHJlc3NlZCkge1xuICAgICAgICAgICAgY29uc3QgYSA9IHBvaW50LnRvQWZmaW5lKCk7XG4gICAgICAgICAgICBjb25zdCB4ID0gRnAudG9CeXRlcyhhLngpO1xuICAgICAgICAgICAgY29uc3QgY2F0ID0gdXQuY29uY2F0Qnl0ZXM7XG4gICAgICAgICAgICBhYm9vbCgnaXNDb21wcmVzc2VkJywgaXNDb21wcmVzc2VkKTtcbiAgICAgICAgICAgIGlmIChpc0NvbXByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2F0KFVpbnQ4QXJyYXkuZnJvbShbcG9pbnQuaGFzRXZlblkoKSA/IDB4MDIgOiAweDAzXSksIHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhdChVaW50OEFycmF5LmZyb20oWzB4MDRdKSwgeCwgRnAudG9CeXRlcyhhLnkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZnJvbUJ5dGVzKGJ5dGVzKSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBieXRlcy5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCBoZWFkID0gYnl0ZXNbMF07XG4gICAgICAgICAgICBjb25zdCB0YWlsID0gYnl0ZXMuc3ViYXJyYXkoMSk7XG4gICAgICAgICAgICAvLyB0aGlzLmFzc2VydFZhbGlkaXR5KCkgaXMgZG9uZSBpbnNpZGUgb2YgZnJvbUhleFxuICAgICAgICAgICAgaWYgKGxlbiA9PT0gY29tcHJlc3NlZExlbiAmJiAoaGVhZCA9PT0gMHgwMiB8fCBoZWFkID09PSAweDAzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSB1dC5ieXRlc1RvTnVtYmVyQkUodGFpbCk7XG4gICAgICAgICAgICAgICAgaWYgKCF1dC5pblJhbmdlKHgsIF8xbiwgRnAuT1JERVIpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BvaW50IGlzIG5vdCBvbiBjdXJ2ZScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHkyID0gd2VpZXJzdHJhc3NFcXVhdGlvbih4KTsgLy8gecKyID0geMKzICsgYXggKyBiXG4gICAgICAgICAgICAgICAgbGV0IHk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgeSA9IEZwLnNxcnQoeTIpOyAvLyB5ID0gecKyIF4gKHArMSkvNFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoc3FydEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1ZmZpeCA9IHNxcnRFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gJzogJyArIHNxcnRFcnJvci5tZXNzYWdlIDogJyc7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUG9pbnQgaXMgbm90IG9uIGN1cnZlJyArIHN1ZmZpeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGlzWU9kZCA9ICh5ICYgXzFuKSA9PT0gXzFuO1xuICAgICAgICAgICAgICAgIC8vIEVDRFNBXG4gICAgICAgICAgICAgICAgY29uc3QgaXNIZWFkT2RkID0gKGhlYWQgJiAxKSA9PT0gMTtcbiAgICAgICAgICAgICAgICBpZiAoaXNIZWFkT2RkICE9PSBpc1lPZGQpXG4gICAgICAgICAgICAgICAgICAgIHkgPSBGcC5uZWcoeSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeCwgeSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobGVuID09PSB1bmNvbXByZXNzZWRMZW4gJiYgaGVhZCA9PT0gMHgwNCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBGcC5mcm9tQnl0ZXModGFpbC5zdWJhcnJheSgwLCBGcC5CWVRFUykpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBGcC5mcm9tQnl0ZXModGFpbC5zdWJhcnJheShGcC5CWVRFUywgMiAqIEZwLkJZVEVTKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeCwgeSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2wgPSBjb21wcmVzc2VkTGVuO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVsID0gdW5jb21wcmVzc2VkTGVuO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBQb2ludCwgZXhwZWN0ZWQgbGVuZ3RoIG9mICcgKyBjbCArICcsIG9yIHVuY29tcHJlc3NlZCAnICsgdWwgKyAnLCBnb3QgJyArIGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3QgbnVtVG9OQnl0ZVN0ciA9IChudW0pID0+IHV0LmJ5dGVzVG9IZXgodXQubnVtYmVyVG9CeXRlc0JFKG51bSwgQ1VSVkUubkJ5dGVMZW5ndGgpKTtcbiAgICBmdW5jdGlvbiBpc0JpZ2dlclRoYW5IYWxmT3JkZXIobnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IEhBTEYgPSBDVVJWRV9PUkRFUiA+PiBfMW47XG4gICAgICAgIHJldHVybiBudW1iZXIgPiBIQUxGO1xuICAgIH1cbiAgICBmdW5jdGlvbiBub3JtYWxpemVTKHMpIHtcbiAgICAgICAgcmV0dXJuIGlzQmlnZ2VyVGhhbkhhbGZPcmRlcihzKSA/IG1vZE4oLXMpIDogcztcbiAgICB9XG4gICAgLy8gc2xpY2UgYnl0ZXMgbnVtXG4gICAgY29uc3Qgc2xjTnVtID0gKGIsIGZyb20sIHRvKSA9PiB1dC5ieXRlc1RvTnVtYmVyQkUoYi5zbGljZShmcm9tLCB0bykpO1xuICAgIC8qKlxuICAgICAqIEVDRFNBIHNpZ25hdHVyZSB3aXRoIGl0cyAociwgcykgcHJvcGVydGllcy4gU3VwcG9ydHMgREVSICYgY29tcGFjdCByZXByZXNlbnRhdGlvbnMuXG4gICAgICovXG4gICAgY2xhc3MgU2lnbmF0dXJlIHtcbiAgICAgICAgY29uc3RydWN0b3IociwgcywgcmVjb3ZlcnkpIHtcbiAgICAgICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgICAgICB0aGlzLnMgPSBzO1xuICAgICAgICAgICAgdGhpcy5yZWNvdmVyeSA9IHJlY292ZXJ5O1xuICAgICAgICAgICAgdGhpcy5hc3NlcnRWYWxpZGl0eSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBhaXIgKGJ5dGVzIG9mIHIsIGJ5dGVzIG9mIHMpXG4gICAgICAgIHN0YXRpYyBmcm9tQ29tcGFjdChoZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IGwgPSBDVVJWRS5uQnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIGhleCA9IGVuc3VyZUJ5dGVzKCdjb21wYWN0U2lnbmF0dXJlJywgaGV4LCBsICogMik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNpZ25hdHVyZShzbGNOdW0oaGV4LCAwLCBsKSwgc2xjTnVtKGhleCwgbCwgMiAqIGwpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBERVIgZW5jb2RlZCBFQ0RTQSBzaWduYXR1cmVcbiAgICAgICAgLy8gaHR0cHM6Ly9iaXRjb2luLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy81NzY0NC93aGF0LWFyZS10aGUtcGFydHMtb2YtYS1iaXRjb2luLXRyYW5zYWN0aW9uLWlucHV0LXNjcmlwdFxuICAgICAgICBzdGF0aWMgZnJvbURFUihoZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgciwgcyB9ID0gREVSLnRvU2lnKGVuc3VyZUJ5dGVzKCdERVInLCBoZXgpKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHIsIHMpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydFZhbGlkaXR5KCkge1xuICAgICAgICAgICAgdXQuYUluUmFuZ2UoJ3InLCB0aGlzLnIsIF8xbiwgQ1VSVkVfT1JERVIpOyAvLyByIGluIFsxLi5OXVxuICAgICAgICAgICAgdXQuYUluUmFuZ2UoJ3MnLCB0aGlzLnMsIF8xbiwgQ1VSVkVfT1JERVIpOyAvLyBzIGluIFsxLi5OXVxuICAgICAgICB9XG4gICAgICAgIGFkZFJlY292ZXJ5Qml0KHJlY292ZXJ5KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSh0aGlzLnIsIHRoaXMucywgcmVjb3ZlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJlY292ZXJQdWJsaWNLZXkobXNnSGFzaCkge1xuICAgICAgICAgICAgY29uc3QgeyByLCBzLCByZWNvdmVyeTogcmVjIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgaCA9IGJpdHMyaW50X21vZE4oZW5zdXJlQnl0ZXMoJ21zZ0hhc2gnLCBtc2dIYXNoKSk7IC8vIFRydW5jYXRlIGhhc2hcbiAgICAgICAgICAgIGlmIChyZWMgPT0gbnVsbCB8fCAhWzAsIDEsIDIsIDNdLmluY2x1ZGVzKHJlYykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWNvdmVyeSBpZCBpbnZhbGlkJyk7XG4gICAgICAgICAgICBjb25zdCByYWRqID0gcmVjID09PSAyIHx8IHJlYyA9PT0gMyA/IHIgKyBDVVJWRS5uIDogcjtcbiAgICAgICAgICAgIGlmIChyYWRqID49IEZwLk9SREVSKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncmVjb3ZlcnkgaWQgMiBvciAzIGludmFsaWQnKTtcbiAgICAgICAgICAgIGNvbnN0IHByZWZpeCA9IChyZWMgJiAxKSA9PT0gMCA/ICcwMicgOiAnMDMnO1xuICAgICAgICAgICAgY29uc3QgUiA9IFBvaW50LmZyb21IZXgocHJlZml4ICsgbnVtVG9OQnl0ZVN0cihyYWRqKSk7XG4gICAgICAgICAgICBjb25zdCBpciA9IGludk4ocmFkaik7IC8vIHJeLTFcbiAgICAgICAgICAgIGNvbnN0IHUxID0gbW9kTigtaCAqIGlyKTsgLy8gLWhyXi0xXG4gICAgICAgICAgICBjb25zdCB1MiA9IG1vZE4ocyAqIGlyKTsgLy8gc3JeLTFcbiAgICAgICAgICAgIGNvbnN0IFEgPSBQb2ludC5CQVNFLm11bHRpcGx5QW5kQWRkVW5zYWZlKFIsIHUxLCB1Mik7IC8vIChzcl4tMSlSLShocl4tMSlHID0gLShocl4tMSlHICsgKHNyXi0xKVxuICAgICAgICAgICAgaWYgKCFRKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncG9pbnQgYXQgaW5maW5pZnknKTsgLy8gdW5zYWZlIGlzIGZpbmU6IG5vIHByaXYgZGF0YSBsZWFrZWRcbiAgICAgICAgICAgIFEuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICAgICAgICAgIHJldHVybiBRO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNpZ25hdHVyZXMgc2hvdWxkIGJlIGxvdy1zLCB0byBwcmV2ZW50IG1hbGxlYWJpbGl0eS5cbiAgICAgICAgaGFzSGlnaFMoKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNCaWdnZXJUaGFuSGFsZk9yZGVyKHRoaXMucyk7XG4gICAgICAgIH1cbiAgICAgICAgbm9ybWFsaXplUygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc0hpZ2hTKCkgPyBuZXcgU2lnbmF0dXJlKHRoaXMuciwgbW9kTigtdGhpcy5zKSwgdGhpcy5yZWNvdmVyeSkgOiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIC8vIERFUi1lbmNvZGVkXG4gICAgICAgIHRvREVSUmF3Qnl0ZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdXQuaGV4VG9CeXRlcyh0aGlzLnRvREVSSGV4KCkpO1xuICAgICAgICB9XG4gICAgICAgIHRvREVSSGV4KCkge1xuICAgICAgICAgICAgcmV0dXJuIERFUi5oZXhGcm9tU2lnKHsgcjogdGhpcy5yLCBzOiB0aGlzLnMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcGFkZGVkIGJ5dGVzIG9mIHIsIHRoZW4gcGFkZGVkIGJ5dGVzIG9mIHNcbiAgICAgICAgdG9Db21wYWN0UmF3Qnl0ZXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gdXQuaGV4VG9CeXRlcyh0aGlzLnRvQ29tcGFjdEhleCgpKTtcbiAgICAgICAgfVxuICAgICAgICB0b0NvbXBhY3RIZXgoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtVG9OQnl0ZVN0cih0aGlzLnIpICsgbnVtVG9OQnl0ZVN0cih0aGlzLnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHV0aWxzID0ge1xuICAgICAgICBpc1ZhbGlkUHJpdmF0ZUtleShwcml2YXRlS2V5KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG5vcm1Qcml2YXRlS2V5VG9TY2FsYXIocHJpdmF0ZUtleSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG5vcm1Qcml2YXRlS2V5VG9TY2FsYXI6IG5vcm1Qcml2YXRlS2V5VG9TY2FsYXIsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlcyBjcnlwdG9ncmFwaGljYWxseSBzZWN1cmUgcHJpdmF0ZSBrZXkgZnJvbSByYW5kb20gb2Ygc2l6ZVxuICAgICAgICAgKiAoZ3JvdXBMZW4gKyBjZWlsKGdyb3VwTGVuIC8gMikpIHdpdGggbW9kdWxvIGJpYXMgYmVpbmcgbmVnbGlnaWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIHJhbmRvbVByaXZhdGVLZXk6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGdldE1pbkhhc2hMZW5ndGgoQ1VSVkUubik7XG4gICAgICAgICAgICByZXR1cm4gbWFwSGFzaFRvRmllbGQoQ1VSVkUucmFuZG9tQnl0ZXMobGVuZ3RoKSwgQ1VSVkUubik7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIHByZWNvbXB1dGUgdGFibGUgZm9yIGFuIGFyYml0cmFyeSBFQyBwb2ludC4gTWFrZXMgcG9pbnQgXCJjYWNoZWRcIi5cbiAgICAgICAgICogQWxsb3dzIHRvIG1hc3NpdmVseSBzcGVlZC11cCBgcG9pbnQubXVsdGlwbHkoc2NhbGFyKWAuXG4gICAgICAgICAqIEByZXR1cm5zIGNhY2hlZCBwb2ludFxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBjb25zdCBmYXN0ID0gdXRpbHMucHJlY29tcHV0ZSg4LCBQcm9qZWN0aXZlUG9pbnQuZnJvbUhleChzb21lb25lc1B1YktleSkpO1xuICAgICAgICAgKiBmYXN0Lm11bHRpcGx5KHByaXZLZXkpOyAvLyBtdWNoIGZhc3RlciBFQ0RIIG5vd1xuICAgICAgICAgKi9cbiAgICAgICAgcHJlY29tcHV0ZSh3aW5kb3dTaXplID0gOCwgcG9pbnQgPSBQb2ludC5CQVNFKSB7XG4gICAgICAgICAgICBwb2ludC5fc2V0V2luZG93U2l6ZSh3aW5kb3dTaXplKTtcbiAgICAgICAgICAgIHBvaW50Lm11bHRpcGx5KEJpZ0ludCgzKSk7IC8vIDMgaXMgYXJiaXRyYXJ5LCBqdXN0IG5lZWQgYW55IG51bWJlciBoZXJlXG4gICAgICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBwdWJsaWMga2V5IGZvciBhIHByaXZhdGUga2V5LiBDaGVja3MgZm9yIHZhbGlkaXR5IG9mIHRoZSBwcml2YXRlIGtleS5cbiAgICAgKiBAcGFyYW0gcHJpdmF0ZUtleSBwcml2YXRlIGtleVxuICAgICAqIEBwYXJhbSBpc0NvbXByZXNzZWQgd2hldGhlciB0byByZXR1cm4gY29tcGFjdCAoZGVmYXVsdCksIG9yIGZ1bGwga2V5XG4gICAgICogQHJldHVybnMgUHVibGljIGtleSwgZnVsbCB3aGVuIGlzQ29tcHJlc3NlZD1mYWxzZTsgc2hvcnQgd2hlbiBpc0NvbXByZXNzZWQ9dHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFB1YmxpY0tleShwcml2YXRlS2V5LCBpc0NvbXByZXNzZWQgPSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBQb2ludC5mcm9tUHJpdmF0ZUtleShwcml2YXRlS2V5KS50b1Jhd0J5dGVzKGlzQ29tcHJlc3NlZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFF1aWNrIGFuZCBkaXJ0eSBjaGVjayBmb3IgaXRlbSBiZWluZyBwdWJsaWMga2V5LiBEb2VzIG5vdCB2YWxpZGF0ZSBoZXgsIG9yIGJlaW5nIG9uLWN1cnZlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvYlB1YihpdGVtKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IHV0LmlzQnl0ZXMoaXRlbSk7XG4gICAgICAgIGNvbnN0IHN0ciA9IHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJztcbiAgICAgICAgY29uc3QgbGVuID0gKGFyciB8fCBzdHIpICYmIGl0ZW0ubGVuZ3RoO1xuICAgICAgICBpZiAoYXJyKVxuICAgICAgICAgICAgcmV0dXJuIGxlbiA9PT0gY29tcHJlc3NlZExlbiB8fCBsZW4gPT09IHVuY29tcHJlc3NlZExlbjtcbiAgICAgICAgaWYgKHN0cilcbiAgICAgICAgICAgIHJldHVybiBsZW4gPT09IDIgKiBjb21wcmVzc2VkTGVuIHx8IGxlbiA9PT0gMiAqIHVuY29tcHJlc3NlZExlbjtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBQb2ludClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVDREggKEVsbGlwdGljIEN1cnZlIERpZmZpZSBIZWxsbWFuKS5cbiAgICAgKiBDb21wdXRlcyBzaGFyZWQgcHVibGljIGtleSBmcm9tIHByaXZhdGUga2V5IGFuZCBwdWJsaWMga2V5LlxuICAgICAqIENoZWNrczogMSkgcHJpdmF0ZSBrZXkgdmFsaWRpdHkgMikgc2hhcmVkIGtleSBpcyBvbi1jdXJ2ZS5cbiAgICAgKiBEb2VzIE5PVCBoYXNoIHRoZSByZXN1bHQuXG4gICAgICogQHBhcmFtIHByaXZhdGVBIHByaXZhdGUga2V5XG4gICAgICogQHBhcmFtIHB1YmxpY0IgZGlmZmVyZW50IHB1YmxpYyBrZXlcbiAgICAgKiBAcGFyYW0gaXNDb21wcmVzc2VkIHdoZXRoZXIgdG8gcmV0dXJuIGNvbXBhY3QgKGRlZmF1bHQpLCBvciBmdWxsIGtleVxuICAgICAqIEByZXR1cm5zIHNoYXJlZCBwdWJsaWMga2V5XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0U2hhcmVkU2VjcmV0KHByaXZhdGVBLCBwdWJsaWNCLCBpc0NvbXByZXNzZWQgPSB0cnVlKSB7XG4gICAgICAgIGlmIChpc1Byb2JQdWIocHJpdmF0ZUEpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmcgbXVzdCBiZSBwcml2YXRlIGtleScpO1xuICAgICAgICBpZiAoIWlzUHJvYlB1YihwdWJsaWNCKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2Vjb25kIGFyZyBtdXN0IGJlIHB1YmxpYyBrZXknKTtcbiAgICAgICAgY29uc3QgYiA9IFBvaW50LmZyb21IZXgocHVibGljQik7IC8vIGNoZWNrIGZvciBiZWluZyBvbi1jdXJ2ZVxuICAgICAgICByZXR1cm4gYi5tdWx0aXBseShub3JtUHJpdmF0ZUtleVRvU2NhbGFyKHByaXZhdGVBKSkudG9SYXdCeXRlcyhpc0NvbXByZXNzZWQpO1xuICAgIH1cbiAgICAvLyBSRkM2OTc5OiBlbnN1cmUgRUNEU0EgbXNnIGlzIFggYnl0ZXMgYW5kIDwgTi4gUkZDIHN1Z2dlc3RzIG9wdGlvbmFsIHRydW5jYXRpbmcgdmlhIGJpdHMyb2N0ZXRzLlxuICAgIC8vIEZJUFMgMTg2LTQgNC42IHN1Z2dlc3RzIHRoZSBsZWZ0bW9zdCBtaW4obkJpdExlbiwgb3V0TGVuKSBiaXRzLCB3aGljaCBtYXRjaGVzIGJpdHMyaW50LlxuICAgIC8vIGJpdHMyaW50IGNhbiBwcm9kdWNlIHJlcz5OLCB3ZSBjYW4gZG8gbW9kKHJlcywgTikgc2luY2UgdGhlIGJpdExlbiBpcyB0aGUgc2FtZS5cbiAgICAvLyBpbnQyb2N0ZXRzIGNhbid0IGJlIHVzZWQ7IHBhZHMgc21hbGwgbXNncyB3aXRoIDA6IHVuYWNjZXB0YXRibGUgZm9yIHRydW5jIGFzIHBlciBSRkMgdmVjdG9yc1xuICAgIGNvbnN0IGJpdHMyaW50ID0gQ1VSVkUuYml0czJpbnQgfHxcbiAgICAgICAgZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgICAgICAgICAvLyBPdXIgY3VzdG9tIGNoZWNrIFwianVzdCBpbiBjYXNlXCJcbiAgICAgICAgICAgIGlmIChieXRlcy5sZW5ndGggPiA4MTkyKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW5wdXQgaXMgdG9vIGxhcmdlJyk7XG4gICAgICAgICAgICAvLyBGb3IgY3VydmVzIHdpdGggbkJpdExlbmd0aCAlIDggIT09IDA6IGJpdHMyb2N0ZXRzKGJpdHMyb2N0ZXRzKG0pKSAhPT0gYml0czJvY3RldHMobSlcbiAgICAgICAgICAgIC8vIGZvciBzb21lIGNhc2VzLCBzaW5jZSBieXRlcy5sZW5ndGggKiA4IGlzIG5vdCBhY3R1YWwgYml0TGVuZ3RoLlxuICAgICAgICAgICAgY29uc3QgbnVtID0gdXQuYnl0ZXNUb051bWJlckJFKGJ5dGVzKTsgLy8gY2hlY2sgZm9yID09IHU4IGRvbmUgaGVyZVxuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBieXRlcy5sZW5ndGggKiA4IC0gQ1VSVkUubkJpdExlbmd0aDsgLy8gdHJ1bmNhdGUgdG8gbkJpdExlbmd0aCBsZWZ0bW9zdCBiaXRzXG4gICAgICAgICAgICByZXR1cm4gZGVsdGEgPiAwID8gbnVtID4+IEJpZ0ludChkZWx0YSkgOiBudW07XG4gICAgICAgIH07XG4gICAgY29uc3QgYml0czJpbnRfbW9kTiA9IENVUlZFLmJpdHMyaW50X21vZE4gfHxcbiAgICAgICAgZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kTihiaXRzMmludChieXRlcykpOyAvLyBjYW4ndCB1c2UgYnl0ZXNUb051bWJlckJFIGhlcmVcbiAgICAgICAgfTtcbiAgICAvLyBOT1RFOiBwYWRzIG91dHB1dCB3aXRoIHplcm8gYXMgcGVyIHNwZWNcbiAgICBjb25zdCBPUkRFUl9NQVNLID0gdXQuYml0TWFzayhDVVJWRS5uQml0TGVuZ3RoKTtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0byBieXRlcy4gQ2hlY2tzIGlmIG51bSBpbiBgWzAuLk9SREVSX01BU0stMV1gIGUuZy46IGBbMC4uMl4yNTYtMV1gLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGludDJvY3RldHMobnVtKSB7XG4gICAgICAgIHV0LmFJblJhbmdlKCdudW0gPCAyXicgKyBDVVJWRS5uQml0TGVuZ3RoLCBudW0sIF8wbiwgT1JERVJfTUFTSyk7XG4gICAgICAgIC8vIHdvcmtzIHdpdGggb3JkZXIsIGNhbiBoYXZlIGRpZmZlcmVudCBzaXplIHRoYW4gbnVtVG9GaWVsZCFcbiAgICAgICAgcmV0dXJuIHV0Lm51bWJlclRvQnl0ZXNCRShudW0sIENVUlZFLm5CeXRlTGVuZ3RoKTtcbiAgICB9XG4gICAgLy8gU3RlcHMgQSwgRCBvZiBSRkM2OTc5IDMuMlxuICAgIC8vIENyZWF0ZXMgUkZDNjk3OSBzZWVkOyBjb252ZXJ0cyBtc2cvcHJpdktleSB0byBudW1iZXJzLlxuICAgIC8vIFVzZWQgb25seSBpbiBzaWduLCBub3QgaW4gdmVyaWZ5LlxuICAgIC8vIE5PVEU6IHdlIGNhbm5vdCBhc3N1bWUgaGVyZSB0aGF0IG1zZ0hhc2ggaGFzIHNhbWUgYW1vdW50IG9mIGJ5dGVzIGFzIGN1cnZlIG9yZGVyLFxuICAgIC8vIHRoaXMgd2lsbCBiZSBpbnZhbGlkIGF0IGxlYXN0IGZvciBQNTIxLiBBbHNvIGl0IGNhbiBiZSBiaWdnZXIgZm9yIFAyMjQgKyBTSEEyNTZcbiAgICBmdW5jdGlvbiBwcmVwU2lnKG1zZ0hhc2gsIHByaXZhdGVLZXksIG9wdHMgPSBkZWZhdWx0U2lnT3B0cykge1xuICAgICAgICBpZiAoWydyZWNvdmVyZWQnLCAnY2Fub25pY2FsJ10uc29tZSgoaykgPT4gayBpbiBvcHRzKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2lnbigpIGxlZ2FjeSBvcHRpb25zIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgY29uc3QgeyBoYXNoLCByYW5kb21CeXRlcyB9ID0gQ1VSVkU7XG4gICAgICAgIGxldCB7IGxvd1MsIHByZWhhc2gsIGV4dHJhRW50cm9weTogZW50IH0gPSBvcHRzOyAvLyBnZW5lcmF0ZXMgbG93LXMgc2lncyBieSBkZWZhdWx0XG4gICAgICAgIGlmIChsb3dTID09IG51bGwpXG4gICAgICAgICAgICBsb3dTID0gdHJ1ZTsgLy8gUkZDNjk3OSAzLjI6IHdlIHNraXAgc3RlcCBBLCBiZWNhdXNlIHdlIGFscmVhZHkgcHJvdmlkZSBoYXNoXG4gICAgICAgIG1zZ0hhc2ggPSBlbnN1cmVCeXRlcygnbXNnSGFzaCcsIG1zZ0hhc2gpO1xuICAgICAgICB2YWxpZGF0ZVNpZ1Zlck9wdHMob3B0cyk7XG4gICAgICAgIGlmIChwcmVoYXNoKVxuICAgICAgICAgICAgbXNnSGFzaCA9IGVuc3VyZUJ5dGVzKCdwcmVoYXNoZWQgbXNnSGFzaCcsIGhhc2gobXNnSGFzaCkpO1xuICAgICAgICAvLyBXZSBjYW4ndCBsYXRlciBjYWxsIGJpdHMyb2N0ZXRzLCBzaW5jZSBuZXN0ZWQgYml0czJpbnQgaXMgYnJva2VuIGZvciBjdXJ2ZXNcbiAgICAgICAgLy8gd2l0aCBuQml0TGVuZ3RoICUgOCAhPT0gMC4gQmVjYXVzZSBvZiB0aGF0LCB3ZSB1bndyYXAgaXQgaGVyZSBhcyBpbnQyb2N0ZXRzIGNhbGwuXG4gICAgICAgIC8vIGNvbnN0IGJpdHMyb2N0ZXRzID0gKGJpdHMpID0+IGludDJvY3RldHMoYml0czJpbnRfbW9kTihiaXRzKSlcbiAgICAgICAgY29uc3QgaDFpbnQgPSBiaXRzMmludF9tb2ROKG1zZ0hhc2gpO1xuICAgICAgICBjb25zdCBkID0gbm9ybVByaXZhdGVLZXlUb1NjYWxhcihwcml2YXRlS2V5KTsgLy8gdmFsaWRhdGUgcHJpdmF0ZSBrZXksIGNvbnZlcnQgdG8gYmlnaW50XG4gICAgICAgIGNvbnN0IHNlZWRBcmdzID0gW2ludDJvY3RldHMoZCksIGludDJvY3RldHMoaDFpbnQpXTtcbiAgICAgICAgLy8gZXh0cmFFbnRyb3B5LiBSRkM2OTc5IDMuNjogYWRkaXRpb25hbCBrJyAob3B0aW9uYWwpLlxuICAgICAgICBpZiAoZW50ICE9IG51bGwgJiYgZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gSyA9IEhNQUNfSyhWIHx8IDB4MDAgfHwgaW50Mm9jdGV0cyh4KSB8fCBiaXRzMm9jdGV0cyhoMSkgfHwgaycpXG4gICAgICAgICAgICBjb25zdCBlID0gZW50ID09PSB0cnVlID8gcmFuZG9tQnl0ZXMoRnAuQllURVMpIDogZW50OyAvLyBnZW5lcmF0ZSByYW5kb20gYnl0ZXMgT1IgcGFzcyBhcy1pc1xuICAgICAgICAgICAgc2VlZEFyZ3MucHVzaChlbnN1cmVCeXRlcygnZXh0cmFFbnRyb3B5JywgZSkpOyAvLyBjaGVjayBmb3IgYmVpbmcgYnl0ZXNcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWVkID0gdXQuY29uY2F0Qnl0ZXMoLi4uc2VlZEFyZ3MpOyAvLyBTdGVwIEQgb2YgUkZDNjk3OSAzLjJcbiAgICAgICAgY29uc3QgbSA9IGgxaW50OyAvLyBOT1RFOiBubyBuZWVkIHRvIGNhbGwgYml0czJpbnQgc2Vjb25kIHRpbWUgaGVyZSwgaXQgaXMgaW5zaWRlIHRydW5jYXRlSGFzaCFcbiAgICAgICAgLy8gQ29udmVydHMgc2lnbmF0dXJlIHBhcmFtcyBpbnRvIHBvaW50IHcgci9zLCBjaGVja3MgcmVzdWx0IGZvciB2YWxpZGl0eS5cbiAgICAgICAgZnVuY3Rpb24gazJzaWcoa0J5dGVzKSB7XG4gICAgICAgICAgICAvLyBSRkMgNjk3OSBTZWN0aW9uIDMuMiwgc3RlcCAzOiBrID0gYml0czJpbnQoVClcbiAgICAgICAgICAgIGNvbnN0IGsgPSBiaXRzMmludChrQnl0ZXMpOyAvLyBDYW5ub3QgdXNlIGZpZWxkcyBtZXRob2RzLCBzaW5jZSBpdCBpcyBncm91cCBlbGVtZW50XG4gICAgICAgICAgICBpZiAoIWlzV2l0aGluQ3VydmVPcmRlcihrKSlcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIEltcG9ydGFudDogYWxsIG1vZCgpIGNhbGxzIGhlcmUgbXVzdCBiZSBkb25lIG92ZXIgTlxuICAgICAgICAgICAgY29uc3QgaWsgPSBpbnZOKGspOyAvLyBrXi0xIG1vZCBuXG4gICAgICAgICAgICBjb25zdCBxID0gUG9pbnQuQkFTRS5tdWx0aXBseShrKS50b0FmZmluZSgpOyAvLyBxID0gR2tcbiAgICAgICAgICAgIGNvbnN0IHIgPSBtb2ROKHEueCk7IC8vIHIgPSBxLnggbW9kIG5cbiAgICAgICAgICAgIGlmIChyID09PSBfMG4pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgLy8gQ2FuIHVzZSBzY2FsYXIgYmxpbmRpbmcgYl4tMShibSArIGJkcikgd2hlcmUgYiDiiIggWzEsceKIkjFdIGFjY29yZGluZyB0b1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly90Y2hlcy5pYWNyLm9yZy9pbmRleC5waHAvVENIRVMvYXJ0aWNsZS92aWV3LzczMzcvNjUwOS4gV2UndmUgZGVjaWRlZCBhZ2FpbnN0IGl0OlxuICAgICAgICAgICAgLy8gYSkgZGVwZW5kZW5jeSBvbiBDU1BSTkcgYikgMTUlIHNsb3dkb3duIGMpIGRvZXNuJ3QgcmVhbGx5IGhlbHAgc2luY2UgYmlnaW50cyBhcmUgbm90IENUXG4gICAgICAgICAgICBjb25zdCBzID0gbW9kTihpayAqIG1vZE4obSArIHIgKiBkKSk7IC8vIE5vdCB1c2luZyBibGluZGluZyBoZXJlXG4gICAgICAgICAgICBpZiAocyA9PT0gXzBuKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGxldCByZWNvdmVyeSA9IChxLnggPT09IHIgPyAwIDogMikgfCBOdW1iZXIocS55ICYgXzFuKTsgLy8gcmVjb3ZlcnkgYml0ICgyIG9yIDMsIHdoZW4gcS54ID4gbilcbiAgICAgICAgICAgIGxldCBub3JtUyA9IHM7XG4gICAgICAgICAgICBpZiAobG93UyAmJiBpc0JpZ2dlclRoYW5IYWxmT3JkZXIocykpIHtcbiAgICAgICAgICAgICAgICBub3JtUyA9IG5vcm1hbGl6ZVMocyk7IC8vIGlmIGxvd1Mgd2FzIHBhc3NlZCwgZW5zdXJlIHMgaXMgYWx3YXlzXG4gICAgICAgICAgICAgICAgcmVjb3ZlcnkgXj0gMTsgLy8gLy8gaW4gdGhlIGJvdHRvbSBoYWxmIG9mIE5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgU2lnbmF0dXJlKHIsIG5vcm1TLCByZWNvdmVyeSk7IC8vIHVzZSBub3JtUywgbm90IHNcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzZWVkLCBrMnNpZyB9O1xuICAgIH1cbiAgICBjb25zdCBkZWZhdWx0U2lnT3B0cyA9IHsgbG93UzogQ1VSVkUubG93UywgcHJlaGFzaDogZmFsc2UgfTtcbiAgICBjb25zdCBkZWZhdWx0VmVyT3B0cyA9IHsgbG93UzogQ1VSVkUubG93UywgcHJlaGFzaDogZmFsc2UgfTtcbiAgICAvKipcbiAgICAgKiBTaWducyBtZXNzYWdlIGhhc2ggd2l0aCBhIHByaXZhdGUga2V5LlxuICAgICAqIGBgYFxuICAgICAqIHNpZ24obSwgZCwgaykgd2hlcmVcbiAgICAgKiAgICh4LCB5KSA9IEcgw5cga1xuICAgICAqICAgciA9IHggbW9kIG5cbiAgICAgKiAgIHMgPSAobSArIGRyKS9rIG1vZCBuXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG1zZ0hhc2ggTk9UIG1lc3NhZ2UuIG1zZyBuZWVkcyB0byBiZSBoYXNoZWQgdG8gYG1zZ0hhc2hgLCBvciB1c2UgYHByZWhhc2hgLlxuICAgICAqIEBwYXJhbSBwcml2S2V5IHByaXZhdGUga2V5XG4gICAgICogQHBhcmFtIG9wdHMgbG93UyBmb3Igbm9uLW1hbGxlYWJsZSBzaWdzLiBleHRyYUVudHJvcHkgZm9yIG1peGluZyByYW5kb21uZXNzIGludG8gay4gcHJlaGFzaCB3aWxsIGhhc2ggZmlyc3QgYXJnLlxuICAgICAqIEByZXR1cm5zIHNpZ25hdHVyZSB3aXRoIHJlY292ZXJ5IHBhcmFtXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2lnbihtc2dIYXNoLCBwcml2S2V5LCBvcHRzID0gZGVmYXVsdFNpZ09wdHMpIHtcbiAgICAgICAgY29uc3QgeyBzZWVkLCBrMnNpZyB9ID0gcHJlcFNpZyhtc2dIYXNoLCBwcml2S2V5LCBvcHRzKTsgLy8gU3RlcHMgQSwgRCBvZiBSRkM2OTc5IDMuMi5cbiAgICAgICAgY29uc3QgQyA9IENVUlZFO1xuICAgICAgICBjb25zdCBkcmJnID0gdXQuY3JlYXRlSG1hY0RyYmcoQy5oYXNoLm91dHB1dExlbiwgQy5uQnl0ZUxlbmd0aCwgQy5obWFjKTtcbiAgICAgICAgcmV0dXJuIGRyYmcoc2VlZCwgazJzaWcpOyAvLyBTdGVwcyBCLCBDLCBELCBFLCBGLCBHXG4gICAgfVxuICAgIC8vIEVuYWJsZSBwcmVjb21wdXRlcy4gU2xvd3MgZG93biBmaXJzdCBwdWJsaWNLZXkgY29tcHV0YXRpb24gYnkgMjBtcy5cbiAgICBQb2ludC5CQVNFLl9zZXRXaW5kb3dTaXplKDgpO1xuICAgIC8vIHV0aWxzLnByZWNvbXB1dGUoOCwgUHJvamVjdGl2ZVBvaW50LkJBU0UpXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgYSBzaWduYXR1cmUgYWdhaW5zdCBtZXNzYWdlIGhhc2ggYW5kIHB1YmxpYyBrZXkuXG4gICAgICogUmVqZWN0cyBsb3dTIHNpZ25hdHVyZXMgYnkgZGVmYXVsdDogdG8gb3ZlcnJpZGUsXG4gICAgICogc3BlY2lmeSBvcHRpb24gYHtsb3dTOiBmYWxzZX1gLiBJbXBsZW1lbnRzIHNlY3Rpb24gNC4xLjQgZnJvbSBodHRwczovL3d3dy5zZWNnLm9yZy9zZWMxLXYyLnBkZjpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIHZlcmlmeShyLCBzLCBoLCBQKSB3aGVyZVxuICAgICAqICAgVTEgPSBoc14tMSBtb2QgblxuICAgICAqICAgVTIgPSByc14tMSBtb2QgblxuICAgICAqICAgUiA9IFUx4ouFRyAtIFUy4ouFUFxuICAgICAqICAgbW9kKFIueCwgbikgPT0gclxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZlcmlmeShzaWduYXR1cmUsIG1zZ0hhc2gsIHB1YmxpY0tleSwgb3B0cyA9IGRlZmF1bHRWZXJPcHRzKSB7XG4gICAgICAgIGNvbnN0IHNnID0gc2lnbmF0dXJlO1xuICAgICAgICBtc2dIYXNoID0gZW5zdXJlQnl0ZXMoJ21zZ0hhc2gnLCBtc2dIYXNoKTtcbiAgICAgICAgcHVibGljS2V5ID0gZW5zdXJlQnl0ZXMoJ3B1YmxpY0tleScsIHB1YmxpY0tleSk7XG4gICAgICAgIGNvbnN0IHsgbG93UywgcHJlaGFzaCwgZm9ybWF0IH0gPSBvcHRzO1xuICAgICAgICAvLyBWZXJpZnkgb3B0cywgZGVkdWNlIHNpZ25hdHVyZSBmb3JtYXRcbiAgICAgICAgdmFsaWRhdGVTaWdWZXJPcHRzKG9wdHMpO1xuICAgICAgICBpZiAoJ3N0cmljdCcgaW4gb3B0cylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignb3B0aW9ucy5zdHJpY3Qgd2FzIHJlbmFtZWQgdG8gbG93UycpO1xuICAgICAgICBpZiAoZm9ybWF0ICE9PSB1bmRlZmluZWQgJiYgZm9ybWF0ICE9PSAnY29tcGFjdCcgJiYgZm9ybWF0ICE9PSAnZGVyJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZm9ybWF0IG11c3QgYmUgY29tcGFjdCBvciBkZXInKTtcbiAgICAgICAgY29uc3QgaXNIZXggPSB0eXBlb2Ygc2cgPT09ICdzdHJpbmcnIHx8IHV0LmlzQnl0ZXMoc2cpO1xuICAgICAgICBjb25zdCBpc09iaiA9ICFpc0hleCAmJlxuICAgICAgICAgICAgIWZvcm1hdCAmJlxuICAgICAgICAgICAgdHlwZW9mIHNnID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgc2cgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBzZy5yID09PSAnYmlnaW50JyAmJlxuICAgICAgICAgICAgdHlwZW9mIHNnLnMgPT09ICdiaWdpbnQnO1xuICAgICAgICBpZiAoIWlzSGV4ICYmICFpc09iailcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWduYXR1cmUsIGV4cGVjdGVkIFVpbnQ4QXJyYXksIGhleCBzdHJpbmcgb3IgU2lnbmF0dXJlIGluc3RhbmNlJyk7XG4gICAgICAgIGxldCBfc2lnID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgUDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChpc09iailcbiAgICAgICAgICAgICAgICBfc2lnID0gbmV3IFNpZ25hdHVyZShzZy5yLCBzZy5zKTtcbiAgICAgICAgICAgIGlmIChpc0hleCkge1xuICAgICAgICAgICAgICAgIC8vIFNpZ25hdHVyZSBjYW4gYmUgcmVwcmVzZW50ZWQgaW4gMiB3YXlzOiBjb21wYWN0ICgyKm5CeXRlTGVuZ3RoKSAmIERFUiAodmFyaWFibGUtbGVuZ3RoKS5cbiAgICAgICAgICAgICAgICAvLyBTaW5jZSBERVIgY2FuIGFsc28gYmUgMipuQnl0ZUxlbmd0aCBieXRlcywgd2UgY2hlY2sgZm9yIGl0IGZpcnN0LlxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXQgIT09ICdjb21wYWN0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zaWcgPSBTaWduYXR1cmUuZnJvbURFUihzZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChkZXJFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShkZXJFcnJvciBpbnN0YW5jZW9mIERFUi5FcnIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZGVyRXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghX3NpZyAmJiBmb3JtYXQgIT09ICdkZXInKVxuICAgICAgICAgICAgICAgICAgICBfc2lnID0gU2lnbmF0dXJlLmZyb21Db21wYWN0KHNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFAgPSBQb2ludC5mcm9tSGV4KHB1YmxpY0tleSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfc2lnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAobG93UyAmJiBfc2lnLmhhc0hpZ2hTKCkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChwcmVoYXNoKVxuICAgICAgICAgICAgbXNnSGFzaCA9IENVUlZFLmhhc2gobXNnSGFzaCk7XG4gICAgICAgIGNvbnN0IHsgciwgcyB9ID0gX3NpZztcbiAgICAgICAgY29uc3QgaCA9IGJpdHMyaW50X21vZE4obXNnSGFzaCk7IC8vIENhbm5vdCB1c2UgZmllbGRzIG1ldGhvZHMsIHNpbmNlIGl0IGlzIGdyb3VwIGVsZW1lbnRcbiAgICAgICAgY29uc3QgaXMgPSBpbnZOKHMpOyAvLyBzXi0xXG4gICAgICAgIGNvbnN0IHUxID0gbW9kTihoICogaXMpOyAvLyB1MSA9IGhzXi0xIG1vZCBuXG4gICAgICAgIGNvbnN0IHUyID0gbW9kTihyICogaXMpOyAvLyB1MiA9IHJzXi0xIG1vZCBuXG4gICAgICAgIGNvbnN0IFIgPSBQb2ludC5CQVNFLm11bHRpcGx5QW5kQWRkVW5zYWZlKFAsIHUxLCB1Mik/LnRvQWZmaW5lKCk7IC8vIFIgPSB1MeKLhUcgKyB1MuKLhVBcbiAgICAgICAgaWYgKCFSKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCB2ID0gbW9kTihSLngpO1xuICAgICAgICByZXR1cm4gdiA9PT0gcjtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgQ1VSVkUsXG4gICAgICAgIGdldFB1YmxpY0tleSxcbiAgICAgICAgZ2V0U2hhcmVkU2VjcmV0LFxuICAgICAgICBzaWduLFxuICAgICAgICB2ZXJpZnksXG4gICAgICAgIFByb2plY3RpdmVQb2ludDogUG9pbnQsXG4gICAgICAgIFNpZ25hdHVyZSxcbiAgICAgICAgdXRpbHMsXG4gICAgfTtcbn1cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIFNoYWxsdWUgYW5kIHZhbiBkZSBXb2VzdGlqbmUgbWV0aG9kIGZvciBhbnkgd2VpZXJzdHJhc3MgY3VydmUuXG4gKiBUT0RPOiBjaGVjayBpZiB0aGVyZSBpcyBhIHdheSB0byBtZXJnZSB0aGlzIHdpdGggdXZSYXRpbyBpbiBFZHdhcmRzOyBtb3ZlIHRvIG1vZHVsYXIuXG4gKiBiID0gVHJ1ZSBhbmQgeSA9IHNxcnQodSAvIHYpIGlmICh1IC8gdikgaXMgc3F1YXJlIGluIEYsIGFuZFxuICogYiA9IEZhbHNlIGFuZCB5ID0gc3FydChaICogKHUgLyB2KSkgb3RoZXJ3aXNlLlxuICogQHBhcmFtIEZwXG4gKiBAcGFyYW0gWlxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNXVUZwU3FydFJhdGlvKEZwLCBaKSB7XG4gICAgLy8gR2VuZXJpYyBpbXBsZW1lbnRhdGlvblxuICAgIGNvbnN0IHEgPSBGcC5PUkRFUjtcbiAgICBsZXQgbCA9IF8wbjtcbiAgICBmb3IgKGxldCBvID0gcSAtIF8xbjsgbyAlIF8ybiA9PT0gXzBuOyBvIC89IF8ybilcbiAgICAgICAgbCArPSBfMW47XG4gICAgY29uc3QgYzEgPSBsOyAvLyAxLiBjMSwgdGhlIGxhcmdlc3QgaW50ZWdlciBzdWNoIHRoYXQgMl5jMSBkaXZpZGVzIHEgLSAxLlxuICAgIC8vIFdlIG5lZWQgMm4gKiogYzEgYW5kIDJuICoqIChjMS0xKS4gV2UgY2FuJ3QgdXNlICoqOyBidXQgd2UgY2FuIHVzZSA8PC5cbiAgICAvLyAybiAqKiBjMSA9PSAybiA8PCAoYzEtMSlcbiAgICBjb25zdCBfMm5fcG93X2MxXzEgPSBfMm4gPDwgKGMxIC0gXzFuIC0gXzFuKTtcbiAgICBjb25zdCBfMm5fcG93X2MxID0gXzJuX3Bvd19jMV8xICogXzJuO1xuICAgIGNvbnN0IGMyID0gKHEgLSBfMW4pIC8gXzJuX3Bvd19jMTsgLy8gMi4gYzIgPSAocSAtIDEpIC8gKDJeYzEpICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgIGNvbnN0IGMzID0gKGMyIC0gXzFuKSAvIF8ybjsgLy8gMy4gYzMgPSAoYzIgLSAxKSAvIDIgICAgICAgICAgICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgIGNvbnN0IGM0ID0gXzJuX3Bvd19jMSAtIF8xbjsgLy8gNC4gYzQgPSAyXmMxIC0gMSAgICAgICAgICAgICAgICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgIGNvbnN0IGM1ID0gXzJuX3Bvd19jMV8xOyAvLyA1LiBjNSA9IDJeKGMxIC0gMSkgICAgICAgICAgICAgICAgICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgIGNvbnN0IGM2ID0gRnAucG93KFosIGMyKTsgLy8gNi4gYzYgPSBaXmMyXG4gICAgY29uc3QgYzcgPSBGcC5wb3coWiwgKGMyICsgXzFuKSAvIF8ybik7IC8vIDcuIGM3ID0gWl4oKGMyICsgMSkgLyAyKVxuICAgIGxldCBzcXJ0UmF0aW8gPSAodSwgdikgPT4ge1xuICAgICAgICBsZXQgdHYxID0gYzY7IC8vIDEuIHR2MSA9IGM2XG4gICAgICAgIGxldCB0djIgPSBGcC5wb3codiwgYzQpOyAvLyAyLiB0djIgPSB2XmM0XG4gICAgICAgIGxldCB0djMgPSBGcC5zcXIodHYyKTsgLy8gMy4gdHYzID0gdHYyXjJcbiAgICAgICAgdHYzID0gRnAubXVsKHR2Mywgdik7IC8vIDQuIHR2MyA9IHR2MyAqIHZcbiAgICAgICAgbGV0IHR2NSA9IEZwLm11bCh1LCB0djMpOyAvLyA1LiB0djUgPSB1ICogdHYzXG4gICAgICAgIHR2NSA9IEZwLnBvdyh0djUsIGMzKTsgLy8gNi4gdHY1ID0gdHY1XmMzXG4gICAgICAgIHR2NSA9IEZwLm11bCh0djUsIHR2Mik7IC8vIDcuIHR2NSA9IHR2NSAqIHR2MlxuICAgICAgICB0djIgPSBGcC5tdWwodHY1LCB2KTsgLy8gOC4gdHYyID0gdHY1ICogdlxuICAgICAgICB0djMgPSBGcC5tdWwodHY1LCB1KTsgLy8gOS4gdHYzID0gdHY1ICogdVxuICAgICAgICBsZXQgdHY0ID0gRnAubXVsKHR2MywgdHYyKTsgLy8gMTAuIHR2NCA9IHR2MyAqIHR2MlxuICAgICAgICB0djUgPSBGcC5wb3codHY0LCBjNSk7IC8vIDExLiB0djUgPSB0djReYzVcbiAgICAgICAgbGV0IGlzUVIgPSBGcC5lcWwodHY1LCBGcC5PTkUpOyAvLyAxMi4gaXNRUiA9IHR2NSA9PSAxXG4gICAgICAgIHR2MiA9IEZwLm11bCh0djMsIGM3KTsgLy8gMTMuIHR2MiA9IHR2MyAqIGM3XG4gICAgICAgIHR2NSA9IEZwLm11bCh0djQsIHR2MSk7IC8vIDE0LiB0djUgPSB0djQgKiB0djFcbiAgICAgICAgdHYzID0gRnAuY21vdih0djIsIHR2MywgaXNRUik7IC8vIDE1LiB0djMgPSBDTU9WKHR2MiwgdHYzLCBpc1FSKVxuICAgICAgICB0djQgPSBGcC5jbW92KHR2NSwgdHY0LCBpc1FSKTsgLy8gMTYuIHR2NCA9IENNT1YodHY1LCB0djQsIGlzUVIpXG4gICAgICAgIC8vIDE3LiBmb3IgaSBpbiAoYzEsIGMxIC0gMSwgLi4uLCAyKTpcbiAgICAgICAgZm9yIChsZXQgaSA9IGMxOyBpID4gXzFuOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCB0djUgPSBpIC0gXzJuOyAvLyAxOC4gICAgdHY1ID0gaSAtIDJcbiAgICAgICAgICAgIHR2NSA9IF8ybiA8PCAodHY1IC0gXzFuKTsgLy8gMTkuICAgIHR2NSA9IDJedHY1XG4gICAgICAgICAgICBsZXQgdHZ2NSA9IEZwLnBvdyh0djQsIHR2NSk7IC8vIDIwLiAgICB0djUgPSB0djRedHY1XG4gICAgICAgICAgICBjb25zdCBlMSA9IEZwLmVxbCh0dnY1LCBGcC5PTkUpOyAvLyAyMS4gICAgZTEgPSB0djUgPT0gMVxuICAgICAgICAgICAgdHYyID0gRnAubXVsKHR2MywgdHYxKTsgLy8gMjIuICAgIHR2MiA9IHR2MyAqIHR2MVxuICAgICAgICAgICAgdHYxID0gRnAubXVsKHR2MSwgdHYxKTsgLy8gMjMuICAgIHR2MSA9IHR2MSAqIHR2MVxuICAgICAgICAgICAgdHZ2NSA9IEZwLm11bCh0djQsIHR2MSk7IC8vIDI0LiAgICB0djUgPSB0djQgKiB0djFcbiAgICAgICAgICAgIHR2MyA9IEZwLmNtb3YodHYyLCB0djMsIGUxKTsgLy8gMjUuICAgIHR2MyA9IENNT1YodHYyLCB0djMsIGUxKVxuICAgICAgICAgICAgdHY0ID0gRnAuY21vdih0dnY1LCB0djQsIGUxKTsgLy8gMjYuICAgIHR2NCA9IENNT1YodHY1LCB0djQsIGUxKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGlzVmFsaWQ6IGlzUVIsIHZhbHVlOiB0djMgfTtcbiAgICB9O1xuICAgIGlmIChGcC5PUkRFUiAlIF80biA9PT0gXzNuKSB7XG4gICAgICAgIC8vIHNxcnRfcmF0aW9fM21vZDQodSwgdilcbiAgICAgICAgY29uc3QgYzEgPSAoRnAuT1JERVIgLSBfM24pIC8gXzRuOyAvLyAxLiBjMSA9IChxIC0gMykgLyA0ICAgICAjIEludGVnZXIgYXJpdGhtZXRpY1xuICAgICAgICBjb25zdCBjMiA9IEZwLnNxcnQoRnAubmVnKFopKTsgLy8gMi4gYzIgPSBzcXJ0KC1aKVxuICAgICAgICBzcXJ0UmF0aW8gPSAodSwgdikgPT4ge1xuICAgICAgICAgICAgbGV0IHR2MSA9IEZwLnNxcih2KTsgLy8gMS4gdHYxID0gdl4yXG4gICAgICAgICAgICBjb25zdCB0djIgPSBGcC5tdWwodSwgdik7IC8vIDIuIHR2MiA9IHUgKiB2XG4gICAgICAgICAgICB0djEgPSBGcC5tdWwodHYxLCB0djIpOyAvLyAzLiB0djEgPSB0djEgKiB0djJcbiAgICAgICAgICAgIGxldCB5MSA9IEZwLnBvdyh0djEsIGMxKTsgLy8gNC4geTEgPSB0djFeYzFcbiAgICAgICAgICAgIHkxID0gRnAubXVsKHkxLCB0djIpOyAvLyA1LiB5MSA9IHkxICogdHYyXG4gICAgICAgICAgICBjb25zdCB5MiA9IEZwLm11bCh5MSwgYzIpOyAvLyA2LiB5MiA9IHkxICogYzJcbiAgICAgICAgICAgIGNvbnN0IHR2MyA9IEZwLm11bChGcC5zcXIoeTEpLCB2KTsgLy8gNy4gdHYzID0geTFeMjsgOC4gdHYzID0gdHYzICogdlxuICAgICAgICAgICAgY29uc3QgaXNRUiA9IEZwLmVxbCh0djMsIHUpOyAvLyA5LiBpc1FSID0gdHYzID09IHVcbiAgICAgICAgICAgIGxldCB5ID0gRnAuY21vdih5MiwgeTEsIGlzUVIpOyAvLyAxMC4geSA9IENNT1YoeTIsIHkxLCBpc1FSKVxuICAgICAgICAgICAgcmV0dXJuIHsgaXNWYWxpZDogaXNRUiwgdmFsdWU6IHkgfTsgLy8gMTEuIHJldHVybiAoaXNRUiwgeSkgaXNRUiA/IHkgOiB5KmMyXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIE5vIGN1cnZlcyB1c2VzIHRoYXRcbiAgICAvLyBpZiAoRnAuT1JERVIgJSBfOG4gPT09IF81bikgLy8gc3FydF9yYXRpb181bW9kOFxuICAgIHJldHVybiBzcXJ0UmF0aW87XG59XG4vKipcbiAqIFNpbXBsaWZpZWQgU2hhbGx1ZS12YW4gZGUgV29lc3Rpam5lLVVsYXMgTWV0aG9kXG4gKiBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjOTM4MCNzZWN0aW9uLTYuNi4yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb0N1cnZlU2ltcGxlU1dVKEZwLCBvcHRzKSB7XG4gICAgdmFsaWRhdGVGaWVsZChGcCk7XG4gICAgaWYgKCFGcC5pc1ZhbGlkKG9wdHMuQSkgfHwgIUZwLmlzVmFsaWQob3B0cy5CKSB8fCAhRnAuaXNWYWxpZChvcHRzLlopKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hcFRvQ3VydmVTaW1wbGVTV1U6IGludmFsaWQgb3B0cycpO1xuICAgIGNvbnN0IHNxcnRSYXRpbyA9IFNXVUZwU3FydFJhdGlvKEZwLCBvcHRzLlopO1xuICAgIGlmICghRnAuaXNPZGQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRnAuaXNPZGQgaXMgbm90IGltcGxlbWVudGVkIScpO1xuICAgIC8vIElucHV0OiB1LCBhbiBlbGVtZW50IG9mIEYuXG4gICAgLy8gT3V0cHV0OiAoeCwgeSksIGEgcG9pbnQgb24gRS5cbiAgICByZXR1cm4gKHUpID0+IHtcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgIGxldCB0djEsIHR2MiwgdHYzLCB0djQsIHR2NSwgdHY2LCB4LCB5O1xuICAgICAgICB0djEgPSBGcC5zcXIodSk7IC8vIDEuICB0djEgPSB1XjJcbiAgICAgICAgdHYxID0gRnAubXVsKHR2MSwgb3B0cy5aKTsgLy8gMi4gIHR2MSA9IFogKiB0djFcbiAgICAgICAgdHYyID0gRnAuc3FyKHR2MSk7IC8vIDMuICB0djIgPSB0djFeMlxuICAgICAgICB0djIgPSBGcC5hZGQodHYyLCB0djEpOyAvLyA0LiAgdHYyID0gdHYyICsgdHYxXG4gICAgICAgIHR2MyA9IEZwLmFkZCh0djIsIEZwLk9ORSk7IC8vIDUuICB0djMgPSB0djIgKyAxXG4gICAgICAgIHR2MyA9IEZwLm11bCh0djMsIG9wdHMuQik7IC8vIDYuICB0djMgPSBCICogdHYzXG4gICAgICAgIHR2NCA9IEZwLmNtb3Yob3B0cy5aLCBGcC5uZWcodHYyKSwgIUZwLmVxbCh0djIsIEZwLlpFUk8pKTsgLy8gNy4gIHR2NCA9IENNT1YoWiwgLXR2MiwgdHYyICE9IDApXG4gICAgICAgIHR2NCA9IEZwLm11bCh0djQsIG9wdHMuQSk7IC8vIDguICB0djQgPSBBICogdHY0XG4gICAgICAgIHR2MiA9IEZwLnNxcih0djMpOyAvLyA5LiAgdHYyID0gdHYzXjJcbiAgICAgICAgdHY2ID0gRnAuc3FyKHR2NCk7IC8vIDEwLiB0djYgPSB0djReMlxuICAgICAgICB0djUgPSBGcC5tdWwodHY2LCBvcHRzLkEpOyAvLyAxMS4gdHY1ID0gQSAqIHR2NlxuICAgICAgICB0djIgPSBGcC5hZGQodHYyLCB0djUpOyAvLyAxMi4gdHYyID0gdHYyICsgdHY1XG4gICAgICAgIHR2MiA9IEZwLm11bCh0djIsIHR2Myk7IC8vIDEzLiB0djIgPSB0djIgKiB0djNcbiAgICAgICAgdHY2ID0gRnAubXVsKHR2NiwgdHY0KTsgLy8gMTQuIHR2NiA9IHR2NiAqIHR2NFxuICAgICAgICB0djUgPSBGcC5tdWwodHY2LCBvcHRzLkIpOyAvLyAxNS4gdHY1ID0gQiAqIHR2NlxuICAgICAgICB0djIgPSBGcC5hZGQodHYyLCB0djUpOyAvLyAxNi4gdHYyID0gdHYyICsgdHY1XG4gICAgICAgIHggPSBGcC5tdWwodHYxLCB0djMpOyAvLyAxNy4gICB4ID0gdHYxICogdHYzXG4gICAgICAgIGNvbnN0IHsgaXNWYWxpZCwgdmFsdWUgfSA9IHNxcnRSYXRpbyh0djIsIHR2Nik7IC8vIDE4LiAoaXNfZ3gxX3NxdWFyZSwgeTEpID0gc3FydF9yYXRpbyh0djIsIHR2NilcbiAgICAgICAgeSA9IEZwLm11bCh0djEsIHUpOyAvLyAxOS4gICB5ID0gdHYxICogdSAgLT4gWiAqIHVeMyAqIHkxXG4gICAgICAgIHkgPSBGcC5tdWwoeSwgdmFsdWUpOyAvLyAyMC4gICB5ID0geSAqIHkxXG4gICAgICAgIHggPSBGcC5jbW92KHgsIHR2MywgaXNWYWxpZCk7IC8vIDIxLiAgIHggPSBDTU9WKHgsIHR2MywgaXNfZ3gxX3NxdWFyZSlcbiAgICAgICAgeSA9IEZwLmNtb3YoeSwgdmFsdWUsIGlzVmFsaWQpOyAvLyAyMi4gICB5ID0gQ01PVih5LCB5MSwgaXNfZ3gxX3NxdWFyZSlcbiAgICAgICAgY29uc3QgZTEgPSBGcC5pc09kZCh1KSA9PT0gRnAuaXNPZGQoeSk7IC8vIDIzLiAgZTEgPSBzZ24wKHUpID09IHNnbjAoeSlcbiAgICAgICAgeSA9IEZwLmNtb3YoRnAubmVnKHkpLCB5LCBlMSk7IC8vIDI0LiAgIHkgPSBDTU9WKC15LCB5LCBlMSlcbiAgICAgICAgeCA9IEZwLmRpdih4LCB0djQpOyAvLyAyNS4gICB4ID0geCAvIHR2NFxuICAgICAgICByZXR1cm4geyB4LCB5IH07XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdlaWVyc3RyYXNzLmpzLm1hcCIsIi8qKlxuICogVXRpbGl0aWVzIGZvciBzaG9ydCB3ZWllcnN0cmFzcyBjdXJ2ZXMsIGNvbWJpbmVkIHdpdGggbm9ibGUtaGFzaGVzLlxuICogQG1vZHVsZVxuICovXG4vKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQgeyBobWFjIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9obWFjJztcbmltcG9ydCB7IGNvbmNhdEJ5dGVzLCByYW5kb21CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0IHsgd2VpZXJzdHJhc3MgfSBmcm9tICcuL2Fic3RyYWN0L3dlaWVyc3RyYXNzLmpzJztcbi8qKiBjb25uZWN0cyBub2JsZS1jdXJ2ZXMgdG8gbm9ibGUtaGFzaGVzICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGFzaChoYXNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGFzaCxcbiAgICAgICAgaG1hYzogKGtleSwgLi4ubXNncykgPT4gaG1hYyhoYXNoLCBrZXksIGNvbmNhdEJ5dGVzKC4uLm1zZ3MpKSxcbiAgICAgICAgcmFuZG9tQnl0ZXMsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDdXJ2ZShjdXJ2ZURlZiwgZGVmSGFzaCkge1xuICAgIGNvbnN0IGNyZWF0ZSA9IChoYXNoKSA9PiB3ZWllcnN0cmFzcyh7IC4uLmN1cnZlRGVmLCAuLi5nZXRIYXNoKGhhc2gpIH0pO1xuICAgIHJldHVybiB7IC4uLmNyZWF0ZShkZWZIYXNoKSwgY3JlYXRlIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fc2hvcnR3X3V0aWxzLmpzLm1hcCIsIi8qKlxuICogTklTVCBzZWNwMjU2azEuIFNlZSBbcGRmXShodHRwczovL3d3dy5zZWNnLm9yZy9zZWMyLXYyLnBkZikuXG4gKlxuICogU2VlbXMgdG8gYmUgcmlnaWQgKG5vdCBiYWNrZG9vcmVkKVxuICogW2FzIHBlciBkaXNjdXNzaW9uXShodHRwczovL2JpdGNvaW50YWxrLm9yZy9pbmRleC5waHA/dG9waWM9Mjg5Nzk1Lm1zZzMxODM5NzUjbXNnMzE4Mzk3NSkuXG4gKlxuICogc2VjcDI1NmsxIGJlbG9uZ3MgdG8gS29ibGl0eiBjdXJ2ZXM6IGl0IGhhcyBlZmZpY2llbnRseSBjb21wdXRhYmxlIGVuZG9tb3JwaGlzbS5cbiAqIEVuZG9tb3JwaGlzbSB1c2VzIDJ4IGxlc3MgUkFNLCBzcGVlZHMgdXAgcHJlY29tcHV0YXRpb24gYnkgMnggYW5kIEVDREggLyBrZXkgcmVjb3ZlcnkgYnkgMjAlLlxuICogRm9yIHByZWNvbXB1dGVkIHdOQUYgaXQgdHJhZGVzIG9mZiAxLzIgaW5pdCB0aW1lICYgMS8zIHJhbSBmb3IgMjAlIHBlcmYgaGl0LlxuICogW1NlZSBleHBsYW5hdGlvbl0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGF1bG1pbGxyL2ViNjcwODA2NzkzZTg0ZGY2MjhhN2M0MzRhODczMDY2KS5cbiAqIEBtb2R1bGVcbiAqL1xuLyohIG5vYmxlLWN1cnZlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuaW1wb3J0IHsgc2hhMjU2IH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zaGEyNTYnO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUN1cnZlIH0gZnJvbSAnLi9fc2hvcnR3X3V0aWxzLmpzJztcbmltcG9ydCB7IGNyZWF0ZUhhc2hlciwgaXNvZ2VueU1hcCB9IGZyb20gJy4vYWJzdHJhY3QvaGFzaC10by1jdXJ2ZS5qcyc7XG5pbXBvcnQgeyBGaWVsZCwgbW9kLCBwb3cyIH0gZnJvbSAnLi9hYnN0cmFjdC9tb2R1bGFyLmpzJztcbmltcG9ydCB7IGFJblJhbmdlLCBieXRlc1RvTnVtYmVyQkUsIGNvbmNhdEJ5dGVzLCBlbnN1cmVCeXRlcywgaW5SYW5nZSwgbnVtYmVyVG9CeXRlc0JFLCB9IGZyb20gJy4vYWJzdHJhY3QvdXRpbHMuanMnO1xuaW1wb3J0IHsgbWFwVG9DdXJ2ZVNpbXBsZVNXVSB9IGZyb20gJy4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMnO1xuY29uc3Qgc2VjcDI1NmsxUCA9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmYzJmJyk7XG5jb25zdCBzZWNwMjU2azFOID0gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDEnKTtcbmNvbnN0IF8xbiA9IEJpZ0ludCgxKTtcbmNvbnN0IF8ybiA9IEJpZ0ludCgyKTtcbmNvbnN0IGRpdk5lYXJlc3QgPSAoYSwgYikgPT4gKGEgKyBiIC8gXzJuKSAvIGI7XG4vKipcbiAqIOKImm4gPSBuXigocCsxKS80KSBmb3IgZmllbGRzIHAgPSAzIG1vZCA0LiBXZSB1bndyYXAgdGhlIGxvb3AgYW5kIG11bHRpcGx5IGJpdC1ieS1iaXQuXG4gKiAoUCsxbi80bikudG9TdHJpbmcoMikgd291bGQgcHJvZHVjZSBiaXRzIFsyMjN4IDEsIDAsIDIyeCAxLCA0eCAwLCAxMSwgMDBdXG4gKi9cbmZ1bmN0aW9uIHNxcnRNb2QoeSkge1xuICAgIGNvbnN0IFAgPSBzZWNwMjU2azFQO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIGNvbnN0IF8zbiA9IEJpZ0ludCgzKSwgXzZuID0gQmlnSW50KDYpLCBfMTFuID0gQmlnSW50KDExKSwgXzIybiA9IEJpZ0ludCgyMik7XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgY29uc3QgXzIzbiA9IEJpZ0ludCgyMyksIF80NG4gPSBCaWdJbnQoNDQpLCBfODhuID0gQmlnSW50KDg4KTtcbiAgICBjb25zdCBiMiA9ICh5ICogeSAqIHkpICUgUDsgLy8geF4zLCAxMVxuICAgIGNvbnN0IGIzID0gKGIyICogYjIgKiB5KSAlIFA7IC8vIHheN1xuICAgIGNvbnN0IGI2ID0gKHBvdzIoYjMsIF8zbiwgUCkgKiBiMykgJSBQO1xuICAgIGNvbnN0IGI5ID0gKHBvdzIoYjYsIF8zbiwgUCkgKiBiMykgJSBQO1xuICAgIGNvbnN0IGIxMSA9IChwb3cyKGI5LCBfMm4sIFApICogYjIpICUgUDtcbiAgICBjb25zdCBiMjIgPSAocG93MihiMTEsIF8xMW4sIFApICogYjExKSAlIFA7XG4gICAgY29uc3QgYjQ0ID0gKHBvdzIoYjIyLCBfMjJuLCBQKSAqIGIyMikgJSBQO1xuICAgIGNvbnN0IGI4OCA9IChwb3cyKGI0NCwgXzQ0biwgUCkgKiBiNDQpICUgUDtcbiAgICBjb25zdCBiMTc2ID0gKHBvdzIoYjg4LCBfODhuLCBQKSAqIGI4OCkgJSBQO1xuICAgIGNvbnN0IGIyMjAgPSAocG93MihiMTc2LCBfNDRuLCBQKSAqIGI0NCkgJSBQO1xuICAgIGNvbnN0IGIyMjMgPSAocG93MihiMjIwLCBfM24sIFApICogYjMpICUgUDtcbiAgICBjb25zdCB0MSA9IChwb3cyKGIyMjMsIF8yM24sIFApICogYjIyKSAlIFA7XG4gICAgY29uc3QgdDIgPSAocG93Mih0MSwgXzZuLCBQKSAqIGIyKSAlIFA7XG4gICAgY29uc3Qgcm9vdCA9IHBvdzIodDIsIF8ybiwgUCk7XG4gICAgaWYgKCFGcGsxLmVxbChGcGsxLnNxcihyb290KSwgeSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICByZXR1cm4gcm9vdDtcbn1cbmNvbnN0IEZwazEgPSBGaWVsZChzZWNwMjU2azFQLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgeyBzcXJ0OiBzcXJ0TW9kIH0pO1xuLyoqXG4gKiBzZWNwMjU2azEgc2hvcnQgd2VpZXJzdHJhc3MgY3VydmUgYW5kIEVDRFNBIHNpZ25hdHVyZXMgb3ZlciBpdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgc2VjcDI1NmsxIH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9zZWNwMjU2azEnO1xuICpcbiAqIGNvbnN0IHByaXYgPSBzZWNwMjU2azEudXRpbHMucmFuZG9tUHJpdmF0ZUtleSgpO1xuICogY29uc3QgcHViID0gc2VjcDI1NmsxLmdldFB1YmxpY0tleShwcml2KTtcbiAqIGNvbnN0IG1zZyA9IG5ldyBVaW50OEFycmF5KDMyKS5maWxsKDEpOyAvLyBtZXNzYWdlIGhhc2ggKG5vdCBtZXNzYWdlKSBpbiBlY2RzYVxuICogY29uc3Qgc2lnID0gc2VjcDI1NmsxLnNpZ24obXNnLCBwcml2KTsgLy8gYHtwcmVoYXNoOiB0cnVlfWAgb3B0aW9uIGlzIGF2YWlsYWJsZVxuICogY29uc3QgaXNWYWxpZCA9IHNlY3AyNTZrMS52ZXJpZnkoc2lnLCBtc2csIHB1YikgPT09IHRydWU7XG4gKi9cbmV4cG9ydCBjb25zdCBzZWNwMjU2azEgPSBjcmVhdGVDdXJ2ZSh7XG4gICAgYTogQmlnSW50KDApLCAvLyBlcXVhdGlvbiBwYXJhbXM6IGEsIGJcbiAgICBiOiBCaWdJbnQoNyksXG4gICAgRnA6IEZwazEsIC8vIEZpZWxkJ3MgcHJpbWU6IDJuKioyNTZuIC0gMm4qKjMybiAtIDJuKio5biAtIDJuKio4biAtIDJuKio3biAtIDJuKio2biAtIDJuKio0biAtIDFuXG4gICAgbjogc2VjcDI1NmsxTiwgLy8gQ3VydmUgb3JkZXIsIHRvdGFsIGNvdW50IG9mIHZhbGlkIHBvaW50cyBpbiB0aGUgZmllbGRcbiAgICAvLyBCYXNlIHBvaW50ICh4LCB5KSBha2EgZ2VuZXJhdG9yIHBvaW50XG4gICAgR3g6IEJpZ0ludCgnNTUwNjYyNjMwMjIyNzczNDM2Njk1Nzg3MTg4OTUxNjg1MzQzMjYyNTA2MDM0NTM3Nzc1OTQxNzU1MDAxODczNjAzODkxMTY3MjkyNDAnKSxcbiAgICBHeTogQmlnSW50KCczMjY3MDUxMDAyMDc1ODgxNjk3ODA4MzA4NTEzMDUwNzA0MzE4NDQ3MTI3MzM4MDY1OTI0MzI3NTkzODkwNDMzNTc1NzMzNzQ4MjQyNCcpLFxuICAgIGg6IEJpZ0ludCgxKSwgLy8gQ29mYWN0b3JcbiAgICBsb3dTOiB0cnVlLCAvLyBBbGxvdyBvbmx5IGxvdy1TIHNpZ25hdHVyZXMgYnkgZGVmYXVsdCBpbiBzaWduKCkgYW5kIHZlcmlmeSgpXG4gICAgZW5kbzoge1xuICAgICAgICAvLyBFbmRvbW9ycGhpc20sIHNlZSBhYm92ZVxuICAgICAgICBiZXRhOiBCaWdJbnQoJzB4N2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScpLFxuICAgICAgICBzcGxpdFNjYWxhcjogKGspID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBzZWNwMjU2azFOO1xuICAgICAgICAgICAgY29uc3QgYTEgPSBCaWdJbnQoJzB4MzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnKTtcbiAgICAgICAgICAgIGNvbnN0IGIxID0gLV8xbiAqIEJpZ0ludCgnMHhlNDQzN2VkNjAxMGU4ODI4NmY1NDdmYTkwYWJmZTRjMycpO1xuICAgICAgICAgICAgY29uc3QgYTIgPSBCaWdJbnQoJzB4MTE0Y2E1MGY3YThlMmYzZjY1N2MxMTA4ZDlkNDRjZmQ4Jyk7XG4gICAgICAgICAgICBjb25zdCBiMiA9IGExO1xuICAgICAgICAgICAgY29uc3QgUE9XXzJfMTI4ID0gQmlnSW50KCcweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpOyAvLyAoMm4qKjEyOG4pLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgY29uc3QgYzEgPSBkaXZOZWFyZXN0KGIyICogaywgbik7XG4gICAgICAgICAgICBjb25zdCBjMiA9IGRpdk5lYXJlc3QoLWIxICogaywgbik7XG4gICAgICAgICAgICBsZXQgazEgPSBtb2QoayAtIGMxICogYTEgLSBjMiAqIGEyLCBuKTtcbiAgICAgICAgICAgIGxldCBrMiA9IG1vZCgtYzEgKiBiMSAtIGMyICogYjIsIG4pO1xuICAgICAgICAgICAgY29uc3QgazFuZWcgPSBrMSA+IFBPV18yXzEyODtcbiAgICAgICAgICAgIGNvbnN0IGsybmVnID0gazIgPiBQT1dfMl8xMjg7XG4gICAgICAgICAgICBpZiAoazFuZWcpXG4gICAgICAgICAgICAgICAgazEgPSBuIC0gazE7XG4gICAgICAgICAgICBpZiAoazJuZWcpXG4gICAgICAgICAgICAgICAgazIgPSBuIC0gazI7XG4gICAgICAgICAgICBpZiAoazEgPiBQT1dfMl8xMjggfHwgazIgPiBQT1dfMl8xMjgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NwbGl0U2NhbGFyOiBFbmRvbW9ycGhpc20gZmFpbGVkLCBrPScgKyBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGsxbmVnLCBrMSwgazJuZWcsIGsyIH07XG4gICAgICAgIH0sXG4gICAgfSxcbn0sIHNoYTI1Nik7XG4vLyBTY2hub3JyIHNpZ25hdHVyZXMgYXJlIHN1cGVyaW9yIHRvIEVDRFNBIGZyb20gYWJvdmUuIEJlbG93IGlzIFNjaG5vcnItc3BlY2lmaWMgQklQMDM0MCBjb2RlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDM0MC5tZWRpYXdpa2lcbmNvbnN0IF8wbiA9IEJpZ0ludCgwKTtcbi8qKiBBbiBvYmplY3QgbWFwcGluZyB0YWdzIHRvIHRoZWlyIHRhZ2dlZCBoYXNoIHByZWZpeCBvZiBbU0hBMjU2KHRhZykgfCBTSEEyNTYodGFnKV0gKi9cbmNvbnN0IFRBR0dFRF9IQVNIX1BSRUZJWEVTID0ge307XG5mdW5jdGlvbiB0YWdnZWRIYXNoKHRhZywgLi4ubWVzc2FnZXMpIHtcbiAgICBsZXQgdGFnUCA9IFRBR0dFRF9IQVNIX1BSRUZJWEVTW3RhZ107XG4gICAgaWYgKHRhZ1AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCB0YWdIID0gc2hhMjU2KFVpbnQ4QXJyYXkuZnJvbSh0YWcsIChjKSA9PiBjLmNoYXJDb2RlQXQoMCkpKTtcbiAgICAgICAgdGFnUCA9IGNvbmNhdEJ5dGVzKHRhZ0gsIHRhZ0gpO1xuICAgICAgICBUQUdHRURfSEFTSF9QUkVGSVhFU1t0YWddID0gdGFnUDtcbiAgICB9XG4gICAgcmV0dXJuIHNoYTI1Nihjb25jYXRCeXRlcyh0YWdQLCAuLi5tZXNzYWdlcykpO1xufVxuLy8gRUNEU0EgY29tcGFjdCBwb2ludHMgYXJlIDMzLWJ5dGUuIFNjaG5vcnIgaXMgMzI6IHdlIHN0cmlwIGZpcnN0IGJ5dGUgMHgwMiBvciAweDAzXG5jb25zdCBwb2ludFRvQnl0ZXMgPSAocG9pbnQpID0+IHBvaW50LnRvUmF3Qnl0ZXModHJ1ZSkuc2xpY2UoMSk7XG5jb25zdCBudW1UbzMyYiA9IChuKSA9PiBudW1iZXJUb0J5dGVzQkUobiwgMzIpO1xuY29uc3QgbW9kUCA9ICh4KSA9PiBtb2QoeCwgc2VjcDI1NmsxUCk7XG5jb25zdCBtb2ROID0gKHgpID0+IG1vZCh4LCBzZWNwMjU2azFOKTtcbmNvbnN0IFBvaW50ID0gc2VjcDI1NmsxLlByb2plY3RpdmVQb2ludDtcbmNvbnN0IEdtdWxBZGQgPSAoUSwgYSwgYikgPT4gUG9pbnQuQkFTRS5tdWx0aXBseUFuZEFkZFVuc2FmZShRLCBhLCBiKTtcbi8vIENhbGN1bGF0ZSBwb2ludCwgc2NhbGFyIGFuZCBieXRlc1xuZnVuY3Rpb24gc2Nobm9yckdldEV4dFB1YktleShwcml2KSB7XG4gICAgbGV0IGRfID0gc2VjcDI1NmsxLnV0aWxzLm5vcm1Qcml2YXRlS2V5VG9TY2FsYXIocHJpdik7IC8vIHNhbWUgbWV0aG9kIGV4ZWN1dGVkIGluIGZyb21Qcml2YXRlS2V5XG4gICAgbGV0IHAgPSBQb2ludC5mcm9tUHJpdmF0ZUtleShkXyk7IC8vIFAgPSBkJ+KLhUc7IDAgPCBkJyA8IG4gY2hlY2sgaXMgZG9uZSBpbnNpZGVcbiAgICBjb25zdCBzY2FsYXIgPSBwLmhhc0V2ZW5ZKCkgPyBkXyA6IG1vZE4oLWRfKTtcbiAgICByZXR1cm4geyBzY2FsYXI6IHNjYWxhciwgYnl0ZXM6IHBvaW50VG9CeXRlcyhwKSB9O1xufVxuLyoqXG4gKiBsaWZ0X3ggZnJvbSBCSVAzNDAuIENvbnZlcnQgMzItYnl0ZSB4IGNvb3JkaW5hdGUgdG8gZWxsaXB0aWMgY3VydmUgcG9pbnQuXG4gKiBAcmV0dXJucyB2YWxpZCBwb2ludCBjaGVja2VkIGZvciBiZWluZyBvbi1jdXJ2ZVxuICovXG5mdW5jdGlvbiBsaWZ0X3goeCkge1xuICAgIGFJblJhbmdlKCd4JywgeCwgXzFuLCBzZWNwMjU2azFQKTsgLy8gRmFpbCBpZiB4IOKJpSBwLlxuICAgIGNvbnN0IHh4ID0gbW9kUCh4ICogeCk7XG4gICAgY29uc3QgYyA9IG1vZFAoeHggKiB4ICsgQmlnSW50KDcpKTsgLy8gTGV0IGMgPSB4wrMgKyA3IG1vZCBwLlxuICAgIGxldCB5ID0gc3FydE1vZChjKTsgLy8gTGV0IHkgPSBjXihwKzEpLzQgbW9kIHAuXG4gICAgaWYgKHkgJSBfMm4gIT09IF8wbilcbiAgICAgICAgeSA9IG1vZFAoLXkpOyAvLyBSZXR1cm4gdGhlIHVuaXF1ZSBwb2ludCBQIHN1Y2ggdGhhdCB4KFApID0geCBhbmRcbiAgICBjb25zdCBwID0gbmV3IFBvaW50KHgsIHksIF8xbik7IC8vIHkoUCkgPSB5IGlmIHkgbW9kIDIgPSAwIG9yIHkoUCkgPSBwLXkgb3RoZXJ3aXNlLlxuICAgIHAuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICByZXR1cm4gcDtcbn1cbmNvbnN0IG51bSA9IGJ5dGVzVG9OdW1iZXJCRTtcbi8qKlxuICogQ3JlYXRlIHRhZ2dlZCBoYXNoLCBjb252ZXJ0IGl0IHRvIGJpZ2ludCwgcmVkdWNlIG1vZHVsby1uLlxuICovXG5mdW5jdGlvbiBjaGFsbGVuZ2UoLi4uYXJncykge1xuICAgIHJldHVybiBtb2ROKG51bSh0YWdnZWRIYXNoKCdCSVAwMzQwL2NoYWxsZW5nZScsIC4uLmFyZ3MpKSk7XG59XG4vKipcbiAqIFNjaG5vcnIgcHVibGljIGtleSBpcyBqdXN0IGB4YCBjb29yZGluYXRlIG9mIFBvaW50IGFzIHBlciBCSVAzNDAuXG4gKi9cbmZ1bmN0aW9uIHNjaG5vcnJHZXRQdWJsaWNLZXkocHJpdmF0ZUtleSkge1xuICAgIHJldHVybiBzY2hub3JyR2V0RXh0UHViS2V5KHByaXZhdGVLZXkpLmJ5dGVzOyAvLyBkJz1pbnQoc2spLiBGYWlsIGlmIGQnPTAgb3IgZCfiiaVuLiBSZXQgYnl0ZXMoZCfii4VHKVxufVxuLyoqXG4gKiBDcmVhdGVzIFNjaG5vcnIgc2lnbmF0dXJlIGFzIHBlciBCSVAzNDAuIFZlcmlmaWVzIGl0c2VsZiBiZWZvcmUgcmV0dXJuaW5nIGFueXRoaW5nLlxuICogYXV4UmFuZCBpcyBvcHRpb25hbCBhbmQgaXMgbm90IHRoZSBzb2xlIHNvdXJjZSBvZiBrIGdlbmVyYXRpb246IGJhZCBDU1BSTkcgd29uJ3QgYmUgZGFuZ2Vyb3VzLlxuICovXG5mdW5jdGlvbiBzY2hub3JyU2lnbihtZXNzYWdlLCBwcml2YXRlS2V5LCBhdXhSYW5kID0gcmFuZG9tQnl0ZXMoMzIpKSB7XG4gICAgY29uc3QgbSA9IGVuc3VyZUJ5dGVzKCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgY29uc3QgeyBieXRlczogcHgsIHNjYWxhcjogZCB9ID0gc2Nobm9yckdldEV4dFB1YktleShwcml2YXRlS2V5KTsgLy8gY2hlY2tzIGZvciBpc1dpdGhpbkN1cnZlT3JkZXJcbiAgICBjb25zdCBhID0gZW5zdXJlQnl0ZXMoJ2F1eFJhbmQnLCBhdXhSYW5kLCAzMik7IC8vIEF1eGlsaWFyeSByYW5kb20gZGF0YSBhOiBhIDMyLWJ5dGUgYXJyYXlcbiAgICBjb25zdCB0ID0gbnVtVG8zMmIoZCBeIG51bSh0YWdnZWRIYXNoKCdCSVAwMzQwL2F1eCcsIGEpKSk7IC8vIExldCB0IGJlIHRoZSBieXRlLXdpc2UgeG9yIG9mIGJ5dGVzKGQpIGFuZCBoYXNoL2F1eChhKVxuICAgIGNvbnN0IHJhbmQgPSB0YWdnZWRIYXNoKCdCSVAwMzQwL25vbmNlJywgdCwgcHgsIG0pOyAvLyBMZXQgcmFuZCA9IGhhc2gvbm9uY2UodCB8fCBieXRlcyhQKSB8fCBtKVxuICAgIGNvbnN0IGtfID0gbW9kTihudW0ocmFuZCkpOyAvLyBMZXQgaycgPSBpbnQocmFuZCkgbW9kIG5cbiAgICBpZiAoa18gPT09IF8wbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaWduIGZhaWxlZDogayBpcyB6ZXJvJyk7IC8vIEZhaWwgaWYgaycgPSAwLlxuICAgIGNvbnN0IHsgYnl0ZXM6IHJ4LCBzY2FsYXI6IGsgfSA9IHNjaG5vcnJHZXRFeHRQdWJLZXkoa18pOyAvLyBMZXQgUiA9IGsn4ouFRy5cbiAgICBjb25zdCBlID0gY2hhbGxlbmdlKHJ4LCBweCwgbSk7IC8vIExldCBlID0gaW50KGhhc2gvY2hhbGxlbmdlKGJ5dGVzKFIpIHx8IGJ5dGVzKFApIHx8IG0pKSBtb2Qgbi5cbiAgICBjb25zdCBzaWcgPSBuZXcgVWludDhBcnJheSg2NCk7IC8vIExldCBzaWcgPSBieXRlcyhSKSB8fCBieXRlcygoayArIGVkKSBtb2QgbikuXG4gICAgc2lnLnNldChyeCwgMCk7XG4gICAgc2lnLnNldChudW1UbzMyYihtb2ROKGsgKyBlICogZCkpLCAzMik7XG4gICAgLy8gSWYgVmVyaWZ5KGJ5dGVzKFApLCBtLCBzaWcpIChzZWUgYmVsb3cpIHJldHVybnMgZmFpbHVyZSwgYWJvcnRcbiAgICBpZiAoIXNjaG5vcnJWZXJpZnkoc2lnLCBtLCBweCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2lnbjogSW52YWxpZCBzaWduYXR1cmUgcHJvZHVjZWQnKTtcbiAgICByZXR1cm4gc2lnO1xufVxuLyoqXG4gKiBWZXJpZmllcyBTY2hub3JyIHNpZ25hdHVyZS5cbiAqIFdpbGwgc3dhbGxvdyBlcnJvcnMgJiByZXR1cm4gZmFsc2UgZXhjZXB0IGZvciBpbml0aWFsIHR5cGUgdmFsaWRhdGlvbiBvZiBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIHNjaG5vcnJWZXJpZnkoc2lnbmF0dXJlLCBtZXNzYWdlLCBwdWJsaWNLZXkpIHtcbiAgICBjb25zdCBzaWcgPSBlbnN1cmVCeXRlcygnc2lnbmF0dXJlJywgc2lnbmF0dXJlLCA2NCk7XG4gICAgY29uc3QgbSA9IGVuc3VyZUJ5dGVzKCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgY29uc3QgcHViID0gZW5zdXJlQnl0ZXMoJ3B1YmxpY0tleScsIHB1YmxpY0tleSwgMzIpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFAgPSBsaWZ0X3gobnVtKHB1YikpOyAvLyBQID0gbGlmdF94KGludChwaykpOyBmYWlsIGlmIHRoYXQgZmFpbHNcbiAgICAgICAgY29uc3QgciA9IG51bShzaWcuc3ViYXJyYXkoMCwgMzIpKTsgLy8gTGV0IHIgPSBpbnQoc2lnWzA6MzJdKTsgZmFpbCBpZiByIOKJpSBwLlxuICAgICAgICBpZiAoIWluUmFuZ2UociwgXzFuLCBzZWNwMjU2azFQKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgcyA9IG51bShzaWcuc3ViYXJyYXkoMzIsIDY0KSk7IC8vIExldCBzID0gaW50KHNpZ1szMjo2NF0pOyBmYWlsIGlmIHMg4omlIG4uXG4gICAgICAgIGlmICghaW5SYW5nZShzLCBfMW4sIHNlY3AyNTZrMU4pKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBlID0gY2hhbGxlbmdlKG51bVRvMzJiKHIpLCBwb2ludFRvQnl0ZXMoUCksIG0pOyAvLyBpbnQoY2hhbGxlbmdlKGJ5dGVzKHIpfHxieXRlcyhQKXx8bSkpJW5cbiAgICAgICAgY29uc3QgUiA9IEdtdWxBZGQoUCwgcywgbW9kTigtZSkpOyAvLyBSID0gc+KLhUcgLSBl4ouFUFxuICAgICAgICBpZiAoIVIgfHwgIVIuaGFzRXZlblkoKSB8fCBSLnRvQWZmaW5lKCkueCAhPT0gcilcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gLWVQID09IChuLWUpUFxuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gRmFpbCBpZiBpc19pbmZpbml0ZShSKSAvIG5vdCBoYXNfZXZlbl95KFIpIC8geChSKSDiiaAgci5cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIFNjaG5vcnIgc2lnbmF0dXJlcyBvdmVyIHNlY3AyNTZrMS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAzNDAubWVkaWF3aWtpXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgc2Nobm9yciB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxJztcbiAqIGNvbnN0IHByaXYgPSBzY2hub3JyLnV0aWxzLnJhbmRvbVByaXZhdGVLZXkoKTtcbiAqIGNvbnN0IHB1YiA9IHNjaG5vcnIuZ2V0UHVibGljS2V5KHByaXYpO1xuICogY29uc3QgbXNnID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKCdoZWxsbycpO1xuICogY29uc3Qgc2lnID0gc2Nobm9yci5zaWduKG1zZywgcHJpdik7XG4gKiBjb25zdCBpc1ZhbGlkID0gc2Nobm9yci52ZXJpZnkoc2lnLCBtc2csIHB1Yik7XG4gKi9cbmV4cG9ydCBjb25zdCBzY2hub3JyID0gLyogQF9fUFVSRV9fICovICgoKSA9PiAoe1xuICAgIGdldFB1YmxpY0tleTogc2Nobm9yckdldFB1YmxpY0tleSxcbiAgICBzaWduOiBzY2hub3JyU2lnbixcbiAgICB2ZXJpZnk6IHNjaG5vcnJWZXJpZnksXG4gICAgdXRpbHM6IHtcbiAgICAgICAgcmFuZG9tUHJpdmF0ZUtleTogc2VjcDI1NmsxLnV0aWxzLnJhbmRvbVByaXZhdGVLZXksXG4gICAgICAgIGxpZnRfeCxcbiAgICAgICAgcG9pbnRUb0J5dGVzLFxuICAgICAgICBudW1iZXJUb0J5dGVzQkUsXG4gICAgICAgIGJ5dGVzVG9OdW1iZXJCRSxcbiAgICAgICAgdGFnZ2VkSGFzaCxcbiAgICAgICAgbW9kLFxuICAgIH0sXG59KSkoKTtcbmNvbnN0IGlzb01hcCA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gaXNvZ2VueU1hcChGcGsxLCBbXG4gICAgLy8geE51bVxuICAgIFtcbiAgICAgICAgJzB4OGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGRhYWFhYThjNycsXG4gICAgICAgICcweDdkM2Q0YzgwYmMzMjFkNWI5ZjMxNWNlYTdmZDQ0YzVkNTk1ZDJmYzBiZjYzYjkyZGZmZjEwNDRmMTdjNjU4MScsXG4gICAgICAgICcweDUzNGMzMjhkMjNmMjM0ZTZlMmE0MTNkZWNhMjVjYWVjZTQ1MDYxNDQwMzdjNDAzMTRlY2JkMGI1M2Q5ZGQyNjInLFxuICAgICAgICAnMHg4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZGFhYWFhODhjJyxcbiAgICBdLFxuICAgIC8vIHhEZW5cbiAgICBbXG4gICAgICAgICcweGQzNTc3MTE5M2Q5NDkxOGE5Y2EzNGNjYmI3YjY0MGRkODZjZDQwOTU0MmY4NDg3ZDlmZTZiNzQ1NzgxZWI0OWInLFxuICAgICAgICAnMHhlZGFkYzZmNjQzODNkYzFkZjdjNGIyZDUxYjU0MjI1NDA2ZDM2YjY0MWY1ZTQxYmJjNTJhNTY2MTJhOGM2ZDE0JyxcbiAgICAgICAgJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMScsIC8vIExBU1QgMVxuICAgIF0sXG4gICAgLy8geU51bVxuICAgIFtcbiAgICAgICAgJzB4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGI4ZTM4ZTIzYycsXG4gICAgICAgICcweGM3NWUwYzMyZDVjYjdjMGZhOWQwYTU0YjEyYTBhNmQ1NjQ3YWIwNDZkNjg2ZGE2ZmRmZmM5MGZjMjAxZDcxYTMnLFxuICAgICAgICAnMHgyOWE2MTk0NjkxZjkxYTczNzE1MjA5ZWY2NTEyZTU3NjcyMjgzMGEyMDFiZTIwMThhNzY1ZTg1YTllY2VlOTMxJyxcbiAgICAgICAgJzB4MmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmYzOGUzOGQ4NCcsXG4gICAgXSxcbiAgICAvLyB5RGVuXG4gICAgW1xuICAgICAgICAnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmOTNiJyxcbiAgICAgICAgJzB4N2EwNjUzNGJiOGJkYjQ5ZmQ1ZTllNjYzMjcyMmMyOTg5NDY3YzFiZmM4ZThkOTc4ZGZiNDI1ZDI2ODVjMjU3MycsXG4gICAgICAgICcweDY0ODRhYTcxNjU0NWNhMmNmM2E3MGMzZmE4ZmUzMzdlMGEzZDIxMTYyZjBkNjI5OWE3YmY4MTkyYmZkMmE3NmYnLFxuICAgICAgICAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxJywgLy8gTEFTVCAxXG4gICAgXSxcbl0ubWFwKChpKSA9PiBpLm1hcCgoaikgPT4gQmlnSW50KGopKSkpKSgpO1xuY29uc3QgbWFwU1dVID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtYXBUb0N1cnZlU2ltcGxlU1dVKEZwazEsIHtcbiAgICBBOiBCaWdJbnQoJzB4M2Y4NzMxYWJkZDY2MWFkY2EwOGE1NTU4ZjBmNWQyNzJlOTUzZDM2M2NiNmYwZTVkNDA1NDQ3YzAxYTQ0NDUzMycpLFxuICAgIEI6IEJpZ0ludCgnMTc3MScpLFxuICAgIFo6IEZwazEuY3JlYXRlKEJpZ0ludCgnLTExJykpLFxufSkpKCk7XG5jb25zdCBodGYgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IGNyZWF0ZUhhc2hlcihzZWNwMjU2azEuUHJvamVjdGl2ZVBvaW50LCAoc2NhbGFycykgPT4ge1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gbWFwU1dVKEZwazEuY3JlYXRlKHNjYWxhcnNbMF0pKTtcbiAgICByZXR1cm4gaXNvTWFwKHgsIHkpO1xufSwge1xuICAgIERTVDogJ3NlY3AyNTZrMV9YTUQ6U0hBLTI1Nl9TU1dVX1JPXycsXG4gICAgZW5jb2RlRFNUOiAnc2VjcDI1NmsxX1hNRDpTSEEtMjU2X1NTV1VfTlVfJyxcbiAgICBwOiBGcGsxLk9SREVSLFxuICAgIG06IDEsXG4gICAgazogMTI4LFxuICAgIGV4cGFuZDogJ3htZCcsXG4gICAgaGFzaDogc2hhMjU2LFxufSkpKCk7XG4vKiogc2VjcDI1NmsxIGhhc2gtdG8tY3VydmUgZnJvbSBbUkZDIDkzODBdKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MzgwKS4gKi9cbmV4cG9ydCBjb25zdCBoYXNoVG9DdXJ2ZSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gaHRmLmhhc2hUb0N1cnZlKSgpO1xuLyoqIHNlY3AyNTZrMSBlbmNvZGUtdG8tY3VydmUgZnJvbSBbUkZDIDkzODBdKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MzgwKS4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVUb0N1cnZlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBodGYuZW5jb2RlVG9DdXJ2ZSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlY3AyNTZrMS5qcy5tYXAiLCJpbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXInO1xuaW1wb3J0IHsgZWQyNTUxOSB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvZWQyNTUxOSc7XG5pbXBvcnQgQk4gZnJvbSAnYm4uanMnO1xuaW1wb3J0IGJzNTggZnJvbSAnYnM1OCc7XG5pbXBvcnQgeyBzaGEyNTYgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3NoYTI1Nic7XG5pbXBvcnQgeyBzZXJpYWxpemUsIGRlc2VyaWFsaXplLCBkZXNlcmlhbGl6ZVVuY2hlY2tlZCB9IGZyb20gJ2JvcnNoJztcbmltcG9ydCAqIGFzIEJ1ZmZlckxheW91dCBmcm9tICdAc29sYW5hL2J1ZmZlci1sYXlvdXQnO1xuaW1wb3J0IHsgYmxvYiB9IGZyb20gJ0Bzb2xhbmEvYnVmZmVyLWxheW91dCc7XG5pbXBvcnQgeyB0b0JpZ0ludExFLCB0b0J1ZmZlckxFIH0gZnJvbSAnYmlnaW50LWJ1ZmZlcic7XG5pbXBvcnQgeyBjb2VyY2UsIGluc3RhbmNlLCBzdHJpbmcsIHR1cGxlLCBsaXRlcmFsLCB1bmtub3duLCB0eXBlLCBudW1iZXIsIGFycmF5LCBudWxsYWJsZSwgb3B0aW9uYWwsIGJvb2xlYW4sIHJlY29yZCwgdW5pb24sIGNyZWF0ZSwgYW55LCBhc3NlcnQgYXMgYXNzZXJ0JDEgfSBmcm9tICdzdXBlcnN0cnVjdCc7XG5pbXBvcnQgUnBjQ2xpZW50IGZyb20gJ2pheXNvbi9saWIvY2xpZW50L2Jyb3dzZXInO1xuaW1wb3J0IHsgQ29tbW9uQ2xpZW50LCBXZWJTb2NrZXQgfSBmcm9tICdycGMtd2Vic29ja2V0cyc7XG5pbXBvcnQgeyBrZWNjYWtfMjU2IH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zaGEzJztcbmltcG9ydCB7IHNlY3AyNTZrMSB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxJztcblxuLyoqXG4gKiBBIDY0IGJ5dGUgc2VjcmV0IGtleSwgdGhlIGZpcnN0IDMyIGJ5dGVzIG9mIHdoaWNoIGlzIHRoZVxuICogcHJpdmF0ZSBzY2FsYXIgYW5kIHRoZSBsYXN0IDMyIGJ5dGVzIGlzIHRoZSBwdWJsaWMga2V5LlxuICogUmVhZCBtb3JlOiBodHRwczovL2Jsb2cubW96aWxsYS5vcmcvd2FybmVyLzIwMTEvMTEvMjkvZWQyNTUxOS1rZXlzL1xuICovXG5cbi8qKlxuICogRWQyNTUxOSBLZXlwYWlyXG4gKi9cblxuY29uc3QgZ2VuZXJhdGVQcml2YXRlS2V5ID0gZWQyNTUxOS51dGlscy5yYW5kb21Qcml2YXRlS2V5O1xuY29uc3QgZ2VuZXJhdGVLZXlwYWlyID0gKCkgPT4ge1xuICBjb25zdCBwcml2YXRlU2NhbGFyID0gZWQyNTUxOS51dGlscy5yYW5kb21Qcml2YXRlS2V5KCk7XG4gIGNvbnN0IHB1YmxpY0tleSA9IGdldFB1YmxpY0tleShwcml2YXRlU2NhbGFyKTtcbiAgY29uc3Qgc2VjcmV0S2V5ID0gbmV3IFVpbnQ4QXJyYXkoNjQpO1xuICBzZWNyZXRLZXkuc2V0KHByaXZhdGVTY2FsYXIpO1xuICBzZWNyZXRLZXkuc2V0KHB1YmxpY0tleSwgMzIpO1xuICByZXR1cm4ge1xuICAgIHB1YmxpY0tleSxcbiAgICBzZWNyZXRLZXlcbiAgfTtcbn07XG5jb25zdCBnZXRQdWJsaWNLZXkgPSBlZDI1NTE5LmdldFB1YmxpY0tleTtcbmZ1bmN0aW9uIGlzT25DdXJ2ZShwdWJsaWNLZXkpIHtcbiAgdHJ5IHtcbiAgICBlZDI1NTE5LkV4dGVuZGVkUG9pbnQuZnJvbUhleChwdWJsaWNLZXkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmNvbnN0IHNpZ24gPSAobWVzc2FnZSwgc2VjcmV0S2V5KSA9PiBlZDI1NTE5LnNpZ24obWVzc2FnZSwgc2VjcmV0S2V5LnNsaWNlKDAsIDMyKSk7XG5jb25zdCB2ZXJpZnkgPSBlZDI1NTE5LnZlcmlmeTtcblxuY29uc3QgdG9CdWZmZXIgPSBhcnIgPT4ge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGFycikpIHtcbiAgICByZXR1cm4gYXJyO1xuICB9IGVsc2UgaWYgKGFyciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oYXJyLmJ1ZmZlciwgYXJyLmJ5dGVPZmZzZXQsIGFyci5ieXRlTGVuZ3RoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oYXJyKTtcbiAgfVxufTtcblxuLy8gQ2xhc3Mgd3JhcHBpbmcgYSBwbGFpbiBvYmplY3RcbmNsYXNzIFN0cnVjdCB7XG4gIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BlcnRpZXMpO1xuICB9XG4gIGVuY29kZSgpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc2VyaWFsaXplKFNPTEFOQV9TQ0hFTUEsIHRoaXMpKTtcbiAgfVxuICBzdGF0aWMgZGVjb2RlKGRhdGEpIHtcbiAgICByZXR1cm4gZGVzZXJpYWxpemUoU09MQU5BX1NDSEVNQSwgdGhpcywgZGF0YSk7XG4gIH1cbiAgc3RhdGljIGRlY29kZVVuY2hlY2tlZChkYXRhKSB7XG4gICAgcmV0dXJuIGRlc2VyaWFsaXplVW5jaGVja2VkKFNPTEFOQV9TQ0hFTUEsIHRoaXMsIGRhdGEpO1xuICB9XG59XG5cbi8vIENsYXNzIHJlcHJlc2VudGluZyBhIFJ1c3QtY29tcGF0aWJsZSBlbnVtLCBzaW5jZSBlbnVtcyBhcmUgb25seSBzdHJpbmdzIG9yXG4vLyBudW1iZXJzIGluIHB1cmUgSlNcbmNsYXNzIEVudW0gZXh0ZW5kcyBTdHJ1Y3Qge1xuICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XG4gICAgc3VwZXIocHJvcGVydGllcyk7XG4gICAgdGhpcy5lbnVtID0gJyc7XG4gICAgaWYgKE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmxlbmd0aCAhPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbnVtIGNhbiBvbmx5IHRha2Ugc2luZ2xlIHZhbHVlJyk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLm1hcChrZXkgPT4ge1xuICAgICAgdGhpcy5lbnVtID0ga2V5O1xuICAgIH0pO1xuICB9XG59XG5jb25zdCBTT0xBTkFfU0NIRU1BID0gbmV3IE1hcCgpO1xuXG52YXIgX1B1YmxpY0tleTtcblxuLyoqXG4gKiBNYXhpbXVtIGxlbmd0aCBvZiBkZXJpdmVkIHB1YmtleSBzZWVkXG4gKi9cbmNvbnN0IE1BWF9TRUVEX0xFTkdUSCA9IDMyO1xuXG4vKipcbiAqIFNpemUgb2YgcHVibGljIGtleSBpbiBieXRlc1xuICovXG5jb25zdCBQVUJMSUNfS0VZX0xFTkdUSCA9IDMyO1xuXG4vKipcbiAqIFZhbHVlIHRvIGJlIGNvbnZlcnRlZCBpbnRvIHB1YmxpYyBrZXlcbiAqL1xuXG4vKipcbiAqIEpTT04gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIFB1YmxpY0tleSBjbGFzc1xuICovXG5cbmZ1bmN0aW9uIGlzUHVibGljS2V5RGF0YSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuX2JuICE9PSB1bmRlZmluZWQ7XG59XG5cbi8vIGxvY2FsIGNvdW50ZXIgdXNlZCBieSBQdWJsaWNLZXkudW5pcXVlKClcbmxldCB1bmlxdWVQdWJsaWNLZXlDb3VudGVyID0gMTtcblxuLyoqXG4gKiBBIHB1YmxpYyBrZXlcbiAqL1xuY2xhc3MgUHVibGljS2V5IGV4dGVuZHMgU3RydWN0IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBQdWJsaWNLZXkgb2JqZWN0XG4gICAqIEBwYXJhbSB2YWx1ZSBlZDI1NTE5IHB1YmxpYyBrZXkgYXMgYnVmZmVyIG9yIGJhc2UtNTggZW5jb2RlZCBzdHJpbmdcbiAgICovXG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgc3VwZXIoe30pO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICB0aGlzLl9ibiA9IHZvaWQgMDtcbiAgICBpZiAoaXNQdWJsaWNLZXlEYXRhKHZhbHVlKSkge1xuICAgICAgdGhpcy5fYm4gPSB2YWx1ZS5fYm47XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGFzc3VtZSBiYXNlIDU4IGVuY29kaW5nIGJ5IGRlZmF1bHRcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IGJzNTguZGVjb2RlKHZhbHVlKTtcbiAgICAgICAgaWYgKGRlY29kZWQubGVuZ3RoICE9IFBVQkxJQ19LRVlfTEVOR1RIKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHB1YmxpYyBrZXkgaW5wdXRgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ibiA9IG5ldyBCTihkZWNvZGVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2JuID0gbmV3IEJOKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9ibi5ieXRlTGVuZ3RoKCkgPiBQVUJMSUNfS0VZX0xFTkdUSCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcHVibGljIGtleSBpbnB1dGApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgdW5pcXVlIFB1YmxpY0tleSBmb3IgdGVzdHMgYW5kIGJlbmNobWFya3MgdXNpbmcgYSBjb3VudGVyXG4gICAqL1xuICBzdGF0aWMgdW5pcXVlKCkge1xuICAgIGNvbnN0IGtleSA9IG5ldyBQdWJsaWNLZXkodW5pcXVlUHVibGljS2V5Q291bnRlcik7XG4gICAgdW5pcXVlUHVibGljS2V5Q291bnRlciArPSAxO1xuICAgIHJldHVybiBuZXcgUHVibGljS2V5KGtleS50b0J1ZmZlcigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHB1YmxpYyBrZXkgdmFsdWUuIFRoZSBiYXNlNTgtZW5jb2RlZCBzdHJpbmcgcmVwcmVzZW50YXRpb24gaXMgYWxsIG9uZXMgKGFzIHNlZW4gYmVsb3cpXG4gICAqIFRoZSB1bmRlcmx5aW5nIEJOIG51bWJlciBpcyAzMiBieXRlcyB0aGF0IGFyZSBhbGwgemVyb3NcbiAgICovXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0d28gcHVibGljS2V5cyBhcmUgZXF1YWxcbiAgICovXG4gIGVxdWFscyhwdWJsaWNLZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fYm4uZXEocHVibGljS2V5Ll9ibik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBiYXNlLTU4IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwdWJsaWMga2V5XG4gICAqL1xuICB0b0Jhc2U1OCgpIHtcbiAgICByZXR1cm4gYnM1OC5lbmNvZGUodGhpcy50b0J5dGVzKCkpO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b0Jhc2U1OCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgYnl0ZSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHVibGljIGtleSBpbiBiaWcgZW5kaWFuXG4gICAqL1xuICB0b0J5dGVzKCkge1xuICAgIGNvbnN0IGJ1ZiA9IHRoaXMudG9CdWZmZXIoKTtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ1ZmZlciwgYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlTGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIEJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHVibGljIGtleSBpbiBiaWcgZW5kaWFuXG4gICAqL1xuICB0b0J1ZmZlcigpIHtcbiAgICBjb25zdCBiID0gdGhpcy5fYm4udG9BcnJheUxpa2UoQnVmZmVyKTtcbiAgICBpZiAoYi5sZW5ndGggPT09IFBVQkxJQ19LRVlfTEVOR1RIKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgY29uc3QgemVyb1BhZCA9IEJ1ZmZlci5hbGxvYygzMik7XG4gICAgYi5jb3B5KHplcm9QYWQsIDMyIC0gYi5sZW5ndGgpO1xuICAgIHJldHVybiB6ZXJvUGFkO1xuICB9XG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gYFB1YmxpY0tleSgke3RoaXMudG9TdHJpbmcoKX0pYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGJhc2UtNTggcmVwcmVzZW50YXRpb24gb2YgdGhlIHB1YmxpYyBrZXlcbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnRvQmFzZTU4KCk7XG4gIH1cblxuICAvKipcbiAgICogRGVyaXZlIGEgcHVibGljIGtleSBmcm9tIGFub3RoZXIga2V5LCBhIHNlZWQsIGFuZCBhIHByb2dyYW0gSUQuXG4gICAqIFRoZSBwcm9ncmFtIElEIHdpbGwgYWxzbyBzZXJ2ZSBhcyB0aGUgb3duZXIgb2YgdGhlIHB1YmxpYyBrZXksIGdpdmluZ1xuICAgKiBpdCBwZXJtaXNzaW9uIHRvIHdyaXRlIGRhdGEgdG8gdGhlIGFjY291bnQuXG4gICAqL1xuICAvKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWF3YWl0ICovXG4gIHN0YXRpYyBhc3luYyBjcmVhdGVXaXRoU2VlZChmcm9tUHVibGljS2V5LCBzZWVkLCBwcm9ncmFtSWQpIHtcbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtmcm9tUHVibGljS2V5LnRvQnVmZmVyKCksIEJ1ZmZlci5mcm9tKHNlZWQpLCBwcm9ncmFtSWQudG9CdWZmZXIoKV0pO1xuICAgIGNvbnN0IHB1YmxpY0tleUJ5dGVzID0gc2hhMjU2KGJ1ZmZlcik7XG4gICAgcmV0dXJuIG5ldyBQdWJsaWNLZXkocHVibGljS2V5Qnl0ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlcml2ZSBhIHByb2dyYW0gYWRkcmVzcyBmcm9tIHNlZWRzIGFuZCBhIHByb2dyYW0gSUQuXG4gICAqL1xuICAvKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWF3YWl0ICovXG4gIHN0YXRpYyBjcmVhdGVQcm9ncmFtQWRkcmVzc1N5bmMoc2VlZHMsIHByb2dyYW1JZCkge1xuICAgIGxldCBidWZmZXIgPSBCdWZmZXIuYWxsb2MoMCk7XG4gICAgc2VlZHMuZm9yRWFjaChmdW5jdGlvbiAoc2VlZCkge1xuICAgICAgaWYgKHNlZWQubGVuZ3RoID4gTUFYX1NFRURfTEVOR1RIKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE1heCBzZWVkIGxlbmd0aCBleGNlZWRlZGApO1xuICAgICAgfVxuICAgICAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbYnVmZmVyLCB0b0J1ZmZlcihzZWVkKV0pO1xuICAgIH0pO1xuICAgIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgcHJvZ3JhbUlkLnRvQnVmZmVyKCksIEJ1ZmZlci5mcm9tKCdQcm9ncmFtRGVyaXZlZEFkZHJlc3MnKV0pO1xuICAgIGNvbnN0IHB1YmxpY0tleUJ5dGVzID0gc2hhMjU2KGJ1ZmZlcik7XG4gICAgaWYgKGlzT25DdXJ2ZShwdWJsaWNLZXlCeXRlcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBzZWVkcywgYWRkcmVzcyBtdXN0IGZhbGwgb2ZmIHRoZSBjdXJ2ZWApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFB1YmxpY0tleShwdWJsaWNLZXlCeXRlcyk7XG4gIH1cblxuICAvKipcbiAgICogQXN5bmMgdmVyc2lvbiBvZiBjcmVhdGVQcm9ncmFtQWRkcmVzc1N5bmNcbiAgICogRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgY3JlYXRlUHJvZ3JhbUFkZHJlc3NTeW5jfSBpbnN0ZWFkXG4gICAqL1xuICAvKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWF3YWl0ICovXG4gIHN0YXRpYyBhc3luYyBjcmVhdGVQcm9ncmFtQWRkcmVzcyhzZWVkcywgcHJvZ3JhbUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlUHJvZ3JhbUFkZHJlc3NTeW5jKHNlZWRzLCBwcm9ncmFtSWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgYSB2YWxpZCBwcm9ncmFtIGFkZHJlc3NcbiAgICpcbiAgICogVmFsaWQgcHJvZ3JhbSBhZGRyZXNzZXMgbXVzdCBmYWxsIG9mZiB0aGUgZWQyNTUxOSBjdXJ2ZS4gIFRoaXMgZnVuY3Rpb25cbiAgICogaXRlcmF0ZXMgYSBub25jZSB1bnRpbCBpdCBmaW5kcyBvbmUgdGhhdCB3aGVuIGNvbWJpbmVkIHdpdGggdGhlIHNlZWRzXG4gICAqIHJlc3VsdHMgaW4gYSB2YWxpZCBwcm9ncmFtIGFkZHJlc3MuXG4gICAqL1xuICBzdGF0aWMgZmluZFByb2dyYW1BZGRyZXNzU3luYyhzZWVkcywgcHJvZ3JhbUlkKSB7XG4gICAgbGV0IG5vbmNlID0gMjU1O1xuICAgIGxldCBhZGRyZXNzO1xuICAgIHdoaWxlIChub25jZSAhPSAwKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzZWVkc1dpdGhOb25jZSA9IHNlZWRzLmNvbmNhdChCdWZmZXIuZnJvbShbbm9uY2VdKSk7XG4gICAgICAgIGFkZHJlc3MgPSB0aGlzLmNyZWF0ZVByb2dyYW1BZGRyZXNzU3luYyhzZWVkc1dpdGhOb25jZSwgcHJvZ3JhbUlkKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVHlwZUVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIG5vbmNlLS07XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFthZGRyZXNzLCBub25jZV07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGZpbmQgYSB2aWFibGUgcHJvZ3JhbSBhZGRyZXNzIG5vbmNlYCk7XG4gIH1cblxuICAvKipcbiAgICogQXN5bmMgdmVyc2lvbiBvZiBmaW5kUHJvZ3JhbUFkZHJlc3NTeW5jXG4gICAqIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGZpbmRQcm9ncmFtQWRkcmVzc1N5bmN9IGluc3RlYWRcbiAgICovXG4gIHN0YXRpYyBhc3luYyBmaW5kUHJvZ3JhbUFkZHJlc3Moc2VlZHMsIHByb2dyYW1JZCkge1xuICAgIHJldHVybiB0aGlzLmZpbmRQcm9ncmFtQWRkcmVzc1N5bmMoc2VlZHMsIHByb2dyYW1JZCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgdGhhdCBhIHB1YmtleSBpcyBvbiB0aGUgZWQyNTUxOSBjdXJ2ZS5cbiAgICovXG4gIHN0YXRpYyBpc09uQ3VydmUocHVia2V5RGF0YSkge1xuICAgIGNvbnN0IHB1YmtleSA9IG5ldyBQdWJsaWNLZXkocHVia2V5RGF0YSk7XG4gICAgcmV0dXJuIGlzT25DdXJ2ZShwdWJrZXkudG9CeXRlcygpKTtcbiAgfVxufVxuX1B1YmxpY0tleSA9IFB1YmxpY0tleTtcblB1YmxpY0tleS5kZWZhdWx0ID0gbmV3IF9QdWJsaWNLZXkoJzExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExJyk7XG5TT0xBTkFfU0NIRU1BLnNldChQdWJsaWNLZXksIHtcbiAga2luZDogJ3N0cnVjdCcsXG4gIGZpZWxkczogW1snX2JuJywgJ3UyNTYnXV1cbn0pO1xuXG4vKipcbiAqIEFuIGFjY291bnQga2V5IHBhaXIgKHB1YmxpYyBhbmQgc2VjcmV0IGtleXMpLlxuICpcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHYxLjEwLjAsIHBsZWFzZSB1c2Uge0BsaW5rIEtleXBhaXJ9IGluc3RlYWQuXG4gKi9cbmNsYXNzIEFjY291bnQge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IEFjY291bnQgb2JqZWN0XG4gICAqXG4gICAqIElmIHRoZSBzZWNyZXRLZXkgcGFyYW1ldGVyIGlzIG5vdCBwcm92aWRlZCBhIG5ldyBrZXkgcGFpciBpcyByYW5kb21seVxuICAgKiBjcmVhdGVkIGZvciB0aGUgYWNjb3VudFxuICAgKlxuICAgKiBAcGFyYW0gc2VjcmV0S2V5IFNlY3JldCBrZXkgZm9yIHRoZSBhY2NvdW50XG4gICAqL1xuICBjb25zdHJ1Y3RvcihzZWNyZXRLZXkpIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fcHVibGljS2V5ID0gdm9pZCAwO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICB0aGlzLl9zZWNyZXRLZXkgPSB2b2lkIDA7XG4gICAgaWYgKHNlY3JldEtleSkge1xuICAgICAgY29uc3Qgc2VjcmV0S2V5QnVmZmVyID0gdG9CdWZmZXIoc2VjcmV0S2V5KTtcbiAgICAgIGlmIChzZWNyZXRLZXkubGVuZ3RoICE9PSA2NCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBzZWNyZXQga2V5IHNpemUnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3B1YmxpY0tleSA9IHNlY3JldEtleUJ1ZmZlci5zbGljZSgzMiwgNjQpO1xuICAgICAgdGhpcy5fc2VjcmV0S2V5ID0gc2VjcmV0S2V5QnVmZmVyLnNsaWNlKDAsIDMyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2VjcmV0S2V5ID0gdG9CdWZmZXIoZ2VuZXJhdGVQcml2YXRlS2V5KCkpO1xuICAgICAgdGhpcy5fcHVibGljS2V5ID0gdG9CdWZmZXIoZ2V0UHVibGljS2V5KHRoaXMuX3NlY3JldEtleSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgcHVibGljIGtleSBmb3IgdGhpcyBhY2NvdW50XG4gICAqL1xuICBnZXQgcHVibGljS2V5KCkge1xuICAgIHJldHVybiBuZXcgUHVibGljS2V5KHRoaXMuX3B1YmxpY0tleSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlICoqdW5lbmNyeXB0ZWQqKiBzZWNyZXQga2V5IGZvciB0aGlzIGFjY291bnQuIFRoZSBmaXJzdCAzMiBieXRlc1xuICAgKiBpcyB0aGUgcHJpdmF0ZSBzY2FsYXIgYW5kIHRoZSBsYXN0IDMyIGJ5dGVzIGlzIHRoZSBwdWJsaWMga2V5LlxuICAgKiBSZWFkIG1vcmU6IGh0dHBzOi8vYmxvZy5tb3ppbGxhLm9yZy93YXJuZXIvMjAxMS8xMS8yOS9lZDI1NTE5LWtleXMvXG4gICAqL1xuICBnZXQgc2VjcmV0S2V5KCkge1xuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFt0aGlzLl9zZWNyZXRLZXksIHRoaXMuX3B1YmxpY0tleV0sIDY0KTtcbiAgfVxufVxuXG5jb25zdCBCUEZfTE9BREVSX0RFUFJFQ0FURURfUFJPR1JBTV9JRCA9IG5ldyBQdWJsaWNLZXkoJ0JQRkxvYWRlcjExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEnKTtcblxuLyoqXG4gKiBNYXhpbXVtIG92ZXItdGhlLXdpcmUgc2l6ZSBvZiBhIFRyYW5zYWN0aW9uXG4gKlxuICogMTI4MCBpcyBJUHY2IG1pbmltdW0gTVRVXG4gKiA0MCBieXRlcyBpcyB0aGUgc2l6ZSBvZiB0aGUgSVB2NiBoZWFkZXJcbiAqIDggYnl0ZXMgaXMgdGhlIHNpemUgb2YgdGhlIGZyYWdtZW50IGhlYWRlclxuICovXG5jb25zdCBQQUNLRVRfREFUQV9TSVpFID0gMTI4MCAtIDQwIC0gODtcbmNvbnN0IFZFUlNJT05fUFJFRklYX01BU0sgPSAweDdmO1xuY29uc3QgU0lHTkFUVVJFX0xFTkdUSF9JTl9CWVRFUyA9IDY0O1xuXG5jbGFzcyBUcmFuc2FjdGlvbkV4cGlyZWRCbG9ja2hlaWdodEV4Y2VlZGVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHNpZ25hdHVyZSkge1xuICAgIHN1cGVyKGBTaWduYXR1cmUgJHtzaWduYXR1cmV9IGhhcyBleHBpcmVkOiBibG9jayBoZWlnaHQgZXhjZWVkZWQuYCk7XG4gICAgdGhpcy5zaWduYXR1cmUgPSB2b2lkIDA7XG4gICAgdGhpcy5zaWduYXR1cmUgPSBzaWduYXR1cmU7XG4gIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2FjdGlvbkV4cGlyZWRCbG9ja2hlaWdodEV4Y2VlZGVkRXJyb3IucHJvdG90eXBlLCAnbmFtZScsIHtcbiAgdmFsdWU6ICdUcmFuc2FjdGlvbkV4cGlyZWRCbG9ja2hlaWdodEV4Y2VlZGVkRXJyb3InXG59KTtcbmNsYXNzIFRyYW5zYWN0aW9uRXhwaXJlZFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Ioc2lnbmF0dXJlLCB0aW1lb3V0U2Vjb25kcykge1xuICAgIHN1cGVyKGBUcmFuc2FjdGlvbiB3YXMgbm90IGNvbmZpcm1lZCBpbiAke3RpbWVvdXRTZWNvbmRzLnRvRml4ZWQoMil9IHNlY29uZHMuIEl0IGlzIGAgKyAndW5rbm93biBpZiBpdCBzdWNjZWVkZWQgb3IgZmFpbGVkLiBDaGVjayBzaWduYXR1cmUgJyArIGAke3NpZ25hdHVyZX0gdXNpbmcgdGhlIFNvbGFuYSBFeHBsb3JlciBvciBDTEkgdG9vbHMuYCk7XG4gICAgdGhpcy5zaWduYXR1cmUgPSB2b2lkIDA7XG4gICAgdGhpcy5zaWduYXR1cmUgPSBzaWduYXR1cmU7XG4gIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2FjdGlvbkV4cGlyZWRUaW1lb3V0RXJyb3IucHJvdG90eXBlLCAnbmFtZScsIHtcbiAgdmFsdWU6ICdUcmFuc2FjdGlvbkV4cGlyZWRUaW1lb3V0RXJyb3InXG59KTtcbmNsYXNzIFRyYW5zYWN0aW9uRXhwaXJlZE5vbmNlSW52YWxpZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihzaWduYXR1cmUpIHtcbiAgICBzdXBlcihgU2lnbmF0dXJlICR7c2lnbmF0dXJlfSBoYXMgZXhwaXJlZDogdGhlIG5vbmNlIGlzIG5vIGxvbmdlciB2YWxpZC5gKTtcbiAgICB0aGlzLnNpZ25hdHVyZSA9IHZvaWQgMDtcbiAgICB0aGlzLnNpZ25hdHVyZSA9IHNpZ25hdHVyZTtcbiAgfVxufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zYWN0aW9uRXhwaXJlZE5vbmNlSW52YWxpZEVycm9yLnByb3RvdHlwZSwgJ25hbWUnLCB7XG4gIHZhbHVlOiAnVHJhbnNhY3Rpb25FeHBpcmVkTm9uY2VJbnZhbGlkRXJyb3InXG59KTtcblxuY2xhc3MgTWVzc2FnZUFjY291bnRLZXlzIHtcbiAgY29uc3RydWN0b3Ioc3RhdGljQWNjb3VudEtleXMsIGFjY291bnRLZXlzRnJvbUxvb2t1cHMpIHtcbiAgICB0aGlzLnN0YXRpY0FjY291bnRLZXlzID0gdm9pZCAwO1xuICAgIHRoaXMuYWNjb3VudEtleXNGcm9tTG9va3VwcyA9IHZvaWQgMDtcbiAgICB0aGlzLnN0YXRpY0FjY291bnRLZXlzID0gc3RhdGljQWNjb3VudEtleXM7XG4gICAgdGhpcy5hY2NvdW50S2V5c0Zyb21Mb29rdXBzID0gYWNjb3VudEtleXNGcm9tTG9va3VwcztcbiAgfVxuICBrZXlTZWdtZW50cygpIHtcbiAgICBjb25zdCBrZXlTZWdtZW50cyA9IFt0aGlzLnN0YXRpY0FjY291bnRLZXlzXTtcbiAgICBpZiAodGhpcy5hY2NvdW50S2V5c0Zyb21Mb29rdXBzKSB7XG4gICAgICBrZXlTZWdtZW50cy5wdXNoKHRoaXMuYWNjb3VudEtleXNGcm9tTG9va3Vwcy53cml0YWJsZSk7XG4gICAgICBrZXlTZWdtZW50cy5wdXNoKHRoaXMuYWNjb3VudEtleXNGcm9tTG9va3Vwcy5yZWFkb25seSk7XG4gICAgfVxuICAgIHJldHVybiBrZXlTZWdtZW50cztcbiAgfVxuICBnZXQoaW5kZXgpIHtcbiAgICBmb3IgKGNvbnN0IGtleVNlZ21lbnQgb2YgdGhpcy5rZXlTZWdtZW50cygpKSB7XG4gICAgICBpZiAoaW5kZXggPCBrZXlTZWdtZW50Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4ga2V5U2VnbWVudFtpbmRleF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleCAtPSBrZXlTZWdtZW50Lmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMua2V5U2VnbWVudHMoKS5mbGF0KCkubGVuZ3RoO1xuICB9XG4gIGNvbXBpbGVJbnN0cnVjdGlvbnMoaW5zdHJ1Y3Rpb25zKSB7XG4gICAgLy8gQmFpbCBlYXJseSBpZiBhbnkgYWNjb3VudCBpbmRleGVzIHdvdWxkIG92ZXJmbG93IGEgdThcbiAgICBjb25zdCBVOF9NQVggPSAyNTU7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gVThfTUFYICsgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY2NvdW50IGluZGV4IG92ZXJmbG93IGVuY291bnRlcmVkIGR1cmluZyBjb21waWxhdGlvbicpO1xuICAgIH1cbiAgICBjb25zdCBrZXlJbmRleE1hcCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmtleVNlZ21lbnRzKCkuZmxhdCgpLmZvckVhY2goKGtleSwgaW5kZXgpID0+IHtcbiAgICAgIGtleUluZGV4TWFwLnNldChrZXkudG9CYXNlNTgoKSwgaW5kZXgpO1xuICAgIH0pO1xuICAgIGNvbnN0IGZpbmRLZXlJbmRleCA9IGtleSA9PiB7XG4gICAgICBjb25zdCBrZXlJbmRleCA9IGtleUluZGV4TWFwLmdldChrZXkudG9CYXNlNTgoKSk7XG4gICAgICBpZiAoa2V5SW5kZXggPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdFbmNvdW50ZXJlZCBhbiB1bmtub3duIGluc3RydWN0aW9uIGFjY291bnQga2V5IGR1cmluZyBjb21waWxhdGlvbicpO1xuICAgICAgcmV0dXJuIGtleUluZGV4O1xuICAgIH07XG4gICAgcmV0dXJuIGluc3RydWN0aW9ucy5tYXAoaW5zdHJ1Y3Rpb24gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJvZ3JhbUlkSW5kZXg6IGZpbmRLZXlJbmRleChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpLFxuICAgICAgICBhY2NvdW50S2V5SW5kZXhlczogaW5zdHJ1Y3Rpb24ua2V5cy5tYXAobWV0YSA9PiBmaW5kS2V5SW5kZXgobWV0YS5wdWJrZXkpKSxcbiAgICAgICAgZGF0YTogaW5zdHJ1Y3Rpb24uZGF0YVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIExheW91dCBmb3IgYSBwdWJsaWMga2V5XG4gKi9cbmNvbnN0IHB1YmxpY0tleSA9IChwcm9wZXJ0eSA9ICdwdWJsaWNLZXknKSA9PiB7XG4gIHJldHVybiBCdWZmZXJMYXlvdXQuYmxvYigzMiwgcHJvcGVydHkpO1xufTtcblxuLyoqXG4gKiBMYXlvdXQgZm9yIGEgc2lnbmF0dXJlXG4gKi9cbmNvbnN0IHNpZ25hdHVyZSA9IChwcm9wZXJ0eSA9ICdzaWduYXR1cmUnKSA9PiB7XG4gIHJldHVybiBCdWZmZXJMYXlvdXQuYmxvYig2NCwgcHJvcGVydHkpO1xufTtcbi8qKlxuICogTGF5b3V0IGZvciBhIFJ1c3QgU3RyaW5nIHR5cGVcbiAqL1xuY29uc3QgcnVzdFN0cmluZyA9IChwcm9wZXJ0eSA9ICdzdHJpbmcnKSA9PiB7XG4gIGNvbnN0IHJzbCA9IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2xlbmd0aCcpLCBCdWZmZXJMYXlvdXQudTMyKCdsZW5ndGhQYWRkaW5nJyksIEJ1ZmZlckxheW91dC5ibG9iKEJ1ZmZlckxheW91dC5vZmZzZXQoQnVmZmVyTGF5b3V0LnUzMigpLCAtOCksICdjaGFycycpXSwgcHJvcGVydHkpO1xuICBjb25zdCBfZGVjb2RlID0gcnNsLmRlY29kZS5iaW5kKHJzbCk7XG4gIGNvbnN0IF9lbmNvZGUgPSByc2wuZW5jb2RlLmJpbmQocnNsKTtcbiAgY29uc3QgcnNsU2hpbSA9IHJzbDtcbiAgcnNsU2hpbS5kZWNvZGUgPSAoYiwgb2Zmc2V0KSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IF9kZWNvZGUoYiwgb2Zmc2V0KTtcbiAgICByZXR1cm4gZGF0YVsnY2hhcnMnXS50b1N0cmluZygpO1xuICB9O1xuICByc2xTaGltLmVuY29kZSA9IChzdHIsIGIsIG9mZnNldCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBjaGFyczogQnVmZmVyLmZyb20oc3RyLCAndXRmOCcpXG4gICAgfTtcbiAgICByZXR1cm4gX2VuY29kZShkYXRhLCBiLCBvZmZzZXQpO1xuICB9O1xuICByc2xTaGltLmFsbG9jID0gc3RyID0+IHtcbiAgICByZXR1cm4gQnVmZmVyTGF5b3V0LnUzMigpLnNwYW4gKyBCdWZmZXJMYXlvdXQudTMyKCkuc3BhbiArIEJ1ZmZlci5mcm9tKHN0ciwgJ3V0ZjgnKS5sZW5ndGg7XG4gIH07XG4gIHJldHVybiByc2xTaGltO1xufTtcblxuLyoqXG4gKiBMYXlvdXQgZm9yIGFuIEF1dGhvcml6ZWQgb2JqZWN0XG4gKi9cbmNvbnN0IGF1dGhvcml6ZWQgPSAocHJvcGVydHkgPSAnYXV0aG9yaXplZCcpID0+IHtcbiAgcmV0dXJuIEJ1ZmZlckxheW91dC5zdHJ1Y3QoW3B1YmxpY0tleSgnc3Rha2VyJyksIHB1YmxpY0tleSgnd2l0aGRyYXdlcicpXSwgcHJvcGVydHkpO1xufTtcblxuLyoqXG4gKiBMYXlvdXQgZm9yIGEgTG9ja3VwIG9iamVjdFxuICovXG5jb25zdCBsb2NrdXAgPSAocHJvcGVydHkgPSAnbG9ja3VwJykgPT4ge1xuICByZXR1cm4gQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0Lm5zNjQoJ3VuaXhUaW1lc3RhbXAnKSwgQnVmZmVyTGF5b3V0Lm5zNjQoJ2Vwb2NoJyksIHB1YmxpY0tleSgnY3VzdG9kaWFuJyldLCBwcm9wZXJ0eSk7XG59O1xuXG4vKipcbiAqICBMYXlvdXQgZm9yIGEgVm90ZUluaXQgb2JqZWN0XG4gKi9cbmNvbnN0IHZvdGVJbml0ID0gKHByb3BlcnR5ID0gJ3ZvdGVJbml0JykgPT4ge1xuICByZXR1cm4gQnVmZmVyTGF5b3V0LnN0cnVjdChbcHVibGljS2V5KCdub2RlUHVia2V5JyksIHB1YmxpY0tleSgnYXV0aG9yaXplZFZvdGVyJyksIHB1YmxpY0tleSgnYXV0aG9yaXplZFdpdGhkcmF3ZXInKSwgQnVmZmVyTGF5b3V0LnU4KCdjb21taXNzaW9uJyldLCBwcm9wZXJ0eSk7XG59O1xuXG4vKipcbiAqICBMYXlvdXQgZm9yIGEgVm90ZUF1dGhvcml6ZVdpdGhTZWVkQXJncyBvYmplY3RcbiAqL1xuY29uc3Qgdm90ZUF1dGhvcml6ZVdpdGhTZWVkQXJncyA9IChwcm9wZXJ0eSA9ICd2b3RlQXV0aG9yaXplV2l0aFNlZWRBcmdzJykgPT4ge1xuICByZXR1cm4gQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnUzMigndm90ZUF1dGhvcml6YXRpb25UeXBlJyksIHB1YmxpY0tleSgnY3VycmVudEF1dGhvcml0eURlcml2ZWRLZXlPd25lclB1YmtleScpLCBydXN0U3RyaW5nKCdjdXJyZW50QXV0aG9yaXR5RGVyaXZlZEtleVNlZWQnKSwgcHVibGljS2V5KCduZXdBdXRob3JpemVkJyldLCBwcm9wZXJ0eSk7XG59O1xuZnVuY3Rpb24gZ2V0QWxsb2ModHlwZSwgZmllbGRzKSB7XG4gIGNvbnN0IGdldEl0ZW1BbGxvYyA9IGl0ZW0gPT4ge1xuICAgIGlmIChpdGVtLnNwYW4gPj0gMCkge1xuICAgICAgcmV0dXJuIGl0ZW0uc3BhbjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLmFsbG9jID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlbS5hbGxvYyhmaWVsZHNbaXRlbS5wcm9wZXJ0eV0pO1xuICAgIH0gZWxzZSBpZiAoJ2NvdW50JyBpbiBpdGVtICYmICdlbGVtZW50TGF5b3V0JyBpbiBpdGVtKSB7XG4gICAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tpdGVtLnByb3BlcnR5XTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGZpZWxkKSkge1xuICAgICAgICByZXR1cm4gZmllbGQubGVuZ3RoICogZ2V0SXRlbUFsbG9jKGl0ZW0uZWxlbWVudExheW91dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgnZmllbGRzJyBpbiBpdGVtKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgYFN0cnVjdHVyZWAgd2hvc2Ugc2l6ZSBuZWVkcyB0byBiZSByZWN1cnNpdmVseSBtZWFzdXJlZC5cbiAgICAgIHJldHVybiBnZXRBbGxvYyh7XG4gICAgICAgIGxheW91dDogaXRlbVxuICAgICAgfSwgZmllbGRzW2l0ZW0ucHJvcGVydHldKTtcbiAgICB9XG4gICAgLy8gQ291bGRuJ3QgZGV0ZXJtaW5lIGFsbG9jYXRlZCBzaXplIG9mIGxheW91dFxuICAgIHJldHVybiAwO1xuICB9O1xuICBsZXQgYWxsb2MgPSAwO1xuICB0eXBlLmxheW91dC5maWVsZHMuZm9yRWFjaChpdGVtID0+IHtcbiAgICBhbGxvYyArPSBnZXRJdGVtQWxsb2MoaXRlbSk7XG4gIH0pO1xuICByZXR1cm4gYWxsb2M7XG59XG5cbmZ1bmN0aW9uIGRlY29kZUxlbmd0aChieXRlcykge1xuICBsZXQgbGVuID0gMDtcbiAgbGV0IHNpemUgPSAwO1xuICBmb3IgKDs7KSB7XG4gICAgbGV0IGVsZW0gPSBieXRlcy5zaGlmdCgpO1xuICAgIGxlbiB8PSAoZWxlbSAmIDB4N2YpIDw8IHNpemUgKiA3O1xuICAgIHNpemUgKz0gMTtcbiAgICBpZiAoKGVsZW0gJiAweDgwKSA9PT0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBsZW47XG59XG5mdW5jdGlvbiBlbmNvZGVMZW5ndGgoYnl0ZXMsIGxlbikge1xuICBsZXQgcmVtX2xlbiA9IGxlbjtcbiAgZm9yICg7Oykge1xuICAgIGxldCBlbGVtID0gcmVtX2xlbiAmIDB4N2Y7XG4gICAgcmVtX2xlbiA+Pj0gNztcbiAgICBpZiAocmVtX2xlbiA9PSAwKSB7XG4gICAgICBieXRlcy5wdXNoKGVsZW0pO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW0gfD0gMHg4MDtcbiAgICAgIGJ5dGVzLnB1c2goZWxlbSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydCAoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbiAgfVxufVxuXG5jbGFzcyBDb21waWxlZEtleXMge1xuICBjb25zdHJ1Y3RvcihwYXllciwga2V5TWV0YU1hcCkge1xuICAgIHRoaXMucGF5ZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlNZXRhTWFwID0gdm9pZCAwO1xuICAgIHRoaXMucGF5ZXIgPSBwYXllcjtcbiAgICB0aGlzLmtleU1ldGFNYXAgPSBrZXlNZXRhTWFwO1xuICB9XG4gIHN0YXRpYyBjb21waWxlKGluc3RydWN0aW9ucywgcGF5ZXIpIHtcbiAgICBjb25zdCBrZXlNZXRhTWFwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGdldE9ySW5zZXJ0RGVmYXVsdCA9IHB1YmtleSA9PiB7XG4gICAgICBjb25zdCBhZGRyZXNzID0gcHVia2V5LnRvQmFzZTU4KCk7XG4gICAgICBsZXQga2V5TWV0YSA9IGtleU1ldGFNYXAuZ2V0KGFkZHJlc3MpO1xuICAgICAgaWYgKGtleU1ldGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXlNZXRhID0ge1xuICAgICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICBpc0ludm9rZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGtleU1ldGFNYXAuc2V0KGFkZHJlc3MsIGtleU1ldGEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGtleU1ldGE7XG4gICAgfTtcbiAgICBjb25zdCBwYXllcktleU1ldGEgPSBnZXRPckluc2VydERlZmF1bHQocGF5ZXIpO1xuICAgIHBheWVyS2V5TWV0YS5pc1NpZ25lciA9IHRydWU7XG4gICAgcGF5ZXJLZXlNZXRhLmlzV3JpdGFibGUgPSB0cnVlO1xuICAgIGZvciAoY29uc3QgaXggb2YgaW5zdHJ1Y3Rpb25zKSB7XG4gICAgICBnZXRPckluc2VydERlZmF1bHQoaXgucHJvZ3JhbUlkKS5pc0ludm9rZWQgPSB0cnVlO1xuICAgICAgZm9yIChjb25zdCBhY2NvdW50TWV0YSBvZiBpeC5rZXlzKSB7XG4gICAgICAgIGNvbnN0IGtleU1ldGEgPSBnZXRPckluc2VydERlZmF1bHQoYWNjb3VudE1ldGEucHVia2V5KTtcbiAgICAgICAga2V5TWV0YS5pc1NpZ25lciB8fD0gYWNjb3VudE1ldGEuaXNTaWduZXI7XG4gICAgICAgIGtleU1ldGEuaXNXcml0YWJsZSB8fD0gYWNjb3VudE1ldGEuaXNXcml0YWJsZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDb21waWxlZEtleXMocGF5ZXIsIGtleU1ldGFNYXApO1xuICB9XG4gIGdldE1lc3NhZ2VDb21wb25lbnRzKCkge1xuICAgIGNvbnN0IG1hcEVudHJpZXMgPSBbLi4udGhpcy5rZXlNZXRhTWFwLmVudHJpZXMoKV07XG4gICAgYXNzZXJ0KG1hcEVudHJpZXMubGVuZ3RoIDw9IDI1NiwgJ01heCBzdGF0aWMgYWNjb3VudCBrZXlzIGxlbmd0aCBleGNlZWRlZCcpO1xuICAgIGNvbnN0IHdyaXRhYmxlU2lnbmVycyA9IG1hcEVudHJpZXMuZmlsdGVyKChbLCBtZXRhXSkgPT4gbWV0YS5pc1NpZ25lciAmJiBtZXRhLmlzV3JpdGFibGUpO1xuICAgIGNvbnN0IHJlYWRvbmx5U2lnbmVycyA9IG1hcEVudHJpZXMuZmlsdGVyKChbLCBtZXRhXSkgPT4gbWV0YS5pc1NpZ25lciAmJiAhbWV0YS5pc1dyaXRhYmxlKTtcbiAgICBjb25zdCB3cml0YWJsZU5vblNpZ25lcnMgPSBtYXBFbnRyaWVzLmZpbHRlcigoWywgbWV0YV0pID0+ICFtZXRhLmlzU2lnbmVyICYmIG1ldGEuaXNXcml0YWJsZSk7XG4gICAgY29uc3QgcmVhZG9ubHlOb25TaWduZXJzID0gbWFwRW50cmllcy5maWx0ZXIoKFssIG1ldGFdKSA9PiAhbWV0YS5pc1NpZ25lciAmJiAhbWV0YS5pc1dyaXRhYmxlKTtcbiAgICBjb25zdCBoZWFkZXIgPSB7XG4gICAgICBudW1SZXF1aXJlZFNpZ25hdHVyZXM6IHdyaXRhYmxlU2lnbmVycy5sZW5ndGggKyByZWFkb25seVNpZ25lcnMubGVuZ3RoLFxuICAgICAgbnVtUmVhZG9ubHlTaWduZWRBY2NvdW50czogcmVhZG9ubHlTaWduZXJzLmxlbmd0aCxcbiAgICAgIG51bVJlYWRvbmx5VW5zaWduZWRBY2NvdW50czogcmVhZG9ubHlOb25TaWduZXJzLmxlbmd0aFxuICAgIH07XG5cbiAgICAvLyBzYW5pdHkgY2hlY2tzXG4gICAge1xuICAgICAgYXNzZXJ0KHdyaXRhYmxlU2lnbmVycy5sZW5ndGggPiAwLCAnRXhwZWN0ZWQgYXQgbGVhc3Qgb25lIHdyaXRhYmxlIHNpZ25lciBrZXknKTtcbiAgICAgIGNvbnN0IFtwYXllckFkZHJlc3NdID0gd3JpdGFibGVTaWduZXJzWzBdO1xuICAgICAgYXNzZXJ0KHBheWVyQWRkcmVzcyA9PT0gdGhpcy5wYXllci50b0Jhc2U1OCgpLCAnRXhwZWN0ZWQgZmlyc3Qgd3JpdGFibGUgc2lnbmVyIGtleSB0byBiZSB0aGUgZmVlIHBheWVyJyk7XG4gICAgfVxuICAgIGNvbnN0IHN0YXRpY0FjY291bnRLZXlzID0gWy4uLndyaXRhYmxlU2lnbmVycy5tYXAoKFthZGRyZXNzXSkgPT4gbmV3IFB1YmxpY0tleShhZGRyZXNzKSksIC4uLnJlYWRvbmx5U2lnbmVycy5tYXAoKFthZGRyZXNzXSkgPT4gbmV3IFB1YmxpY0tleShhZGRyZXNzKSksIC4uLndyaXRhYmxlTm9uU2lnbmVycy5tYXAoKFthZGRyZXNzXSkgPT4gbmV3IFB1YmxpY0tleShhZGRyZXNzKSksIC4uLnJlYWRvbmx5Tm9uU2lnbmVycy5tYXAoKFthZGRyZXNzXSkgPT4gbmV3IFB1YmxpY0tleShhZGRyZXNzKSldO1xuICAgIHJldHVybiBbaGVhZGVyLCBzdGF0aWNBY2NvdW50S2V5c107XG4gIH1cbiAgZXh0cmFjdFRhYmxlTG9va3VwKGxvb2t1cFRhYmxlKSB7XG4gICAgY29uc3QgW3dyaXRhYmxlSW5kZXhlcywgZHJhaW5lZFdyaXRhYmxlS2V5c10gPSB0aGlzLmRyYWluS2V5c0ZvdW5kSW5Mb29rdXBUYWJsZShsb29rdXBUYWJsZS5zdGF0ZS5hZGRyZXNzZXMsIGtleU1ldGEgPT4gIWtleU1ldGEuaXNTaWduZXIgJiYgIWtleU1ldGEuaXNJbnZva2VkICYmIGtleU1ldGEuaXNXcml0YWJsZSk7XG4gICAgY29uc3QgW3JlYWRvbmx5SW5kZXhlcywgZHJhaW5lZFJlYWRvbmx5S2V5c10gPSB0aGlzLmRyYWluS2V5c0ZvdW5kSW5Mb29rdXBUYWJsZShsb29rdXBUYWJsZS5zdGF0ZS5hZGRyZXNzZXMsIGtleU1ldGEgPT4gIWtleU1ldGEuaXNTaWduZXIgJiYgIWtleU1ldGEuaXNJbnZva2VkICYmICFrZXlNZXRhLmlzV3JpdGFibGUpO1xuXG4gICAgLy8gRG9uJ3QgZXh0cmFjdCBsb29rdXAgaWYgbm8ga2V5cyB3ZXJlIGZvdW5kXG4gICAgaWYgKHdyaXRhYmxlSW5kZXhlcy5sZW5ndGggPT09IDAgJiYgcmVhZG9ubHlJbmRleGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gW3tcbiAgICAgIGFjY291bnRLZXk6IGxvb2t1cFRhYmxlLmtleSxcbiAgICAgIHdyaXRhYmxlSW5kZXhlcyxcbiAgICAgIHJlYWRvbmx5SW5kZXhlc1xuICAgIH0sIHtcbiAgICAgIHdyaXRhYmxlOiBkcmFpbmVkV3JpdGFibGVLZXlzLFxuICAgICAgcmVhZG9ubHk6IGRyYWluZWRSZWFkb25seUtleXNcbiAgICB9XTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgZHJhaW5LZXlzRm91bmRJbkxvb2t1cFRhYmxlKGxvb2t1cFRhYmxlRW50cmllcywga2V5TWV0YUZpbHRlcikge1xuICAgIGNvbnN0IGxvb2t1cFRhYmxlSW5kZXhlcyA9IG5ldyBBcnJheSgpO1xuICAgIGNvbnN0IGRyYWluZWRLZXlzID0gbmV3IEFycmF5KCk7XG4gICAgZm9yIChjb25zdCBbYWRkcmVzcywga2V5TWV0YV0gb2YgdGhpcy5rZXlNZXRhTWFwLmVudHJpZXMoKSkge1xuICAgICAgaWYgKGtleU1ldGFGaWx0ZXIoa2V5TWV0YSkpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gbmV3IFB1YmxpY0tleShhZGRyZXNzKTtcbiAgICAgICAgY29uc3QgbG9va3VwVGFibGVJbmRleCA9IGxvb2t1cFRhYmxlRW50cmllcy5maW5kSW5kZXgoZW50cnkgPT4gZW50cnkuZXF1YWxzKGtleSkpO1xuICAgICAgICBpZiAobG9va3VwVGFibGVJbmRleCA+PSAwKSB7XG4gICAgICAgICAgYXNzZXJ0KGxvb2t1cFRhYmxlSW5kZXggPCAyNTYsICdNYXggbG9va3VwIHRhYmxlIGluZGV4IGV4Y2VlZGVkJyk7XG4gICAgICAgICAgbG9va3VwVGFibGVJbmRleGVzLnB1c2gobG9va3VwVGFibGVJbmRleCk7XG4gICAgICAgICAgZHJhaW5lZEtleXMucHVzaChrZXkpO1xuICAgICAgICAgIHRoaXMua2V5TWV0YU1hcC5kZWxldGUoYWRkcmVzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFtsb29rdXBUYWJsZUluZGV4ZXMsIGRyYWluZWRLZXlzXTtcbiAgfVxufVxuXG5jb25zdCBFTkRfT0ZfQlVGRkVSX0VSUk9SX01FU1NBR0UgPSAnUmVhY2hlZCBlbmQgb2YgYnVmZmVyIHVuZXhwZWN0ZWRseSc7XG5cbi8qKlxuICogRGVsZWdhdGVzIHRvIGBBcnJheSNzaGlmdGAsIGJ1dCB0aHJvd3MgaWYgdGhlIGFycmF5IGlzIHplcm8tbGVuZ3RoLlxuICovXG5mdW5jdGlvbiBndWFyZGVkU2hpZnQoYnl0ZUFycmF5KSB7XG4gIGlmIChieXRlQXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKEVORF9PRl9CVUZGRVJfRVJST1JfTUVTU0FHRSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheS5zaGlmdCgpO1xufVxuXG4vKipcbiAqIERlbGVnYXRlcyB0byBgQXJyYXkjc3BsaWNlYCwgYnV0IHRocm93cyBpZiB0aGUgc2VjdGlvbiBiZWluZyBzcGxpY2VkIG91dCBleHRlbmRzIHBhc3QgdGhlIGVuZCBvZlxuICogdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBndWFyZGVkU3BsaWNlKGJ5dGVBcnJheSwgLi4uYXJncykge1xuICBjb25zdCBbc3RhcnRdID0gYXJncztcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAyIC8vIEltcGxpZXMgdGhhdCBgZGVsZXRlQ291bnRgIHdhcyBzdXBwbGllZFxuICA/IHN0YXJ0ICsgKGFyZ3NbMV0gPz8gMCkgPiBieXRlQXJyYXkubGVuZ3RoIDogc3RhcnQgPj0gYnl0ZUFycmF5Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihFTkRfT0ZfQlVGRkVSX0VSUk9SX01FU1NBR0UpO1xuICB9XG4gIHJldHVybiBieXRlQXJyYXkuc3BsaWNlKC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIEFuIGluc3RydWN0aW9uIHRvIGV4ZWN1dGUgYnkgYSBwcm9ncmFtXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHByb2dyYW1JZEluZGV4XG4gKiBAcHJvcGVydHkge251bWJlcltdfSBhY2NvdW50c1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGRhdGFcbiAqL1xuXG4vKipcbiAqIE1lc3NhZ2UgY29uc3RydWN0b3IgYXJndW1lbnRzXG4gKi9cblxuLyoqXG4gKiBMaXN0IG9mIGluc3RydWN0aW9ucyB0byBiZSBwcm9jZXNzZWQgYXRvbWljYWxseVxuICovXG5jbGFzcyBNZXNzYWdlIHtcbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHRoaXMuaGVhZGVyID0gdm9pZCAwO1xuICAgIHRoaXMuYWNjb3VudEtleXMgPSB2b2lkIDA7XG4gICAgdGhpcy5yZWNlbnRCbG9ja2hhc2ggPSB2b2lkIDA7XG4gICAgdGhpcy5pbnN0cnVjdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pbmRleFRvUHJvZ3JhbUlkcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmhlYWRlciA9IGFyZ3MuaGVhZGVyO1xuICAgIHRoaXMuYWNjb3VudEtleXMgPSBhcmdzLmFjY291bnRLZXlzLm1hcChhY2NvdW50ID0+IG5ldyBQdWJsaWNLZXkoYWNjb3VudCkpO1xuICAgIHRoaXMucmVjZW50QmxvY2toYXNoID0gYXJncy5yZWNlbnRCbG9ja2hhc2g7XG4gICAgdGhpcy5pbnN0cnVjdGlvbnMgPSBhcmdzLmluc3RydWN0aW9ucztcbiAgICB0aGlzLmluc3RydWN0aW9ucy5mb3JFYWNoKGl4ID0+IHRoaXMuaW5kZXhUb1Byb2dyYW1JZHMuc2V0KGl4LnByb2dyYW1JZEluZGV4LCB0aGlzLmFjY291bnRLZXlzW2l4LnByb2dyYW1JZEluZGV4XSkpO1xuICB9XG4gIGdldCB2ZXJzaW9uKCkge1xuICAgIHJldHVybiAnbGVnYWN5JztcbiAgfVxuICBnZXQgc3RhdGljQWNjb3VudEtleXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWNjb3VudEtleXM7XG4gIH1cbiAgZ2V0IGNvbXBpbGVkSW5zdHJ1Y3Rpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9ucy5tYXAoaXggPT4gKHtcbiAgICAgIHByb2dyYW1JZEluZGV4OiBpeC5wcm9ncmFtSWRJbmRleCxcbiAgICAgIGFjY291bnRLZXlJbmRleGVzOiBpeC5hY2NvdW50cyxcbiAgICAgIGRhdGE6IGJzNTguZGVjb2RlKGl4LmRhdGEpXG4gICAgfSkpO1xuICB9XG4gIGdldCBhZGRyZXNzVGFibGVMb29rdXBzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBnZXRBY2NvdW50S2V5cygpIHtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2VBY2NvdW50S2V5cyh0aGlzLnN0YXRpY0FjY291bnRLZXlzKTtcbiAgfVxuICBzdGF0aWMgY29tcGlsZShhcmdzKSB7XG4gICAgY29uc3QgY29tcGlsZWRLZXlzID0gQ29tcGlsZWRLZXlzLmNvbXBpbGUoYXJncy5pbnN0cnVjdGlvbnMsIGFyZ3MucGF5ZXJLZXkpO1xuICAgIGNvbnN0IFtoZWFkZXIsIHN0YXRpY0FjY291bnRLZXlzXSA9IGNvbXBpbGVkS2V5cy5nZXRNZXNzYWdlQ29tcG9uZW50cygpO1xuICAgIGNvbnN0IGFjY291bnRLZXlzID0gbmV3IE1lc3NhZ2VBY2NvdW50S2V5cyhzdGF0aWNBY2NvdW50S2V5cyk7XG4gICAgY29uc3QgaW5zdHJ1Y3Rpb25zID0gYWNjb3VudEtleXMuY29tcGlsZUluc3RydWN0aW9ucyhhcmdzLmluc3RydWN0aW9ucykubWFwKGl4ID0+ICh7XG4gICAgICBwcm9ncmFtSWRJbmRleDogaXgucHJvZ3JhbUlkSW5kZXgsXG4gICAgICBhY2NvdW50czogaXguYWNjb3VudEtleUluZGV4ZXMsXG4gICAgICBkYXRhOiBiczU4LmVuY29kZShpeC5kYXRhKVxuICAgIH0pKTtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2Uoe1xuICAgICAgaGVhZGVyLFxuICAgICAgYWNjb3VudEtleXM6IHN0YXRpY0FjY291bnRLZXlzLFxuICAgICAgcmVjZW50QmxvY2toYXNoOiBhcmdzLnJlY2VudEJsb2NraGFzaCxcbiAgICAgIGluc3RydWN0aW9uc1xuICAgIH0pO1xuICB9XG4gIGlzQWNjb3VudFNpZ25lcihpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA8IHRoaXMuaGVhZGVyLm51bVJlcXVpcmVkU2lnbmF0dXJlcztcbiAgfVxuICBpc0FjY291bnRXcml0YWJsZShpbmRleCkge1xuICAgIGNvbnN0IG51bVNpZ25lZEFjY291bnRzID0gdGhpcy5oZWFkZXIubnVtUmVxdWlyZWRTaWduYXR1cmVzO1xuICAgIGlmIChpbmRleCA+PSB0aGlzLmhlYWRlci5udW1SZXF1aXJlZFNpZ25hdHVyZXMpIHtcbiAgICAgIGNvbnN0IHVuc2lnbmVkQWNjb3VudEluZGV4ID0gaW5kZXggLSBudW1TaWduZWRBY2NvdW50cztcbiAgICAgIGNvbnN0IG51bVVuc2lnbmVkQWNjb3VudHMgPSB0aGlzLmFjY291bnRLZXlzLmxlbmd0aCAtIG51bVNpZ25lZEFjY291bnRzO1xuICAgICAgY29uc3QgbnVtV3JpdGFibGVVbnNpZ25lZEFjY291bnRzID0gbnVtVW5zaWduZWRBY2NvdW50cyAtIHRoaXMuaGVhZGVyLm51bVJlYWRvbmx5VW5zaWduZWRBY2NvdW50cztcbiAgICAgIHJldHVybiB1bnNpZ25lZEFjY291bnRJbmRleCA8IG51bVdyaXRhYmxlVW5zaWduZWRBY2NvdW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbnVtV3JpdGFibGVTaWduZWRBY2NvdW50cyA9IG51bVNpZ25lZEFjY291bnRzIC0gdGhpcy5oZWFkZXIubnVtUmVhZG9ubHlTaWduZWRBY2NvdW50cztcbiAgICAgIHJldHVybiBpbmRleCA8IG51bVdyaXRhYmxlU2lnbmVkQWNjb3VudHM7XG4gICAgfVxuICB9XG4gIGlzUHJvZ3JhbUlkKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXhUb1Byb2dyYW1JZHMuaGFzKGluZGV4KTtcbiAgfVxuICBwcm9ncmFtSWRzKCkge1xuICAgIHJldHVybiBbLi4udGhpcy5pbmRleFRvUHJvZ3JhbUlkcy52YWx1ZXMoKV07XG4gIH1cbiAgbm9uUHJvZ3JhbUlkcygpIHtcbiAgICByZXR1cm4gdGhpcy5hY2NvdW50S2V5cy5maWx0ZXIoKF8sIGluZGV4KSA9PiAhdGhpcy5pc1Byb2dyYW1JZChpbmRleCkpO1xuICB9XG4gIHNlcmlhbGl6ZSgpIHtcbiAgICBjb25zdCBudW1LZXlzID0gdGhpcy5hY2NvdW50S2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleUNvdW50ID0gW107XG4gICAgZW5jb2RlTGVuZ3RoKGtleUNvdW50LCBudW1LZXlzKTtcbiAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSB0aGlzLmluc3RydWN0aW9ucy5tYXAoaW5zdHJ1Y3Rpb24gPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBhY2NvdW50cyxcbiAgICAgICAgcHJvZ3JhbUlkSW5kZXhcbiAgICAgIH0gPSBpbnN0cnVjdGlvbjtcbiAgICAgIGNvbnN0IGRhdGEgPSBBcnJheS5mcm9tKGJzNTguZGVjb2RlKGluc3RydWN0aW9uLmRhdGEpKTtcbiAgICAgIGxldCBrZXlJbmRpY2VzQ291bnQgPSBbXTtcbiAgICAgIGVuY29kZUxlbmd0aChrZXlJbmRpY2VzQ291bnQsIGFjY291bnRzLmxlbmd0aCk7XG4gICAgICBsZXQgZGF0YUNvdW50ID0gW107XG4gICAgICBlbmNvZGVMZW5ndGgoZGF0YUNvdW50LCBkYXRhLmxlbmd0aCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9ncmFtSWRJbmRleCxcbiAgICAgICAga2V5SW5kaWNlc0NvdW50OiBCdWZmZXIuZnJvbShrZXlJbmRpY2VzQ291bnQpLFxuICAgICAgICBrZXlJbmRpY2VzOiBhY2NvdW50cyxcbiAgICAgICAgZGF0YUxlbmd0aDogQnVmZmVyLmZyb20oZGF0YUNvdW50KSxcbiAgICAgICAgZGF0YVxuICAgICAgfTtcbiAgICB9KTtcbiAgICBsZXQgaW5zdHJ1Y3Rpb25Db3VudCA9IFtdO1xuICAgIGVuY29kZUxlbmd0aChpbnN0cnVjdGlvbkNvdW50LCBpbnN0cnVjdGlvbnMubGVuZ3RoKTtcbiAgICBsZXQgaW5zdHJ1Y3Rpb25CdWZmZXIgPSBCdWZmZXIuYWxsb2MoUEFDS0VUX0RBVEFfU0laRSk7XG4gICAgQnVmZmVyLmZyb20oaW5zdHJ1Y3Rpb25Db3VudCkuY29weShpbnN0cnVjdGlvbkJ1ZmZlcik7XG4gICAgbGV0IGluc3RydWN0aW9uQnVmZmVyTGVuZ3RoID0gaW5zdHJ1Y3Rpb25Db3VudC5sZW5ndGg7XG4gICAgaW5zdHJ1Y3Rpb25zLmZvckVhY2goaW5zdHJ1Y3Rpb24gPT4ge1xuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb25MYXlvdXQgPSBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTgoJ3Byb2dyYW1JZEluZGV4JyksIEJ1ZmZlckxheW91dC5ibG9iKGluc3RydWN0aW9uLmtleUluZGljZXNDb3VudC5sZW5ndGgsICdrZXlJbmRpY2VzQ291bnQnKSwgQnVmZmVyTGF5b3V0LnNlcShCdWZmZXJMYXlvdXQudTgoJ2tleUluZGV4JyksIGluc3RydWN0aW9uLmtleUluZGljZXMubGVuZ3RoLCAna2V5SW5kaWNlcycpLCBCdWZmZXJMYXlvdXQuYmxvYihpbnN0cnVjdGlvbi5kYXRhTGVuZ3RoLmxlbmd0aCwgJ2RhdGFMZW5ndGgnKSwgQnVmZmVyTGF5b3V0LnNlcShCdWZmZXJMYXlvdXQudTgoJ3VzZXJkYXR1bScpLCBpbnN0cnVjdGlvbi5kYXRhLmxlbmd0aCwgJ2RhdGEnKV0pO1xuICAgICAgY29uc3QgbGVuZ3RoID0gaW5zdHJ1Y3Rpb25MYXlvdXQuZW5jb2RlKGluc3RydWN0aW9uLCBpbnN0cnVjdGlvbkJ1ZmZlciwgaW5zdHJ1Y3Rpb25CdWZmZXJMZW5ndGgpO1xuICAgICAgaW5zdHJ1Y3Rpb25CdWZmZXJMZW5ndGggKz0gbGVuZ3RoO1xuICAgIH0pO1xuICAgIGluc3RydWN0aW9uQnVmZmVyID0gaW5zdHJ1Y3Rpb25CdWZmZXIuc2xpY2UoMCwgaW5zdHJ1Y3Rpb25CdWZmZXJMZW5ndGgpO1xuICAgIGNvbnN0IHNpZ25EYXRhTGF5b3V0ID0gQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LmJsb2IoMSwgJ251bVJlcXVpcmVkU2lnbmF0dXJlcycpLCBCdWZmZXJMYXlvdXQuYmxvYigxLCAnbnVtUmVhZG9ubHlTaWduZWRBY2NvdW50cycpLCBCdWZmZXJMYXlvdXQuYmxvYigxLCAnbnVtUmVhZG9ubHlVbnNpZ25lZEFjY291bnRzJyksIEJ1ZmZlckxheW91dC5ibG9iKGtleUNvdW50Lmxlbmd0aCwgJ2tleUNvdW50JyksIEJ1ZmZlckxheW91dC5zZXEocHVibGljS2V5KCdrZXknKSwgbnVtS2V5cywgJ2tleXMnKSwgcHVibGljS2V5KCdyZWNlbnRCbG9ja2hhc2gnKV0pO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0ge1xuICAgICAgbnVtUmVxdWlyZWRTaWduYXR1cmVzOiBCdWZmZXIuZnJvbShbdGhpcy5oZWFkZXIubnVtUmVxdWlyZWRTaWduYXR1cmVzXSksXG4gICAgICBudW1SZWFkb25seVNpZ25lZEFjY291bnRzOiBCdWZmZXIuZnJvbShbdGhpcy5oZWFkZXIubnVtUmVhZG9ubHlTaWduZWRBY2NvdW50c10pLFxuICAgICAgbnVtUmVhZG9ubHlVbnNpZ25lZEFjY291bnRzOiBCdWZmZXIuZnJvbShbdGhpcy5oZWFkZXIubnVtUmVhZG9ubHlVbnNpZ25lZEFjY291bnRzXSksXG4gICAgICBrZXlDb3VudDogQnVmZmVyLmZyb20oa2V5Q291bnQpLFxuICAgICAga2V5czogdGhpcy5hY2NvdW50S2V5cy5tYXAoa2V5ID0+IHRvQnVmZmVyKGtleS50b0J5dGVzKCkpKSxcbiAgICAgIHJlY2VudEJsb2NraGFzaDogYnM1OC5kZWNvZGUodGhpcy5yZWNlbnRCbG9ja2hhc2gpXG4gICAgfTtcbiAgICBsZXQgc2lnbkRhdGEgPSBCdWZmZXIuYWxsb2MoMjA0OCk7XG4gICAgY29uc3QgbGVuZ3RoID0gc2lnbkRhdGFMYXlvdXQuZW5jb2RlKHRyYW5zYWN0aW9uLCBzaWduRGF0YSk7XG4gICAgaW5zdHJ1Y3Rpb25CdWZmZXIuY29weShzaWduRGF0YSwgbGVuZ3RoKTtcbiAgICByZXR1cm4gc2lnbkRhdGEuc2xpY2UoMCwgbGVuZ3RoICsgaW5zdHJ1Y3Rpb25CdWZmZXIubGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgYSBjb21waWxlZCBtZXNzYWdlIGludG8gYSBNZXNzYWdlIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyBmcm9tKGJ1ZmZlcikge1xuICAgIC8vIFNsaWNlIHVwIHdpcmUgZGF0YVxuICAgIGxldCBieXRlQXJyYXkgPSBbLi4uYnVmZmVyXTtcbiAgICBjb25zdCBudW1SZXF1aXJlZFNpZ25hdHVyZXMgPSBndWFyZGVkU2hpZnQoYnl0ZUFycmF5KTtcbiAgICBpZiAobnVtUmVxdWlyZWRTaWduYXR1cmVzICE9PSAobnVtUmVxdWlyZWRTaWduYXR1cmVzICYgVkVSU0lPTl9QUkVGSVhfTUFTSykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVmVyc2lvbmVkIG1lc3NhZ2VzIG11c3QgYmUgZGVzZXJpYWxpemVkIHdpdGggVmVyc2lvbmVkTWVzc2FnZS5kZXNlcmlhbGl6ZSgpJyk7XG4gICAgfVxuICAgIGNvbnN0IG51bVJlYWRvbmx5U2lnbmVkQWNjb3VudHMgPSBndWFyZGVkU2hpZnQoYnl0ZUFycmF5KTtcbiAgICBjb25zdCBudW1SZWFkb25seVVuc2lnbmVkQWNjb3VudHMgPSBndWFyZGVkU2hpZnQoYnl0ZUFycmF5KTtcbiAgICBjb25zdCBhY2NvdW50Q291bnQgPSBkZWNvZGVMZW5ndGgoYnl0ZUFycmF5KTtcbiAgICBsZXQgYWNjb3VudEtleXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjY291bnRDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBhY2NvdW50ID0gZ3VhcmRlZFNwbGljZShieXRlQXJyYXksIDAsIFBVQkxJQ19LRVlfTEVOR1RIKTtcbiAgICAgIGFjY291bnRLZXlzLnB1c2gobmV3IFB1YmxpY0tleShCdWZmZXIuZnJvbShhY2NvdW50KSkpO1xuICAgIH1cbiAgICBjb25zdCByZWNlbnRCbG9ja2hhc2ggPSBndWFyZGVkU3BsaWNlKGJ5dGVBcnJheSwgMCwgUFVCTElDX0tFWV9MRU5HVEgpO1xuICAgIGNvbnN0IGluc3RydWN0aW9uQ291bnQgPSBkZWNvZGVMZW5ndGgoYnl0ZUFycmF5KTtcbiAgICBsZXQgaW5zdHJ1Y3Rpb25zID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0cnVjdGlvbkNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHByb2dyYW1JZEluZGV4ID0gZ3VhcmRlZFNoaWZ0KGJ5dGVBcnJheSk7XG4gICAgICBjb25zdCBhY2NvdW50Q291bnQgPSBkZWNvZGVMZW5ndGgoYnl0ZUFycmF5KTtcbiAgICAgIGNvbnN0IGFjY291bnRzID0gZ3VhcmRlZFNwbGljZShieXRlQXJyYXksIDAsIGFjY291bnRDb3VudCk7XG4gICAgICBjb25zdCBkYXRhTGVuZ3RoID0gZGVjb2RlTGVuZ3RoKGJ5dGVBcnJheSk7XG4gICAgICBjb25zdCBkYXRhU2xpY2UgPSBndWFyZGVkU3BsaWNlKGJ5dGVBcnJheSwgMCwgZGF0YUxlbmd0aCk7XG4gICAgICBjb25zdCBkYXRhID0gYnM1OC5lbmNvZGUoQnVmZmVyLmZyb20oZGF0YVNsaWNlKSk7XG4gICAgICBpbnN0cnVjdGlvbnMucHVzaCh7XG4gICAgICAgIHByb2dyYW1JZEluZGV4LFxuICAgICAgICBhY2NvdW50cyxcbiAgICAgICAgZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2VBcmdzID0ge1xuICAgICAgaGVhZGVyOiB7XG4gICAgICAgIG51bVJlcXVpcmVkU2lnbmF0dXJlcyxcbiAgICAgICAgbnVtUmVhZG9ubHlTaWduZWRBY2NvdW50cyxcbiAgICAgICAgbnVtUmVhZG9ubHlVbnNpZ25lZEFjY291bnRzXG4gICAgICB9LFxuICAgICAgcmVjZW50QmxvY2toYXNoOiBiczU4LmVuY29kZShCdWZmZXIuZnJvbShyZWNlbnRCbG9ja2hhc2gpKSxcbiAgICAgIGFjY291bnRLZXlzLFxuICAgICAgaW5zdHJ1Y3Rpb25zXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2UobWVzc2FnZUFyZ3MpO1xuICB9XG59XG5cbi8qKlxuICogTWVzc2FnZSBjb25zdHJ1Y3RvciBhcmd1bWVudHNcbiAqL1xuXG5jbGFzcyBNZXNzYWdlVjAge1xuICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgdGhpcy5oZWFkZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5zdGF0aWNBY2NvdW50S2V5cyA9IHZvaWQgMDtcbiAgICB0aGlzLnJlY2VudEJsb2NraGFzaCA9IHZvaWQgMDtcbiAgICB0aGlzLmNvbXBpbGVkSW5zdHJ1Y3Rpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuYWRkcmVzc1RhYmxlTG9va3VwcyA9IHZvaWQgMDtcbiAgICB0aGlzLmhlYWRlciA9IGFyZ3MuaGVhZGVyO1xuICAgIHRoaXMuc3RhdGljQWNjb3VudEtleXMgPSBhcmdzLnN0YXRpY0FjY291bnRLZXlzO1xuICAgIHRoaXMucmVjZW50QmxvY2toYXNoID0gYXJncy5yZWNlbnRCbG9ja2hhc2g7XG4gICAgdGhpcy5jb21waWxlZEluc3RydWN0aW9ucyA9IGFyZ3MuY29tcGlsZWRJbnN0cnVjdGlvbnM7XG4gICAgdGhpcy5hZGRyZXNzVGFibGVMb29rdXBzID0gYXJncy5hZGRyZXNzVGFibGVMb29rdXBzO1xuICB9XG4gIGdldCB2ZXJzaW9uKCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGdldCBudW1BY2NvdW50S2V5c0Zyb21Mb29rdXBzKCkge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChjb25zdCBsb29rdXAgb2YgdGhpcy5hZGRyZXNzVGFibGVMb29rdXBzKSB7XG4gICAgICBjb3VudCArPSBsb29rdXAucmVhZG9ubHlJbmRleGVzLmxlbmd0aCArIGxvb2t1cC53cml0YWJsZUluZGV4ZXMubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gY291bnQ7XG4gIH1cbiAgZ2V0QWNjb3VudEtleXMoYXJncykge1xuICAgIGxldCBhY2NvdW50S2V5c0Zyb21Mb29rdXBzO1xuICAgIGlmIChhcmdzICYmICdhY2NvdW50S2V5c0Zyb21Mb29rdXBzJyBpbiBhcmdzICYmIGFyZ3MuYWNjb3VudEtleXNGcm9tTG9va3Vwcykge1xuICAgICAgaWYgKHRoaXMubnVtQWNjb3VudEtleXNGcm9tTG9va3VwcyAhPSBhcmdzLmFjY291bnRLZXlzRnJvbUxvb2t1cHMud3JpdGFibGUubGVuZ3RoICsgYXJncy5hY2NvdW50S2V5c0Zyb21Mb29rdXBzLnJlYWRvbmx5Lmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgYWNjb3VudCBrZXlzIGJlY2F1c2Ugb2YgYSBtaXNtYXRjaCBpbiB0aGUgbnVtYmVyIG9mIGFjY291bnQga2V5cyBmcm9tIGxvb2t1cHMnKTtcbiAgICAgIH1cbiAgICAgIGFjY291bnRLZXlzRnJvbUxvb2t1cHMgPSBhcmdzLmFjY291bnRLZXlzRnJvbUxvb2t1cHM7XG4gICAgfSBlbHNlIGlmIChhcmdzICYmICdhZGRyZXNzTG9va3VwVGFibGVBY2NvdW50cycgaW4gYXJncyAmJiBhcmdzLmFkZHJlc3NMb29rdXBUYWJsZUFjY291bnRzKSB7XG4gICAgICBhY2NvdW50S2V5c0Zyb21Mb29rdXBzID0gdGhpcy5yZXNvbHZlQWRkcmVzc1RhYmxlTG9va3VwcyhhcmdzLmFkZHJlc3NMb29rdXBUYWJsZUFjY291bnRzKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYWRkcmVzc1RhYmxlTG9va3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgYWNjb3VudCBrZXlzIGJlY2F1c2UgYWRkcmVzcyB0YWJsZSBsb29rdXBzIHdlcmUgbm90IHJlc29sdmVkJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgTWVzc2FnZUFjY291bnRLZXlzKHRoaXMuc3RhdGljQWNjb3VudEtleXMsIGFjY291bnRLZXlzRnJvbUxvb2t1cHMpO1xuICB9XG4gIGlzQWNjb3VudFNpZ25lcihpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA8IHRoaXMuaGVhZGVyLm51bVJlcXVpcmVkU2lnbmF0dXJlcztcbiAgfVxuICBpc0FjY291bnRXcml0YWJsZShpbmRleCkge1xuICAgIGNvbnN0IG51bVNpZ25lZEFjY291bnRzID0gdGhpcy5oZWFkZXIubnVtUmVxdWlyZWRTaWduYXR1cmVzO1xuICAgIGNvbnN0IG51bVN0YXRpY0FjY291bnRLZXlzID0gdGhpcy5zdGF0aWNBY2NvdW50S2V5cy5sZW5ndGg7XG4gICAgaWYgKGluZGV4ID49IG51bVN0YXRpY0FjY291bnRLZXlzKSB7XG4gICAgICBjb25zdCBsb29rdXBBY2NvdW50S2V5c0luZGV4ID0gaW5kZXggLSBudW1TdGF0aWNBY2NvdW50S2V5cztcbiAgICAgIGNvbnN0IG51bVdyaXRhYmxlTG9va3VwQWNjb3VudEtleXMgPSB0aGlzLmFkZHJlc3NUYWJsZUxvb2t1cHMucmVkdWNlKChjb3VudCwgbG9va3VwKSA9PiBjb3VudCArIGxvb2t1cC53cml0YWJsZUluZGV4ZXMubGVuZ3RoLCAwKTtcbiAgICAgIHJldHVybiBsb29rdXBBY2NvdW50S2V5c0luZGV4IDwgbnVtV3JpdGFibGVMb29rdXBBY2NvdW50S2V5cztcbiAgICB9IGVsc2UgaWYgKGluZGV4ID49IHRoaXMuaGVhZGVyLm51bVJlcXVpcmVkU2lnbmF0dXJlcykge1xuICAgICAgY29uc3QgdW5zaWduZWRBY2NvdW50SW5kZXggPSBpbmRleCAtIG51bVNpZ25lZEFjY291bnRzO1xuICAgICAgY29uc3QgbnVtVW5zaWduZWRBY2NvdW50cyA9IG51bVN0YXRpY0FjY291bnRLZXlzIC0gbnVtU2lnbmVkQWNjb3VudHM7XG4gICAgICBjb25zdCBudW1Xcml0YWJsZVVuc2lnbmVkQWNjb3VudHMgPSBudW1VbnNpZ25lZEFjY291bnRzIC0gdGhpcy5oZWFkZXIubnVtUmVhZG9ubHlVbnNpZ25lZEFjY291bnRzO1xuICAgICAgcmV0dXJuIHVuc2lnbmVkQWNjb3VudEluZGV4IDwgbnVtV3JpdGFibGVVbnNpZ25lZEFjY291bnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBudW1Xcml0YWJsZVNpZ25lZEFjY291bnRzID0gbnVtU2lnbmVkQWNjb3VudHMgLSB0aGlzLmhlYWRlci5udW1SZWFkb25seVNpZ25lZEFjY291bnRzO1xuICAgICAgcmV0dXJuIGluZGV4IDwgbnVtV3JpdGFibGVTaWduZWRBY2NvdW50cztcbiAgICB9XG4gIH1cbiAgcmVzb2x2ZUFkZHJlc3NUYWJsZUxvb2t1cHMoYWRkcmVzc0xvb2t1cFRhYmxlQWNjb3VudHMpIHtcbiAgICBjb25zdCBhY2NvdW50S2V5c0Zyb21Mb29rdXBzID0ge1xuICAgICAgd3JpdGFibGU6IFtdLFxuICAgICAgcmVhZG9ubHk6IFtdXG4gICAgfTtcbiAgICBmb3IgKGNvbnN0IHRhYmxlTG9va3VwIG9mIHRoaXMuYWRkcmVzc1RhYmxlTG9va3Vwcykge1xuICAgICAgY29uc3QgdGFibGVBY2NvdW50ID0gYWRkcmVzc0xvb2t1cFRhYmxlQWNjb3VudHMuZmluZChhY2NvdW50ID0+IGFjY291bnQua2V5LmVxdWFscyh0YWJsZUxvb2t1cC5hY2NvdW50S2V5KSk7XG4gICAgICBpZiAoIXRhYmxlQWNjb3VudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmaW5kIGFkZHJlc3MgbG9va3VwIHRhYmxlIGFjY291bnQgZm9yIHRhYmxlIGtleSAke3RhYmxlTG9va3VwLmFjY291bnRLZXkudG9CYXNlNTgoKX1gKTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgdGFibGVMb29rdXAud3JpdGFibGVJbmRleGVzKSB7XG4gICAgICAgIGlmIChpbmRleCA8IHRhYmxlQWNjb3VudC5zdGF0ZS5hZGRyZXNzZXMubGVuZ3RoKSB7XG4gICAgICAgICAgYWNjb3VudEtleXNGcm9tTG9va3Vwcy53cml0YWJsZS5wdXNoKHRhYmxlQWNjb3VudC5zdGF0ZS5hZGRyZXNzZXNbaW5kZXhdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmaW5kIGFkZHJlc3MgZm9yIGluZGV4ICR7aW5kZXh9IGluIGFkZHJlc3MgbG9va3VwIHRhYmxlICR7dGFibGVMb29rdXAuYWNjb3VudEtleS50b0Jhc2U1OCgpfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIHRhYmxlTG9va3VwLnJlYWRvbmx5SW5kZXhlcykge1xuICAgICAgICBpZiAoaW5kZXggPCB0YWJsZUFjY291bnQuc3RhdGUuYWRkcmVzc2VzLmxlbmd0aCkge1xuICAgICAgICAgIGFjY291bnRLZXlzRnJvbUxvb2t1cHMucmVhZG9ubHkucHVzaCh0YWJsZUFjY291bnQuc3RhdGUuYWRkcmVzc2VzW2luZGV4XSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmluZCBhZGRyZXNzIGZvciBpbmRleCAke2luZGV4fSBpbiBhZGRyZXNzIGxvb2t1cCB0YWJsZSAke3RhYmxlTG9va3VwLmFjY291bnRLZXkudG9CYXNlNTgoKX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWNjb3VudEtleXNGcm9tTG9va3VwcztcbiAgfVxuICBzdGF0aWMgY29tcGlsZShhcmdzKSB7XG4gICAgY29uc3QgY29tcGlsZWRLZXlzID0gQ29tcGlsZWRLZXlzLmNvbXBpbGUoYXJncy5pbnN0cnVjdGlvbnMsIGFyZ3MucGF5ZXJLZXkpO1xuICAgIGNvbnN0IGFkZHJlc3NUYWJsZUxvb2t1cHMgPSBuZXcgQXJyYXkoKTtcbiAgICBjb25zdCBhY2NvdW50S2V5c0Zyb21Mb29rdXBzID0ge1xuICAgICAgd3JpdGFibGU6IG5ldyBBcnJheSgpLFxuICAgICAgcmVhZG9ubHk6IG5ldyBBcnJheSgpXG4gICAgfTtcbiAgICBjb25zdCBsb29rdXBUYWJsZUFjY291bnRzID0gYXJncy5hZGRyZXNzTG9va3VwVGFibGVBY2NvdW50cyB8fCBbXTtcbiAgICBmb3IgKGNvbnN0IGxvb2t1cFRhYmxlIG9mIGxvb2t1cFRhYmxlQWNjb3VudHMpIHtcbiAgICAgIGNvbnN0IGV4dHJhY3RSZXN1bHQgPSBjb21waWxlZEtleXMuZXh0cmFjdFRhYmxlTG9va3VwKGxvb2t1cFRhYmxlKTtcbiAgICAgIGlmIChleHRyYWN0UmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgW2FkZHJlc3NUYWJsZUxvb2t1cCwge1xuICAgICAgICAgIHdyaXRhYmxlLFxuICAgICAgICAgIHJlYWRvbmx5XG4gICAgICAgIH1dID0gZXh0cmFjdFJlc3VsdDtcbiAgICAgICAgYWRkcmVzc1RhYmxlTG9va3Vwcy5wdXNoKGFkZHJlc3NUYWJsZUxvb2t1cCk7XG4gICAgICAgIGFjY291bnRLZXlzRnJvbUxvb2t1cHMud3JpdGFibGUucHVzaCguLi53cml0YWJsZSk7XG4gICAgICAgIGFjY291bnRLZXlzRnJvbUxvb2t1cHMucmVhZG9ubHkucHVzaCguLi5yZWFkb25seSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IFtoZWFkZXIsIHN0YXRpY0FjY291bnRLZXlzXSA9IGNvbXBpbGVkS2V5cy5nZXRNZXNzYWdlQ29tcG9uZW50cygpO1xuICAgIGNvbnN0IGFjY291bnRLZXlzID0gbmV3IE1lc3NhZ2VBY2NvdW50S2V5cyhzdGF0aWNBY2NvdW50S2V5cywgYWNjb3VudEtleXNGcm9tTG9va3Vwcyk7XG4gICAgY29uc3QgY29tcGlsZWRJbnN0cnVjdGlvbnMgPSBhY2NvdW50S2V5cy5jb21waWxlSW5zdHJ1Y3Rpb25zKGFyZ3MuaW5zdHJ1Y3Rpb25zKTtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2VWMCh7XG4gICAgICBoZWFkZXIsXG4gICAgICBzdGF0aWNBY2NvdW50S2V5cyxcbiAgICAgIHJlY2VudEJsb2NraGFzaDogYXJncy5yZWNlbnRCbG9ja2hhc2gsXG4gICAgICBjb21waWxlZEluc3RydWN0aW9ucyxcbiAgICAgIGFkZHJlc3NUYWJsZUxvb2t1cHNcbiAgICB9KTtcbiAgfVxuICBzZXJpYWxpemUoKSB7XG4gICAgY29uc3QgZW5jb2RlZFN0YXRpY0FjY291bnRLZXlzTGVuZ3RoID0gQXJyYXkoKTtcbiAgICBlbmNvZGVMZW5ndGgoZW5jb2RlZFN0YXRpY0FjY291bnRLZXlzTGVuZ3RoLCB0aGlzLnN0YXRpY0FjY291bnRLZXlzLmxlbmd0aCk7XG4gICAgY29uc3Qgc2VyaWFsaXplZEluc3RydWN0aW9ucyA9IHRoaXMuc2VyaWFsaXplSW5zdHJ1Y3Rpb25zKCk7XG4gICAgY29uc3QgZW5jb2RlZEluc3RydWN0aW9uc0xlbmd0aCA9IEFycmF5KCk7XG4gICAgZW5jb2RlTGVuZ3RoKGVuY29kZWRJbnN0cnVjdGlvbnNMZW5ndGgsIHRoaXMuY29tcGlsZWRJbnN0cnVjdGlvbnMubGVuZ3RoKTtcbiAgICBjb25zdCBzZXJpYWxpemVkQWRkcmVzc1RhYmxlTG9va3VwcyA9IHRoaXMuc2VyaWFsaXplQWRkcmVzc1RhYmxlTG9va3VwcygpO1xuICAgIGNvbnN0IGVuY29kZWRBZGRyZXNzVGFibGVMb29rdXBzTGVuZ3RoID0gQXJyYXkoKTtcbiAgICBlbmNvZGVMZW5ndGgoZW5jb2RlZEFkZHJlc3NUYWJsZUxvb2t1cHNMZW5ndGgsIHRoaXMuYWRkcmVzc1RhYmxlTG9va3Vwcy5sZW5ndGgpO1xuICAgIGNvbnN0IG1lc3NhZ2VMYXlvdXQgPSBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTgoJ3ByZWZpeCcpLCBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTgoJ251bVJlcXVpcmVkU2lnbmF0dXJlcycpLCBCdWZmZXJMYXlvdXQudTgoJ251bVJlYWRvbmx5U2lnbmVkQWNjb3VudHMnKSwgQnVmZmVyTGF5b3V0LnU4KCdudW1SZWFkb25seVVuc2lnbmVkQWNjb3VudHMnKV0sICdoZWFkZXInKSwgQnVmZmVyTGF5b3V0LmJsb2IoZW5jb2RlZFN0YXRpY0FjY291bnRLZXlzTGVuZ3RoLmxlbmd0aCwgJ3N0YXRpY0FjY291bnRLZXlzTGVuZ3RoJyksIEJ1ZmZlckxheW91dC5zZXEocHVibGljS2V5KCksIHRoaXMuc3RhdGljQWNjb3VudEtleXMubGVuZ3RoLCAnc3RhdGljQWNjb3VudEtleXMnKSwgcHVibGljS2V5KCdyZWNlbnRCbG9ja2hhc2gnKSwgQnVmZmVyTGF5b3V0LmJsb2IoZW5jb2RlZEluc3RydWN0aW9uc0xlbmd0aC5sZW5ndGgsICdpbnN0cnVjdGlvbnNMZW5ndGgnKSwgQnVmZmVyTGF5b3V0LmJsb2Ioc2VyaWFsaXplZEluc3RydWN0aW9ucy5sZW5ndGgsICdzZXJpYWxpemVkSW5zdHJ1Y3Rpb25zJyksIEJ1ZmZlckxheW91dC5ibG9iKGVuY29kZWRBZGRyZXNzVGFibGVMb29rdXBzTGVuZ3RoLmxlbmd0aCwgJ2FkZHJlc3NUYWJsZUxvb2t1cHNMZW5ndGgnKSwgQnVmZmVyTGF5b3V0LmJsb2Ioc2VyaWFsaXplZEFkZHJlc3NUYWJsZUxvb2t1cHMubGVuZ3RoLCAnc2VyaWFsaXplZEFkZHJlc3NUYWJsZUxvb2t1cHMnKV0pO1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRNZXNzYWdlID0gbmV3IFVpbnQ4QXJyYXkoUEFDS0VUX0RBVEFfU0laRSk7XG4gICAgY29uc3QgTUVTU0FHRV9WRVJTSU9OXzBfUFJFRklYID0gMSA8PCA3O1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRNZXNzYWdlTGVuZ3RoID0gbWVzc2FnZUxheW91dC5lbmNvZGUoe1xuICAgICAgcHJlZml4OiBNRVNTQUdFX1ZFUlNJT05fMF9QUkVGSVgsXG4gICAgICBoZWFkZXI6IHRoaXMuaGVhZGVyLFxuICAgICAgc3RhdGljQWNjb3VudEtleXNMZW5ndGg6IG5ldyBVaW50OEFycmF5KGVuY29kZWRTdGF0aWNBY2NvdW50S2V5c0xlbmd0aCksXG4gICAgICBzdGF0aWNBY2NvdW50S2V5czogdGhpcy5zdGF0aWNBY2NvdW50S2V5cy5tYXAoa2V5ID0+IGtleS50b0J5dGVzKCkpLFxuICAgICAgcmVjZW50QmxvY2toYXNoOiBiczU4LmRlY29kZSh0aGlzLnJlY2VudEJsb2NraGFzaCksXG4gICAgICBpbnN0cnVjdGlvbnNMZW5ndGg6IG5ldyBVaW50OEFycmF5KGVuY29kZWRJbnN0cnVjdGlvbnNMZW5ndGgpLFxuICAgICAgc2VyaWFsaXplZEluc3RydWN0aW9ucyxcbiAgICAgIGFkZHJlc3NUYWJsZUxvb2t1cHNMZW5ndGg6IG5ldyBVaW50OEFycmF5KGVuY29kZWRBZGRyZXNzVGFibGVMb29rdXBzTGVuZ3RoKSxcbiAgICAgIHNlcmlhbGl6ZWRBZGRyZXNzVGFibGVMb29rdXBzXG4gICAgfSwgc2VyaWFsaXplZE1lc3NhZ2UpO1xuICAgIHJldHVybiBzZXJpYWxpemVkTWVzc2FnZS5zbGljZSgwLCBzZXJpYWxpemVkTWVzc2FnZUxlbmd0aCk7XG4gIH1cbiAgc2VyaWFsaXplSW5zdHJ1Y3Rpb25zKCkge1xuICAgIGxldCBzZXJpYWxpemVkTGVuZ3RoID0gMDtcbiAgICBjb25zdCBzZXJpYWxpemVkSW5zdHJ1Y3Rpb25zID0gbmV3IFVpbnQ4QXJyYXkoUEFDS0VUX0RBVEFfU0laRSk7XG4gICAgZm9yIChjb25zdCBpbnN0cnVjdGlvbiBvZiB0aGlzLmNvbXBpbGVkSW5zdHJ1Y3Rpb25zKSB7XG4gICAgICBjb25zdCBlbmNvZGVkQWNjb3VudEtleUluZGV4ZXNMZW5ndGggPSBBcnJheSgpO1xuICAgICAgZW5jb2RlTGVuZ3RoKGVuY29kZWRBY2NvdW50S2V5SW5kZXhlc0xlbmd0aCwgaW5zdHJ1Y3Rpb24uYWNjb3VudEtleUluZGV4ZXMubGVuZ3RoKTtcbiAgICAgIGNvbnN0IGVuY29kZWREYXRhTGVuZ3RoID0gQXJyYXkoKTtcbiAgICAgIGVuY29kZUxlbmd0aChlbmNvZGVkRGF0YUxlbmd0aCwgaW5zdHJ1Y3Rpb24uZGF0YS5sZW5ndGgpO1xuICAgICAgY29uc3QgaW5zdHJ1Y3Rpb25MYXlvdXQgPSBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTgoJ3Byb2dyYW1JZEluZGV4JyksIEJ1ZmZlckxheW91dC5ibG9iKGVuY29kZWRBY2NvdW50S2V5SW5kZXhlc0xlbmd0aC5sZW5ndGgsICdlbmNvZGVkQWNjb3VudEtleUluZGV4ZXNMZW5ndGgnKSwgQnVmZmVyTGF5b3V0LnNlcShCdWZmZXJMYXlvdXQudTgoKSwgaW5zdHJ1Y3Rpb24uYWNjb3VudEtleUluZGV4ZXMubGVuZ3RoLCAnYWNjb3VudEtleUluZGV4ZXMnKSwgQnVmZmVyTGF5b3V0LmJsb2IoZW5jb2RlZERhdGFMZW5ndGgubGVuZ3RoLCAnZW5jb2RlZERhdGFMZW5ndGgnKSwgQnVmZmVyTGF5b3V0LmJsb2IoaW5zdHJ1Y3Rpb24uZGF0YS5sZW5ndGgsICdkYXRhJyldKTtcbiAgICAgIHNlcmlhbGl6ZWRMZW5ndGggKz0gaW5zdHJ1Y3Rpb25MYXlvdXQuZW5jb2RlKHtcbiAgICAgICAgcHJvZ3JhbUlkSW5kZXg6IGluc3RydWN0aW9uLnByb2dyYW1JZEluZGV4LFxuICAgICAgICBlbmNvZGVkQWNjb3VudEtleUluZGV4ZXNMZW5ndGg6IG5ldyBVaW50OEFycmF5KGVuY29kZWRBY2NvdW50S2V5SW5kZXhlc0xlbmd0aCksXG4gICAgICAgIGFjY291bnRLZXlJbmRleGVzOiBpbnN0cnVjdGlvbi5hY2NvdW50S2V5SW5kZXhlcyxcbiAgICAgICAgZW5jb2RlZERhdGFMZW5ndGg6IG5ldyBVaW50OEFycmF5KGVuY29kZWREYXRhTGVuZ3RoKSxcbiAgICAgICAgZGF0YTogaW5zdHJ1Y3Rpb24uZGF0YVxuICAgICAgfSwgc2VyaWFsaXplZEluc3RydWN0aW9ucywgc2VyaWFsaXplZExlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkSW5zdHJ1Y3Rpb25zLnNsaWNlKDAsIHNlcmlhbGl6ZWRMZW5ndGgpO1xuICB9XG4gIHNlcmlhbGl6ZUFkZHJlc3NUYWJsZUxvb2t1cHMoKSB7XG4gICAgbGV0IHNlcmlhbGl6ZWRMZW5ndGggPSAwO1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRBZGRyZXNzVGFibGVMb29rdXBzID0gbmV3IFVpbnQ4QXJyYXkoUEFDS0VUX0RBVEFfU0laRSk7XG4gICAgZm9yIChjb25zdCBsb29rdXAgb2YgdGhpcy5hZGRyZXNzVGFibGVMb29rdXBzKSB7XG4gICAgICBjb25zdCBlbmNvZGVkV3JpdGFibGVJbmRleGVzTGVuZ3RoID0gQXJyYXkoKTtcbiAgICAgIGVuY29kZUxlbmd0aChlbmNvZGVkV3JpdGFibGVJbmRleGVzTGVuZ3RoLCBsb29rdXAud3JpdGFibGVJbmRleGVzLmxlbmd0aCk7XG4gICAgICBjb25zdCBlbmNvZGVkUmVhZG9ubHlJbmRleGVzTGVuZ3RoID0gQXJyYXkoKTtcbiAgICAgIGVuY29kZUxlbmd0aChlbmNvZGVkUmVhZG9ubHlJbmRleGVzTGVuZ3RoLCBsb29rdXAucmVhZG9ubHlJbmRleGVzLmxlbmd0aCk7XG4gICAgICBjb25zdCBhZGRyZXNzVGFibGVMb29rdXBMYXlvdXQgPSBCdWZmZXJMYXlvdXQuc3RydWN0KFtwdWJsaWNLZXkoJ2FjY291bnRLZXknKSwgQnVmZmVyTGF5b3V0LmJsb2IoZW5jb2RlZFdyaXRhYmxlSW5kZXhlc0xlbmd0aC5sZW5ndGgsICdlbmNvZGVkV3JpdGFibGVJbmRleGVzTGVuZ3RoJyksIEJ1ZmZlckxheW91dC5zZXEoQnVmZmVyTGF5b3V0LnU4KCksIGxvb2t1cC53cml0YWJsZUluZGV4ZXMubGVuZ3RoLCAnd3JpdGFibGVJbmRleGVzJyksIEJ1ZmZlckxheW91dC5ibG9iKGVuY29kZWRSZWFkb25seUluZGV4ZXNMZW5ndGgubGVuZ3RoLCAnZW5jb2RlZFJlYWRvbmx5SW5kZXhlc0xlbmd0aCcpLCBCdWZmZXJMYXlvdXQuc2VxKEJ1ZmZlckxheW91dC51OCgpLCBsb29rdXAucmVhZG9ubHlJbmRleGVzLmxlbmd0aCwgJ3JlYWRvbmx5SW5kZXhlcycpXSk7XG4gICAgICBzZXJpYWxpemVkTGVuZ3RoICs9IGFkZHJlc3NUYWJsZUxvb2t1cExheW91dC5lbmNvZGUoe1xuICAgICAgICBhY2NvdW50S2V5OiBsb29rdXAuYWNjb3VudEtleS50b0J5dGVzKCksXG4gICAgICAgIGVuY29kZWRXcml0YWJsZUluZGV4ZXNMZW5ndGg6IG5ldyBVaW50OEFycmF5KGVuY29kZWRXcml0YWJsZUluZGV4ZXNMZW5ndGgpLFxuICAgICAgICB3cml0YWJsZUluZGV4ZXM6IGxvb2t1cC53cml0YWJsZUluZGV4ZXMsXG4gICAgICAgIGVuY29kZWRSZWFkb25seUluZGV4ZXNMZW5ndGg6IG5ldyBVaW50OEFycmF5KGVuY29kZWRSZWFkb25seUluZGV4ZXNMZW5ndGgpLFxuICAgICAgICByZWFkb25seUluZGV4ZXM6IGxvb2t1cC5yZWFkb25seUluZGV4ZXNcbiAgICAgIH0sIHNlcmlhbGl6ZWRBZGRyZXNzVGFibGVMb29rdXBzLCBzZXJpYWxpemVkTGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWRBZGRyZXNzVGFibGVMb29rdXBzLnNsaWNlKDAsIHNlcmlhbGl6ZWRMZW5ndGgpO1xuICB9XG4gIHN0YXRpYyBkZXNlcmlhbGl6ZShzZXJpYWxpemVkTWVzc2FnZSkge1xuICAgIGxldCBieXRlQXJyYXkgPSBbLi4uc2VyaWFsaXplZE1lc3NhZ2VdO1xuICAgIGNvbnN0IHByZWZpeCA9IGd1YXJkZWRTaGlmdChieXRlQXJyYXkpO1xuICAgIGNvbnN0IG1hc2tlZFByZWZpeCA9IHByZWZpeCAmIFZFUlNJT05fUFJFRklYX01BU0s7XG4gICAgYXNzZXJ0KHByZWZpeCAhPT0gbWFza2VkUHJlZml4LCBgRXhwZWN0ZWQgdmVyc2lvbmVkIG1lc3NhZ2UgYnV0IHJlY2VpdmVkIGxlZ2FjeSBtZXNzYWdlYCk7XG4gICAgY29uc3QgdmVyc2lvbiA9IG1hc2tlZFByZWZpeDtcbiAgICBhc3NlcnQodmVyc2lvbiA9PT0gMCwgYEV4cGVjdGVkIHZlcnNpb25lZCBtZXNzYWdlIHdpdGggdmVyc2lvbiAwIGJ1dCBmb3VuZCB2ZXJzaW9uICR7dmVyc2lvbn1gKTtcbiAgICBjb25zdCBoZWFkZXIgPSB7XG4gICAgICBudW1SZXF1aXJlZFNpZ25hdHVyZXM6IGd1YXJkZWRTaGlmdChieXRlQXJyYXkpLFxuICAgICAgbnVtUmVhZG9ubHlTaWduZWRBY2NvdW50czogZ3VhcmRlZFNoaWZ0KGJ5dGVBcnJheSksXG4gICAgICBudW1SZWFkb25seVVuc2lnbmVkQWNjb3VudHM6IGd1YXJkZWRTaGlmdChieXRlQXJyYXkpXG4gICAgfTtcbiAgICBjb25zdCBzdGF0aWNBY2NvdW50S2V5cyA9IFtdO1xuICAgIGNvbnN0IHN0YXRpY0FjY291bnRLZXlzTGVuZ3RoID0gZGVjb2RlTGVuZ3RoKGJ5dGVBcnJheSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0aWNBY2NvdW50S2V5c0xlbmd0aDsgaSsrKSB7XG4gICAgICBzdGF0aWNBY2NvdW50S2V5cy5wdXNoKG5ldyBQdWJsaWNLZXkoZ3VhcmRlZFNwbGljZShieXRlQXJyYXksIDAsIFBVQkxJQ19LRVlfTEVOR1RIKSkpO1xuICAgIH1cbiAgICBjb25zdCByZWNlbnRCbG9ja2hhc2ggPSBiczU4LmVuY29kZShndWFyZGVkU3BsaWNlKGJ5dGVBcnJheSwgMCwgUFVCTElDX0tFWV9MRU5HVEgpKTtcbiAgICBjb25zdCBpbnN0cnVjdGlvbkNvdW50ID0gZGVjb2RlTGVuZ3RoKGJ5dGVBcnJheSk7XG4gICAgY29uc3QgY29tcGlsZWRJbnN0cnVjdGlvbnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluc3RydWN0aW9uQ291bnQ7IGkrKykge1xuICAgICAgY29uc3QgcHJvZ3JhbUlkSW5kZXggPSBndWFyZGVkU2hpZnQoYnl0ZUFycmF5KTtcbiAgICAgIGNvbnN0IGFjY291bnRLZXlJbmRleGVzTGVuZ3RoID0gZGVjb2RlTGVuZ3RoKGJ5dGVBcnJheSk7XG4gICAgICBjb25zdCBhY2NvdW50S2V5SW5kZXhlcyA9IGd1YXJkZWRTcGxpY2UoYnl0ZUFycmF5LCAwLCBhY2NvdW50S2V5SW5kZXhlc0xlbmd0aCk7XG4gICAgICBjb25zdCBkYXRhTGVuZ3RoID0gZGVjb2RlTGVuZ3RoKGJ5dGVBcnJheSk7XG4gICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoZ3VhcmRlZFNwbGljZShieXRlQXJyYXksIDAsIGRhdGFMZW5ndGgpKTtcbiAgICAgIGNvbXBpbGVkSW5zdHJ1Y3Rpb25zLnB1c2goe1xuICAgICAgICBwcm9ncmFtSWRJbmRleCxcbiAgICAgICAgYWNjb3VudEtleUluZGV4ZXMsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBhZGRyZXNzVGFibGVMb29rdXBzQ291bnQgPSBkZWNvZGVMZW5ndGgoYnl0ZUFycmF5KTtcbiAgICBjb25zdCBhZGRyZXNzVGFibGVMb29rdXBzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZGRyZXNzVGFibGVMb29rdXBzQ291bnQ7IGkrKykge1xuICAgICAgY29uc3QgYWNjb3VudEtleSA9IG5ldyBQdWJsaWNLZXkoZ3VhcmRlZFNwbGljZShieXRlQXJyYXksIDAsIFBVQkxJQ19LRVlfTEVOR1RIKSk7XG4gICAgICBjb25zdCB3cml0YWJsZUluZGV4ZXNMZW5ndGggPSBkZWNvZGVMZW5ndGgoYnl0ZUFycmF5KTtcbiAgICAgIGNvbnN0IHdyaXRhYmxlSW5kZXhlcyA9IGd1YXJkZWRTcGxpY2UoYnl0ZUFycmF5LCAwLCB3cml0YWJsZUluZGV4ZXNMZW5ndGgpO1xuICAgICAgY29uc3QgcmVhZG9ubHlJbmRleGVzTGVuZ3RoID0gZGVjb2RlTGVuZ3RoKGJ5dGVBcnJheSk7XG4gICAgICBjb25zdCByZWFkb25seUluZGV4ZXMgPSBndWFyZGVkU3BsaWNlKGJ5dGVBcnJheSwgMCwgcmVhZG9ubHlJbmRleGVzTGVuZ3RoKTtcbiAgICAgIGFkZHJlc3NUYWJsZUxvb2t1cHMucHVzaCh7XG4gICAgICAgIGFjY291bnRLZXksXG4gICAgICAgIHdyaXRhYmxlSW5kZXhlcyxcbiAgICAgICAgcmVhZG9ubHlJbmRleGVzXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBNZXNzYWdlVjAoe1xuICAgICAgaGVhZGVyLFxuICAgICAgc3RhdGljQWNjb3VudEtleXMsXG4gICAgICByZWNlbnRCbG9ja2hhc2gsXG4gICAgICBjb21waWxlZEluc3RydWN0aW9ucyxcbiAgICAgIGFkZHJlc3NUYWJsZUxvb2t1cHNcbiAgICB9KTtcbiAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5jb25zdCBWZXJzaW9uZWRNZXNzYWdlID0ge1xuICBkZXNlcmlhbGl6ZU1lc3NhZ2VWZXJzaW9uKHNlcmlhbGl6ZWRNZXNzYWdlKSB7XG4gICAgY29uc3QgcHJlZml4ID0gc2VyaWFsaXplZE1lc3NhZ2VbMF07XG4gICAgY29uc3QgbWFza2VkUHJlZml4ID0gcHJlZml4ICYgVkVSU0lPTl9QUkVGSVhfTUFTSztcblxuICAgIC8vIGlmIHRoZSBoaWdoZXN0IGJpdCBvZiB0aGUgcHJlZml4IGlzIG5vdCBzZXQsIHRoZSBtZXNzYWdlIGlzIG5vdCB2ZXJzaW9uZWRcbiAgICBpZiAobWFza2VkUHJlZml4ID09PSBwcmVmaXgpIHtcbiAgICAgIHJldHVybiAnbGVnYWN5JztcbiAgICB9XG5cbiAgICAvLyB0aGUgbG93ZXIgNyBiaXRzIG9mIHRoZSBwcmVmaXggaW5kaWNhdGUgdGhlIG1lc3NhZ2UgdmVyc2lvblxuICAgIHJldHVybiBtYXNrZWRQcmVmaXg7XG4gIH0sXG4gIGRlc2VyaWFsaXplOiBzZXJpYWxpemVkTWVzc2FnZSA9PiB7XG4gICAgY29uc3QgdmVyc2lvbiA9IFZlcnNpb25lZE1lc3NhZ2UuZGVzZXJpYWxpemVNZXNzYWdlVmVyc2lvbihzZXJpYWxpemVkTWVzc2FnZSk7XG4gICAgaWYgKHZlcnNpb24gPT09ICdsZWdhY3knKSB7XG4gICAgICByZXR1cm4gTWVzc2FnZS5mcm9tKHNlcmlhbGl6ZWRNZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKHZlcnNpb24gPT09IDApIHtcbiAgICAgIHJldHVybiBNZXNzYWdlVjAuZGVzZXJpYWxpemUoc2VyaWFsaXplZE1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyYW5zYWN0aW9uIG1lc3NhZ2UgdmVyc2lvbiAke3ZlcnNpb259IGRlc2VyaWFsaXphdGlvbiBpcyBub3Qgc3VwcG9ydGVkYCk7XG4gICAgfVxuICB9XG59O1xuXG4vKiogQGludGVybmFsICovXG5cbi8qKlxuICogVHJhbnNhY3Rpb24gc2lnbmF0dXJlIGFzIGJhc2UtNTggZW5jb2RlZCBzdHJpbmdcbiAqL1xuXG5sZXQgVHJhbnNhY3Rpb25TdGF0dXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKFRyYW5zYWN0aW9uU3RhdHVzKSB7XG4gIFRyYW5zYWN0aW9uU3RhdHVzW1RyYW5zYWN0aW9uU3RhdHVzW1wiQkxPQ0tIRUlHSFRfRVhDRUVERURcIl0gPSAwXSA9IFwiQkxPQ0tIRUlHSFRfRVhDRUVERURcIjtcbiAgVHJhbnNhY3Rpb25TdGF0dXNbVHJhbnNhY3Rpb25TdGF0dXNbXCJQUk9DRVNTRURcIl0gPSAxXSA9IFwiUFJPQ0VTU0VEXCI7XG4gIFRyYW5zYWN0aW9uU3RhdHVzW1RyYW5zYWN0aW9uU3RhdHVzW1wiVElNRURfT1VUXCJdID0gMl0gPSBcIlRJTUVEX09VVFwiO1xuICBUcmFuc2FjdGlvblN0YXR1c1tUcmFuc2FjdGlvblN0YXR1c1tcIk5PTkNFX0lOVkFMSURcIl0gPSAzXSA9IFwiTk9OQ0VfSU5WQUxJRFwiO1xuICByZXR1cm4gVHJhbnNhY3Rpb25TdGF0dXM7XG59KHt9KTtcblxuLyoqXG4gKiBEZWZhdWx0IChlbXB0eSkgc2lnbmF0dXJlXG4gKi9cbmNvbnN0IERFRkFVTFRfU0lHTkFUVVJFID0gQnVmZmVyLmFsbG9jKFNJR05BVFVSRV9MRU5HVEhfSU5fQllURVMpLmZpbGwoMCk7XG5cbi8qKlxuICogQWNjb3VudCBtZXRhZGF0YSB1c2VkIHRvIGRlZmluZSBpbnN0cnVjdGlvbnNcbiAqL1xuXG4vKipcbiAqIExpc3Qgb2YgVHJhbnNhY3Rpb25JbnN0cnVjdGlvbiBvYmplY3QgZmllbGRzIHRoYXQgbWF5IGJlIGluaXRpYWxpemVkIGF0IGNvbnN0cnVjdGlvblxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIFRyYW5zYWN0aW9uLnNlcmlhbGl6ZSgpXG4gKi9cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG4vKipcbiAqIFRyYW5zYWN0aW9uIEluc3RydWN0aW9uIGNsYXNzXG4gKi9cbmNsYXNzIFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24ge1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgLyoqXG4gICAgICogUHVibGljIGtleXMgdG8gaW5jbHVkZSBpbiB0aGlzIHRyYW5zYWN0aW9uXG4gICAgICogQm9vbGVhbiByZXByZXNlbnRzIHdoZXRoZXIgdGhpcyBwdWJrZXkgbmVlZHMgdG8gc2lnbiB0aGUgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICB0aGlzLmtleXMgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogUHJvZ3JhbSBJZCB0byBleGVjdXRlXG4gICAgICovXG4gICAgdGhpcy5wcm9ncmFtSWQgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogUHJvZ3JhbSBpbnB1dFxuICAgICAqL1xuICAgIHRoaXMuZGF0YSA9IEJ1ZmZlci5hbGxvYygwKTtcbiAgICB0aGlzLnByb2dyYW1JZCA9IG9wdHMucHJvZ3JhbUlkO1xuICAgIHRoaXMua2V5cyA9IG9wdHMua2V5cztcbiAgICBpZiAob3B0cy5kYXRhKSB7XG4gICAgICB0aGlzLmRhdGEgPSBvcHRzLmRhdGE7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBrZXlzOiB0aGlzLmtleXMubWFwKCh7XG4gICAgICAgIHB1YmtleSxcbiAgICAgICAgaXNTaWduZXIsXG4gICAgICAgIGlzV3JpdGFibGVcbiAgICAgIH0pID0+ICh7XG4gICAgICAgIHB1YmtleTogcHVia2V5LnRvSlNPTigpLFxuICAgICAgICBpc1NpZ25lcixcbiAgICAgICAgaXNXcml0YWJsZVxuICAgICAgfSkpLFxuICAgICAgcHJvZ3JhbUlkOiB0aGlzLnByb2dyYW1JZC50b0pTT04oKSxcbiAgICAgIGRhdGE6IFsuLi50aGlzLmRhdGFdXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIFBhaXIgb2Ygc2lnbmF0dXJlIGFuZCBjb3JyZXNwb25kaW5nIHB1YmxpYyBrZXlcbiAqL1xuXG4vKipcbiAqIExpc3Qgb2YgVHJhbnNhY3Rpb24gb2JqZWN0IGZpZWxkcyB0aGF0IG1heSBiZSBpbml0aWFsaXplZCBhdCBjb25zdHJ1Y3Rpb25cbiAqL1xuXG4vLyBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eTsgYW4gdW5mb3J0dW5hdGUgY29uc2VxdWVuY2Ugb2YgYmVpbmdcbi8vIGZvcmNlZCB0byBvdmVyLWV4cG9ydCB0eXBlcyBieSB0aGUgZG9jdW1lbnRhdGlvbiBnZW5lcmF0b3IuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3NvbGFuYS1sYWJzL3NvbGFuYS9wdWxsLzI1ODIwXG5cbi8qKlxuICogQmxvY2toYXNoLWJhc2VkIHRyYW5zYWN0aW9ucyBoYXZlIGEgbGlmZXRpbWUgdGhhdCBhcmUgZGVmaW5lZCBieVxuICogdGhlIGJsb2NraGFzaCB0aGV5IGluY2x1ZGUuIEFueSB0cmFuc2FjdGlvbiB3aG9zZSBibG9ja2hhc2ggaXNcbiAqIHRvbyBvbGQgd2lsbCBiZSByZWplY3RlZC5cbiAqL1xuXG4vKipcbiAqIFVzZSB0aGVzZSBvcHRpb25zIHRvIGNvbnN0cnVjdCBhIGR1cmFibGUgbm9uY2UgdHJhbnNhY3Rpb24uXG4gKi9cblxuLyoqXG4gKiBOb25jZSBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIHRvIGJ1aWxkIGFuIG9mZmxpbmUgVHJhbnNhY3Rpb24uXG4gKi9cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG4vKipcbiAqIFRyYW5zYWN0aW9uIGNsYXNzXG4gKi9cbmNsYXNzIFRyYW5zYWN0aW9uIHtcbiAgLyoqXG4gICAqIFRoZSBmaXJzdCAocGF5ZXIpIFRyYW5zYWN0aW9uIHNpZ25hdHVyZVxuICAgKlxuICAgKiBAcmV0dXJucyB7QnVmZmVyIHwgbnVsbH0gQnVmZmVyIG9mIHBheWVyJ3Mgc2lnbmF0dXJlXG4gICAqL1xuICBnZXQgc2lnbmF0dXJlKCkge1xuICAgIGlmICh0aGlzLnNpZ25hdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2lnbmF0dXJlc1swXS5zaWduYXR1cmU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0cmFuc2FjdGlvbiBmZWUgcGF5ZXJcbiAgICovXG5cbiAgLy8gQ29uc3RydWN0IGEgdHJhbnNhY3Rpb24gd2l0aCBhIGJsb2NraGFzaCBhbmQgbGFzdFZhbGlkQmxvY2tIZWlnaHRcblxuICAvLyBDb25zdHJ1Y3QgYSB0cmFuc2FjdGlvbiB1c2luZyBhIGR1cmFibGUgbm9uY2VcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgYFRyYW5zYWN0aW9uQ3RvckZpZWxkc2AgaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24uXG4gICAqIFBsZWFzZSBzdXBwbHkgYSBgVHJhbnNhY3Rpb25CbG9ja2hhc2hDdG9yYCBpbnN0ZWFkLlxuICAgKi9cblxuICAvKipcbiAgICogQ29uc3RydWN0IGFuIGVtcHR5IFRyYW5zYWN0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgLyoqXG4gICAgICogU2lnbmF0dXJlcyBmb3IgdGhlIHRyYW5zYWN0aW9uLiAgVHlwaWNhbGx5IGNyZWF0ZWQgYnkgaW52b2tpbmcgdGhlXG4gICAgICogYHNpZ24oKWAgbWV0aG9kXG4gICAgICovXG4gICAgdGhpcy5zaWduYXR1cmVzID0gW107XG4gICAgdGhpcy5mZWVQYXllciA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBUaGUgaW5zdHJ1Y3Rpb25zIHRvIGF0b21pY2FsbHkgZXhlY3V0ZVxuICAgICAqL1xuICAgIHRoaXMuaW5zdHJ1Y3Rpb25zID0gW107XG4gICAgLyoqXG4gICAgICogQSByZWNlbnQgdHJhbnNhY3Rpb24gaWQuIE11c3QgYmUgcG9wdWxhdGVkIGJ5IHRoZSBjYWxsZXJcbiAgICAgKi9cbiAgICB0aGlzLnJlY2VudEJsb2NraGFzaCA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiB0aGUgbGFzdCBibG9jayBjaGFpbiBjYW4gYWR2YW5jZSB0byBiZWZvcmUgdHggaXMgZGVjbGFyZWQgZXhwaXJlZFxuICAgICAqICovXG4gICAgdGhpcy5sYXN0VmFsaWRCbG9ja0hlaWdodCA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbCBOb25jZSBpbmZvcm1hdGlvbi4gSWYgcG9wdWxhdGVkLCB0cmFuc2FjdGlvbiB3aWxsIHVzZSBhIGR1cmFibGVcbiAgICAgKiBOb25jZSBoYXNoIGluc3RlYWQgb2YgYSByZWNlbnRCbG9ja2hhc2guIE11c3QgYmUgcG9wdWxhdGVkIGJ5IHRoZSBjYWxsZXJcbiAgICAgKi9cbiAgICB0aGlzLm5vbmNlSW5mbyA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGlzIGEgbm9uY2UgdHJhbnNhY3Rpb24gdGhpcyByZXByZXNlbnRzIHRoZSBtaW5pbXVtIHNsb3QgZnJvbSB3aGljaFxuICAgICAqIHRvIGV2YWx1YXRlIGlmIHRoZSBub25jZSBoYXMgYWR2YW5jZWQgd2hlbiBhdHRlbXB0aW5nIHRvIGNvbmZpcm0gdGhlXG4gICAgICogdHJhbnNhY3Rpb24uIFRoaXMgcHJvdGVjdHMgYWdhaW5zdCBhIGNhc2Ugd2hlcmUgdGhlIHRyYW5zYWN0aW9uIGNvbmZpcm1hdGlvblxuICAgICAqIGxvZ2ljIGxvYWRzIHRoZSBub25jZSBhY2NvdW50IGZyb20gYW4gb2xkIHNsb3QgYW5kIGFzc3VtZXMgdGhlIG1pc21hdGNoIGluXG4gICAgICogbm9uY2UgdmFsdWUgaW1wbGllcyB0aGF0IHRoZSBub25jZSBoYXMgYmVlbiBhZHZhbmNlZC5cbiAgICAgKi9cbiAgICB0aGlzLm1pbk5vbmNlQ29udGV4dFNsb3QgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5fbWVzc2FnZSA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLl9qc29uID0gdm9pZCAwO1xuICAgIGlmICghb3B0cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob3B0cy5mZWVQYXllcikge1xuICAgICAgdGhpcy5mZWVQYXllciA9IG9wdHMuZmVlUGF5ZXI7XG4gICAgfVxuICAgIGlmIChvcHRzLnNpZ25hdHVyZXMpIHtcbiAgICAgIHRoaXMuc2lnbmF0dXJlcyA9IG9wdHMuc2lnbmF0dXJlcztcbiAgICB9XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRzLCAnbm9uY2VJbmZvJykpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbWluQ29udGV4dFNsb3QsXG4gICAgICAgIG5vbmNlSW5mb1xuICAgICAgfSA9IG9wdHM7XG4gICAgICB0aGlzLm1pbk5vbmNlQ29udGV4dFNsb3QgPSBtaW5Db250ZXh0U2xvdDtcbiAgICAgIHRoaXMubm9uY2VJbmZvID0gbm9uY2VJbmZvO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdHMsICdsYXN0VmFsaWRCbG9ja0hlaWdodCcpKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGJsb2NraGFzaCxcbiAgICAgICAgbGFzdFZhbGlkQmxvY2tIZWlnaHRcbiAgICAgIH0gPSBvcHRzO1xuICAgICAgdGhpcy5yZWNlbnRCbG9ja2hhc2ggPSBibG9ja2hhc2g7XG4gICAgICB0aGlzLmxhc3RWYWxpZEJsb2NrSGVpZ2h0ID0gbGFzdFZhbGlkQmxvY2tIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVjZW50QmxvY2toYXNoLFxuICAgICAgICBub25jZUluZm9cbiAgICAgIH0gPSBvcHRzO1xuICAgICAgaWYgKG5vbmNlSW5mbykge1xuICAgICAgICB0aGlzLm5vbmNlSW5mbyA9IG5vbmNlSW5mbztcbiAgICAgIH1cbiAgICAgIHRoaXMucmVjZW50QmxvY2toYXNoID0gcmVjZW50QmxvY2toYXNoO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVjZW50QmxvY2toYXNoOiB0aGlzLnJlY2VudEJsb2NraGFzaCB8fCBudWxsLFxuICAgICAgZmVlUGF5ZXI6IHRoaXMuZmVlUGF5ZXIgPyB0aGlzLmZlZVBheWVyLnRvSlNPTigpIDogbnVsbCxcbiAgICAgIG5vbmNlSW5mbzogdGhpcy5ub25jZUluZm8gPyB7XG4gICAgICAgIG5vbmNlOiB0aGlzLm5vbmNlSW5mby5ub25jZSxcbiAgICAgICAgbm9uY2VJbnN0cnVjdGlvbjogdGhpcy5ub25jZUluZm8ubm9uY2VJbnN0cnVjdGlvbi50b0pTT04oKVxuICAgICAgfSA6IG51bGwsXG4gICAgICBpbnN0cnVjdGlvbnM6IHRoaXMuaW5zdHJ1Y3Rpb25zLm1hcChpbnN0cnVjdGlvbiA9PiBpbnN0cnVjdGlvbi50b0pTT04oKSksXG4gICAgICBzaWduZXJzOiB0aGlzLnNpZ25hdHVyZXMubWFwKCh7XG4gICAgICAgIHB1YmxpY0tleVxuICAgICAgfSkgPT4ge1xuICAgICAgICByZXR1cm4gcHVibGljS2V5LnRvSlNPTigpO1xuICAgICAgfSlcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBvbmUgb3IgbW9yZSBpbnN0cnVjdGlvbnMgdG8gdGhpcyBUcmFuc2FjdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PCBUcmFuc2FjdGlvbiB8IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24gfCBUcmFuc2FjdGlvbkluc3RydWN0aW9uQ3RvckZpZWxkcyA+fSBpdGVtcyAtIEluc3RydWN0aW9ucyB0byBhZGQgdG8gdGhlIFRyYW5zYWN0aW9uXG4gICAqL1xuICBhZGQoLi4uaXRlbXMpIHtcbiAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGluc3RydWN0aW9ucycpO1xuICAgIH1cbiAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKCdpbnN0cnVjdGlvbnMnIGluIGl0ZW0pIHtcbiAgICAgICAgdGhpcy5pbnN0cnVjdGlvbnMgPSB0aGlzLmluc3RydWN0aW9ucy5jb25jYXQoaXRlbS5pbnN0cnVjdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICgnZGF0YScgaW4gaXRlbSAmJiAncHJvZ3JhbUlkJyBpbiBpdGVtICYmICdrZXlzJyBpbiBpdGVtKSB7XG4gICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25zLnB1c2goaXRlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmluc3RydWN0aW9ucy5wdXNoKG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKGl0ZW0pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21waWxlIHRyYW5zYWN0aW9uIGRhdGFcbiAgICovXG4gIGNvbXBpbGVNZXNzYWdlKCkge1xuICAgIGlmICh0aGlzLl9tZXNzYWdlICYmIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpID09PSBKU09OLnN0cmluZ2lmeSh0aGlzLl9qc29uKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX21lc3NhZ2U7XG4gICAgfVxuICAgIGxldCByZWNlbnRCbG9ja2hhc2g7XG4gICAgbGV0IGluc3RydWN0aW9ucztcbiAgICBpZiAodGhpcy5ub25jZUluZm8pIHtcbiAgICAgIHJlY2VudEJsb2NraGFzaCA9IHRoaXMubm9uY2VJbmZvLm5vbmNlO1xuICAgICAgaWYgKHRoaXMuaW5zdHJ1Y3Rpb25zWzBdICE9IHRoaXMubm9uY2VJbmZvLm5vbmNlSW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgaW5zdHJ1Y3Rpb25zID0gW3RoaXMubm9uY2VJbmZvLm5vbmNlSW5zdHJ1Y3Rpb24sIC4uLnRoaXMuaW5zdHJ1Y3Rpb25zXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RydWN0aW9ucyA9IHRoaXMuaW5zdHJ1Y3Rpb25zO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWNlbnRCbG9ja2hhc2ggPSB0aGlzLnJlY2VudEJsb2NraGFzaDtcbiAgICAgIGluc3RydWN0aW9ucyA9IHRoaXMuaW5zdHJ1Y3Rpb25zO1xuICAgIH1cbiAgICBpZiAoIXJlY2VudEJsb2NraGFzaCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc2FjdGlvbiByZWNlbnRCbG9ja2hhc2ggcmVxdWlyZWQnKTtcbiAgICB9XG4gICAgaWYgKGluc3RydWN0aW9ucy5sZW5ndGggPCAxKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ05vIGluc3RydWN0aW9ucyBwcm92aWRlZCcpO1xuICAgIH1cbiAgICBsZXQgZmVlUGF5ZXI7XG4gICAgaWYgKHRoaXMuZmVlUGF5ZXIpIHtcbiAgICAgIGZlZVBheWVyID0gdGhpcy5mZWVQYXllcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2lnbmF0dXJlcy5sZW5ndGggPiAwICYmIHRoaXMuc2lnbmF0dXJlc1swXS5wdWJsaWNLZXkpIHtcbiAgICAgIC8vIFVzZSBpbXBsaWNpdCBmZWUgcGF5ZXJcbiAgICAgIGZlZVBheWVyID0gdGhpcy5zaWduYXR1cmVzWzBdLnB1YmxpY0tleTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc2FjdGlvbiBmZWUgcGF5ZXIgcmVxdWlyZWQnKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0cnVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpbnN0cnVjdGlvbnNbaV0ucHJvZ3JhbUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUcmFuc2FjdGlvbiBpbnN0cnVjdGlvbiBpbmRleCAke2l9IGhhcyB1bmRlZmluZWQgcHJvZ3JhbSBpZGApO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwcm9ncmFtSWRzID0gW107XG4gICAgY29uc3QgYWNjb3VudE1ldGFzID0gW107XG4gICAgaW5zdHJ1Y3Rpb25zLmZvckVhY2goaW5zdHJ1Y3Rpb24gPT4ge1xuICAgICAgaW5zdHJ1Y3Rpb24ua2V5cy5mb3JFYWNoKGFjY291bnRNZXRhID0+IHtcbiAgICAgICAgYWNjb3VudE1ldGFzLnB1c2goe1xuICAgICAgICAgIC4uLmFjY291bnRNZXRhXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBwcm9ncmFtSWQgPSBpbnN0cnVjdGlvbi5wcm9ncmFtSWQudG9TdHJpbmcoKTtcbiAgICAgIGlmICghcHJvZ3JhbUlkcy5pbmNsdWRlcyhwcm9ncmFtSWQpKSB7XG4gICAgICAgIHByb2dyYW1JZHMucHVzaChwcm9ncmFtSWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQXBwZW5kIHByb2dyYW1JRCBhY2NvdW50IG1ldGFzXG4gICAgcHJvZ3JhbUlkcy5mb3JFYWNoKHByb2dyYW1JZCA9PiB7XG4gICAgICBhY2NvdW50TWV0YXMucHVzaCh7XG4gICAgICAgIHB1YmtleTogbmV3IFB1YmxpY0tleShwcm9ncmFtSWQpLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIEN1bGwgZHVwbGljYXRlIGFjY291bnQgbWV0YXNcbiAgICBjb25zdCB1bmlxdWVNZXRhcyA9IFtdO1xuICAgIGFjY291bnRNZXRhcy5mb3JFYWNoKGFjY291bnRNZXRhID0+IHtcbiAgICAgIGNvbnN0IHB1YmtleVN0cmluZyA9IGFjY291bnRNZXRhLnB1YmtleS50b1N0cmluZygpO1xuICAgICAgY29uc3QgdW5pcXVlSW5kZXggPSB1bmlxdWVNZXRhcy5maW5kSW5kZXgoeCA9PiB7XG4gICAgICAgIHJldHVybiB4LnB1YmtleS50b1N0cmluZygpID09PSBwdWJrZXlTdHJpbmc7XG4gICAgICB9KTtcbiAgICAgIGlmICh1bmlxdWVJbmRleCA+IC0xKSB7XG4gICAgICAgIHVuaXF1ZU1ldGFzW3VuaXF1ZUluZGV4XS5pc1dyaXRhYmxlID0gdW5pcXVlTWV0YXNbdW5pcXVlSW5kZXhdLmlzV3JpdGFibGUgfHwgYWNjb3VudE1ldGEuaXNXcml0YWJsZTtcbiAgICAgICAgdW5pcXVlTWV0YXNbdW5pcXVlSW5kZXhdLmlzU2lnbmVyID0gdW5pcXVlTWV0YXNbdW5pcXVlSW5kZXhdLmlzU2lnbmVyIHx8IGFjY291bnRNZXRhLmlzU2lnbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5pcXVlTWV0YXMucHVzaChhY2NvdW50TWV0YSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTb3J0LiBQcmlvcml0aXppbmcgZmlyc3QgYnkgc2lnbmVyLCB0aGVuIGJ5IHdyaXRhYmxlXG4gICAgdW5pcXVlTWV0YXMuc29ydChmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgaWYgKHguaXNTaWduZXIgIT09IHkuaXNTaWduZXIpIHtcbiAgICAgICAgLy8gU2lnbmVycyBhbHdheXMgY29tZSBiZWZvcmUgbm9uLXNpZ25lcnNcbiAgICAgICAgcmV0dXJuIHguaXNTaWduZXIgPyAtMSA6IDE7XG4gICAgICB9XG4gICAgICBpZiAoeC5pc1dyaXRhYmxlICE9PSB5LmlzV3JpdGFibGUpIHtcbiAgICAgICAgLy8gV3JpdGFibGUgYWNjb3VudHMgYWx3YXlzIGNvbWUgYmVmb3JlIHJlYWQtb25seSBhY2NvdW50c1xuICAgICAgICByZXR1cm4geC5pc1dyaXRhYmxlID8gLTEgOiAxO1xuICAgICAgfVxuICAgICAgLy8gT3RoZXJ3aXNlLCBzb3J0IGJ5IHB1YmtleSwgc3RyaW5nd2lzZS5cbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGxvY2FsZU1hdGNoZXI6ICdiZXN0IGZpdCcsXG4gICAgICAgIHVzYWdlOiAnc29ydCcsXG4gICAgICAgIHNlbnNpdGl2aXR5OiAndmFyaWFudCcsXG4gICAgICAgIGlnbm9yZVB1bmN0dWF0aW9uOiBmYWxzZSxcbiAgICAgICAgbnVtZXJpYzogZmFsc2UsXG4gICAgICAgIGNhc2VGaXJzdDogJ2xvd2VyJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiB4LnB1YmtleS50b0Jhc2U1OCgpLmxvY2FsZUNvbXBhcmUoeS5wdWJrZXkudG9CYXNlNTgoKSwgJ2VuJywgb3B0aW9ucyk7XG4gICAgfSk7XG5cbiAgICAvLyBNb3ZlIGZlZSBwYXllciB0byB0aGUgZnJvbnRcbiAgICBjb25zdCBmZWVQYXllckluZGV4ID0gdW5pcXVlTWV0YXMuZmluZEluZGV4KHggPT4ge1xuICAgICAgcmV0dXJuIHgucHVia2V5LmVxdWFscyhmZWVQYXllcik7XG4gICAgfSk7XG4gICAgaWYgKGZlZVBheWVySW5kZXggPiAtMSkge1xuICAgICAgY29uc3QgW3BheWVyTWV0YV0gPSB1bmlxdWVNZXRhcy5zcGxpY2UoZmVlUGF5ZXJJbmRleCwgMSk7XG4gICAgICBwYXllck1ldGEuaXNTaWduZXIgPSB0cnVlO1xuICAgICAgcGF5ZXJNZXRhLmlzV3JpdGFibGUgPSB0cnVlO1xuICAgICAgdW5pcXVlTWV0YXMudW5zaGlmdChwYXllck1ldGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bmlxdWVNZXRhcy51bnNoaWZ0KHtcbiAgICAgICAgcHVia2V5OiBmZWVQYXllcixcbiAgICAgICAgaXNTaWduZXI6IHRydWUsXG4gICAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERpc2FsbG93IHVua25vd24gc2lnbmVyc1xuICAgIGZvciAoY29uc3Qgc2lnbmF0dXJlIG9mIHRoaXMuc2lnbmF0dXJlcykge1xuICAgICAgY29uc3QgdW5pcXVlSW5kZXggPSB1bmlxdWVNZXRhcy5maW5kSW5kZXgoeCA9PiB7XG4gICAgICAgIHJldHVybiB4LnB1YmtleS5lcXVhbHMoc2lnbmF0dXJlLnB1YmxpY0tleSk7XG4gICAgICB9KTtcbiAgICAgIGlmICh1bmlxdWVJbmRleCA+IC0xKSB7XG4gICAgICAgIGlmICghdW5pcXVlTWV0YXNbdW5pcXVlSW5kZXhdLmlzU2lnbmVyKSB7XG4gICAgICAgICAgdW5pcXVlTWV0YXNbdW5pcXVlSW5kZXhdLmlzU2lnbmVyID0gdHJ1ZTtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1RyYW5zYWN0aW9uIHJlZmVyZW5jZXMgYSBzaWduYXR1cmUgdGhhdCBpcyB1bm5lY2Vzc2FyeSwgJyArICdvbmx5IHRoZSBmZWUgcGF5ZXIgYW5kIGluc3RydWN0aW9uIHNpZ25lciBhY2NvdW50cyBzaG91bGQgc2lnbiBhIHRyYW5zYWN0aW9uLiAnICsgJ1RoaXMgYmVoYXZpb3IgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCB0aHJvdyBhbiBlcnJvciBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIHJlbGVhc2UuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93biBzaWduZXI6ICR7c2lnbmF0dXJlLnB1YmxpY0tleS50b1N0cmluZygpfWApO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgbnVtUmVxdWlyZWRTaWduYXR1cmVzID0gMDtcbiAgICBsZXQgbnVtUmVhZG9ubHlTaWduZWRBY2NvdW50cyA9IDA7XG4gICAgbGV0IG51bVJlYWRvbmx5VW5zaWduZWRBY2NvdW50cyA9IDA7XG5cbiAgICAvLyBTcGxpdCBvdXQgc2lnbmluZyBmcm9tIG5vbi1zaWduaW5nIGtleXMgYW5kIGNvdW50IGhlYWRlciB2YWx1ZXNcbiAgICBjb25zdCBzaWduZWRLZXlzID0gW107XG4gICAgY29uc3QgdW5zaWduZWRLZXlzID0gW107XG4gICAgdW5pcXVlTWV0YXMuZm9yRWFjaCgoe1xuICAgICAgcHVia2V5LFxuICAgICAgaXNTaWduZXIsXG4gICAgICBpc1dyaXRhYmxlXG4gICAgfSkgPT4ge1xuICAgICAgaWYgKGlzU2lnbmVyKSB7XG4gICAgICAgIHNpZ25lZEtleXMucHVzaChwdWJrZXkudG9TdHJpbmcoKSk7XG4gICAgICAgIG51bVJlcXVpcmVkU2lnbmF0dXJlcyArPSAxO1xuICAgICAgICBpZiAoIWlzV3JpdGFibGUpIHtcbiAgICAgICAgICBudW1SZWFkb25seVNpZ25lZEFjY291bnRzICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVuc2lnbmVkS2V5cy5wdXNoKHB1YmtleS50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKCFpc1dyaXRhYmxlKSB7XG4gICAgICAgICAgbnVtUmVhZG9ubHlVbnNpZ25lZEFjY291bnRzICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBhY2NvdW50S2V5cyA9IHNpZ25lZEtleXMuY29uY2F0KHVuc2lnbmVkS2V5cyk7XG4gICAgY29uc3QgY29tcGlsZWRJbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbnMubWFwKGluc3RydWN0aW9uID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZGF0YSxcbiAgICAgICAgcHJvZ3JhbUlkXG4gICAgICB9ID0gaW5zdHJ1Y3Rpb247XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9ncmFtSWRJbmRleDogYWNjb3VudEtleXMuaW5kZXhPZihwcm9ncmFtSWQudG9TdHJpbmcoKSksXG4gICAgICAgIGFjY291bnRzOiBpbnN0cnVjdGlvbi5rZXlzLm1hcChtZXRhID0+IGFjY291bnRLZXlzLmluZGV4T2YobWV0YS5wdWJrZXkudG9TdHJpbmcoKSkpLFxuICAgICAgICBkYXRhOiBiczU4LmVuY29kZShkYXRhKVxuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb21waWxlZEluc3RydWN0aW9ucy5mb3JFYWNoKGluc3RydWN0aW9uID0+IHtcbiAgICAgIGFzc2VydChpbnN0cnVjdGlvbi5wcm9ncmFtSWRJbmRleCA+PSAwKTtcbiAgICAgIGluc3RydWN0aW9uLmFjY291bnRzLmZvckVhY2goa2V5SW5kZXggPT4gYXNzZXJ0KGtleUluZGV4ID49IDApKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2Uoe1xuICAgICAgaGVhZGVyOiB7XG4gICAgICAgIG51bVJlcXVpcmVkU2lnbmF0dXJlcyxcbiAgICAgICAgbnVtUmVhZG9ubHlTaWduZWRBY2NvdW50cyxcbiAgICAgICAgbnVtUmVhZG9ubHlVbnNpZ25lZEFjY291bnRzXG4gICAgICB9LFxuICAgICAgYWNjb3VudEtleXMsXG4gICAgICByZWNlbnRCbG9ja2hhc2gsXG4gICAgICBpbnN0cnVjdGlvbnM6IGNvbXBpbGVkSW5zdHJ1Y3Rpb25zXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfY29tcGlsZSgpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5jb21waWxlTWVzc2FnZSgpO1xuICAgIGNvbnN0IHNpZ25lZEtleXMgPSBtZXNzYWdlLmFjY291bnRLZXlzLnNsaWNlKDAsIG1lc3NhZ2UuaGVhZGVyLm51bVJlcXVpcmVkU2lnbmF0dXJlcyk7XG4gICAgaWYgKHRoaXMuc2lnbmF0dXJlcy5sZW5ndGggPT09IHNpZ25lZEtleXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCB2YWxpZCA9IHRoaXMuc2lnbmF0dXJlcy5ldmVyeSgocGFpciwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIHNpZ25lZEtleXNbaW5kZXhdLmVxdWFscyhwYWlyLnB1YmxpY0tleSk7XG4gICAgICB9KTtcbiAgICAgIGlmICh2YWxpZCkgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuICAgIHRoaXMuc2lnbmF0dXJlcyA9IHNpZ25lZEtleXMubWFwKHB1YmxpY0tleSA9PiAoe1xuICAgICAgc2lnbmF0dXJlOiBudWxsLFxuICAgICAgcHVibGljS2V5XG4gICAgfSkpO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGJ1ZmZlciBvZiB0aGUgVHJhbnNhY3Rpb24gZGF0YSB0aGF0IG5lZWQgdG8gYmUgY292ZXJlZCBieSBzaWduYXR1cmVzXG4gICAqL1xuICBzZXJpYWxpemVNZXNzYWdlKCkge1xuICAgIHJldHVybiB0aGlzLl9jb21waWxlKCkuc2VyaWFsaXplKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBlc3RpbWF0ZWQgZmVlIGFzc29jaWF0ZWQgd2l0aCBhIHRyYW5zYWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7Q29ubmVjdGlvbn0gY29ubmVjdGlvbiBDb25uZWN0aW9uIHRvIFJQQyBFbmRwb2ludC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyIHwgbnVsbD59IFRoZSBlc3RpbWF0ZWQgZmVlIGZvciB0aGUgdHJhbnNhY3Rpb25cbiAgICovXG4gIGFzeW5jIGdldEVzdGltYXRlZEZlZShjb25uZWN0aW9uKSB7XG4gICAgcmV0dXJuIChhd2FpdCBjb25uZWN0aW9uLmdldEZlZUZvck1lc3NhZ2UodGhpcy5jb21waWxlTWVzc2FnZSgpKSkudmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogU3BlY2lmeSB0aGUgcHVibGljIGtleXMgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIHNpZ24gdGhlIFRyYW5zYWN0aW9uLlxuICAgKiBUaGUgZmlyc3Qgc2lnbmVyIHdpbGwgYmUgdXNlZCBhcyB0aGUgdHJhbnNhY3Rpb24gZmVlIHBheWVyIGFjY291bnQuXG4gICAqXG4gICAqIFNpZ25hdHVyZXMgY2FuIGJlIGFkZGVkIHdpdGggZWl0aGVyIGBwYXJ0aWFsU2lnbmAgb3IgYGFkZFNpZ25hdHVyZWBcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBzaW5jZSB2MC44NC4wLiBPbmx5IHRoZSBmZWUgcGF5ZXIgbmVlZHMgdG8gYmVcbiAgICogc3BlY2lmaWVkIGFuZCBpdCBjYW4gYmUgc2V0IGluIHRoZSBUcmFuc2FjdGlvbiBjb25zdHJ1Y3RvciBvciB3aXRoIHRoZVxuICAgKiBgZmVlUGF5ZXJgIHByb3BlcnR5LlxuICAgKi9cbiAgc2V0U2lnbmVycyguLi5zaWduZXJzKSB7XG4gICAgaWYgKHNpZ25lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNpZ25lcnMnKTtcbiAgICB9XG4gICAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLnNpZ25hdHVyZXMgPSBzaWduZXJzLmZpbHRlcihwdWJsaWNLZXkgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gcHVibGljS2V5LnRvU3RyaW5nKCk7XG4gICAgICBpZiAoc2Vlbi5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWVuLmFkZChrZXkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KS5tYXAocHVibGljS2V5ID0+ICh7XG4gICAgICBzaWduYXR1cmU6IG51bGwsXG4gICAgICBwdWJsaWNLZXlcbiAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogU2lnbiB0aGUgVHJhbnNhY3Rpb24gd2l0aCB0aGUgc3BlY2lmaWVkIHNpZ25lcnMuIE11bHRpcGxlIHNpZ25hdHVyZXMgbWF5XG4gICAqIGJlIGFwcGxpZWQgdG8gYSBUcmFuc2FjdGlvbi4gVGhlIGZpcnN0IHNpZ25hdHVyZSBpcyBjb25zaWRlcmVkIFwicHJpbWFyeVwiXG4gICAqIGFuZCBpcyB1c2VkIGlkZW50aWZ5IGFuZCBjb25maXJtIHRyYW5zYWN0aW9ucy5cbiAgICpcbiAgICogSWYgdGhlIFRyYW5zYWN0aW9uIGBmZWVQYXllcmAgaXMgbm90IHNldCwgdGhlIGZpcnN0IHNpZ25lciB3aWxsIGJlIHVzZWRcbiAgICogYXMgdGhlIHRyYW5zYWN0aW9uIGZlZSBwYXllciBhY2NvdW50LlxuICAgKlxuICAgKiBUcmFuc2FjdGlvbiBmaWVsZHMgc2hvdWxkIG5vdCBiZSBtb2RpZmllZCBhZnRlciB0aGUgZmlyc3QgY2FsbCB0byBgc2lnbmAsXG4gICAqIGFzIGRvaW5nIHNvIG1heSBpbnZhbGlkYXRlIHRoZSBzaWduYXR1cmUgYW5kIGNhdXNlIHRoZSBUcmFuc2FjdGlvbiB0byBiZVxuICAgKiByZWplY3RlZC5cbiAgICpcbiAgICogVGhlIFRyYW5zYWN0aW9uIG11c3QgYmUgYXNzaWduZWQgYSB2YWxpZCBgcmVjZW50QmxvY2toYXNoYCBiZWZvcmUgaW52b2tpbmcgdGhpcyBtZXRob2RcbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxTaWduZXI+fSBzaWduZXJzIEFycmF5IG9mIHNpZ25lcnMgdGhhdCB3aWxsIHNpZ24gdGhlIHRyYW5zYWN0aW9uXG4gICAqL1xuICBzaWduKC4uLnNpZ25lcnMpIHtcbiAgICBpZiAoc2lnbmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc2lnbmVycycpO1xuICAgIH1cblxuICAgIC8vIERlZHVwZSBzaWduZXJzXG4gICAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCB1bmlxdWVTaWduZXJzID0gW107XG4gICAgZm9yIChjb25zdCBzaWduZXIgb2Ygc2lnbmVycykge1xuICAgICAgY29uc3Qga2V5ID0gc2lnbmVyLnB1YmxpY0tleS50b1N0cmluZygpO1xuICAgICAgaWYgKHNlZW4uaGFzKGtleSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWVuLmFkZChrZXkpO1xuICAgICAgICB1bmlxdWVTaWduZXJzLnB1c2goc2lnbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zaWduYXR1cmVzID0gdW5pcXVlU2lnbmVycy5tYXAoc2lnbmVyID0+ICh7XG4gICAgICBzaWduYXR1cmU6IG51bGwsXG4gICAgICBwdWJsaWNLZXk6IHNpZ25lci5wdWJsaWNLZXlcbiAgICB9KSk7XG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMuX2NvbXBpbGUoKTtcbiAgICB0aGlzLl9wYXJ0aWFsU2lnbihtZXNzYWdlLCAuLi51bmlxdWVTaWduZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJ0aWFsbHkgc2lnbiBhIHRyYW5zYWN0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBhY2NvdW50cy4gQWxsIGFjY291bnRzIG11c3RcbiAgICogY29ycmVzcG9uZCB0byBlaXRoZXIgdGhlIGZlZSBwYXllciBvciBhIHNpZ25lciBhY2NvdW50IGluIHRoZSB0cmFuc2FjdGlvblxuICAgKiBpbnN0cnVjdGlvbnMuXG4gICAqXG4gICAqIEFsbCB0aGUgY2F2ZWF0cyBmcm9tIHRoZSBgc2lnbmAgbWV0aG9kIGFwcGx5IHRvIGBwYXJ0aWFsU2lnbmBcbiAgICpcbiAgICogQHBhcmFtIHtBcnJheTxTaWduZXI+fSBzaWduZXJzIEFycmF5IG9mIHNpZ25lcnMgdGhhdCB3aWxsIHNpZ24gdGhlIHRyYW5zYWN0aW9uXG4gICAqL1xuICBwYXJ0aWFsU2lnbiguLi5zaWduZXJzKSB7XG4gICAgaWYgKHNpZ25lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNpZ25lcnMnKTtcbiAgICB9XG5cbiAgICAvLyBEZWR1cGUgc2lnbmVyc1xuICAgIGNvbnN0IHNlZW4gPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgdW5pcXVlU2lnbmVycyA9IFtdO1xuICAgIGZvciAoY29uc3Qgc2lnbmVyIG9mIHNpZ25lcnMpIHtcbiAgICAgIGNvbnN0IGtleSA9IHNpZ25lci5wdWJsaWNLZXkudG9TdHJpbmcoKTtcbiAgICAgIGlmIChzZWVuLmhhcyhrZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Vlbi5hZGQoa2V5KTtcbiAgICAgICAgdW5pcXVlU2lnbmVycy5wdXNoKHNpZ25lcik7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLl9jb21waWxlKCk7XG4gICAgdGhpcy5fcGFydGlhbFNpZ24obWVzc2FnZSwgLi4udW5pcXVlU2lnbmVycyk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfcGFydGlhbFNpZ24obWVzc2FnZSwgLi4uc2lnbmVycykge1xuICAgIGNvbnN0IHNpZ25EYXRhID0gbWVzc2FnZS5zZXJpYWxpemUoKTtcbiAgICBzaWduZXJzLmZvckVhY2goc2lnbmVyID0+IHtcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHNpZ24oc2lnbkRhdGEsIHNpZ25lci5zZWNyZXRLZXkpO1xuICAgICAgdGhpcy5fYWRkU2lnbmF0dXJlKHNpZ25lci5wdWJsaWNLZXksIHRvQnVmZmVyKHNpZ25hdHVyZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBleHRlcm5hbGx5IGNyZWF0ZWQgc2lnbmF0dXJlIHRvIGEgdHJhbnNhY3Rpb24uIFRoZSBwdWJsaWMga2V5XG4gICAqIG11c3QgY29ycmVzcG9uZCB0byBlaXRoZXIgdGhlIGZlZSBwYXllciBvciBhIHNpZ25lciBhY2NvdW50IGluIHRoZSB0cmFuc2FjdGlvblxuICAgKiBpbnN0cnVjdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7UHVibGljS2V5fSBwdWJrZXkgUHVibGljIGtleSB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIHRyYW5zYWN0aW9uLlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gc2lnbmF0dXJlIEFuIGV4dGVybmFsbHkgY3JlYXRlZCBzaWduYXR1cmUgdG8gYWRkIHRvIHRoZSB0cmFuc2FjdGlvbi5cbiAgICovXG4gIGFkZFNpZ25hdHVyZShwdWJrZXksIHNpZ25hdHVyZSkge1xuICAgIHRoaXMuX2NvbXBpbGUoKTsgLy8gRW5zdXJlIHNpZ25hdHVyZXMgYXJyYXkgaXMgcG9wdWxhdGVkXG4gICAgdGhpcy5fYWRkU2lnbmF0dXJlKHB1YmtleSwgc2lnbmF0dXJlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9hZGRTaWduYXR1cmUocHVia2V5LCBzaWduYXR1cmUpIHtcbiAgICBhc3NlcnQoc2lnbmF0dXJlLmxlbmd0aCA9PT0gNjQpO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zaWduYXR1cmVzLmZpbmRJbmRleChzaWdwYWlyID0+IHB1YmtleS5lcXVhbHMoc2lncGFpci5wdWJsaWNLZXkpKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVua25vd24gc2lnbmVyOiAke3B1YmtleS50b1N0cmluZygpfWApO1xuICAgIH1cbiAgICB0aGlzLnNpZ25hdHVyZXNbaW5kZXhdLnNpZ25hdHVyZSA9IEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSk7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZ5IHNpZ25hdHVyZXMgb2YgYSBUcmFuc2FjdGlvblxuICAgKiBPcHRpb25hbCBwYXJhbWV0ZXIgc3BlY2lmaWVzIGlmIHdlJ3JlIGV4cGVjdGluZyBhIGZ1bGx5IHNpZ25lZCBUcmFuc2FjdGlvbiBvciBhIHBhcnRpYWxseSBzaWduZWQgb25lLlxuICAgKiBJZiBubyBib29sZWFuIGlzIHByb3ZpZGVkLCB3ZSBleHBlY3QgYSBmdWxseSBzaWduZWQgVHJhbnNhY3Rpb24gYnkgZGVmYXVsdC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbcmVxdWlyZUFsbFNpZ25hdHVyZXM9dHJ1ZV0gUmVxdWlyZSBhIGZ1bGx5IHNpZ25lZCBUcmFuc2FjdGlvblxuICAgKi9cbiAgdmVyaWZ5U2lnbmF0dXJlcyhyZXF1aXJlQWxsU2lnbmF0dXJlcyA9IHRydWUpIHtcbiAgICBjb25zdCBzaWduYXR1cmVFcnJvcnMgPSB0aGlzLl9nZXRNZXNzYWdlU2lnbmVkbmVzc0Vycm9ycyh0aGlzLnNlcmlhbGl6ZU1lc3NhZ2UoKSwgcmVxdWlyZUFsbFNpZ25hdHVyZXMpO1xuICAgIHJldHVybiAhc2lnbmF0dXJlRXJyb3JzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX2dldE1lc3NhZ2VTaWduZWRuZXNzRXJyb3JzKG1lc3NhZ2UsIHJlcXVpcmVBbGxTaWduYXR1cmVzKSB7XG4gICAgY29uc3QgZXJyb3JzID0ge307XG4gICAgZm9yIChjb25zdCB7XG4gICAgICBzaWduYXR1cmUsXG4gICAgICBwdWJsaWNLZXlcbiAgICB9IG9mIHRoaXMuc2lnbmF0dXJlcykge1xuICAgICAgaWYgKHNpZ25hdHVyZSA9PT0gbnVsbCkge1xuICAgICAgICBpZiAocmVxdWlyZUFsbFNpZ25hdHVyZXMpIHtcbiAgICAgICAgICAoZXJyb3JzLm1pc3NpbmcgfHw9IFtdKS5wdXNoKHB1YmxpY0tleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdmVyaWZ5KHNpZ25hdHVyZSwgbWVzc2FnZSwgcHVibGljS2V5LnRvQnl0ZXMoKSkpIHtcbiAgICAgICAgICAoZXJyb3JzLmludmFsaWQgfHw9IFtdKS5wdXNoKHB1YmxpY0tleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycy5pbnZhbGlkIHx8IGVycm9ycy5taXNzaW5nID8gZXJyb3JzIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZSB0aGUgVHJhbnNhY3Rpb24gaW4gdGhlIHdpcmUgZm9ybWF0LlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gW2NvbmZpZ10gQ29uZmlnIG9mIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7QnVmZmVyfSBTaWduYXR1cmUgb2YgdHJhbnNhY3Rpb24gaW4gd2lyZSBmb3JtYXQuXG4gICAqL1xuICBzZXJpYWxpemUoY29uZmlnKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVxdWlyZUFsbFNpZ25hdHVyZXMsXG4gICAgICB2ZXJpZnlTaWduYXR1cmVzXG4gICAgfSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgcmVxdWlyZUFsbFNpZ25hdHVyZXM6IHRydWUsXG4gICAgICB2ZXJpZnlTaWduYXR1cmVzOiB0cnVlXG4gICAgfSwgY29uZmlnKTtcbiAgICBjb25zdCBzaWduRGF0YSA9IHRoaXMuc2VyaWFsaXplTWVzc2FnZSgpO1xuICAgIGlmICh2ZXJpZnlTaWduYXR1cmVzKSB7XG4gICAgICBjb25zdCBzaWdFcnJvcnMgPSB0aGlzLl9nZXRNZXNzYWdlU2lnbmVkbmVzc0Vycm9ycyhzaWduRGF0YSwgcmVxdWlyZUFsbFNpZ25hdHVyZXMpO1xuICAgICAgaWYgKHNpZ0Vycm9ycykge1xuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gJ1NpZ25hdHVyZSB2ZXJpZmljYXRpb24gZmFpbGVkLic7XG4gICAgICAgIGlmIChzaWdFcnJvcnMuaW52YWxpZCkge1xuICAgICAgICAgIGVycm9yTWVzc2FnZSArPSBgXFxuSW52YWxpZCBzaWduYXR1cmUgZm9yIHB1YmxpYyBrZXkke3NpZ0Vycm9ycy5pbnZhbGlkLmxlbmd0aCA9PT0gMSA/ICcnIDogJyhzKSd9IFtcXGAke3NpZ0Vycm9ycy5pbnZhbGlkLm1hcChwID0+IHAudG9CYXNlNTgoKSkuam9pbignYCwgYCcpfVxcYF0uYDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2lnRXJyb3JzLm1pc3NpbmcpIHtcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gYFxcbk1pc3Npbmcgc2lnbmF0dXJlIGZvciBwdWJsaWMga2V5JHtzaWdFcnJvcnMubWlzc2luZy5sZW5ndGggPT09IDEgPyAnJyA6ICcocyknfSBbXFxgJHtzaWdFcnJvcnMubWlzc2luZy5tYXAocCA9PiBwLnRvQmFzZTU4KCkpLmpvaW4oJ2AsIGAnKX1cXGBdLmA7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zZXJpYWxpemUoc2lnbkRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3NlcmlhbGl6ZShzaWduRGF0YSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNpZ25hdHVyZXNcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBzaWduYXR1cmVDb3VudCA9IFtdO1xuICAgIGVuY29kZUxlbmd0aChzaWduYXR1cmVDb3VudCwgc2lnbmF0dXJlcy5sZW5ndGgpO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uTGVuZ3RoID0gc2lnbmF0dXJlQ291bnQubGVuZ3RoICsgc2lnbmF0dXJlcy5sZW5ndGggKiA2NCArIHNpZ25EYXRhLmxlbmd0aDtcbiAgICBjb25zdCB3aXJlVHJhbnNhY3Rpb24gPSBCdWZmZXIuYWxsb2ModHJhbnNhY3Rpb25MZW5ndGgpO1xuICAgIGFzc2VydChzaWduYXR1cmVzLmxlbmd0aCA8IDI1Nik7XG4gICAgQnVmZmVyLmZyb20oc2lnbmF0dXJlQ291bnQpLmNvcHkod2lyZVRyYW5zYWN0aW9uLCAwKTtcbiAgICBzaWduYXR1cmVzLmZvckVhY2goKHtcbiAgICAgIHNpZ25hdHVyZVxuICAgIH0sIGluZGV4KSA9PiB7XG4gICAgICBpZiAoc2lnbmF0dXJlICE9PSBudWxsKSB7XG4gICAgICAgIGFzc2VydChzaWduYXR1cmUubGVuZ3RoID09PSA2NCwgYHNpZ25hdHVyZSBoYXMgaW52YWxpZCBsZW5ndGhgKTtcbiAgICAgICAgQnVmZmVyLmZyb20oc2lnbmF0dXJlKS5jb3B5KHdpcmVUcmFuc2FjdGlvbiwgc2lnbmF0dXJlQ291bnQubGVuZ3RoICsgaW5kZXggKiA2NCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc2lnbkRhdGEuY29weSh3aXJlVHJhbnNhY3Rpb24sIHNpZ25hdHVyZUNvdW50Lmxlbmd0aCArIHNpZ25hdHVyZXMubGVuZ3RoICogNjQpO1xuICAgIGFzc2VydCh3aXJlVHJhbnNhY3Rpb24ubGVuZ3RoIDw9IFBBQ0tFVF9EQVRBX1NJWkUsIGBUcmFuc2FjdGlvbiB0b28gbGFyZ2U6ICR7d2lyZVRyYW5zYWN0aW9uLmxlbmd0aH0gPiAke1BBQ0tFVF9EQVRBX1NJWkV9YCk7XG4gICAgcmV0dXJuIHdpcmVUcmFuc2FjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXByZWNhdGVkIG1ldGhvZFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldCBrZXlzKCkge1xuICAgIGFzc2VydCh0aGlzLmluc3RydWN0aW9ucy5sZW5ndGggPT09IDEpO1xuICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9uc1swXS5rZXlzLm1hcChrZXlPYmogPT4ga2V5T2JqLnB1YmtleSk7XG4gIH1cblxuICAvKipcbiAgICogRGVwcmVjYXRlZCBtZXRob2RcbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXQgcHJvZ3JhbUlkKCkge1xuICAgIGFzc2VydCh0aGlzLmluc3RydWN0aW9ucy5sZW5ndGggPT09IDEpO1xuICAgIHJldHVybiB0aGlzLmluc3RydWN0aW9uc1swXS5wcm9ncmFtSWQ7XG4gIH1cblxuICAvKipcbiAgICogRGVwcmVjYXRlZCBtZXRob2RcbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXQgZGF0YSgpIHtcbiAgICBhc3NlcnQodGhpcy5pbnN0cnVjdGlvbnMubGVuZ3RoID09PSAxKTtcbiAgICByZXR1cm4gdGhpcy5pbnN0cnVjdGlvbnNbMF0uZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBhIHdpcmUgdHJhbnNhY3Rpb24gaW50byBhIFRyYW5zYWN0aW9uIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXIgfCBVaW50OEFycmF5IHwgQXJyYXk8bnVtYmVyPn0gYnVmZmVyIFNpZ25hdHVyZSBvZiB3aXJlIFRyYW5zYWN0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtUcmFuc2FjdGlvbn0gVHJhbnNhY3Rpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBzaWduYXR1cmVcbiAgICovXG4gIHN0YXRpYyBmcm9tKGJ1ZmZlcikge1xuICAgIC8vIFNsaWNlIHVwIHdpcmUgZGF0YVxuICAgIGxldCBieXRlQXJyYXkgPSBbLi4uYnVmZmVyXTtcbiAgICBjb25zdCBzaWduYXR1cmVDb3VudCA9IGRlY29kZUxlbmd0aChieXRlQXJyYXkpO1xuICAgIGxldCBzaWduYXR1cmVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWduYXR1cmVDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBndWFyZGVkU3BsaWNlKGJ5dGVBcnJheSwgMCwgU0lHTkFUVVJFX0xFTkdUSF9JTl9CWVRFUyk7XG4gICAgICBzaWduYXR1cmVzLnB1c2goYnM1OC5lbmNvZGUoQnVmZmVyLmZyb20oc2lnbmF0dXJlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gVHJhbnNhY3Rpb24ucG9wdWxhdGUoTWVzc2FnZS5mcm9tKGJ5dGVBcnJheSksIHNpZ25hdHVyZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvcHVsYXRlIFRyYW5zYWN0aW9uIG9iamVjdCBmcm9tIG1lc3NhZ2UgYW5kIHNpZ25hdHVyZXNcbiAgICpcbiAgICogQHBhcmFtIHtNZXNzYWdlfSBtZXNzYWdlIE1lc3NhZ2Ugb2YgdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBzaWduYXR1cmVzIExpc3Qgb2Ygc2lnbmF0dXJlcyB0byBhc3NpZ24gdG8gdGhlIHRyYW5zYWN0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtUcmFuc2FjdGlvbn0gVGhlIHBvcHVsYXRlZCBUcmFuc2FjdGlvblxuICAgKi9cbiAgc3RhdGljIHBvcHVsYXRlKG1lc3NhZ2UsIHNpZ25hdHVyZXMgPSBbXSkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKCk7XG4gICAgdHJhbnNhY3Rpb24ucmVjZW50QmxvY2toYXNoID0gbWVzc2FnZS5yZWNlbnRCbG9ja2hhc2g7XG4gICAgaWYgKG1lc3NhZ2UuaGVhZGVyLm51bVJlcXVpcmVkU2lnbmF0dXJlcyA+IDApIHtcbiAgICAgIHRyYW5zYWN0aW9uLmZlZVBheWVyID0gbWVzc2FnZS5hY2NvdW50S2V5c1swXTtcbiAgICB9XG4gICAgc2lnbmF0dXJlcy5mb3JFYWNoKChzaWduYXR1cmUsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBzaWdQdWJrZXlQYWlyID0ge1xuICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZSA9PSBiczU4LmVuY29kZShERUZBVUxUX1NJR05BVFVSRSkgPyBudWxsIDogYnM1OC5kZWNvZGUoc2lnbmF0dXJlKSxcbiAgICAgICAgcHVibGljS2V5OiBtZXNzYWdlLmFjY291bnRLZXlzW2luZGV4XVxuICAgICAgfTtcbiAgICAgIHRyYW5zYWN0aW9uLnNpZ25hdHVyZXMucHVzaChzaWdQdWJrZXlQYWlyKTtcbiAgICB9KTtcbiAgICBtZXNzYWdlLmluc3RydWN0aW9ucy5mb3JFYWNoKGluc3RydWN0aW9uID0+IHtcbiAgICAgIGNvbnN0IGtleXMgPSBpbnN0cnVjdGlvbi5hY2NvdW50cy5tYXAoYWNjb3VudCA9PiB7XG4gICAgICAgIGNvbnN0IHB1YmtleSA9IG1lc3NhZ2UuYWNjb3VudEtleXNbYWNjb3VudF07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHVia2V5LFxuICAgICAgICAgIGlzU2lnbmVyOiB0cmFuc2FjdGlvbi5zaWduYXR1cmVzLnNvbWUoa2V5T2JqID0+IGtleU9iai5wdWJsaWNLZXkudG9TdHJpbmcoKSA9PT0gcHVia2V5LnRvU3RyaW5nKCkpIHx8IG1lc3NhZ2UuaXNBY2NvdW50U2lnbmVyKGFjY291bnQpLFxuICAgICAgICAgIGlzV3JpdGFibGU6IG1lc3NhZ2UuaXNBY2NvdW50V3JpdGFibGUoYWNjb3VudClcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdHJhbnNhY3Rpb24uaW5zdHJ1Y3Rpb25zLnB1c2gobmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xuICAgICAgICBrZXlzLFxuICAgICAgICBwcm9ncmFtSWQ6IG1lc3NhZ2UuYWNjb3VudEtleXNbaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkSW5kZXhdLFxuICAgICAgICBkYXRhOiBiczU4LmRlY29kZShpbnN0cnVjdGlvbi5kYXRhKVxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIHRyYW5zYWN0aW9uLl9tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0cmFuc2FjdGlvbi5fanNvbiA9IHRyYW5zYWN0aW9uLnRvSlNPTigpO1xuICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgfVxufVxuXG5jbGFzcyBUcmFuc2FjdGlvbk1lc3NhZ2Uge1xuICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgdGhpcy5wYXllcktleSA9IHZvaWQgMDtcbiAgICB0aGlzLmluc3RydWN0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLnJlY2VudEJsb2NraGFzaCA9IHZvaWQgMDtcbiAgICB0aGlzLnBheWVyS2V5ID0gYXJncy5wYXllcktleTtcbiAgICB0aGlzLmluc3RydWN0aW9ucyA9IGFyZ3MuaW5zdHJ1Y3Rpb25zO1xuICAgIHRoaXMucmVjZW50QmxvY2toYXNoID0gYXJncy5yZWNlbnRCbG9ja2hhc2g7XG4gIH1cbiAgc3RhdGljIGRlY29tcGlsZShtZXNzYWdlLCBhcmdzKSB7XG4gICAgY29uc3Qge1xuICAgICAgaGVhZGVyLFxuICAgICAgY29tcGlsZWRJbnN0cnVjdGlvbnMsXG4gICAgICByZWNlbnRCbG9ja2hhc2hcbiAgICB9ID0gbWVzc2FnZTtcbiAgICBjb25zdCB7XG4gICAgICBudW1SZXF1aXJlZFNpZ25hdHVyZXMsXG4gICAgICBudW1SZWFkb25seVNpZ25lZEFjY291bnRzLFxuICAgICAgbnVtUmVhZG9ubHlVbnNpZ25lZEFjY291bnRzXG4gICAgfSA9IGhlYWRlcjtcbiAgICBjb25zdCBudW1Xcml0YWJsZVNpZ25lZEFjY291bnRzID0gbnVtUmVxdWlyZWRTaWduYXR1cmVzIC0gbnVtUmVhZG9ubHlTaWduZWRBY2NvdW50cztcbiAgICBhc3NlcnQobnVtV3JpdGFibGVTaWduZWRBY2NvdW50cyA+IDAsICdNZXNzYWdlIGhlYWRlciBpcyBpbnZhbGlkJyk7XG4gICAgY29uc3QgbnVtV3JpdGFibGVVbnNpZ25lZEFjY291bnRzID0gbWVzc2FnZS5zdGF0aWNBY2NvdW50S2V5cy5sZW5ndGggLSBudW1SZXF1aXJlZFNpZ25hdHVyZXMgLSBudW1SZWFkb25seVVuc2lnbmVkQWNjb3VudHM7XG4gICAgYXNzZXJ0KG51bVdyaXRhYmxlVW5zaWduZWRBY2NvdW50cyA+PSAwLCAnTWVzc2FnZSBoZWFkZXIgaXMgaW52YWxpZCcpO1xuICAgIGNvbnN0IGFjY291bnRLZXlzID0gbWVzc2FnZS5nZXRBY2NvdW50S2V5cyhhcmdzKTtcbiAgICBjb25zdCBwYXllcktleSA9IGFjY291bnRLZXlzLmdldCgwKTtcbiAgICBpZiAocGF5ZXJLZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZGVjb21waWxlIG1lc3NhZ2UgYmVjYXVzZSBubyBhY2NvdW50IGtleXMgd2VyZSBmb3VuZCcpO1xuICAgIH1cbiAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGNvbXBpbGVkSXggb2YgY29tcGlsZWRJbnN0cnVjdGlvbnMpIHtcbiAgICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICAgIGZvciAoY29uc3Qga2V5SW5kZXggb2YgY29tcGlsZWRJeC5hY2NvdW50S2V5SW5kZXhlcykge1xuICAgICAgICBjb25zdCBwdWJrZXkgPSBhY2NvdW50S2V5cy5nZXQoa2V5SW5kZXgpO1xuICAgICAgICBpZiAocHVia2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmaW5kIGtleSBmb3IgYWNjb3VudCBrZXkgaW5kZXggJHtrZXlJbmRleH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc1NpZ25lciA9IGtleUluZGV4IDwgbnVtUmVxdWlyZWRTaWduYXR1cmVzO1xuICAgICAgICBsZXQgaXNXcml0YWJsZTtcbiAgICAgICAgaWYgKGlzU2lnbmVyKSB7XG4gICAgICAgICAgaXNXcml0YWJsZSA9IGtleUluZGV4IDwgbnVtV3JpdGFibGVTaWduZWRBY2NvdW50cztcbiAgICAgICAgfSBlbHNlIGlmIChrZXlJbmRleCA8IGFjY291bnRLZXlzLnN0YXRpY0FjY291bnRLZXlzLmxlbmd0aCkge1xuICAgICAgICAgIGlzV3JpdGFibGUgPSBrZXlJbmRleCAtIG51bVJlcXVpcmVkU2lnbmF0dXJlcyA8IG51bVdyaXRhYmxlVW5zaWduZWRBY2NvdW50cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc1dyaXRhYmxlID0ga2V5SW5kZXggLSBhY2NvdW50S2V5cy5zdGF0aWNBY2NvdW50S2V5cy5sZW5ndGggPFxuICAgICAgICAgIC8vIGFjY291bnRLZXlzRnJvbUxvb2t1cHMgY2Fubm90IGJlIHVuZGVmaW5lZCBiZWNhdXNlIHdlIGFscmVhZHkgZm91bmQgYSBwdWJrZXkgZm9yIHRoaXMgaW5kZXggYWJvdmVcbiAgICAgICAgICBhY2NvdW50S2V5cy5hY2NvdW50S2V5c0Zyb21Mb29rdXBzLndyaXRhYmxlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goe1xuICAgICAgICAgIHB1YmtleSxcbiAgICAgICAgICBpc1NpZ25lcjoga2V5SW5kZXggPCBoZWFkZXIubnVtUmVxdWlyZWRTaWduYXR1cmVzLFxuICAgICAgICAgIGlzV3JpdGFibGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9ncmFtSWQgPSBhY2NvdW50S2V5cy5nZXQoY29tcGlsZWRJeC5wcm9ncmFtSWRJbmRleCk7XG4gICAgICBpZiAocHJvZ3JhbUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmluZCBwcm9ncmFtIGlkIGZvciBwcm9ncmFtIGlkIGluZGV4ICR7Y29tcGlsZWRJeC5wcm9ncmFtSWRJbmRleH1gKTtcbiAgICAgIH1cbiAgICAgIGluc3RydWN0aW9ucy5wdXNoKG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgICAgcHJvZ3JhbUlkLFxuICAgICAgICBkYXRhOiB0b0J1ZmZlcihjb21waWxlZEl4LmRhdGEpLFxuICAgICAgICBrZXlzXG4gICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb25NZXNzYWdlKHtcbiAgICAgIHBheWVyS2V5LFxuICAgICAgaW5zdHJ1Y3Rpb25zLFxuICAgICAgcmVjZW50QmxvY2toYXNoXG4gICAgfSk7XG4gIH1cbiAgY29tcGlsZVRvTGVnYWN5TWVzc2FnZSgpIHtcbiAgICByZXR1cm4gTWVzc2FnZS5jb21waWxlKHtcbiAgICAgIHBheWVyS2V5OiB0aGlzLnBheWVyS2V5LFxuICAgICAgcmVjZW50QmxvY2toYXNoOiB0aGlzLnJlY2VudEJsb2NraGFzaCxcbiAgICAgIGluc3RydWN0aW9uczogdGhpcy5pbnN0cnVjdGlvbnNcbiAgICB9KTtcbiAgfVxuICBjb21waWxlVG9WME1lc3NhZ2UoYWRkcmVzc0xvb2t1cFRhYmxlQWNjb3VudHMpIHtcbiAgICByZXR1cm4gTWVzc2FnZVYwLmNvbXBpbGUoe1xuICAgICAgcGF5ZXJLZXk6IHRoaXMucGF5ZXJLZXksXG4gICAgICByZWNlbnRCbG9ja2hhc2g6IHRoaXMucmVjZW50QmxvY2toYXNoLFxuICAgICAgaW5zdHJ1Y3Rpb25zOiB0aGlzLmluc3RydWN0aW9ucyxcbiAgICAgIGFkZHJlc3NMb29rdXBUYWJsZUFjY291bnRzXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBWZXJzaW9uZWQgdHJhbnNhY3Rpb24gY2xhc3NcbiAqL1xuY2xhc3MgVmVyc2lvbmVkVHJhbnNhY3Rpb24ge1xuICBnZXQgdmVyc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlLnZlcnNpb247XG4gIH1cbiAgY29uc3RydWN0b3IobWVzc2FnZSwgc2lnbmF0dXJlcykge1xuICAgIHRoaXMuc2lnbmF0dXJlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm1lc3NhZ2UgPSB2b2lkIDA7XG4gICAgaWYgKHNpZ25hdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXNzZXJ0KHNpZ25hdHVyZXMubGVuZ3RoID09PSBtZXNzYWdlLmhlYWRlci5udW1SZXF1aXJlZFNpZ25hdHVyZXMsICdFeHBlY3RlZCBzaWduYXR1cmVzIGxlbmd0aCB0byBiZSBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIHJlcXVpcmVkIHNpZ25hdHVyZXMnKTtcbiAgICAgIHRoaXMuc2lnbmF0dXJlcyA9IHNpZ25hdHVyZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRTaWduYXR1cmVzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2UuaGVhZGVyLm51bVJlcXVpcmVkU2lnbmF0dXJlczsgaSsrKSB7XG4gICAgICAgIGRlZmF1bHRTaWduYXR1cmVzLnB1c2gobmV3IFVpbnQ4QXJyYXkoU0lHTkFUVVJFX0xFTkdUSF9JTl9CWVRFUykpO1xuICAgICAgfVxuICAgICAgdGhpcy5zaWduYXR1cmVzID0gZGVmYXVsdFNpZ25hdHVyZXM7XG4gICAgfVxuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH1cbiAgc2VyaWFsaXplKCkge1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRNZXNzYWdlID0gdGhpcy5tZXNzYWdlLnNlcmlhbGl6ZSgpO1xuICAgIGNvbnN0IGVuY29kZWRTaWduYXR1cmVzTGVuZ3RoID0gQXJyYXkoKTtcbiAgICBlbmNvZGVMZW5ndGgoZW5jb2RlZFNpZ25hdHVyZXNMZW5ndGgsIHRoaXMuc2lnbmF0dXJlcy5sZW5ndGgpO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uTGF5b3V0ID0gQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LmJsb2IoZW5jb2RlZFNpZ25hdHVyZXNMZW5ndGgubGVuZ3RoLCAnZW5jb2RlZFNpZ25hdHVyZXNMZW5ndGgnKSwgQnVmZmVyTGF5b3V0LnNlcShzaWduYXR1cmUoKSwgdGhpcy5zaWduYXR1cmVzLmxlbmd0aCwgJ3NpZ25hdHVyZXMnKSwgQnVmZmVyTGF5b3V0LmJsb2Ioc2VyaWFsaXplZE1lc3NhZ2UubGVuZ3RoLCAnc2VyaWFsaXplZE1lc3NhZ2UnKV0pO1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRUcmFuc2FjdGlvbiA9IG5ldyBVaW50OEFycmF5KDIwNDgpO1xuICAgIGNvbnN0IHNlcmlhbGl6ZWRUcmFuc2FjdGlvbkxlbmd0aCA9IHRyYW5zYWN0aW9uTGF5b3V0LmVuY29kZSh7XG4gICAgICBlbmNvZGVkU2lnbmF0dXJlc0xlbmd0aDogbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZFNpZ25hdHVyZXNMZW5ndGgpLFxuICAgICAgc2lnbmF0dXJlczogdGhpcy5zaWduYXR1cmVzLFxuICAgICAgc2VyaWFsaXplZE1lc3NhZ2VcbiAgICB9LCBzZXJpYWxpemVkVHJhbnNhY3Rpb24pO1xuICAgIHJldHVybiBzZXJpYWxpemVkVHJhbnNhY3Rpb24uc2xpY2UoMCwgc2VyaWFsaXplZFRyYW5zYWN0aW9uTGVuZ3RoKTtcbiAgfVxuICBzdGF0aWMgZGVzZXJpYWxpemUoc2VyaWFsaXplZFRyYW5zYWN0aW9uKSB7XG4gICAgbGV0IGJ5dGVBcnJheSA9IFsuLi5zZXJpYWxpemVkVHJhbnNhY3Rpb25dO1xuICAgIGNvbnN0IHNpZ25hdHVyZXMgPSBbXTtcbiAgICBjb25zdCBzaWduYXR1cmVzTGVuZ3RoID0gZGVjb2RlTGVuZ3RoKGJ5dGVBcnJheSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaWduYXR1cmVzTGVuZ3RoOyBpKyspIHtcbiAgICAgIHNpZ25hdHVyZXMucHVzaChuZXcgVWludDhBcnJheShndWFyZGVkU3BsaWNlKGJ5dGVBcnJheSwgMCwgU0lHTkFUVVJFX0xFTkdUSF9JTl9CWVRFUykpKTtcbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZSA9IFZlcnNpb25lZE1lc3NhZ2UuZGVzZXJpYWxpemUobmV3IFVpbnQ4QXJyYXkoYnl0ZUFycmF5KSk7XG4gICAgcmV0dXJuIG5ldyBWZXJzaW9uZWRUcmFuc2FjdGlvbihtZXNzYWdlLCBzaWduYXR1cmVzKTtcbiAgfVxuICBzaWduKHNpZ25lcnMpIHtcbiAgICBjb25zdCBtZXNzYWdlRGF0YSA9IHRoaXMubWVzc2FnZS5zZXJpYWxpemUoKTtcbiAgICBjb25zdCBzaWduZXJQdWJrZXlzID0gdGhpcy5tZXNzYWdlLnN0YXRpY0FjY291bnRLZXlzLnNsaWNlKDAsIHRoaXMubWVzc2FnZS5oZWFkZXIubnVtUmVxdWlyZWRTaWduYXR1cmVzKTtcbiAgICBmb3IgKGNvbnN0IHNpZ25lciBvZiBzaWduZXJzKSB7XG4gICAgICBjb25zdCBzaWduZXJJbmRleCA9IHNpZ25lclB1YmtleXMuZmluZEluZGV4KHB1YmtleSA9PiBwdWJrZXkuZXF1YWxzKHNpZ25lci5wdWJsaWNLZXkpKTtcbiAgICAgIGFzc2VydChzaWduZXJJbmRleCA+PSAwLCBgQ2Fubm90IHNpZ24gd2l0aCBub24gc2lnbmVyIGtleSAke3NpZ25lci5wdWJsaWNLZXkudG9CYXNlNTgoKX1gKTtcbiAgICAgIHRoaXMuc2lnbmF0dXJlc1tzaWduZXJJbmRleF0gPSBzaWduKG1lc3NhZ2VEYXRhLCBzaWduZXIuc2VjcmV0S2V5KTtcbiAgICB9XG4gIH1cbiAgYWRkU2lnbmF0dXJlKHB1YmxpY0tleSwgc2lnbmF0dXJlKSB7XG4gICAgYXNzZXJ0KHNpZ25hdHVyZS5ieXRlTGVuZ3RoID09PSA2NCwgJ1NpZ25hdHVyZSBtdXN0IGJlIDY0IGJ5dGVzIGxvbmcnKTtcbiAgICBjb25zdCBzaWduZXJQdWJrZXlzID0gdGhpcy5tZXNzYWdlLnN0YXRpY0FjY291bnRLZXlzLnNsaWNlKDAsIHRoaXMubWVzc2FnZS5oZWFkZXIubnVtUmVxdWlyZWRTaWduYXR1cmVzKTtcbiAgICBjb25zdCBzaWduZXJJbmRleCA9IHNpZ25lclB1YmtleXMuZmluZEluZGV4KHB1YmtleSA9PiBwdWJrZXkuZXF1YWxzKHB1YmxpY0tleSkpO1xuICAgIGFzc2VydChzaWduZXJJbmRleCA+PSAwLCBgQ2FuIG5vdCBhZGQgc2lnbmF0dXJlOyBcXGAke3B1YmxpY0tleS50b0Jhc2U1OCgpfVxcYCBpcyBub3QgcmVxdWlyZWQgdG8gc2lnbiB0aGlzIHRyYW5zYWN0aW9uYCk7XG4gICAgdGhpcy5zaWduYXR1cmVzW3NpZ25lckluZGV4XSA9IHNpZ25hdHVyZTtcbiAgfVxufVxuXG4vLyBUT0RPOiBUaGVzZSBjb25zdGFudHMgc2hvdWxkIGJlIHJlbW92ZWQgaW4gZmF2b3Igb2YgcmVhZGluZyB0aGVtIG91dCBvZiBhXG4vLyBTeXNjYWxsIGFjY291bnRcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgTlVNX1RJQ0tTX1BFUl9TRUNPTkQgPSAxNjA7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IERFRkFVTFRfVElDS1NfUEVSX1NMT1QgPSA2NDtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgTlVNX1NMT1RTX1BFUl9TRUNPTkQgPSBOVU1fVElDS1NfUEVSX1NFQ09ORCAvIERFRkFVTFRfVElDS1NfUEVSX1NMT1Q7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IE1TX1BFUl9TTE9UID0gMTAwMCAvIE5VTV9TTE9UU19QRVJfU0VDT05EO1xuXG5jb25zdCBTWVNWQVJfQ0xPQ0tfUFVCS0VZID0gbmV3IFB1YmxpY0tleSgnU3lzdmFyQzFvY2sxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMScpO1xuY29uc3QgU1lTVkFSX0VQT0NIX1NDSEVEVUxFX1BVQktFWSA9IG5ldyBQdWJsaWNLZXkoJ1N5c3ZhckVwb2NoU2NoZWR1MWUxMTExMTExMTExMTExMTExMTExMTExMTEnKTtcbmNvbnN0IFNZU1ZBUl9JTlNUUlVDVElPTlNfUFVCS0VZID0gbmV3IFB1YmxpY0tleSgnU3lzdmFyMW5zdHJ1Y3Rpb25zMTExMTExMTExMTExMTExMTExMTExMTExMScpO1xuY29uc3QgU1lTVkFSX1JFQ0VOVF9CTE9DS0hBU0hFU19QVUJLRVkgPSBuZXcgUHVibGljS2V5KCdTeXN2YXJSZWNlbnRCMW9ja0hhc2hlczExMTExMTExMTExMTExMTExMTExJyk7XG5jb25zdCBTWVNWQVJfUkVOVF9QVUJLRVkgPSBuZXcgUHVibGljS2V5KCdTeXN2YXJSZW50MTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExJyk7XG5jb25zdCBTWVNWQVJfUkVXQVJEU19QVUJLRVkgPSBuZXcgUHVibGljS2V5KCdTeXN2YXJSZXdhcmRzMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExJyk7XG5jb25zdCBTWVNWQVJfU0xPVF9IQVNIRVNfUFVCS0VZID0gbmV3IFB1YmxpY0tleSgnU3lzdmFyUzFvdEhhc2hlczExMTExMTExMTExMTExMTExMTExMTExMTExMScpO1xuY29uc3QgU1lTVkFSX1NMT1RfSElTVE9SWV9QVUJLRVkgPSBuZXcgUHVibGljS2V5KCdTeXN2YXJTMW90SGlzdG9yeTExMTExMTExMTExMTExMTExMTExMTExMTExJyk7XG5jb25zdCBTWVNWQVJfU1RBS0VfSElTVE9SWV9QVUJLRVkgPSBuZXcgUHVibGljS2V5KCdTeXN2YXJTdGFrZUhpc3RvcnkxMTExMTExMTExMTExMTExMTExMTExMTExJyk7XG5cbmNsYXNzIFNlbmRUcmFuc2FjdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgYWN0aW9uLFxuICAgIHNpZ25hdHVyZSxcbiAgICB0cmFuc2FjdGlvbk1lc3NhZ2UsXG4gICAgbG9nc1xuICB9KSB7XG4gICAgY29uc3QgbWF5YmVMb2dzT3V0cHV0ID0gbG9ncyA/IGBMb2dzOiBcXG4ke0pTT04uc3RyaW5naWZ5KGxvZ3Muc2xpY2UoLTEwKSwgbnVsbCwgMil9LiBgIDogJyc7XG4gICAgY29uc3QgZ3VpZGVUZXh0ID0gJ1xcbkNhdGNoIHRoZSBgU2VuZFRyYW5zYWN0aW9uRXJyb3JgIGFuZCBjYWxsIGBnZXRMb2dzKClgIG9uIGl0IGZvciBmdWxsIGRldGFpbHMuJztcbiAgICBsZXQgbWVzc2FnZTtcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAnc2VuZCc6XG4gICAgICAgIG1lc3NhZ2UgPSBgVHJhbnNhY3Rpb24gJHtzaWduYXR1cmV9IHJlc3VsdGVkIGluIGFuIGVycm9yLiBcXG5gICsgYCR7dHJhbnNhY3Rpb25NZXNzYWdlfS4gYCArIG1heWJlTG9nc091dHB1dCArIGd1aWRlVGV4dDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzaW11bGF0ZSc6XG4gICAgICAgIG1lc3NhZ2UgPSBgU2ltdWxhdGlvbiBmYWlsZWQuIFxcbk1lc3NhZ2U6ICR7dHJhbnNhY3Rpb25NZXNzYWdlfS4gXFxuYCArIG1heWJlTG9nc091dHB1dCArIGd1aWRlVGV4dDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZSA9IGBVbmtub3duIGFjdGlvbiAnJHsoYSA9PiBhKShhY3Rpb24pfSdgO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMuc2lnbmF0dXJlID0gdm9pZCAwO1xuICAgIHRoaXMudHJhbnNhY3Rpb25NZXNzYWdlID0gdm9pZCAwO1xuICAgIHRoaXMudHJhbnNhY3Rpb25Mb2dzID0gdm9pZCAwO1xuICAgIHRoaXMuc2lnbmF0dXJlID0gc2lnbmF0dXJlO1xuICAgIHRoaXMudHJhbnNhY3Rpb25NZXNzYWdlID0gdHJhbnNhY3Rpb25NZXNzYWdlO1xuICAgIHRoaXMudHJhbnNhY3Rpb25Mb2dzID0gbG9ncyA/IGxvZ3MgOiB1bmRlZmluZWQ7XG4gIH1cbiAgZ2V0IHRyYW5zYWN0aW9uRXJyb3IoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6IHRoaXMudHJhbnNhY3Rpb25NZXNzYWdlLFxuICAgICAgbG9nczogQXJyYXkuaXNBcnJheSh0aGlzLnRyYW5zYWN0aW9uTG9ncykgPyB0aGlzLnRyYW5zYWN0aW9uTG9ncyA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cblxuICAvKiBAZGVwcmVjYXRlZCBVc2UgYGF3YWl0IGdldExvZ3MoKWAgaW5zdGVhZCAqL1xuICBnZXQgbG9ncygpIHtcbiAgICBjb25zdCBjYWNoZWRMb2dzID0gdGhpcy50cmFuc2FjdGlvbkxvZ3M7XG4gICAgaWYgKGNhY2hlZExvZ3MgIT0gbnVsbCAmJiB0eXBlb2YgY2FjaGVkTG9ncyA9PT0gJ29iamVjdCcgJiYgJ3RoZW4nIGluIGNhY2hlZExvZ3MpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZWRMb2dzO1xuICB9XG4gIGFzeW5jIGdldExvZ3MoY29ubmVjdGlvbikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnRyYW5zYWN0aW9uTG9ncykpIHtcbiAgICAgIHRoaXMudHJhbnNhY3Rpb25Mb2dzID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25uZWN0aW9uLmdldFRyYW5zYWN0aW9uKHRoaXMuc2lnbmF0dXJlKS50aGVuKHR4ID0+IHtcbiAgICAgICAgICBpZiAodHggJiYgdHgubWV0YSAmJiB0eC5tZXRhLmxvZ01lc3NhZ2VzKSB7XG4gICAgICAgICAgICBjb25zdCBsb2dzID0gdHgubWV0YS5sb2dNZXNzYWdlcztcbiAgICAgICAgICAgIHRoaXMudHJhbnNhY3Rpb25Mb2dzID0gbG9ncztcbiAgICAgICAgICAgIHJlc29sdmUobG9ncyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0xvZyBtZXNzYWdlcyBub3QgZm91bmQnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnRyYW5zYWN0aW9uTG9ncztcbiAgfVxufVxuXG4vLyBLZWVwIGluIHN5bmMgd2l0aCBjbGllbnQvc3JjL3JwY19jdXN0b21fZXJyb3JzLnJzXG4vLyBUeXBlc2NyaXB0IGBlbnVtc2AgdGh3YXJ0IHRyZWUtc2hha2luZy4gU2VlIGh0dHBzOi8vYmFyZ3N0ZW4ub3JnL2pzdHMvZW51bXMvXG5jb25zdCBTb2xhbmFKU09OUlBDRXJyb3JDb2RlID0ge1xuICBKU09OX1JQQ19TRVJWRVJfRVJST1JfQkxPQ0tfQ0xFQU5FRF9VUDogLTMyMDAxLFxuICBKU09OX1JQQ19TRVJWRVJfRVJST1JfU0VORF9UUkFOU0FDVElPTl9QUkVGTElHSFRfRkFJTFVSRTogLTMyMDAyLFxuICBKU09OX1JQQ19TRVJWRVJfRVJST1JfVFJBTlNBQ1RJT05fU0lHTkFUVVJFX1ZFUklGSUNBVElPTl9GQUlMVVJFOiAtMzIwMDMsXG4gIEpTT05fUlBDX1NFUlZFUl9FUlJPUl9CTE9DS19OT1RfQVZBSUxBQkxFOiAtMzIwMDQsXG4gIEpTT05fUlBDX1NFUlZFUl9FUlJPUl9OT0RFX1VOSEVBTFRIWTogLTMyMDA1LFxuICBKU09OX1JQQ19TRVJWRVJfRVJST1JfVFJBTlNBQ1RJT05fUFJFQ09NUElMRV9WRVJJRklDQVRJT05fRkFJTFVSRTogLTMyMDA2LFxuICBKU09OX1JQQ19TRVJWRVJfRVJST1JfU0xPVF9TS0lQUEVEOiAtMzIwMDcsXG4gIEpTT05fUlBDX1NFUlZFUl9FUlJPUl9OT19TTkFQU0hPVDogLTMyMDA4LFxuICBKU09OX1JQQ19TRVJWRVJfRVJST1JfTE9OR19URVJNX1NUT1JBR0VfU0xPVF9TS0lQUEVEOiAtMzIwMDksXG4gIEpTT05fUlBDX1NFUlZFUl9FUlJPUl9LRVlfRVhDTFVERURfRlJPTV9TRUNPTkRBUllfSU5ERVg6IC0zMjAxMCxcbiAgSlNPTl9SUENfU0VSVkVSX0VSUk9SX1RSQU5TQUNUSU9OX0hJU1RPUllfTk9UX0FWQUlMQUJMRTogLTMyMDExLFxuICBKU09OX1JQQ19TQ0FOX0VSUk9SOiAtMzIwMTIsXG4gIEpTT05fUlBDX1NFUlZFUl9FUlJPUl9UUkFOU0FDVElPTl9TSUdOQVRVUkVfTEVOX01JU01BVENIOiAtMzIwMTMsXG4gIEpTT05fUlBDX1NFUlZFUl9FUlJPUl9CTE9DS19TVEFUVVNfTk9UX0FWQUlMQUJMRV9ZRVQ6IC0zMjAxNCxcbiAgSlNPTl9SUENfU0VSVkVSX0VSUk9SX1VOU1VQUE9SVEVEX1RSQU5TQUNUSU9OX1ZFUlNJT046IC0zMjAxNSxcbiAgSlNPTl9SUENfU0VSVkVSX0VSUk9SX01JTl9DT05URVhUX1NMT1RfTk9UX1JFQUNIRUQ6IC0zMjAxNlxufTtcbmNsYXNzIFNvbGFuYUpTT05SUENFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGNvZGUsXG4gICAgbWVzc2FnZSxcbiAgICBkYXRhXG4gIH0sIGN1c3RvbU1lc3NhZ2UpIHtcbiAgICBzdXBlcihjdXN0b21NZXNzYWdlICE9IG51bGwgPyBgJHtjdXN0b21NZXNzYWdlfTogJHttZXNzYWdlfWAgOiBtZXNzYWdlKTtcbiAgICB0aGlzLmNvZGUgPSB2b2lkIDA7XG4gICAgdGhpcy5kYXRhID0gdm9pZCAwO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLm5hbWUgPSAnU29sYW5hSlNPTlJQQ0Vycm9yJztcbiAgfVxufVxuXG4vKipcbiAqIFNpZ24sIHNlbmQgYW5kIGNvbmZpcm0gYSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBJZiBgY29tbWl0bWVudGAgb3B0aW9uIGlzIG5vdCBzcGVjaWZpZWQsIGRlZmF1bHRzIHRvICdtYXgnIGNvbW1pdG1lbnQuXG4gKlxuICogQHBhcmFtIHtDb25uZWN0aW9ufSBjb25uZWN0aW9uXG4gKiBAcGFyYW0ge1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICogQHBhcmFtIHtBcnJheTxTaWduZXI+fSBzaWduZXJzXG4gKiBAcGFyYW0ge0NvbmZpcm1PcHRpb25zfSBbb3B0aW9uc11cbiAqIEByZXR1cm5zIHtQcm9taXNlPFRyYW5zYWN0aW9uU2lnbmF0dXJlPn1cbiAqL1xuYXN5bmMgZnVuY3Rpb24gc2VuZEFuZENvbmZpcm1UcmFuc2FjdGlvbihjb25uZWN0aW9uLCB0cmFuc2FjdGlvbiwgc2lnbmVycywgb3B0aW9ucykge1xuICBjb25zdCBzZW5kT3B0aW9ucyA9IG9wdGlvbnMgJiYge1xuICAgIHNraXBQcmVmbGlnaHQ6IG9wdGlvbnMuc2tpcFByZWZsaWdodCxcbiAgICBwcmVmbGlnaHRDb21taXRtZW50OiBvcHRpb25zLnByZWZsaWdodENvbW1pdG1lbnQgfHwgb3B0aW9ucy5jb21taXRtZW50LFxuICAgIG1heFJldHJpZXM6IG9wdGlvbnMubWF4UmV0cmllcyxcbiAgICBtaW5Db250ZXh0U2xvdDogb3B0aW9ucy5taW5Db250ZXh0U2xvdFxuICB9O1xuICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBjb25uZWN0aW9uLnNlbmRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbiwgc2lnbmVycywgc2VuZE9wdGlvbnMpO1xuICBsZXQgc3RhdHVzO1xuICBpZiAodHJhbnNhY3Rpb24ucmVjZW50QmxvY2toYXNoICE9IG51bGwgJiYgdHJhbnNhY3Rpb24ubGFzdFZhbGlkQmxvY2tIZWlnaHQgIT0gbnVsbCkge1xuICAgIHN0YXR1cyA9IChhd2FpdCBjb25uZWN0aW9uLmNvbmZpcm1UcmFuc2FjdGlvbih7XG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucz8uYWJvcnRTaWduYWwsXG4gICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZSxcbiAgICAgIGJsb2NraGFzaDogdHJhbnNhY3Rpb24ucmVjZW50QmxvY2toYXNoLFxuICAgICAgbGFzdFZhbGlkQmxvY2tIZWlnaHQ6IHRyYW5zYWN0aW9uLmxhc3RWYWxpZEJsb2NrSGVpZ2h0XG4gICAgfSwgb3B0aW9ucyAmJiBvcHRpb25zLmNvbW1pdG1lbnQpKS52YWx1ZTtcbiAgfSBlbHNlIGlmICh0cmFuc2FjdGlvbi5taW5Ob25jZUNvbnRleHRTbG90ICE9IG51bGwgJiYgdHJhbnNhY3Rpb24ubm9uY2VJbmZvICE9IG51bGwpIHtcbiAgICBjb25zdCB7XG4gICAgICBub25jZUluc3RydWN0aW9uXG4gICAgfSA9IHRyYW5zYWN0aW9uLm5vbmNlSW5mbztcbiAgICBjb25zdCBub25jZUFjY291bnRQdWJrZXkgPSBub25jZUluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5O1xuICAgIHN0YXR1cyA9IChhd2FpdCBjb25uZWN0aW9uLmNvbmZpcm1UcmFuc2FjdGlvbih7XG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucz8uYWJvcnRTaWduYWwsXG4gICAgICBtaW5Db250ZXh0U2xvdDogdHJhbnNhY3Rpb24ubWluTm9uY2VDb250ZXh0U2xvdCxcbiAgICAgIG5vbmNlQWNjb3VudFB1YmtleSxcbiAgICAgIG5vbmNlVmFsdWU6IHRyYW5zYWN0aW9uLm5vbmNlSW5mby5ub25jZSxcbiAgICAgIHNpZ25hdHVyZVxuICAgIH0sIG9wdGlvbnMgJiYgb3B0aW9ucy5jb21taXRtZW50KSkudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG9wdGlvbnM/LmFib3J0U2lnbmFsICE9IG51bGwpIHtcbiAgICAgIGNvbnNvbGUud2Fybignc2VuZEFuZENvbmZpcm1UcmFuc2FjdGlvbigpOiBBIHRyYW5zYWN0aW9uIHdpdGggYSBkZXByZWNhdGVkIGNvbmZpcm1hdGlvbiBzdHJhdGVneSB3YXMgJyArICdzdXBwbGllZCBhbG9uZyB3aXRoIGFuIGBhYm9ydFNpZ25hbGAuIE9ubHkgdHJhbnNhY3Rpb25zIGhhdmluZyBgbGFzdFZhbGlkQmxvY2tIZWlnaHRgICcgKyAnb3IgYSBjb21iaW5hdGlvbiBvZiBgbm9uY2VJbmZvYCBhbmQgYG1pbk5vbmNlQ29udGV4dFNsb3RgIGFyZSBhYm9ydGFibGUuJyk7XG4gICAgfVxuICAgIHN0YXR1cyA9IChhd2FpdCBjb25uZWN0aW9uLmNvbmZpcm1UcmFuc2FjdGlvbihzaWduYXR1cmUsIG9wdGlvbnMgJiYgb3B0aW9ucy5jb21taXRtZW50KSkudmFsdWU7XG4gIH1cbiAgaWYgKHN0YXR1cy5lcnIpIHtcbiAgICBpZiAoc2lnbmF0dXJlICE9IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBTZW5kVHJhbnNhY3Rpb25FcnJvcih7XG4gICAgICAgIGFjdGlvbjogJ3NlbmQnLFxuICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZSxcbiAgICAgICAgdHJhbnNhY3Rpb25NZXNzYWdlOiBgU3RhdHVzOiAoJHtKU09OLnN0cmluZ2lmeShzdGF0dXMpfSlgXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUcmFuc2FjdGlvbiAke3NpZ25hdHVyZX0gZmFpbGVkICgke0pTT04uc3RyaW5naWZ5KHN0YXR1cyl9KWApO1xuICB9XG4gIHJldHVybiBzaWduYXR1cmU7XG59XG5cbi8vIHp6elxuZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbi8qKlxuICogUG9wdWxhdGUgYSBidWZmZXIgb2YgaW5zdHJ1Y3Rpb24gZGF0YSB1c2luZyBhbiBJbnN0cnVjdGlvblR5cGVcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBlbmNvZGVEYXRhKHR5cGUsIGZpZWxkcykge1xuICBjb25zdCBhbGxvY0xlbmd0aCA9IHR5cGUubGF5b3V0LnNwYW4gPj0gMCA/IHR5cGUubGF5b3V0LnNwYW4gOiBnZXRBbGxvYyh0eXBlLCBmaWVsZHMpO1xuICBjb25zdCBkYXRhID0gQnVmZmVyLmFsbG9jKGFsbG9jTGVuZ3RoKTtcbiAgY29uc3QgbGF5b3V0RmllbGRzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgaW5zdHJ1Y3Rpb246IHR5cGUuaW5kZXhcbiAgfSwgZmllbGRzKTtcbiAgdHlwZS5sYXlvdXQuZW5jb2RlKGxheW91dEZpZWxkcywgZGF0YSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIERlY29kZSBpbnN0cnVjdGlvbiBkYXRhIGJ1ZmZlciB1c2luZyBhbiBJbnN0cnVjdGlvblR5cGVcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBkZWNvZGVEYXRhJDEodHlwZSwgYnVmZmVyKSB7XG4gIGxldCBkYXRhO1xuICB0cnkge1xuICAgIGRhdGEgPSB0eXBlLmxheW91dC5kZWNvZGUoYnVmZmVyKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGluc3RydWN0aW9uOyAnICsgZXJyKTtcbiAgfVxuICBpZiAoZGF0YS5pbnN0cnVjdGlvbiAhPT0gdHlwZS5pbmRleCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBpbnN0cnVjdGlvbjsgaW5zdHJ1Y3Rpb24gaW5kZXggbWlzbWF0Y2ggJHtkYXRhLmluc3RydWN0aW9ufSAhPSAke3R5cGUuaW5kZXh9YCk7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9naXRodWIuY29tL3NvbGFuYS1sYWJzL3NvbGFuYS9ibG9iLzkwYmVkZDdlMDY3YjViOGYzZGRiYjQ1ZGEwMGE0ZTljYWJiMjJjNjIvc2RrL3NyYy9mZWVfY2FsY3VsYXRvci5ycyNMNy1MMTFcbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgRmVlQ2FsY3VsYXRvckxheW91dCA9IEJ1ZmZlckxheW91dC5udTY0KCdsYW1wb3J0c1BlclNpZ25hdHVyZScpO1xuXG4vKipcbiAqIENhbGN1bGF0b3IgZm9yIHRyYW5zYWN0aW9uIGZlZXMuXG4gKlxuICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBzaW5jZSBTb2xhbmEgdjEuOC4wLlxuICovXG5cbi8qKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2xhbmEtbGFicy9zb2xhbmEvYmxvYi8wZWEyODQzZWM5Y2RjNTE3NTcyYjhlNjJjOTU5ZjQxYjU1Y2Y0NDUzL3Nkay9zcmMvbm9uY2Vfc3RhdGUucnMjTDI5LUwzMlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBOb25jZUFjY291bnRMYXlvdXQgPSBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCd2ZXJzaW9uJyksIEJ1ZmZlckxheW91dC51MzIoJ3N0YXRlJyksIHB1YmxpY0tleSgnYXV0aG9yaXplZFB1YmtleScpLCBwdWJsaWNLZXkoJ25vbmNlJyksIEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0ZlZUNhbGN1bGF0b3JMYXlvdXRdLCAnZmVlQ2FsY3VsYXRvcicpXSk7XG5jb25zdCBOT05DRV9BQ0NPVU5UX0xFTkdUSCA9IE5vbmNlQWNjb3VudExheW91dC5zcGFuO1xuXG4vKipcbiAqIEEgZHVyYWJsZSBub25jZSBpcyBhIDMyIGJ5dGUgdmFsdWUgZW5jb2RlZCBhcyBhIGJhc2U1OCBzdHJpbmcuXG4gKi9cblxuLyoqXG4gKiBOb25jZUFjY291bnQgY2xhc3NcbiAqL1xuY2xhc3MgTm9uY2VBY2NvdW50IHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHRoaXMuYXV0aG9yaXplZFB1YmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLm5vbmNlID0gdm9pZCAwO1xuICAgIHRoaXMuZmVlQ2FsY3VsYXRvciA9IHZvaWQgMDtcbiAgICB0aGlzLmF1dGhvcml6ZWRQdWJrZXkgPSBhcmdzLmF1dGhvcml6ZWRQdWJrZXk7XG4gICAgdGhpcy5ub25jZSA9IGFyZ3Mubm9uY2U7XG4gICAgdGhpcy5mZWVDYWxjdWxhdG9yID0gYXJncy5mZWVDYWxjdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplIE5vbmNlQWNjb3VudCBmcm9tIHRoZSBhY2NvdW50IGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgYWNjb3VudCBkYXRhXG4gICAqIEByZXR1cm4gTm9uY2VBY2NvdW50XG4gICAqL1xuICBzdGF0aWMgZnJvbUFjY291bnREYXRhKGJ1ZmZlcikge1xuICAgIGNvbnN0IG5vbmNlQWNjb3VudCA9IE5vbmNlQWNjb3VudExheW91dC5kZWNvZGUodG9CdWZmZXIoYnVmZmVyKSwgMCk7XG4gICAgcmV0dXJuIG5ldyBOb25jZUFjY291bnQoe1xuICAgICAgYXV0aG9yaXplZFB1YmtleTogbmV3IFB1YmxpY0tleShub25jZUFjY291bnQuYXV0aG9yaXplZFB1YmtleSksXG4gICAgICBub25jZTogbmV3IFB1YmxpY0tleShub25jZUFjY291bnQubm9uY2UpLnRvU3RyaW5nKCksXG4gICAgICBmZWVDYWxjdWxhdG9yOiBub25jZUFjY291bnQuZmVlQ2FsY3VsYXRvclxuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IGVuY29kZURlY29kZSA9IGxheW91dCA9PiB7XG4gIGNvbnN0IGRlY29kZSA9IGxheW91dC5kZWNvZGUuYmluZChsYXlvdXQpO1xuICBjb25zdCBlbmNvZGUgPSBsYXlvdXQuZW5jb2RlLmJpbmQobGF5b3V0KTtcbiAgcmV0dXJuIHtcbiAgICBkZWNvZGUsXG4gICAgZW5jb2RlXG4gIH07XG59O1xuY29uc3QgYmlnSW50ID0gbGVuZ3RoID0+IHByb3BlcnR5ID0+IHtcbiAgY29uc3QgbGF5b3V0ID0gYmxvYihsZW5ndGgsIHByb3BlcnR5KTtcbiAgY29uc3Qge1xuICAgIGVuY29kZSxcbiAgICBkZWNvZGVcbiAgfSA9IGVuY29kZURlY29kZShsYXlvdXQpO1xuICBjb25zdCBiaWdJbnRMYXlvdXQgPSBsYXlvdXQ7XG4gIGJpZ0ludExheW91dC5kZWNvZGUgPSAoYnVmZmVyLCBvZmZzZXQpID0+IHtcbiAgICBjb25zdCBzcmMgPSBkZWNvZGUoYnVmZmVyLCBvZmZzZXQpO1xuICAgIHJldHVybiB0b0JpZ0ludExFKEJ1ZmZlci5mcm9tKHNyYykpO1xuICB9O1xuICBiaWdJbnRMYXlvdXQuZW5jb2RlID0gKGJpZ0ludCwgYnVmZmVyLCBvZmZzZXQpID0+IHtcbiAgICBjb25zdCBzcmMgPSB0b0J1ZmZlckxFKGJpZ0ludCwgbGVuZ3RoKTtcbiAgICByZXR1cm4gZW5jb2RlKHNyYywgYnVmZmVyLCBvZmZzZXQpO1xuICB9O1xuICByZXR1cm4gYmlnSW50TGF5b3V0O1xufTtcbmNvbnN0IHU2NCA9IGJpZ0ludCg4KTtcblxuLyoqXG4gKiBDcmVhdGUgYWNjb3VudCBzeXN0ZW0gdHJhbnNhY3Rpb24gcGFyYW1zXG4gKi9cblxuLyoqXG4gKiBUcmFuc2ZlciBzeXN0ZW0gdHJhbnNhY3Rpb24gcGFyYW1zXG4gKi9cblxuLyoqXG4gKiBBc3NpZ24gc3lzdGVtIHRyYW5zYWN0aW9uIHBhcmFtc1xuICovXG5cbi8qKlxuICogQ3JlYXRlIGFjY291bnQgd2l0aCBzZWVkIHN5c3RlbSB0cmFuc2FjdGlvbiBwYXJhbXNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBub25jZSBhY2NvdW50IHN5c3RlbSB0cmFuc2FjdGlvbiBwYXJhbXNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBub25jZSBhY2NvdW50IHdpdGggc2VlZCBzeXN0ZW0gdHJhbnNhY3Rpb24gcGFyYW1zXG4gKi9cblxuLyoqXG4gKiBJbml0aWFsaXplIG5vbmNlIGFjY291bnQgc3lzdGVtIGluc3RydWN0aW9uIHBhcmFtc1xuICovXG5cbi8qKlxuICogQWR2YW5jZSBub25jZSBhY2NvdW50IHN5c3RlbSBpbnN0cnVjdGlvbiBwYXJhbXNcbiAqL1xuXG4vKipcbiAqIFdpdGhkcmF3IG5vbmNlIGFjY291bnQgc3lzdGVtIHRyYW5zYWN0aW9uIHBhcmFtc1xuICovXG5cbi8qKlxuICogQXV0aG9yaXplIG5vbmNlIGFjY291bnQgc3lzdGVtIHRyYW5zYWN0aW9uIHBhcmFtc1xuICovXG5cbi8qKlxuICogQWxsb2NhdGUgYWNjb3VudCBzeXN0ZW0gdHJhbnNhY3Rpb24gcGFyYW1zXG4gKi9cblxuLyoqXG4gKiBBbGxvY2F0ZSBhY2NvdW50IHdpdGggc2VlZCBzeXN0ZW0gdHJhbnNhY3Rpb24gcGFyYW1zXG4gKi9cblxuLyoqXG4gKiBBc3NpZ24gYWNjb3VudCB3aXRoIHNlZWQgc3lzdGVtIHRyYW5zYWN0aW9uIHBhcmFtc1xuICovXG5cbi8qKlxuICogVHJhbnNmZXIgd2l0aCBzZWVkIHN5c3RlbSB0cmFuc2FjdGlvbiBwYXJhbXNcbiAqL1xuXG4vKiogRGVjb2RlZCB0cmFuc2ZlciBzeXN0ZW0gdHJhbnNhY3Rpb24gaW5zdHJ1Y3Rpb24gKi9cblxuLyoqIERlY29kZWQgdHJhbnNmZXJXaXRoU2VlZCBzeXN0ZW0gdHJhbnNhY3Rpb24gaW5zdHJ1Y3Rpb24gKi9cblxuLyoqXG4gKiBTeXN0ZW0gSW5zdHJ1Y3Rpb24gY2xhc3NcbiAqL1xuY2xhc3MgU3lzdGVtSW5zdHJ1Y3Rpb24ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIHN5c3RlbSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHR5cGUuXG4gICAqL1xuICBzdGF0aWMgZGVjb2RlSW5zdHJ1Y3Rpb25UeXBlKGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIGNvbnN0IGluc3RydWN0aW9uVHlwZUxheW91dCA9IEJ1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyk7XG4gICAgY29uc3QgdHlwZUluZGV4ID0gaW5zdHJ1Y3Rpb25UeXBlTGF5b3V0LmRlY29kZShpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICBsZXQgdHlwZTtcbiAgICBmb3IgKGNvbnN0IFtpeFR5cGUsIGxheW91dF0gb2YgT2JqZWN0LmVudHJpZXMoU1lTVEVNX0lOU1RSVUNUSU9OX0xBWU9VVFMpKSB7XG4gICAgICBpZiAobGF5b3V0LmluZGV4ID09IHR5cGVJbmRleCkge1xuICAgICAgICB0eXBlID0gaXhUeXBlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luc3RydWN0aW9uIHR5cGUgaW5jb3JyZWN0OyBub3QgYSBTeXN0ZW1JbnN0cnVjdGlvbicpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgYSBjcmVhdGUgYWNjb3VudCBzeXN0ZW0gaW5zdHJ1Y3Rpb24gYW5kIHJldHJpZXZlIHRoZSBpbnN0cnVjdGlvbiBwYXJhbXMuXG4gICAqL1xuICBzdGF0aWMgZGVjb2RlQ3JlYXRlQWNjb3VudChpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDIpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxhbXBvcnRzLFxuICAgICAgc3BhY2UsXG4gICAgICBwcm9ncmFtSWRcbiAgICB9ID0gZGVjb2RlRGF0YSQxKFNZU1RFTV9JTlNUUlVDVElPTl9MQVlPVVRTLkNyZWF0ZSwgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZyb21QdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5LFxuICAgICAgbmV3QWNjb3VudFB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1sxXS5wdWJrZXksXG4gICAgICBsYW1wb3J0cyxcbiAgICAgIHNwYWNlLFxuICAgICAgcHJvZ3JhbUlkOiBuZXcgUHVibGljS2V5KHByb2dyYW1JZClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIHRyYW5zZmVyIHN5c3RlbSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVUcmFuc2ZlcihpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDIpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxhbXBvcnRzXG4gICAgfSA9IGRlY29kZURhdGEkMShTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUy5UcmFuc2ZlciwgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZyb21QdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5LFxuICAgICAgdG9QdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMV0ucHVia2V5LFxuICAgICAgbGFtcG9ydHNcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIHRyYW5zZmVyIHdpdGggc2VlZCBzeXN0ZW0gaW5zdHJ1Y3Rpb24gYW5kIHJldHJpZXZlIHRoZSBpbnN0cnVjdGlvbiBwYXJhbXMuXG4gICAqL1xuICBzdGF0aWMgZGVjb2RlVHJhbnNmZXJXaXRoU2VlZChpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDMpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxhbXBvcnRzLFxuICAgICAgc2VlZCxcbiAgICAgIHByb2dyYW1JZFxuICAgIH0gPSBkZWNvZGVEYXRhJDEoU1lTVEVNX0lOU1RSVUNUSU9OX0xBWU9VVFMuVHJhbnNmZXJXaXRoU2VlZCwgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZyb21QdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5LFxuICAgICAgYmFzZVB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1sxXS5wdWJrZXksXG4gICAgICB0b1B1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1syXS5wdWJrZXksXG4gICAgICBsYW1wb3J0cyxcbiAgICAgIHNlZWQsXG4gICAgICBwcm9ncmFtSWQ6IG5ldyBQdWJsaWNLZXkocHJvZ3JhbUlkKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGFuIGFsbG9jYXRlIHN5c3RlbSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVBbGxvY2F0ZShpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDEpO1xuICAgIGNvbnN0IHtcbiAgICAgIHNwYWNlXG4gICAgfSA9IGRlY29kZURhdGEkMShTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUy5BbGxvY2F0ZSwgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjY291bnRQdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5LFxuICAgICAgc3BhY2VcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhbiBhbGxvY2F0ZSB3aXRoIHNlZWQgc3lzdGVtIGluc3RydWN0aW9uIGFuZCByZXRyaWV2ZSB0aGUgaW5zdHJ1Y3Rpb24gcGFyYW1zLlxuICAgKi9cbiAgc3RhdGljIGRlY29kZUFsbG9jYXRlV2l0aFNlZWQoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgdGhpcy5jaGVja0tleUxlbmd0aChpbnN0cnVjdGlvbi5rZXlzLCAxKTtcbiAgICBjb25zdCB7XG4gICAgICBiYXNlLFxuICAgICAgc2VlZCxcbiAgICAgIHNwYWNlLFxuICAgICAgcHJvZ3JhbUlkXG4gICAgfSA9IGRlY29kZURhdGEkMShTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUy5BbGxvY2F0ZVdpdGhTZWVkLCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgYWNjb3VudFB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1swXS5wdWJrZXksXG4gICAgICBiYXNlUHVia2V5OiBuZXcgUHVibGljS2V5KGJhc2UpLFxuICAgICAgc2VlZCxcbiAgICAgIHNwYWNlLFxuICAgICAgcHJvZ3JhbUlkOiBuZXcgUHVibGljS2V5KHByb2dyYW1JZClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhbiBhc3NpZ24gc3lzdGVtIGluc3RydWN0aW9uIGFuZCByZXRyaWV2ZSB0aGUgaW5zdHJ1Y3Rpb24gcGFyYW1zLlxuICAgKi9cbiAgc3RhdGljIGRlY29kZUFzc2lnbihpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDEpO1xuICAgIGNvbnN0IHtcbiAgICAgIHByb2dyYW1JZFxuICAgIH0gPSBkZWNvZGVEYXRhJDEoU1lTVEVNX0lOU1RSVUNUSU9OX0xBWU9VVFMuQXNzaWduLCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgYWNjb3VudFB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1swXS5wdWJrZXksXG4gICAgICBwcm9ncmFtSWQ6IG5ldyBQdWJsaWNLZXkocHJvZ3JhbUlkKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGFuIGFzc2lnbiB3aXRoIHNlZWQgc3lzdGVtIGluc3RydWN0aW9uIGFuZCByZXRyaWV2ZSB0aGUgaW5zdHJ1Y3Rpb24gcGFyYW1zLlxuICAgKi9cbiAgc3RhdGljIGRlY29kZUFzc2lnbldpdGhTZWVkKGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIHRoaXMuY2hlY2tLZXlMZW5ndGgoaW5zdHJ1Y3Rpb24ua2V5cywgMSk7XG4gICAgY29uc3Qge1xuICAgICAgYmFzZSxcbiAgICAgIHNlZWQsXG4gICAgICBwcm9ncmFtSWRcbiAgICB9ID0gZGVjb2RlRGF0YSQxKFNZU1RFTV9JTlNUUlVDVElPTl9MQVlPVVRTLkFzc2lnbldpdGhTZWVkLCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgYWNjb3VudFB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1swXS5wdWJrZXksXG4gICAgICBiYXNlUHVia2V5OiBuZXcgUHVibGljS2V5KGJhc2UpLFxuICAgICAgc2VlZCxcbiAgICAgIHByb2dyYW1JZDogbmV3IFB1YmxpY0tleShwcm9ncmFtSWQpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgYSBjcmVhdGUgYWNjb3VudCB3aXRoIHNlZWQgc3lzdGVtIGluc3RydWN0aW9uIGFuZCByZXRyaWV2ZSB0aGUgaW5zdHJ1Y3Rpb24gcGFyYW1zLlxuICAgKi9cbiAgc3RhdGljIGRlY29kZUNyZWF0ZVdpdGhTZWVkKGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIHRoaXMuY2hlY2tLZXlMZW5ndGgoaW5zdHJ1Y3Rpb24ua2V5cywgMik7XG4gICAgY29uc3Qge1xuICAgICAgYmFzZSxcbiAgICAgIHNlZWQsXG4gICAgICBsYW1wb3J0cyxcbiAgICAgIHNwYWNlLFxuICAgICAgcHJvZ3JhbUlkXG4gICAgfSA9IGRlY29kZURhdGEkMShTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUy5DcmVhdGVXaXRoU2VlZCwgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZyb21QdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5LFxuICAgICAgbmV3QWNjb3VudFB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1sxXS5wdWJrZXksXG4gICAgICBiYXNlUHVia2V5OiBuZXcgUHVibGljS2V5KGJhc2UpLFxuICAgICAgc2VlZCxcbiAgICAgIGxhbXBvcnRzLFxuICAgICAgc3BhY2UsXG4gICAgICBwcm9ncmFtSWQ6IG5ldyBQdWJsaWNLZXkocHJvZ3JhbUlkKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGEgbm9uY2UgaW5pdGlhbGl6ZSBzeXN0ZW0gaW5zdHJ1Y3Rpb24gYW5kIHJldHJpZXZlIHRoZSBpbnN0cnVjdGlvbiBwYXJhbXMuXG4gICAqL1xuICBzdGF0aWMgZGVjb2RlTm9uY2VJbml0aWFsaXplKGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIHRoaXMuY2hlY2tLZXlMZW5ndGgoaW5zdHJ1Y3Rpb24ua2V5cywgMyk7XG4gICAgY29uc3Qge1xuICAgICAgYXV0aG9yaXplZFxuICAgIH0gPSBkZWNvZGVEYXRhJDEoU1lTVEVNX0lOU1RSVUNUSU9OX0xBWU9VVFMuSW5pdGlhbGl6ZU5vbmNlQWNjb3VudCwgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vbmNlUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzBdLnB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRQdWJrZXk6IG5ldyBQdWJsaWNLZXkoYXV0aG9yaXplZClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIG5vbmNlIGFkdmFuY2Ugc3lzdGVtIGluc3RydWN0aW9uIGFuZCByZXRyaWV2ZSB0aGUgaW5zdHJ1Y3Rpb24gcGFyYW1zLlxuICAgKi9cbiAgc3RhdGljIGRlY29kZU5vbmNlQWR2YW5jZShpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDMpO1xuICAgIGRlY29kZURhdGEkMShTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUy5BZHZhbmNlTm9uY2VBY2NvdW50LCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgbm9uY2VQdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5LFxuICAgICAgYXV0aG9yaXplZFB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1syXS5wdWJrZXlcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIG5vbmNlIHdpdGhkcmF3IHN5c3RlbSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVOb25jZVdpdGhkcmF3KGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIHRoaXMuY2hlY2tLZXlMZW5ndGgoaW5zdHJ1Y3Rpb24ua2V5cywgNSk7XG4gICAgY29uc3Qge1xuICAgICAgbGFtcG9ydHNcbiAgICB9ID0gZGVjb2RlRGF0YSQxKFNZU1RFTV9JTlNUUlVDVElPTl9MQVlPVVRTLldpdGhkcmF3Tm9uY2VBY2NvdW50LCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgbm9uY2VQdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5LFxuICAgICAgdG9QdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMV0ucHVia2V5LFxuICAgICAgYXV0aG9yaXplZFB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1s0XS5wdWJrZXksXG4gICAgICBsYW1wb3J0c1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGEgbm9uY2UgYXV0aG9yaXplIHN5c3RlbSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVOb25jZUF1dGhvcml6ZShpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDIpO1xuICAgIGNvbnN0IHtcbiAgICAgIGF1dGhvcml6ZWRcbiAgICB9ID0gZGVjb2RlRGF0YSQxKFNZU1RFTV9JTlNUUlVDVElPTl9MQVlPVVRTLkF1dGhvcml6ZU5vbmNlQWNjb3VudCwgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vbmNlUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzBdLnB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRQdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMV0ucHVia2V5LFxuICAgICAgbmV3QXV0aG9yaXplZFB1YmtleTogbmV3IFB1YmxpY0tleShhdXRob3JpemVkKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzdGF0aWMgY2hlY2tQcm9ncmFtSWQocHJvZ3JhbUlkKSB7XG4gICAgaWYgKCFwcm9ncmFtSWQuZXF1YWxzKFN5c3RlbVByb2dyYW0ucHJvZ3JhbUlkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGluc3RydWN0aW9uOyBwcm9ncmFtSWQgaXMgbm90IFN5c3RlbVByb2dyYW0nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzdGF0aWMgY2hlY2tLZXlMZW5ndGgoa2V5cywgZXhwZWN0ZWRMZW5ndGgpIHtcbiAgICBpZiAoa2V5cy5sZW5ndGggPCBleHBlY3RlZExlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGluc3RydWN0aW9uOyBmb3VuZCAke2tleXMubGVuZ3RofSBrZXlzLCBleHBlY3RlZCBhdCBsZWFzdCAke2V4cGVjdGVkTGVuZ3RofWApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHZhbGlkIFN5c3RlbUluc3RydWN0aW9uVHlwZSdzXG4gKi9cblxuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiB2YWxpZCBzeXN0ZW0gSW5zdHJ1Y3Rpb25UeXBlJ3NcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUyA9IE9iamVjdC5mcmVlemUoe1xuICBDcmVhdGU6IHtcbiAgICBpbmRleDogMCxcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyksIEJ1ZmZlckxheW91dC5uczY0KCdsYW1wb3J0cycpLCBCdWZmZXJMYXlvdXQubnM2NCgnc3BhY2UnKSwgcHVibGljS2V5KCdwcm9ncmFtSWQnKV0pXG4gIH0sXG4gIEFzc2lnbjoge1xuICAgIGluZGV4OiAxLFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKSwgcHVibGljS2V5KCdwcm9ncmFtSWQnKV0pXG4gIH0sXG4gIFRyYW5zZmVyOiB7XG4gICAgaW5kZXg6IDIsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpLCB1NjQoJ2xhbXBvcnRzJyldKVxuICB9LFxuICBDcmVhdGVXaXRoU2VlZDoge1xuICAgIGluZGV4OiAzLFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKSwgcHVibGljS2V5KCdiYXNlJyksIHJ1c3RTdHJpbmcoJ3NlZWQnKSwgQnVmZmVyTGF5b3V0Lm5zNjQoJ2xhbXBvcnRzJyksIEJ1ZmZlckxheW91dC5uczY0KCdzcGFjZScpLCBwdWJsaWNLZXkoJ3Byb2dyYW1JZCcpXSlcbiAgfSxcbiAgQWR2YW5jZU5vbmNlQWNjb3VudDoge1xuICAgIGluZGV4OiA0LFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKV0pXG4gIH0sXG4gIFdpdGhkcmF3Tm9uY2VBY2NvdW50OiB7XG4gICAgaW5kZXg6IDUsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpLCBCdWZmZXJMYXlvdXQubnM2NCgnbGFtcG9ydHMnKV0pXG4gIH0sXG4gIEluaXRpYWxpemVOb25jZUFjY291bnQ6IHtcbiAgICBpbmRleDogNixcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyksIHB1YmxpY0tleSgnYXV0aG9yaXplZCcpXSlcbiAgfSxcbiAgQXV0aG9yaXplTm9uY2VBY2NvdW50OiB7XG4gICAgaW5kZXg6IDcsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpLCBwdWJsaWNLZXkoJ2F1dGhvcml6ZWQnKV0pXG4gIH0sXG4gIEFsbG9jYXRlOiB7XG4gICAgaW5kZXg6IDgsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpLCBCdWZmZXJMYXlvdXQubnM2NCgnc3BhY2UnKV0pXG4gIH0sXG4gIEFsbG9jYXRlV2l0aFNlZWQ6IHtcbiAgICBpbmRleDogOSxcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyksIHB1YmxpY0tleSgnYmFzZScpLCBydXN0U3RyaW5nKCdzZWVkJyksIEJ1ZmZlckxheW91dC5uczY0KCdzcGFjZScpLCBwdWJsaWNLZXkoJ3Byb2dyYW1JZCcpXSlcbiAgfSxcbiAgQXNzaWduV2l0aFNlZWQ6IHtcbiAgICBpbmRleDogMTAsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpLCBwdWJsaWNLZXkoJ2Jhc2UnKSwgcnVzdFN0cmluZygnc2VlZCcpLCBwdWJsaWNLZXkoJ3Byb2dyYW1JZCcpXSlcbiAgfSxcbiAgVHJhbnNmZXJXaXRoU2VlZDoge1xuICAgIGluZGV4OiAxMSxcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyksIHU2NCgnbGFtcG9ydHMnKSwgcnVzdFN0cmluZygnc2VlZCcpLCBwdWJsaWNLZXkoJ3Byb2dyYW1JZCcpXSlcbiAgfSxcbiAgVXBncmFkZU5vbmNlQWNjb3VudDoge1xuICAgIGluZGV4OiAxMixcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyldKVxuICB9XG59KTtcblxuLyoqXG4gKiBGYWN0b3J5IGNsYXNzIGZvciB0cmFuc2FjdGlvbnMgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgU3lzdGVtIHByb2dyYW1cbiAqL1xuY2xhc3MgU3lzdGVtUHJvZ3JhbSB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogUHVibGljIGtleSB0aGF0IGlkZW50aWZpZXMgdGhlIFN5c3RlbSBwcm9ncmFtXG4gICAqL1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHRyYW5zYWN0aW9uIGluc3RydWN0aW9uIHRoYXQgY3JlYXRlcyBhIG5ldyBhY2NvdW50XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlQWNjb3VudChwYXJhbXMpIHtcbiAgICBjb25zdCB0eXBlID0gU1lTVEVNX0lOU1RSVUNUSU9OX0xBWU9VVFMuQ3JlYXRlO1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVEYXRhKHR5cGUsIHtcbiAgICAgIGxhbXBvcnRzOiBwYXJhbXMubGFtcG9ydHMsXG4gICAgICBzcGFjZTogcGFyYW1zLnNwYWNlLFxuICAgICAgcHJvZ3JhbUlkOiB0b0J1ZmZlcihwYXJhbXMucHJvZ3JhbUlkLnRvQnVmZmVyKCkpXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgIGtleXM6IFt7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLmZyb21QdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLm5ld0FjY291bnRQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgICB9XSxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSB0cmFuc2FjdGlvbiBpbnN0cnVjdGlvbiB0aGF0IHRyYW5zZmVycyBsYW1wb3J0cyBmcm9tIG9uZSBhY2NvdW50IHRvIGFub3RoZXJcbiAgICovXG4gIHN0YXRpYyB0cmFuc2ZlcihwYXJhbXMpIHtcbiAgICBsZXQgZGF0YTtcbiAgICBsZXQga2V5cztcbiAgICBpZiAoJ2Jhc2VQdWJrZXknIGluIHBhcmFtcykge1xuICAgICAgY29uc3QgdHlwZSA9IFNZU1RFTV9JTlNUUlVDVElPTl9MQVlPVVRTLlRyYW5zZmVyV2l0aFNlZWQ7XG4gICAgICBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICAgIGxhbXBvcnRzOiBCaWdJbnQocGFyYW1zLmxhbXBvcnRzKSxcbiAgICAgICAgc2VlZDogcGFyYW1zLnNlZWQsXG4gICAgICAgIHByb2dyYW1JZDogdG9CdWZmZXIocGFyYW1zLnByb2dyYW1JZC50b0J1ZmZlcigpKVxuICAgICAgfSk7XG4gICAgICBrZXlzID0gW3tcbiAgICAgICAgcHVia2V5OiBwYXJhbXMuZnJvbVB1YmtleSxcbiAgICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLmJhc2VQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IHBhcmFtcy50b1B1YmtleSxcbiAgICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgICB9XTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdHlwZSA9IFNZU1RFTV9JTlNUUlVDVElPTl9MQVlPVVRTLlRyYW5zZmVyO1xuICAgICAgZGF0YSA9IGVuY29kZURhdGEodHlwZSwge1xuICAgICAgICBsYW1wb3J0czogQmlnSW50KHBhcmFtcy5sYW1wb3J0cylcbiAgICAgIH0pO1xuICAgICAga2V5cyA9IFt7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLmZyb21QdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLnRvUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICAgIH1dO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xuICAgICAga2V5cyxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSB0cmFuc2FjdGlvbiBpbnN0cnVjdGlvbiB0aGF0IGFzc2lnbnMgYW4gYWNjb3VudCB0byBhIHByb2dyYW1cbiAgICovXG4gIHN0YXRpYyBhc3NpZ24ocGFyYW1zKSB7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGtleXM7XG4gICAgaWYgKCdiYXNlUHVia2V5JyBpbiBwYXJhbXMpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSBTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUy5Bc3NpZ25XaXRoU2VlZDtcbiAgICAgIGRhdGEgPSBlbmNvZGVEYXRhKHR5cGUsIHtcbiAgICAgICAgYmFzZTogdG9CdWZmZXIocGFyYW1zLmJhc2VQdWJrZXkudG9CdWZmZXIoKSksXG4gICAgICAgIHNlZWQ6IHBhcmFtcy5zZWVkLFxuICAgICAgICBwcm9ncmFtSWQ6IHRvQnVmZmVyKHBhcmFtcy5wcm9ncmFtSWQudG9CdWZmZXIoKSlcbiAgICAgIH0pO1xuICAgICAga2V5cyA9IFt7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLmFjY291bnRQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IHBhcmFtcy5iYXNlUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICAgIH1dO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0eXBlID0gU1lTVEVNX0lOU1RSVUNUSU9OX0xBWU9VVFMuQXNzaWduO1xuICAgICAgZGF0YSA9IGVuY29kZURhdGEodHlwZSwge1xuICAgICAgICBwcm9ncmFtSWQ6IHRvQnVmZmVyKHBhcmFtcy5wcm9ncmFtSWQudG9CdWZmZXIoKSlcbiAgICAgIH0pO1xuICAgICAga2V5cyA9IFt7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLmFjY291bnRQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgICB9XTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgIGtleXMsXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgdHJhbnNhY3Rpb24gaW5zdHJ1Y3Rpb24gdGhhdCBjcmVhdGVzIGEgbmV3IGFjY291bnQgYXRcbiAgICogICBhbiBhZGRyZXNzIGdlbmVyYXRlZCB3aXRoIGBmcm9tYCwgYSBzZWVkLCBhbmQgcHJvZ3JhbUlkXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlQWNjb3VudFdpdGhTZWVkKHBhcmFtcykge1xuICAgIGNvbnN0IHR5cGUgPSBTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUy5DcmVhdGVXaXRoU2VlZDtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICBiYXNlOiB0b0J1ZmZlcihwYXJhbXMuYmFzZVB1YmtleS50b0J1ZmZlcigpKSxcbiAgICAgIHNlZWQ6IHBhcmFtcy5zZWVkLFxuICAgICAgbGFtcG9ydHM6IHBhcmFtcy5sYW1wb3J0cyxcbiAgICAgIHNwYWNlOiBwYXJhbXMuc3BhY2UsXG4gICAgICBwcm9ncmFtSWQ6IHRvQnVmZmVyKHBhcmFtcy5wcm9ncmFtSWQudG9CdWZmZXIoKSlcbiAgICB9KTtcbiAgICBsZXQga2V5cyA9IFt7XG4gICAgICBwdWJrZXk6IHBhcmFtcy5mcm9tUHVia2V5LFxuICAgICAgaXNTaWduZXI6IHRydWUsXG4gICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgfSwge1xuICAgICAgcHVia2V5OiBwYXJhbXMubmV3QWNjb3VudFB1YmtleSxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICB9XTtcbiAgICBpZiAoIXBhcmFtcy5iYXNlUHVia2V5LmVxdWFscyhwYXJhbXMuZnJvbVB1YmtleSkpIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLmJhc2VQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb25JbnN0cnVjdGlvbih7XG4gICAgICBrZXlzLFxuICAgICAgcHJvZ3JhbUlkOiB0aGlzLnByb2dyYW1JZCxcbiAgICAgIGRhdGFcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHRyYW5zYWN0aW9uIHRoYXQgY3JlYXRlcyBhIG5ldyBOb25jZSBhY2NvdW50XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlTm9uY2VBY2NvdW50KHBhcmFtcykge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKCk7XG4gICAgaWYgKCdiYXNlUHVia2V5JyBpbiBwYXJhbXMgJiYgJ3NlZWQnIGluIHBhcmFtcykge1xuICAgICAgdHJhbnNhY3Rpb24uYWRkKFN5c3RlbVByb2dyYW0uY3JlYXRlQWNjb3VudFdpdGhTZWVkKHtcbiAgICAgICAgZnJvbVB1YmtleTogcGFyYW1zLmZyb21QdWJrZXksXG4gICAgICAgIG5ld0FjY291bnRQdWJrZXk6IHBhcmFtcy5ub25jZVB1YmtleSxcbiAgICAgICAgYmFzZVB1YmtleTogcGFyYW1zLmJhc2VQdWJrZXksXG4gICAgICAgIHNlZWQ6IHBhcmFtcy5zZWVkLFxuICAgICAgICBsYW1wb3J0czogcGFyYW1zLmxhbXBvcnRzLFxuICAgICAgICBzcGFjZTogTk9OQ0VfQUNDT1VOVF9MRU5HVEgsXG4gICAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWRcbiAgICAgIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNhY3Rpb24uYWRkKFN5c3RlbVByb2dyYW0uY3JlYXRlQWNjb3VudCh7XG4gICAgICAgIGZyb21QdWJrZXk6IHBhcmFtcy5mcm9tUHVia2V5LFxuICAgICAgICBuZXdBY2NvdW50UHVia2V5OiBwYXJhbXMubm9uY2VQdWJrZXksXG4gICAgICAgIGxhbXBvcnRzOiBwYXJhbXMubGFtcG9ydHMsXG4gICAgICAgIHNwYWNlOiBOT05DRV9BQ0NPVU5UX0xFTkdUSCxcbiAgICAgICAgcHJvZ3JhbUlkOiB0aGlzLnByb2dyYW1JZFxuICAgICAgfSkpO1xuICAgIH1cbiAgICBjb25zdCBpbml0UGFyYW1zID0ge1xuICAgICAgbm9uY2VQdWJrZXk6IHBhcmFtcy5ub25jZVB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRQdWJrZXk6IHBhcmFtcy5hdXRob3JpemVkUHVia2V5XG4gICAgfTtcbiAgICB0cmFuc2FjdGlvbi5hZGQodGhpcy5ub25jZUluaXRpYWxpemUoaW5pdFBhcmFtcykpO1xuICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhbiBpbnN0cnVjdGlvbiB0byBpbml0aWFsaXplIGEgTm9uY2UgYWNjb3VudFxuICAgKi9cbiAgc3RhdGljIG5vbmNlSW5pdGlhbGl6ZShwYXJhbXMpIHtcbiAgICBjb25zdCB0eXBlID0gU1lTVEVNX0lOU1RSVUNUSU9OX0xBWU9VVFMuSW5pdGlhbGl6ZU5vbmNlQWNjb3VudDtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICBhdXRob3JpemVkOiB0b0J1ZmZlcihwYXJhbXMuYXV0aG9yaXplZFB1YmtleS50b0J1ZmZlcigpKVxuICAgIH0pO1xuICAgIGNvbnN0IGluc3RydWN0aW9uRGF0YSA9IHtcbiAgICAgIGtleXM6IFt7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLm5vbmNlUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgcHVia2V5OiBTWVNWQVJfUkVDRU5UX0JMT0NLSEFTSEVTX1BVQktFWSxcbiAgICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IFNZU1ZBUl9SRU5UX1BVQktFWSxcbiAgICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgICAgfV0sXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKGluc3RydWN0aW9uRGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYW4gaW5zdHJ1Y3Rpb24gdG8gYWR2YW5jZSB0aGUgbm9uY2UgaW4gYSBOb25jZSBhY2NvdW50XG4gICAqL1xuICBzdGF0aWMgbm9uY2VBZHZhbmNlKHBhcmFtcykge1xuICAgIGNvbnN0IHR5cGUgPSBTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUy5BZHZhbmNlTm9uY2VBY2NvdW50O1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVEYXRhKHR5cGUpO1xuICAgIGNvbnN0IGluc3RydWN0aW9uRGF0YSA9IHtcbiAgICAgIGtleXM6IFt7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLm5vbmNlUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgcHVia2V5OiBTWVNWQVJfUkVDRU5UX0JMT0NLSEFTSEVTX1BVQktFWSxcbiAgICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IHBhcmFtcy5hdXRob3JpemVkUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICAgIH1dLFxuICAgICAgcHJvZ3JhbUlkOiB0aGlzLnByb2dyYW1JZCxcbiAgICAgIGRhdGFcbiAgICB9O1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb25JbnN0cnVjdGlvbihpbnN0cnVjdGlvbkRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgdHJhbnNhY3Rpb24gaW5zdHJ1Y3Rpb24gdGhhdCB3aXRoZHJhd3MgbGFtcG9ydHMgZnJvbSBhIE5vbmNlIGFjY291bnRcbiAgICovXG4gIHN0YXRpYyBub25jZVdpdGhkcmF3KHBhcmFtcykge1xuICAgIGNvbnN0IHR5cGUgPSBTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUy5XaXRoZHJhd05vbmNlQWNjb3VudDtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICBsYW1wb3J0czogcGFyYW1zLmxhbXBvcnRzXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgIGtleXM6IFt7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLm5vbmNlUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgcHVia2V5OiBwYXJhbXMudG9QdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IFNZU1ZBUl9SRUNFTlRfQkxPQ0tIQVNIRVNfUFVCS0VZLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogU1lTVkFSX1JFTlRfUFVCS0VZLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLmF1dGhvcml6ZWRQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgICAgfV0sXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgdHJhbnNhY3Rpb24gaW5zdHJ1Y3Rpb24gdGhhdCBhdXRob3JpemVzIGEgbmV3IFB1YmxpY0tleSBhcyB0aGUgYXV0aG9yaXR5XG4gICAqIG9uIGEgTm9uY2UgYWNjb3VudC5cbiAgICovXG4gIHN0YXRpYyBub25jZUF1dGhvcml6ZShwYXJhbXMpIHtcbiAgICBjb25zdCB0eXBlID0gU1lTVEVNX0lOU1RSVUNUSU9OX0xBWU9VVFMuQXV0aG9yaXplTm9uY2VBY2NvdW50O1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVEYXRhKHR5cGUsIHtcbiAgICAgIGF1dGhvcml6ZWQ6IHRvQnVmZmVyKHBhcmFtcy5uZXdBdXRob3JpemVkUHVia2V5LnRvQnVmZmVyKCkpXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgIGtleXM6IFt7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLm5vbmNlUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgcHVia2V5OiBwYXJhbXMuYXV0aG9yaXplZFB1YmtleSxcbiAgICAgICAgaXNTaWduZXI6IHRydWUsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9XSxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSB0cmFuc2FjdGlvbiBpbnN0cnVjdGlvbiB0aGF0IGFsbG9jYXRlcyBzcGFjZSBpbiBhbiBhY2NvdW50IHdpdGhvdXQgZnVuZGluZ1xuICAgKi9cbiAgc3RhdGljIGFsbG9jYXRlKHBhcmFtcykge1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBrZXlzO1xuICAgIGlmICgnYmFzZVB1YmtleScgaW4gcGFyYW1zKSB7XG4gICAgICBjb25zdCB0eXBlID0gU1lTVEVNX0lOU1RSVUNUSU9OX0xBWU9VVFMuQWxsb2NhdGVXaXRoU2VlZDtcbiAgICAgIGRhdGEgPSBlbmNvZGVEYXRhKHR5cGUsIHtcbiAgICAgICAgYmFzZTogdG9CdWZmZXIocGFyYW1zLmJhc2VQdWJrZXkudG9CdWZmZXIoKSksXG4gICAgICAgIHNlZWQ6IHBhcmFtcy5zZWVkLFxuICAgICAgICBzcGFjZTogcGFyYW1zLnNwYWNlLFxuICAgICAgICBwcm9ncmFtSWQ6IHRvQnVmZmVyKHBhcmFtcy5wcm9ncmFtSWQudG9CdWZmZXIoKSlcbiAgICAgIH0pO1xuICAgICAga2V5cyA9IFt7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLmFjY291bnRQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IHBhcmFtcy5iYXNlUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICAgIH1dO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0eXBlID0gU1lTVEVNX0lOU1RSVUNUSU9OX0xBWU9VVFMuQWxsb2NhdGU7XG4gICAgICBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICAgIHNwYWNlOiBwYXJhbXMuc3BhY2VcbiAgICAgIH0pO1xuICAgICAga2V5cyA9IFt7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLmFjY291bnRQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgICB9XTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgIGtleXMsXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG59XG5TeXN0ZW1Qcm9ncmFtLnByb2dyYW1JZCA9IG5ldyBQdWJsaWNLZXkoJzExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExJyk7XG5cbi8vIEtlZXAgcHJvZ3JhbSBjaHVua3MgdW5kZXIgUEFDS0VUX0RBVEFfU0laRSwgbGVhdmluZyBlbm91Z2ggcm9vbSBmb3IgdGhlXG4vLyByZXN0IG9mIHRoZSBUcmFuc2FjdGlvbiBmaWVsZHNcbi8vXG4vLyBUT0RPOiByZXBsYWNlIDMwMCB3aXRoIGEgcHJvcGVyIGNvbnN0YW50IGZvciB0aGUgc2l6ZSBvZiB0aGUgb3RoZXJcbi8vIFRyYW5zYWN0aW9uIGZpZWxkc1xuY29uc3QgQ0hVTktfU0laRSA9IFBBQ0tFVF9EQVRBX1NJWkUgLSAzMDA7XG5cbi8qKlxuICogUHJvZ3JhbSBsb2FkZXIgaW50ZXJmYWNlXG4gKi9cbmNsYXNzIExvYWRlciB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogQW1vdW50IG9mIHByb2dyYW0gZGF0YSBwbGFjZWQgaW4gZWFjaCBsb2FkIFRyYW5zYWN0aW9uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiBzaWduYXR1cmVzIHJlcXVpcmVkIHRvIGxvYWQgYSBwcm9ncmFtIG5vdCBpbmNsdWRpbmdcbiAgICogcmV0cmllc1xuICAgKlxuICAgKiBDYW4gYmUgdXNlZCB0byBjYWxjdWxhdGUgdHJhbnNhY3Rpb24gZmVlc1xuICAgKi9cbiAgc3RhdGljIGdldE1pbk51bVNpZ25hdHVyZXMoZGF0YUxlbmd0aCkge1xuICAgIHJldHVybiAyICogKFxuICAgIC8vIEV2ZXJ5IHRyYW5zYWN0aW9uIHJlcXVpcmVzIHR3byBzaWduYXR1cmVzIChwYXllciArIHByb2dyYW0pXG4gICAgTWF0aC5jZWlsKGRhdGFMZW5ndGggLyBMb2FkZXIuY2h1bmtTaXplKSArIDEgK1xuICAgIC8vIEFkZCBvbmUgZm9yIENyZWF0ZSB0cmFuc2FjdGlvblxuICAgIDEpIC8vIEFkZCBvbmUgZm9yIEZpbmFsaXplIHRyYW5zYWN0aW9uXG4gICAgO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWRzIGEgZ2VuZXJpYyBwcm9ncmFtXG4gICAqXG4gICAqIEBwYXJhbSBjb25uZWN0aW9uIFRoZSBjb25uZWN0aW9uIHRvIHVzZVxuICAgKiBAcGFyYW0gcGF5ZXIgU3lzdGVtIGFjY291bnQgdGhhdCBwYXlzIHRvIGxvYWQgdGhlIHByb2dyYW1cbiAgICogQHBhcmFtIHByb2dyYW0gQWNjb3VudCB0byBsb2FkIHRoZSBwcm9ncmFtIGludG9cbiAgICogQHBhcmFtIHByb2dyYW1JZCBQdWJsaWMga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgbG9hZGVyXG4gICAqIEBwYXJhbSBkYXRhIFByb2dyYW0gb2N0ZXRzXG4gICAqIEByZXR1cm4gdHJ1ZSBpZiBwcm9ncmFtIHdhcyBsb2FkZWQgc3VjY2Vzc2Z1bGx5LCBmYWxzZSBpZiBwcm9ncmFtIHdhcyBhbHJlYWR5IGxvYWRlZFxuICAgKi9cbiAgc3RhdGljIGFzeW5jIGxvYWQoY29ubmVjdGlvbiwgcGF5ZXIsIHByb2dyYW0sIHByb2dyYW1JZCwgZGF0YSkge1xuICAgIHtcbiAgICAgIGNvbnN0IGJhbGFuY2VOZWVkZWQgPSBhd2FpdCBjb25uZWN0aW9uLmdldE1pbmltdW1CYWxhbmNlRm9yUmVudEV4ZW1wdGlvbihkYXRhLmxlbmd0aCk7XG5cbiAgICAgIC8vIEZldGNoIHByb2dyYW0gYWNjb3VudCBpbmZvIHRvIGNoZWNrIGlmIGl0IGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZFxuICAgICAgY29uc3QgcHJvZ3JhbUluZm8gPSBhd2FpdCBjb25uZWN0aW9uLmdldEFjY291bnRJbmZvKHByb2dyYW0ucHVibGljS2V5LCAnY29uZmlybWVkJyk7XG4gICAgICBsZXQgdHJhbnNhY3Rpb24gPSBudWxsO1xuICAgICAgaWYgKHByb2dyYW1JbmZvICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChwcm9ncmFtSW5mby5leGVjdXRhYmxlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignUHJvZ3JhbSBsb2FkIGZhaWxlZCwgYWNjb3VudCBpcyBhbHJlYWR5IGV4ZWN1dGFibGUnKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2dyYW1JbmZvLmRhdGEubGVuZ3RoICE9PSBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgIHRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb24gfHwgbmV3IFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uYWRkKFN5c3RlbVByb2dyYW0uYWxsb2NhdGUoe1xuICAgICAgICAgICAgYWNjb3VudFB1YmtleTogcHJvZ3JhbS5wdWJsaWNLZXksXG4gICAgICAgICAgICBzcGFjZTogZGF0YS5sZW5ndGhcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwcm9ncmFtSW5mby5vd25lci5lcXVhbHMocHJvZ3JhbUlkKSkge1xuICAgICAgICAgIHRyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb24gfHwgbmV3IFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uYWRkKFN5c3RlbVByb2dyYW0uYXNzaWduKHtcbiAgICAgICAgICAgIGFjY291bnRQdWJrZXk6IHByb2dyYW0ucHVibGljS2V5LFxuICAgICAgICAgICAgcHJvZ3JhbUlkXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9ncmFtSW5mby5sYW1wb3J0cyA8IGJhbGFuY2VOZWVkZWQpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uIHx8IG5ldyBUcmFuc2FjdGlvbigpO1xuICAgICAgICAgIHRyYW5zYWN0aW9uLmFkZChTeXN0ZW1Qcm9ncmFtLnRyYW5zZmVyKHtcbiAgICAgICAgICAgIGZyb21QdWJrZXk6IHBheWVyLnB1YmxpY0tleSxcbiAgICAgICAgICAgIHRvUHVia2V5OiBwcm9ncmFtLnB1YmxpY0tleSxcbiAgICAgICAgICAgIGxhbXBvcnRzOiBiYWxhbmNlTmVlZGVkIC0gcHJvZ3JhbUluZm8ubGFtcG9ydHNcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKCkuYWRkKFN5c3RlbVByb2dyYW0uY3JlYXRlQWNjb3VudCh7XG4gICAgICAgICAgZnJvbVB1YmtleTogcGF5ZXIucHVibGljS2V5LFxuICAgICAgICAgIG5ld0FjY291bnRQdWJrZXk6IHByb2dyYW0ucHVibGljS2V5LFxuICAgICAgICAgIGxhbXBvcnRzOiBiYWxhbmNlTmVlZGVkID4gMCA/IGJhbGFuY2VOZWVkZWQgOiAxLFxuICAgICAgICAgIHNwYWNlOiBkYXRhLmxlbmd0aCxcbiAgICAgICAgICBwcm9ncmFtSWRcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgYWNjb3VudCBpcyBhbHJlYWR5IGNyZWF0ZWQgY29ycmVjdGx5LCBza2lwIHRoaXMgc3RlcFxuICAgICAgLy8gYW5kIHByb2NlZWQgZGlyZWN0bHkgdG8gbG9hZGluZyBpbnN0cnVjdGlvbnNcbiAgICAgIGlmICh0cmFuc2FjdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICBhd2FpdCBzZW5kQW5kQ29uZmlybVRyYW5zYWN0aW9uKGNvbm5lY3Rpb24sIHRyYW5zYWN0aW9uLCBbcGF5ZXIsIHByb2dyYW1dLCB7XG4gICAgICAgICAgY29tbWl0bWVudDogJ2NvbmZpcm1lZCdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGRhdGFMYXlvdXQgPSBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpLCBCdWZmZXJMYXlvdXQudTMyKCdvZmZzZXQnKSwgQnVmZmVyTGF5b3V0LnUzMignYnl0ZXNMZW5ndGgnKSwgQnVmZmVyTGF5b3V0LnUzMignYnl0ZXNMZW5ndGhQYWRkaW5nJyksIEJ1ZmZlckxheW91dC5zZXEoQnVmZmVyTGF5b3V0LnU4KCdieXRlJyksIEJ1ZmZlckxheW91dC5vZmZzZXQoQnVmZmVyTGF5b3V0LnUzMigpLCAtOCksICdieXRlcycpXSk7XG4gICAgY29uc3QgY2h1bmtTaXplID0gTG9hZGVyLmNodW5rU2l6ZTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgYXJyYXkgPSBkYXRhO1xuICAgIGxldCB0cmFuc2FjdGlvbnMgPSBbXTtcbiAgICB3aGlsZSAoYXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgYnl0ZXMgPSBhcnJheS5zbGljZSgwLCBjaHVua1NpemUpO1xuICAgICAgY29uc3QgZGF0YSA9IEJ1ZmZlci5hbGxvYyhjaHVua1NpemUgKyAxNik7XG4gICAgICBkYXRhTGF5b3V0LmVuY29kZSh7XG4gICAgICAgIGluc3RydWN0aW9uOiAwLFxuICAgICAgICAvLyBMb2FkIGluc3RydWN0aW9uXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgYnl0ZXM6IGJ5dGVzLFxuICAgICAgICBieXRlc0xlbmd0aDogMCxcbiAgICAgICAgYnl0ZXNMZW5ndGhQYWRkaW5nOiAwXG4gICAgICB9LCBkYXRhKTtcbiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKCkuYWRkKHtcbiAgICAgICAga2V5czogW3tcbiAgICAgICAgICBwdWJrZXk6IHByb2dyYW0ucHVibGljS2V5LFxuICAgICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICAgICAgfV0sXG4gICAgICAgIHByb2dyYW1JZCxcbiAgICAgICAgZGF0YVxuICAgICAgfSk7XG4gICAgICB0cmFuc2FjdGlvbnMucHVzaChzZW5kQW5kQ29uZmlybVRyYW5zYWN0aW9uKGNvbm5lY3Rpb24sIHRyYW5zYWN0aW9uLCBbcGF5ZXIsIHByb2dyYW1dLCB7XG4gICAgICAgIGNvbW1pdG1lbnQ6ICdjb25maXJtZWQnXG4gICAgICB9KSk7XG5cbiAgICAgIC8vIERlbGF5IGJldHdlZW4gc2VuZHMgaW4gYW4gYXR0ZW1wdCB0byByZWR1Y2UgcmF0ZSBsaW1pdCBlcnJvcnNcbiAgICAgIGlmIChjb25uZWN0aW9uLl9ycGNFbmRwb2ludC5pbmNsdWRlcygnc29sYW5hLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IFJFUVVFU1RTX1BFUl9TRUNPTkQgPSA0O1xuICAgICAgICBhd2FpdCBzbGVlcCgxMDAwIC8gUkVRVUVTVFNfUEVSX1NFQ09ORCk7XG4gICAgICB9XG4gICAgICBvZmZzZXQgKz0gY2h1bmtTaXplO1xuICAgICAgYXJyYXkgPSBhcnJheS5zbGljZShjaHVua1NpemUpO1xuICAgIH1cbiAgICBhd2FpdCBQcm9taXNlLmFsbCh0cmFuc2FjdGlvbnMpO1xuXG4gICAgLy8gRmluYWxpemUgdGhlIGFjY291bnQgbG9hZGVkIHdpdGggcHJvZ3JhbSBkYXRhIGZvciBleGVjdXRpb25cbiAgICB7XG4gICAgICBjb25zdCBkYXRhTGF5b3V0ID0gQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKV0pO1xuICAgICAgY29uc3QgZGF0YSA9IEJ1ZmZlci5hbGxvYyhkYXRhTGF5b3V0LnNwYW4pO1xuICAgICAgZGF0YUxheW91dC5lbmNvZGUoe1xuICAgICAgICBpbnN0cnVjdGlvbjogMSAvLyBGaW5hbGl6ZSBpbnN0cnVjdGlvblxuICAgICAgfSwgZGF0YSk7XG4gICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpLmFkZCh7XG4gICAgICAgIGtleXM6IFt7XG4gICAgICAgICAgcHVia2V5OiBwcm9ncmFtLnB1YmxpY0tleSxcbiAgICAgICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBwdWJrZXk6IFNZU1ZBUl9SRU5UX1BVQktFWSxcbiAgICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICAgICAgfV0sXG4gICAgICAgIHByb2dyYW1JZCxcbiAgICAgICAgZGF0YVxuICAgICAgfSk7XG4gICAgICBjb25zdCBkZXBsb3lDb21taXRtZW50ID0gJ3Byb2Nlc3NlZCc7XG4gICAgICBjb25zdCBmaW5hbGl6ZVNpZ25hdHVyZSA9IGF3YWl0IGNvbm5lY3Rpb24uc2VuZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uLCBbcGF5ZXIsIHByb2dyYW1dLCB7XG4gICAgICAgIHByZWZsaWdodENvbW1pdG1lbnQ6IGRlcGxveUNvbW1pdG1lbnRcbiAgICAgIH0pO1xuICAgICAgY29uc3Qge1xuICAgICAgICBjb250ZXh0LFxuICAgICAgICB2YWx1ZVxuICAgICAgfSA9IGF3YWl0IGNvbm5lY3Rpb24uY29uZmlybVRyYW5zYWN0aW9uKHtcbiAgICAgICAgc2lnbmF0dXJlOiBmaW5hbGl6ZVNpZ25hdHVyZSxcbiAgICAgICAgbGFzdFZhbGlkQmxvY2tIZWlnaHQ6IHRyYW5zYWN0aW9uLmxhc3RWYWxpZEJsb2NrSGVpZ2h0LFxuICAgICAgICBibG9ja2hhc2g6IHRyYW5zYWN0aW9uLnJlY2VudEJsb2NraGFzaFxuICAgICAgfSwgZGVwbG95Q29tbWl0bWVudCk7XG4gICAgICBpZiAodmFsdWUuZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVHJhbnNhY3Rpb24gJHtmaW5hbGl6ZVNpZ25hdHVyZX0gZmFpbGVkICgke0pTT04uc3RyaW5naWZ5KHZhbHVlKX0pYCk7XG4gICAgICB9XG4gICAgICAvLyBXZSBwcmV2ZW50IHByb2dyYW1zIGZyb20gYmVpbmcgdXNhYmxlIHVudGlsIHRoZSBzbG90IGFmdGVyIHRoZWlyIGRlcGxveW1lbnQuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3NvbGFuYS1sYWJzL3NvbGFuYS9wdWxsLzI5NjU0XG4gICAgICB3aGlsZSAodHJ1ZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgY3VycmVudFNsb3QgPSBhd2FpdCBjb25uZWN0aW9uLmdldFNsb3Qoe1xuICAgICAgICAgICAgY29tbWl0bWVudDogZGVwbG95Q29tbWl0bWVudFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChjdXJyZW50U2xvdCA+IGNvbnRleHQuc2xvdCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAvKiBlbXB0eSAqL1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBNYXRoLnJvdW5kKE1TX1BFUl9TTE9UIC8gMikpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzdWNjZXNzXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbkxvYWRlci5jaHVua1NpemUgPSBDSFVOS19TSVpFO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgc2luY2UgU29sYW5hIHYxLjE3LjIwLlxuICovXG5jb25zdCBCUEZfTE9BREVSX1BST0dSQU1fSUQgPSBuZXcgUHVibGljS2V5KCdCUEZMb2FkZXIyMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExJyk7XG5cbi8qKlxuICogRmFjdG9yeSBjbGFzcyBmb3IgdHJhbnNhY3Rpb25zIHRvIGludGVyYWN0IHdpdGggYSBwcm9ncmFtIGxvYWRlclxuICpcbiAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgc2luY2UgU29sYW5hIHYxLjE3LjIwLlxuICovXG5jbGFzcyBCcGZMb2FkZXIge1xuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygc2lnbmF0dXJlcyByZXF1aXJlZCB0byBsb2FkIGEgcHJvZ3JhbSBub3QgaW5jbHVkaW5nXG4gICAqIHJldHJpZXNcbiAgICpcbiAgICogQ2FuIGJlIHVzZWQgdG8gY2FsY3VsYXRlIHRyYW5zYWN0aW9uIGZlZXNcbiAgICovXG4gIHN0YXRpYyBnZXRNaW5OdW1TaWduYXR1cmVzKGRhdGFMZW5ndGgpIHtcbiAgICByZXR1cm4gTG9hZGVyLmdldE1pbk51bVNpZ25hdHVyZXMoZGF0YUxlbmd0aCk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZCBhIFNCRiBwcm9ncmFtXG4gICAqXG4gICAqIEBwYXJhbSBjb25uZWN0aW9uIFRoZSBjb25uZWN0aW9uIHRvIHVzZVxuICAgKiBAcGFyYW0gcGF5ZXIgQWNjb3VudCB0aGF0IHdpbGwgcGF5IHByb2dyYW0gbG9hZGluZyBmZWVzXG4gICAqIEBwYXJhbSBwcm9ncmFtIEFjY291bnQgdG8gbG9hZCB0aGUgcHJvZ3JhbSBpbnRvXG4gICAqIEBwYXJhbSBlbGYgVGhlIGVudGlyZSBFTEYgY29udGFpbmluZyB0aGUgU0JGIHByb2dyYW1cbiAgICogQHBhcmFtIGxvYWRlclByb2dyYW1JZCBUaGUgcHJvZ3JhbSBpZCBvZiB0aGUgQlBGIGxvYWRlciB0byB1c2VcbiAgICogQHJldHVybiB0cnVlIGlmIHByb2dyYW0gd2FzIGxvYWRlZCBzdWNjZXNzZnVsbHksIGZhbHNlIGlmIHByb2dyYW0gd2FzIGFscmVhZHkgbG9hZGVkXG4gICAqL1xuICBzdGF0aWMgbG9hZChjb25uZWN0aW9uLCBwYXllciwgcHJvZ3JhbSwgZWxmLCBsb2FkZXJQcm9ncmFtSWQpIHtcbiAgICByZXR1cm4gTG9hZGVyLmxvYWQoY29ubmVjdGlvbiwgcGF5ZXIsIHByb2dyYW0sIGxvYWRlclByb2dyYW1JZCwgZWxmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0RXhwb3J0RnJvbUNqcyAoeCkge1xuXHRyZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdkZWZhdWx0JykgPyB4WydkZWZhdWx0J10gOiB4O1xufVxuXG52YXIgZmFzdFN0YWJsZVN0cmluZ2lmeSQxO1xudmFyIGhhc1JlcXVpcmVkRmFzdFN0YWJsZVN0cmluZ2lmeTtcblxuZnVuY3Rpb24gcmVxdWlyZUZhc3RTdGFibGVTdHJpbmdpZnkgKCkge1xuXHRpZiAoaGFzUmVxdWlyZWRGYXN0U3RhYmxlU3RyaW5naWZ5KSByZXR1cm4gZmFzdFN0YWJsZVN0cmluZ2lmeSQxO1xuXHRoYXNSZXF1aXJlZEZhc3RTdGFibGVTdHJpbmdpZnkgPSAxO1xuXHR2YXIgb2JqVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXHR2YXIgb2JqS2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uKG9iaikge1xuXHRcdFx0dmFyIGtleXMgPSBbXTtcblx0XHRcdGZvciAodmFyIG5hbWUgaW4gb2JqKSB7XG5cdFx0XHRcdGtleXMucHVzaChuYW1lKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBrZXlzO1xuXHRcdH07XG5cblx0ZnVuY3Rpb24gc3RyaW5naWZ5KHZhbCwgaXNBcnJheVByb3ApIHtcblx0XHR2YXIgaSwgbWF4LCBzdHIsIGtleXMsIGtleSwgcHJvcFZhbCwgdG9TdHI7XG5cdFx0aWYgKHZhbCA9PT0gdHJ1ZSkge1xuXHRcdFx0cmV0dXJuIFwidHJ1ZVwiO1xuXHRcdH1cblx0XHRpZiAodmFsID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuIFwiZmFsc2VcIjtcblx0XHR9XG5cdFx0c3dpdGNoICh0eXBlb2YgdmFsKSB7XG5cdFx0XHRjYXNlIFwib2JqZWN0XCI6XG5cdFx0XHRcdGlmICh2YWwgPT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fSBlbHNlIGlmICh2YWwudG9KU09OICYmIHR5cGVvZiB2YWwudG9KU09OID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RyaW5naWZ5KHZhbC50b0pTT04oKSwgaXNBcnJheVByb3ApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRvU3RyID0gb2JqVG9TdHJpbmcuY2FsbCh2YWwpO1xuXHRcdFx0XHRcdGlmICh0b1N0ciA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7XG5cdFx0XHRcdFx0XHRzdHIgPSAnWyc7XG5cdFx0XHRcdFx0XHRtYXggPSB2YWwubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdGZvcihpID0gMDsgaSA8IG1heDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdHN0ciArPSBzdHJpbmdpZnkodmFsW2ldLCB0cnVlKSArICcsJztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChtYXggPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRzdHIgKz0gc3RyaW5naWZ5KHZhbFtpXSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gc3RyICsgJ10nO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodG9TdHIgPT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcblx0XHRcdFx0XHRcdC8vIG9ubHkgb2JqZWN0IGlzIGxlZnRcblx0XHRcdFx0XHRcdGtleXMgPSBvYmpLZXlzKHZhbCkuc29ydCgpO1xuXHRcdFx0XHRcdFx0bWF4ID0ga2V5cy5sZW5ndGg7XG5cdFx0XHRcdFx0XHRzdHIgPSBcIlwiO1xuXHRcdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0XHR3aGlsZSAoaSA8IG1heCkge1xuXHRcdFx0XHRcdFx0XHRrZXkgPSBrZXlzW2ldO1xuXHRcdFx0XHRcdFx0XHRwcm9wVmFsID0gc3RyaW5naWZ5KHZhbFtrZXldLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdGlmIChwcm9wVmFsICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoc3RyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdHIgKz0gJywnO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRzdHIgKz0gSlNPTi5zdHJpbmdpZnkoa2V5KSArICc6JyArIHByb3BWYWw7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuICd7JyArIHN0ciArICd9Jztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdGNhc2UgXCJ1bmRlZmluZWRcIjpcblx0XHRcdFx0cmV0dXJuIGlzQXJyYXlQcm9wID8gbnVsbCA6IHVuZGVmaW5lZDtcblx0XHRcdGNhc2UgXCJzdHJpbmdcIjpcblx0XHRcdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbCk7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gaXNGaW5pdGUodmFsKSA/IHZhbCA6IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0ZmFzdFN0YWJsZVN0cmluZ2lmeSQxID0gZnVuY3Rpb24odmFsKSB7XG5cdFx0dmFyIHJldHVyblZhbCA9IHN0cmluZ2lmeSh2YWwsIGZhbHNlKTtcblx0XHRpZiAocmV0dXJuVmFsICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiAnJysgcmV0dXJuVmFsO1xuXHRcdH1cblx0fTtcblx0cmV0dXJuIGZhc3RTdGFibGVTdHJpbmdpZnkkMTtcbn1cblxudmFyIGZhc3RTdGFibGVTdHJpbmdpZnlFeHBvcnRzID0gLypAX19QVVJFX18qLyByZXF1aXJlRmFzdFN0YWJsZVN0cmluZ2lmeSgpO1xudmFyIGZhc3RTdGFibGVTdHJpbmdpZnkgPSAvKkBfX1BVUkVfXyovZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMoZmFzdFN0YWJsZVN0cmluZ2lmeUV4cG9ydHMpO1xuXG5jb25zdCBNSU5JTVVNX1NMT1RfUEVSX0VQT0NIID0gMzI7XG5cbi8vIFJldHVybnMgdGhlIG51bWJlciBvZiB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgYmluYXJ5IHJlcHJlc2VudGF0aW9uIG9mIHNlbGYuXG5mdW5jdGlvbiB0cmFpbGluZ1plcm9zKG4pIHtcbiAgbGV0IHRyYWlsaW5nWmVyb3MgPSAwO1xuICB3aGlsZSAobiA+IDEpIHtcbiAgICBuIC89IDI7XG4gICAgdHJhaWxpbmdaZXJvcysrO1xuICB9XG4gIHJldHVybiB0cmFpbGluZ1plcm9zO1xufVxuXG4vLyBSZXR1cm5zIHRoZSBzbWFsbGVzdCBwb3dlciBvZiB0d28gZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIG5cbmZ1bmN0aW9uIG5leHRQb3dlck9mVHdvKG4pIHtcbiAgaWYgKG4gPT09IDApIHJldHVybiAxO1xuICBuLS07XG4gIG4gfD0gbiA+PiAxO1xuICBuIHw9IG4gPj4gMjtcbiAgbiB8PSBuID4+IDQ7XG4gIG4gfD0gbiA+PiA4O1xuICBuIHw9IG4gPj4gMTY7XG4gIG4gfD0gbiA+PiAzMjtcbiAgcmV0dXJuIG4gKyAxO1xufVxuXG4vKipcbiAqIEVwb2NoIHNjaGVkdWxlXG4gKiAoc2VlIGh0dHBzOi8vZG9jcy5zb2xhbmEuY29tL3Rlcm1pbm9sb2d5I2Vwb2NoKVxuICogQ2FuIGJlIHJldHJpZXZlZCB3aXRoIHRoZSB7QGxpbmsgQ29ubmVjdGlvbi5nZXRFcG9jaFNjaGVkdWxlfSBtZXRob2RcbiAqL1xuY2xhc3MgRXBvY2hTY2hlZHVsZSB7XG4gIGNvbnN0cnVjdG9yKHNsb3RzUGVyRXBvY2gsIGxlYWRlclNjaGVkdWxlU2xvdE9mZnNldCwgd2FybXVwLCBmaXJzdE5vcm1hbEVwb2NoLCBmaXJzdE5vcm1hbFNsb3QpIHtcbiAgICAvKiogVGhlIG1heGltdW0gbnVtYmVyIG9mIHNsb3RzIGluIGVhY2ggZXBvY2ggKi9cbiAgICB0aGlzLnNsb3RzUGVyRXBvY2ggPSB2b2lkIDA7XG4gICAgLyoqIFRoZSBudW1iZXIgb2Ygc2xvdHMgYmVmb3JlIGJlZ2lubmluZyBvZiBhbiBlcG9jaCB0byBjYWxjdWxhdGUgYSBsZWFkZXIgc2NoZWR1bGUgZm9yIHRoYXQgZXBvY2ggKi9cbiAgICB0aGlzLmxlYWRlclNjaGVkdWxlU2xvdE9mZnNldCA9IHZvaWQgMDtcbiAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgZXBvY2hzIHN0YXJ0IHNob3J0IGFuZCBncm93ICovXG4gICAgdGhpcy53YXJtdXAgPSB2b2lkIDA7XG4gICAgLyoqIFRoZSBmaXJzdCBlcG9jaCB3aXRoIGBzbG90c1BlckVwb2NoYCBzbG90cyAqL1xuICAgIHRoaXMuZmlyc3ROb3JtYWxFcG9jaCA9IHZvaWQgMDtcbiAgICAvKiogVGhlIGZpcnN0IHNsb3Qgb2YgYGZpcnN0Tm9ybWFsRXBvY2hgICovXG4gICAgdGhpcy5maXJzdE5vcm1hbFNsb3QgPSB2b2lkIDA7XG4gICAgdGhpcy5zbG90c1BlckVwb2NoID0gc2xvdHNQZXJFcG9jaDtcbiAgICB0aGlzLmxlYWRlclNjaGVkdWxlU2xvdE9mZnNldCA9IGxlYWRlclNjaGVkdWxlU2xvdE9mZnNldDtcbiAgICB0aGlzLndhcm11cCA9IHdhcm11cDtcbiAgICB0aGlzLmZpcnN0Tm9ybWFsRXBvY2ggPSBmaXJzdE5vcm1hbEVwb2NoO1xuICAgIHRoaXMuZmlyc3ROb3JtYWxTbG90ID0gZmlyc3ROb3JtYWxTbG90O1xuICB9XG4gIGdldEVwb2NoKHNsb3QpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFcG9jaEFuZFNsb3RJbmRleChzbG90KVswXTtcbiAgfVxuICBnZXRFcG9jaEFuZFNsb3RJbmRleChzbG90KSB7XG4gICAgaWYgKHNsb3QgPCB0aGlzLmZpcnN0Tm9ybWFsU2xvdCkge1xuICAgICAgY29uc3QgZXBvY2ggPSB0cmFpbGluZ1plcm9zKG5leHRQb3dlck9mVHdvKHNsb3QgKyBNSU5JTVVNX1NMT1RfUEVSX0VQT0NIICsgMSkpIC0gdHJhaWxpbmdaZXJvcyhNSU5JTVVNX1NMT1RfUEVSX0VQT0NIKSAtIDE7XG4gICAgICBjb25zdCBlcG9jaExlbiA9IHRoaXMuZ2V0U2xvdHNJbkVwb2NoKGVwb2NoKTtcbiAgICAgIGNvbnN0IHNsb3RJbmRleCA9IHNsb3QgLSAoZXBvY2hMZW4gLSBNSU5JTVVNX1NMT1RfUEVSX0VQT0NIKTtcbiAgICAgIHJldHVybiBbZXBvY2gsIHNsb3RJbmRleF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5vcm1hbFNsb3RJbmRleCA9IHNsb3QgLSB0aGlzLmZpcnN0Tm9ybWFsU2xvdDtcbiAgICAgIGNvbnN0IG5vcm1hbEVwb2NoSW5kZXggPSBNYXRoLmZsb29yKG5vcm1hbFNsb3RJbmRleCAvIHRoaXMuc2xvdHNQZXJFcG9jaCk7XG4gICAgICBjb25zdCBlcG9jaCA9IHRoaXMuZmlyc3ROb3JtYWxFcG9jaCArIG5vcm1hbEVwb2NoSW5kZXg7XG4gICAgICBjb25zdCBzbG90SW5kZXggPSBub3JtYWxTbG90SW5kZXggJSB0aGlzLnNsb3RzUGVyRXBvY2g7XG4gICAgICByZXR1cm4gW2Vwb2NoLCBzbG90SW5kZXhdO1xuICAgIH1cbiAgfVxuICBnZXRGaXJzdFNsb3RJbkVwb2NoKGVwb2NoKSB7XG4gICAgaWYgKGVwb2NoIDw9IHRoaXMuZmlyc3ROb3JtYWxFcG9jaCkge1xuICAgICAgcmV0dXJuIChNYXRoLnBvdygyLCBlcG9jaCkgLSAxKSAqIE1JTklNVU1fU0xPVF9QRVJfRVBPQ0g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoZXBvY2ggLSB0aGlzLmZpcnN0Tm9ybWFsRXBvY2gpICogdGhpcy5zbG90c1BlckVwb2NoICsgdGhpcy5maXJzdE5vcm1hbFNsb3Q7XG4gICAgfVxuICB9XG4gIGdldExhc3RTbG90SW5FcG9jaChlcG9jaCkge1xuICAgIHJldHVybiB0aGlzLmdldEZpcnN0U2xvdEluRXBvY2goZXBvY2gpICsgdGhpcy5nZXRTbG90c0luRXBvY2goZXBvY2gpIC0gMTtcbiAgfVxuICBnZXRTbG90c0luRXBvY2goZXBvY2gpIHtcbiAgICBpZiAoZXBvY2ggPCB0aGlzLmZpcnN0Tm9ybWFsRXBvY2gpIHtcbiAgICAgIHJldHVybiBNYXRoLnBvdygyLCBlcG9jaCArIHRyYWlsaW5nWmVyb3MoTUlOSU1VTV9TTE9UX1BFUl9FUE9DSCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zbG90c1BlckVwb2NoO1xuICAgIH1cbiAgfVxufVxuXG52YXIgZmV0Y2hJbXBsID0gZ2xvYmFsVGhpcy5mZXRjaDtcblxuY2xhc3MgUnBjV2ViU29ja2V0Q2xpZW50IGV4dGVuZHMgQ29tbW9uQ2xpZW50IHtcbiAgY29uc3RydWN0b3IoYWRkcmVzcywgb3B0aW9ucywgZ2VuZXJhdGVfcmVxdWVzdF9pZCkge1xuICAgIGNvbnN0IHdlYlNvY2tldEZhY3RvcnkgPSB1cmwgPT4ge1xuICAgICAgY29uc3QgcnBjID0gV2ViU29ja2V0KHVybCwge1xuICAgICAgICBhdXRvY29ubmVjdDogdHJ1ZSxcbiAgICAgICAgbWF4X3JlY29ubmVjdHM6IDUsXG4gICAgICAgIHJlY29ubmVjdDogdHJ1ZSxcbiAgICAgICAgcmVjb25uZWN0X2ludGVydmFsOiAxMDAwLFxuICAgICAgICAuLi5vcHRpb25zXG4gICAgICB9KTtcbiAgICAgIGlmICgnc29ja2V0JyBpbiBycGMpIHtcbiAgICAgICAgdGhpcy51bmRlcmx5aW5nU29ja2V0ID0gcnBjLnNvY2tldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudW5kZXJseWluZ1NvY2tldCA9IHJwYztcbiAgICAgIH1cbiAgICAgIHJldHVybiBycGM7XG4gICAgfTtcbiAgICBzdXBlcih3ZWJTb2NrZXRGYWN0b3J5LCBhZGRyZXNzLCBvcHRpb25zLCBnZW5lcmF0ZV9yZXF1ZXN0X2lkKTtcbiAgICB0aGlzLnVuZGVybHlpbmdTb2NrZXQgPSB2b2lkIDA7XG4gIH1cbiAgY2FsbCguLi5hcmdzKSB7XG4gICAgY29uc3QgcmVhZHlTdGF0ZSA9IHRoaXMudW5kZXJseWluZ1NvY2tldD8ucmVhZHlTdGF0ZTtcbiAgICBpZiAocmVhZHlTdGF0ZSA9PT0gMSAvKiBXZWJTb2NrZXQuT1BFTiAqLykge1xuICAgICAgcmV0dXJuIHN1cGVyLmNhbGwoLi4uYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1RyaWVkIHRvIGNhbGwgYSBKU09OLVJQQyBtZXRob2QgYCcgKyBhcmdzWzBdICsgJ2AgYnV0IHRoZSBzb2NrZXQgd2FzIG5vdCBgQ09OTkVDVElOR2Agb3IgYE9QRU5gIChgcmVhZHlTdGF0ZWAgd2FzICcgKyByZWFkeVN0YXRlICsgJyknKSk7XG4gIH1cbiAgbm90aWZ5KC4uLmFyZ3MpIHtcbiAgICBjb25zdCByZWFkeVN0YXRlID0gdGhpcy51bmRlcmx5aW5nU29ja2V0Py5yZWFkeVN0YXRlO1xuICAgIGlmIChyZWFkeVN0YXRlID09PSAxIC8qIFdlYlNvY2tldC5PUEVOICovKSB7XG4gICAgICByZXR1cm4gc3VwZXIubm90aWZ5KC4uLmFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdUcmllZCB0byBzZW5kIGEgSlNPTi1SUEMgbm90aWZpY2F0aW9uIGAnICsgYXJnc1swXSArICdgIGJ1dCB0aGUgc29ja2V0IHdhcyBub3QgYENPTk5FQ1RJTkdgIG9yIGBPUEVOYCAoYHJlYWR5U3RhdGVgIHdhcyAnICsgcmVhZHlTdGF0ZSArICcpJykpO1xuICB9XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuLyoqXG4gKiBEZWNvZGUgYWNjb3VudCBkYXRhIGJ1ZmZlciB1c2luZyBhbiBBY2NvdW50VHlwZVxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGRlY29kZURhdGEodHlwZSwgZGF0YSkge1xuICBsZXQgZGVjb2RlZDtcbiAgdHJ5IHtcbiAgICBkZWNvZGVkID0gdHlwZS5sYXlvdXQuZGVjb2RlKGRhdGEpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaW5zdHJ1Y3Rpb247ICcgKyBlcnIpO1xuICB9XG4gIGlmIChkZWNvZGVkLnR5cGVJbmRleCAhPT0gdHlwZS5pbmRleCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBhY2NvdW50IGRhdGE7IGFjY291bnQgdHlwZSBtaXNtYXRjaCAke2RlY29kZWQudHlwZUluZGV4fSAhPSAke3R5cGUuaW5kZXh9YCk7XG4gIH1cbiAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbi8vLyBUaGUgc2VyaWFsaXplZCBzaXplIG9mIGxvb2t1cCB0YWJsZSBtZXRhZGF0YVxuY29uc3QgTE9PS1VQX1RBQkxFX01FVEFfU0laRSA9IDU2O1xuY2xhc3MgQWRkcmVzc0xvb2t1cFRhYmxlQWNjb3VudCB7XG4gIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0YXRlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gYXJncy5rZXk7XG4gICAgdGhpcy5zdGF0ZSA9IGFyZ3Muc3RhdGU7XG4gIH1cbiAgaXNBY3RpdmUoKSB7XG4gICAgY29uc3QgVTY0X01BWCA9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJyk7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZGVhY3RpdmF0aW9uU2xvdCA9PT0gVTY0X01BWDtcbiAgfVxuICBzdGF0aWMgZGVzZXJpYWxpemUoYWNjb3VudERhdGEpIHtcbiAgICBjb25zdCBtZXRhID0gZGVjb2RlRGF0YShMb29rdXBUYWJsZU1ldGFMYXlvdXQsIGFjY291bnREYXRhKTtcbiAgICBjb25zdCBzZXJpYWxpemVkQWRkcmVzc2VzTGVuID0gYWNjb3VudERhdGEubGVuZ3RoIC0gTE9PS1VQX1RBQkxFX01FVEFfU0laRTtcbiAgICBhc3NlcnQoc2VyaWFsaXplZEFkZHJlc3Nlc0xlbiA+PSAwLCAnbG9va3VwIHRhYmxlIGlzIGludmFsaWQnKTtcbiAgICBhc3NlcnQoc2VyaWFsaXplZEFkZHJlc3Nlc0xlbiAlIDMyID09PSAwLCAnbG9va3VwIHRhYmxlIGlzIGludmFsaWQnKTtcbiAgICBjb25zdCBudW1TZXJpYWxpemVkQWRkcmVzc2VzID0gc2VyaWFsaXplZEFkZHJlc3Nlc0xlbiAvIDMyO1xuICAgIGNvbnN0IHtcbiAgICAgIGFkZHJlc3Nlc1xuICAgIH0gPSBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQuc2VxKHB1YmxpY0tleSgpLCBudW1TZXJpYWxpemVkQWRkcmVzc2VzLCAnYWRkcmVzc2VzJyldKS5kZWNvZGUoYWNjb3VudERhdGEuc2xpY2UoTE9PS1VQX1RBQkxFX01FVEFfU0laRSkpO1xuICAgIHJldHVybiB7XG4gICAgICBkZWFjdGl2YXRpb25TbG90OiBtZXRhLmRlYWN0aXZhdGlvblNsb3QsXG4gICAgICBsYXN0RXh0ZW5kZWRTbG90OiBtZXRhLmxhc3RFeHRlbmRlZFNsb3QsXG4gICAgICBsYXN0RXh0ZW5kZWRTbG90U3RhcnRJbmRleDogbWV0YS5sYXN0RXh0ZW5kZWRTdGFydEluZGV4LFxuICAgICAgYXV0aG9yaXR5OiBtZXRhLmF1dGhvcml0eS5sZW5ndGggIT09IDAgPyBuZXcgUHVibGljS2V5KG1ldGEuYXV0aG9yaXR5WzBdKSA6IHVuZGVmaW5lZCxcbiAgICAgIGFkZHJlc3NlczogYWRkcmVzc2VzLm1hcChhZGRyZXNzID0+IG5ldyBQdWJsaWNLZXkoYWRkcmVzcykpXG4gICAgfTtcbiAgfVxufVxuY29uc3QgTG9va3VwVGFibGVNZXRhTGF5b3V0ID0ge1xuICBpbmRleDogMSxcbiAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCd0eXBlSW5kZXgnKSwgdTY0KCdkZWFjdGl2YXRpb25TbG90JyksIEJ1ZmZlckxheW91dC5udTY0KCdsYXN0RXh0ZW5kZWRTbG90JyksIEJ1ZmZlckxheW91dC51OCgnbGFzdEV4dGVuZGVkU3RhcnRJbmRleCcpLCBCdWZmZXJMYXlvdXQudTgoKSxcbiAgLy8gb3B0aW9uXG4gIEJ1ZmZlckxheW91dC5zZXEocHVibGljS2V5KCksIEJ1ZmZlckxheW91dC5vZmZzZXQoQnVmZmVyTGF5b3V0LnU4KCksIC0xKSwgJ2F1dGhvcml0eScpXSlcbn07XG5cbmNvbnN0IFVSTF9SRSA9IC9eW146XSs6XFwvXFwvKFteOltdK3xcXFtbXlxcXV0rXFxdKSg6XFxkKyk/KC4qKS9pO1xuZnVuY3Rpb24gbWFrZVdlYnNvY2tldFVybChlbmRwb2ludCkge1xuICBjb25zdCBtYXRjaGVzID0gZW5kcG9pbnQubWF0Y2goVVJMX1JFKTtcbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihgRmFpbGVkIHRvIHZhbGlkYXRlIGVuZHBvaW50IFVSTCBcXGAke2VuZHBvaW50fVxcYGApO1xuICB9XG4gIGNvbnN0IFtfLFxuICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBob3N0aXNoLCBwb3J0V2l0aENvbG9uLCByZXN0XSA9IG1hdGNoZXM7XG4gIGNvbnN0IHByb3RvY29sID0gZW5kcG9pbnQuc3RhcnRzV2l0aCgnaHR0cHM6JykgPyAnd3NzOicgOiAnd3M6JztcbiAgY29uc3Qgc3RhcnRQb3J0ID0gcG9ydFdpdGhDb2xvbiA9PSBudWxsID8gbnVsbCA6IHBhcnNlSW50KHBvcnRXaXRoQ29sb24uc2xpY2UoMSksIDEwKTtcbiAgY29uc3Qgd2Vic29ja2V0UG9ydCA9XG4gIC8vIE9ubHkgc2hpZnQgdGhlIHBvcnQgYnkgKzEgYXMgYSBjb252ZW50aW9uIGZvciB3cyhzKSBvbmx5IGlmIGdpdmVuIGVuZHBvaW50XG4gIC8vIGlzIGV4cGxpY2l0bHkgc3BlY2lmeWluZyB0aGUgZW5kcG9pbnQgcG9ydCAoSFRUUC1iYXNlZCBSUEMpLCBhc3N1bWluZ1xuICAvLyB3ZSdyZSBkaXJlY3RseSB0cnlpbmcgdG8gY29ubmVjdCB0byBhZ2F2ZS12YWxpZGF0b3IncyB3cyBsaXN0ZW5pbmcgcG9ydC5cbiAgLy8gV2hlbiB0aGUgZW5kcG9pbnQgb21pdHMgdGhlIHBvcnQsIHdlJ3JlIGNvbm5lY3RpbmcgdG8gdGhlIHByb3RvY29sXG4gIC8vIGRlZmF1bHQgcG9ydHM6IGh0dHAoODApIG9yIGh0dHBzKDQ0MykgYW5kIGl0J3MgYXNzdW1lZCB3ZSdyZSBiZWhpbmQgYSByZXZlcnNlXG4gIC8vIHByb3h5IHdoaWNoIG1hbmFnZXMgV2ViU29ja2V0IHVwZ3JhZGUgYW5kIGJhY2tlbmQgcG9ydCByZWRpcmVjdGlvbi5cbiAgc3RhcnRQb3J0ID09IG51bGwgPyAnJyA6IGA6JHtzdGFydFBvcnQgKyAxfWA7XG4gIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdGlzaH0ke3dlYnNvY2tldFBvcnR9JHtyZXN0fWA7XG59XG5cbmNvbnN0IFB1YmxpY0tleUZyb21TdHJpbmcgPSBjb2VyY2UoaW5zdGFuY2UoUHVibGljS2V5KSwgc3RyaW5nKCksIHZhbHVlID0+IG5ldyBQdWJsaWNLZXkodmFsdWUpKTtcbmNvbnN0IFJhd0FjY291bnREYXRhUmVzdWx0ID0gdHVwbGUoW3N0cmluZygpLCBsaXRlcmFsKCdiYXNlNjQnKV0pO1xuY29uc3QgQnVmZmVyRnJvbVJhd0FjY291bnREYXRhID0gY29lcmNlKGluc3RhbmNlKEJ1ZmZlciksIFJhd0FjY291bnREYXRhUmVzdWx0LCB2YWx1ZSA9PiBCdWZmZXIuZnJvbSh2YWx1ZVswXSwgJ2Jhc2U2NCcpKTtcblxuLyoqXG4gKiBBdHRlbXB0IHRvIHVzZSBhIHJlY2VudCBibG9ja2hhc2ggZm9yIHVwIHRvIDMwIHNlY29uZHNcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBCTE9DS0hBU0hfQ0FDSEVfVElNRU9VVF9NUyA9IDMwICogMTAwMDtcblxuLyoqXG4gKiBIQUNLLlxuICogQ29waWVkIGZyb20gcnBjLXdlYnNvY2tldHMvZGlzdC9saWIvY2xpZW50LlxuICogT3RoZXJ3aXNlLCBgeWFybiBidWlsZGAgZmFpbHMgd2l0aDpcbiAqIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3N0ZXZlbHVzY2hlci9jMDU3ZWNhODFkNDc5ZWY3MDVjZGI1MzE2MmY5OTcxZFxuICovXG5cbi8qKiBAaW50ZXJuYWwgKi9cbi8qKiBAaW50ZXJuYWwgKi9cbi8qKiBAaW50ZXJuYWwgKi9cbi8qKiBAaW50ZXJuYWwgKi9cblxuLyoqIEBpbnRlcm5hbCAqL1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEV2ZXJ5IHN1YnNjcmlwdGlvbiBjb250YWlucyB0aGUgYXJncyB1c2VkIHRvIG9wZW4gdGhlIHN1YnNjcmlwdGlvbiB3aXRoXG4gKiB0aGUgc2VydmVyLCBhbmQgYSBsaXN0IG9mIGNhbGxlcnMgaW50ZXJlc3RlZCBpbiBub3RpZmljYXRpb25zLlxuICovXG5cbi8qKlxuICogQGludGVybmFsXG4gKiBBIHN1YnNjcmlwdGlvbiBtYXkgYmUgaW4gdmFyaW91cyBzdGF0ZXMgb2YgY29ubmVjdGVkbmVzcy4gT25seSB3aGVuIGl0IGlzXG4gKiBmdWxseSBjb25uZWN0ZWQgd2lsbCBpdCBoYXZlIGEgc2VydmVyIHN1YnNjcmlwdGlvbiBpZCBhc3NvY2lhdGVkIHdpdGggaXQuXG4gKiBUaGlzIGlkIGNhbiBiZSByZXR1cm5lZCB0byB0aGUgc2VydmVyIHRvIHVuc3Vic2NyaWJlIHRoZSBjbGllbnQgZW50aXJlbHkuXG4gKi9cblxuLyoqXG4gKiBBIHR5cGUgdGhhdCBlbmNhcHN1bGF0ZXMgYSBzdWJzY3JpcHRpb24ncyBSUEMgbWV0aG9kXG4gKiBuYW1lcyBhbmQgbm90aWZpY2F0aW9uIChjYWxsYmFjaykgc2lnbmF0dXJlLlxuICovXG5cbi8qKlxuICogQGludGVybmFsXG4gKiBVdGlsaXR5IHR5cGUgdGhhdCBrZWVwcyB0YWdnZWQgdW5pb25zIGludGFjdCB3aGlsZSBvbWl0dGluZyBwcm9wZXJ0aWVzLlxuICovXG5cbi8qKlxuICogQGludGVybmFsXG4gKiBUaGlzIHR5cGUgcmVwcmVzZW50cyBhIHNpbmdsZSBzdWJzY3JpYmFibGUgJ3RvcGljLicgSXQncyBtYWRlIHVwIG9mOlxuICpcbiAqIC0gVGhlIGFyZ3MgdXNlZCB0byBvcGVuIHRoZSBzdWJzY3JpcHRpb24gd2l0aCB0aGUgc2VydmVyLFxuICogLSBUaGUgc3RhdGUgb2YgdGhlIHN1YnNjcmlwdGlvbiwgaW4gdGVybXMgb2YgaXRzIGNvbm5lY3RlZG5lc3MsIGFuZFxuICogLSBUaGUgc2V0IG9mIGNhbGxiYWNrcyB0byBjYWxsIHdoZW4gdGhlIHNlcnZlciBwdWJsaXNoZXMgbm90aWZpY2F0aW9uc1xuICpcbiAqIFRoaXMgcmVjb3JkIGdldHMgaW5kZXhlZCBieSBgU3Vic2NyaXB0aW9uQ29uZmlnSGFzaGAgYW5kIGlzIHVzZWQgdG9cbiAqIHNldCB1cCBzdWJzY3JpcHRpb25zLCBmYW4gb3V0IG5vdGlmaWNhdGlvbnMsIGFuZCB0cmFjayBzdWJzY3JpcHRpb24gc3RhdGUuXG4gKi9cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG4vKipcbiAqIEV4dHJhIGNvbnRleHR1YWwgaW5mb3JtYXRpb24gZm9yIFJQQyByZXNwb25zZXNcbiAqL1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHNlbmRpbmcgdHJhbnNhY3Rpb25zXG4gKi9cblxuLyoqXG4gKiBPcHRpb25zIGZvciBjb25maXJtaW5nIHRyYW5zYWN0aW9uc1xuICovXG5cbi8qKlxuICogT3B0aW9ucyBmb3IgZ2V0Q29uZmlybWVkU2lnbmF0dXJlc0ZvckFkZHJlc3MyXG4gKi9cblxuLyoqXG4gKiBPcHRpb25zIGZvciBnZXRTaWduYXR1cmVzRm9yQWRkcmVzc1xuICovXG5cbi8qKlxuICogUlBDIFJlc3BvbnNlIHdpdGggZXh0cmEgY29udGV4dHVhbCBpbmZvcm1hdGlvblxuICovXG5cbi8qKlxuICogQSBzdHJhdGVneSBmb3IgY29uZmlybWluZyB0cmFuc2FjdGlvbnMgdGhhdCB1c2VzIHRoZSBsYXN0IHZhbGlkXG4gKiBibG9jayBoZWlnaHQgZm9yIGEgZ2l2ZW4gYmxvY2toYXNoIHRvIGNoZWNrIGZvciB0cmFuc2FjdGlvbiBleHBpcmF0aW9uLlxuICovXG5cbi8qKlxuICogQSBzdHJhdGVneSBmb3IgY29uZmlybWluZyBkdXJhYmxlIG5vbmNlIHRyYW5zYWN0aW9ucy5cbiAqL1xuXG4vKipcbiAqIFByb3BlcnRpZXMgc2hhcmVkIGJ5IGFsbCB0cmFuc2FjdGlvbiBjb25maXJtYXRpb24gc3RyYXRlZ2llc1xuICovXG5cbi8qKlxuICogVGhpcyB0eXBlIHJlcHJlc2VudHMgYWxsIHRyYW5zYWN0aW9uIGNvbmZpcm1hdGlvbiBzdHJhdGVnaWVzXG4gKi9cblxuLyogQGludGVybmFsICovXG5mdW5jdGlvbiBhc3NlcnRFbmRwb2ludFVybChwdXRhdGl2ZVVybCkge1xuICBpZiAoL15odHRwcz86Ly50ZXN0KHB1dGF0aXZlVXJsKSA9PT0gZmFsc2UpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFbmRwb2ludCBVUkwgbXVzdCBzdGFydCB3aXRoIGBodHRwOmAgb3IgYGh0dHBzOmAuJyk7XG4gIH1cbiAgcmV0dXJuIHB1dGF0aXZlVXJsO1xufVxuXG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBleHRyYWN0Q29tbWl0bWVudEZyb21Db25maWcoY29tbWl0bWVudE9yQ29uZmlnKSB7XG4gIGxldCBjb21taXRtZW50O1xuICBsZXQgY29uZmlnO1xuICBpZiAodHlwZW9mIGNvbW1pdG1lbnRPckNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb21taXRtZW50ID0gY29tbWl0bWVudE9yQ29uZmlnO1xuICB9IGVsc2UgaWYgKGNvbW1pdG1lbnRPckNvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbW1pdG1lbnQ6IHNwZWNpZmllZENvbW1pdG1lbnQsXG4gICAgICAuLi5zcGVjaWZpZWRDb25maWdcbiAgICB9ID0gY29tbWl0bWVudE9yQ29uZmlnO1xuICAgIGNvbW1pdG1lbnQgPSBzcGVjaWZpZWRDb21taXRtZW50O1xuICAgIGNvbmZpZyA9IHNwZWNpZmllZENvbmZpZztcbiAgfVxuICByZXR1cm4ge1xuICAgIGNvbW1pdG1lbnQsXG4gICAgY29uZmlnXG4gIH07XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdE1lbWNtcEVuY29kaW5nVG9GaWx0ZXJzKGZpbHRlcnMpIHtcbiAgcmV0dXJuIGZpbHRlcnMubWFwKGZpbHRlciA9PiAnbWVtY21wJyBpbiBmaWx0ZXIgPyB7XG4gICAgLi4uZmlsdGVyLFxuICAgIG1lbWNtcDoge1xuICAgICAgLi4uZmlsdGVyLm1lbWNtcCxcbiAgICAgIGVuY29kaW5nOiBmaWx0ZXIubWVtY21wLmVuY29kaW5nID8/ICdiYXNlNTgnXG4gICAgfVxuICB9IDogZmlsdGVyKTtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUnBjUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gdW5pb24oW3R5cGUoe1xuICAgIGpzb25ycGM6IGxpdGVyYWwoJzIuMCcpLFxuICAgIGlkOiBzdHJpbmcoKSxcbiAgICByZXN1bHRcbiAgfSksIHR5cGUoe1xuICAgIGpzb25ycGM6IGxpdGVyYWwoJzIuMCcpLFxuICAgIGlkOiBzdHJpbmcoKSxcbiAgICBlcnJvcjogdHlwZSh7XG4gICAgICBjb2RlOiB1bmtub3duKCksXG4gICAgICBtZXNzYWdlOiBzdHJpbmcoKSxcbiAgICAgIGRhdGE6IG9wdGlvbmFsKGFueSgpKVxuICAgIH0pXG4gIH0pXSk7XG59XG5jb25zdCBVbmtub3duUnBjUmVzdWx0ID0gY3JlYXRlUnBjUmVzdWx0KHVua25vd24oKSk7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGpzb25ScGNSZXN1bHQoc2NoZW1hKSB7XG4gIHJldHVybiBjb2VyY2UoY3JlYXRlUnBjUmVzdWx0KHNjaGVtYSksIFVua25vd25ScGNSZXN1bHQsIHZhbHVlID0+IHtcbiAgICBpZiAoJ2Vycm9yJyBpbiB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi52YWx1ZSxcbiAgICAgICAgcmVzdWx0OiBjcmVhdGUodmFsdWUucmVzdWx0LCBzY2hlbWEpXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGpzb25ScGNSZXN1bHRBbmRDb250ZXh0KHZhbHVlKSB7XG4gIHJldHVybiBqc29uUnBjUmVzdWx0KHR5cGUoe1xuICAgIGNvbnRleHQ6IHR5cGUoe1xuICAgICAgc2xvdDogbnVtYmVyKClcbiAgICB9KSxcbiAgICB2YWx1ZVxuICB9KSk7XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIG5vdGlmaWNhdGlvblJlc3VsdEFuZENvbnRleHQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGUoe1xuICAgIGNvbnRleHQ6IHR5cGUoe1xuICAgICAgc2xvdDogbnVtYmVyKClcbiAgICB9KSxcbiAgICB2YWx1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmVyc2lvbmVkTWVzc2FnZUZyb21SZXNwb25zZSh2ZXJzaW9uLCByZXNwb25zZSkge1xuICBpZiAodmVyc2lvbiA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgTWVzc2FnZVYwKHtcbiAgICAgIGhlYWRlcjogcmVzcG9uc2UuaGVhZGVyLFxuICAgICAgc3RhdGljQWNjb3VudEtleXM6IHJlc3BvbnNlLmFjY291bnRLZXlzLm1hcChhY2NvdW50S2V5ID0+IG5ldyBQdWJsaWNLZXkoYWNjb3VudEtleSkpLFxuICAgICAgcmVjZW50QmxvY2toYXNoOiByZXNwb25zZS5yZWNlbnRCbG9ja2hhc2gsXG4gICAgICBjb21waWxlZEluc3RydWN0aW9uczogcmVzcG9uc2UuaW5zdHJ1Y3Rpb25zLm1hcChpeCA9PiAoe1xuICAgICAgICBwcm9ncmFtSWRJbmRleDogaXgucHJvZ3JhbUlkSW5kZXgsXG4gICAgICAgIGFjY291bnRLZXlJbmRleGVzOiBpeC5hY2NvdW50cyxcbiAgICAgICAgZGF0YTogYnM1OC5kZWNvZGUoaXguZGF0YSlcbiAgICAgIH0pKSxcbiAgICAgIGFkZHJlc3NUYWJsZUxvb2t1cHM6IHJlc3BvbnNlLmFkZHJlc3NUYWJsZUxvb2t1cHNcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2UocmVzcG9uc2UpO1xuICB9XG59XG5cbi8qKlxuICogVGhlIGxldmVsIG9mIGNvbW1pdG1lbnQgZGVzaXJlZCB3aGVuIHF1ZXJ5aW5nIHN0YXRlXG4gKiA8cHJlPlxuICogICAncHJvY2Vzc2VkJzogUXVlcnkgdGhlIG1vc3QgcmVjZW50IGJsb2NrIHdoaWNoIGhhcyByZWFjaGVkIDEgY29uZmlybWF0aW9uIGJ5IHRoZSBjb25uZWN0ZWQgbm9kZVxuICogICAnY29uZmlybWVkJzogUXVlcnkgdGhlIG1vc3QgcmVjZW50IGJsb2NrIHdoaWNoIGhhcyByZWFjaGVkIDEgY29uZmlybWF0aW9uIGJ5IHRoZSBjbHVzdGVyXG4gKiAgICdmaW5hbGl6ZWQnOiBRdWVyeSB0aGUgbW9zdCByZWNlbnQgYmxvY2sgd2hpY2ggaGFzIGJlZW4gZmluYWxpemVkIGJ5IHRoZSBjbHVzdGVyXG4gKiA8L3ByZT5cbiAqL1xuXG4vLyBEZXByZWNhdGVkIGFzIG9mIHYxLjUuNVxuXG4vKipcbiAqIEEgc3Vic2V0IG9mIENvbW1pdG1lbnQgbGV2ZWxzLCB3aGljaCBhcmUgYXQgbGVhc3Qgb3B0aW1pc3RpY2FsbHkgY29uZmlybWVkXG4gKiA8cHJlPlxuICogICAnY29uZmlybWVkJzogUXVlcnkgdGhlIG1vc3QgcmVjZW50IGJsb2NrIHdoaWNoIGhhcyByZWFjaGVkIDEgY29uZmlybWF0aW9uIGJ5IHRoZSBjbHVzdGVyXG4gKiAgICdmaW5hbGl6ZWQnOiBRdWVyeSB0aGUgbW9zdCByZWNlbnQgYmxvY2sgd2hpY2ggaGFzIGJlZW4gZmluYWxpemVkIGJ5IHRoZSBjbHVzdGVyXG4gKiA8L3ByZT5cbiAqL1xuXG4vKipcbiAqIEZpbHRlciBmb3IgbGFyZ2VzdCBhY2NvdW50cyBxdWVyeVxuICogPHByZT5cbiAqICAgJ2NpcmN1bGF0aW5nJzogICAgUmV0dXJuIHRoZSBsYXJnZXN0IGFjY291bnRzIHRoYXQgYXJlIHBhcnQgb2YgdGhlIGNpcmN1bGF0aW5nIHN1cHBseVxuICogICAnbm9uQ2lyY3VsYXRpbmcnOiBSZXR1cm4gdGhlIGxhcmdlc3QgYWNjb3VudHMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIGNpcmN1bGF0aW5nIHN1cHBseVxuICogPC9wcmU+XG4gKi9cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgY2hhbmdpbmcgYGdldEFjY291bnRJbmZvYCBxdWVyeSBiZWhhdmlvclxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGNoYW5naW5nIGBnZXRCYWxhbmNlYCBxdWVyeSBiZWhhdmlvclxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGNoYW5naW5nIGBnZXRCbG9ja2AgcXVlcnkgYmVoYXZpb3JcbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBjaGFuZ2luZyBgZ2V0QmxvY2tgIHF1ZXJ5IGJlaGF2aW9yXG4gKi9cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgY2hhbmdpbmcgYGdldFN0YWtlTWluaW11bURlbGVnYXRpb25gIHF1ZXJ5IGJlaGF2aW9yXG4gKi9cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgY2hhbmdpbmcgYGdldEJsb2NrSGVpZ2h0YCBxdWVyeSBiZWhhdmlvclxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGNoYW5naW5nIGBnZXRFcG9jaEluZm9gIHF1ZXJ5IGJlaGF2aW9yXG4gKi9cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgY2hhbmdpbmcgYGdldEluZmxhdGlvblJld2FyZGAgcXVlcnkgYmVoYXZpb3JcbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBjaGFuZ2luZyBgZ2V0TGF0ZXN0QmxvY2toYXNoYCBxdWVyeSBiZWhhdmlvclxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGNoYW5naW5nIGBpc0Jsb2NraGFzaFZhbGlkYCBxdWVyeSBiZWhhdmlvclxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGNoYW5naW5nIGBnZXRTbG90YCBxdWVyeSBiZWhhdmlvclxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGNoYW5naW5nIGBnZXRTbG90TGVhZGVyYCBxdWVyeSBiZWhhdmlvclxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGNoYW5naW5nIGBnZXRUcmFuc2FjdGlvbmAgcXVlcnkgYmVoYXZpb3JcbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBjaGFuZ2luZyBgZ2V0VHJhbnNhY3Rpb25gIHF1ZXJ5IGJlaGF2aW9yXG4gKi9cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgY2hhbmdpbmcgYGdldExhcmdlc3RBY2NvdW50c2AgcXVlcnkgYmVoYXZpb3JcbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBjaGFuZ2luZyBgZ2V0U3VwcGx5YCByZXF1ZXN0IGJlaGF2aW9yXG4gKi9cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgY2hhbmdpbmcgcXVlcnkgYmVoYXZpb3JcbiAqL1xuXG4vKipcbiAqIEluZm9ybWF0aW9uIGRlc2NyaWJpbmcgYSBjbHVzdGVyIG5vZGVcbiAqL1xuXG4vKipcbiAqIEluZm9ybWF0aW9uIGRlc2NyaWJpbmcgYSB2b3RlIGFjY291bnRcbiAqL1xuXG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiBjbHVzdGVyIHZvdGUgYWNjb3VudHNcbiAqL1xuXG4vKipcbiAqIE5ldHdvcmsgSW5mbGF0aW9uXG4gKiAoc2VlIGh0dHBzOi8vZG9jcy5zb2xhbmEuY29tL2ltcGxlbWVudGVkLXByb3Bvc2Fscy9lZF9vdmVydmlldylcbiAqL1xuXG5jb25zdCBHZXRJbmZsYXRpb25Hb3Zlcm5vclJlc3VsdCA9IHR5cGUoe1xuICBmb3VuZGF0aW9uOiBudW1iZXIoKSxcbiAgZm91bmRhdGlvblRlcm06IG51bWJlcigpLFxuICBpbml0aWFsOiBudW1iZXIoKSxcbiAgdGFwZXI6IG51bWJlcigpLFxuICB0ZXJtaW5hbDogbnVtYmVyKClcbn0pO1xuXG4vKipcbiAqIFRoZSBpbmZsYXRpb24gcmV3YXJkIGZvciBhbiBlcG9jaFxuICovXG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldEluZmxhdGlvblJld2FyZFwiIG1lc3NhZ2VcbiAqL1xuY29uc3QgR2V0SW5mbGF0aW9uUmV3YXJkUmVzdWx0ID0ganNvblJwY1Jlc3VsdChhcnJheShudWxsYWJsZSh0eXBlKHtcbiAgZXBvY2g6IG51bWJlcigpLFxuICBlZmZlY3RpdmVTbG90OiBudW1iZXIoKSxcbiAgYW1vdW50OiBudW1iZXIoKSxcbiAgcG9zdEJhbGFuY2U6IG51bWJlcigpLFxuICBjb21taXNzaW9uOiBvcHRpb25hbChudWxsYWJsZShudW1iZXIoKSkpXG59KSkpKTtcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgY2hhbmdpbmcgYGdldFJlY2VudFByaW9yaXRpemF0aW9uRmVlc2AgcXVlcnkgYmVoYXZpb3JcbiAqL1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRSZWNlbnRQcmlvcml0aXphdGlvbkZlZXNcIiBtZXNzYWdlXG4gKi9cbmNvbnN0IEdldFJlY2VudFByaW9yaXRpemF0aW9uRmVlc1Jlc3VsdCA9IGFycmF5KHR5cGUoe1xuICBzbG90OiBudW1iZXIoKSxcbiAgcHJpb3JpdGl6YXRpb25GZWU6IG51bWJlcigpXG59KSk7XG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRJbmZsYXRpb25SYXRlXCIgbWVzc2FnZVxuICovXG5jb25zdCBHZXRJbmZsYXRpb25SYXRlUmVzdWx0ID0gdHlwZSh7XG4gIHRvdGFsOiBudW1iZXIoKSxcbiAgdmFsaWRhdG9yOiBudW1iZXIoKSxcbiAgZm91bmRhdGlvbjogbnVtYmVyKCksXG4gIGVwb2NoOiBudW1iZXIoKVxufSk7XG5cbi8qKlxuICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgZXBvY2hcbiAqL1xuXG5jb25zdCBHZXRFcG9jaEluZm9SZXN1bHQgPSB0eXBlKHtcbiAgZXBvY2g6IG51bWJlcigpLFxuICBzbG90SW5kZXg6IG51bWJlcigpLFxuICBzbG90c0luRXBvY2g6IG51bWJlcigpLFxuICBhYnNvbHV0ZVNsb3Q6IG51bWJlcigpLFxuICBibG9ja0hlaWdodDogb3B0aW9uYWwobnVtYmVyKCkpLFxuICB0cmFuc2FjdGlvbkNvdW50OiBvcHRpb25hbChudW1iZXIoKSlcbn0pO1xuY29uc3QgR2V0RXBvY2hTY2hlZHVsZVJlc3VsdCA9IHR5cGUoe1xuICBzbG90c1BlckVwb2NoOiBudW1iZXIoKSxcbiAgbGVhZGVyU2NoZWR1bGVTbG90T2Zmc2V0OiBudW1iZXIoKSxcbiAgd2FybXVwOiBib29sZWFuKCksXG4gIGZpcnN0Tm9ybWFsRXBvY2g6IG51bWJlcigpLFxuICBmaXJzdE5vcm1hbFNsb3Q6IG51bWJlcigpXG59KTtcblxuLyoqXG4gKiBMZWFkZXIgc2NoZWR1bGVcbiAqIChzZWUgaHR0cHM6Ly9kb2NzLnNvbGFuYS5jb20vdGVybWlub2xvZ3kjbGVhZGVyLXNjaGVkdWxlKVxuICovXG5cbmNvbnN0IEdldExlYWRlclNjaGVkdWxlUmVzdWx0ID0gcmVjb3JkKHN0cmluZygpLCBhcnJheShudW1iZXIoKSkpO1xuXG4vKipcbiAqIFRyYW5zYWN0aW9uIGVycm9yIG9yIG51bGxcbiAqL1xuY29uc3QgVHJhbnNhY3Rpb25FcnJvclJlc3VsdCA9IG51bGxhYmxlKHVuaW9uKFt0eXBlKHt9KSwgc3RyaW5nKCldKSk7XG5cbi8qKlxuICogU2lnbmF0dXJlIHN0YXR1cyBmb3IgYSB0cmFuc2FjdGlvblxuICovXG5jb25zdCBTaWduYXR1cmVTdGF0dXNSZXN1bHQgPSB0eXBlKHtcbiAgZXJyOiBUcmFuc2FjdGlvbkVycm9yUmVzdWx0XG59KTtcblxuLyoqXG4gKiBUcmFuc2FjdGlvbiBzaWduYXR1cmUgcmVjZWl2ZWQgbm90aWZpY2F0aW9uXG4gKi9cbmNvbnN0IFNpZ25hdHVyZVJlY2VpdmVkUmVzdWx0ID0gbGl0ZXJhbCgncmVjZWl2ZWRTaWduYXR1cmUnKTtcblxuLyoqXG4gKiBWZXJzaW9uIGluZm8gZm9yIGEgbm9kZVxuICovXG5cbmNvbnN0IFZlcnNpb25SZXN1bHQgPSB0eXBlKHtcbiAgJ3NvbGFuYS1jb3JlJzogc3RyaW5nKCksXG4gICdmZWF0dXJlLXNldCc6IG9wdGlvbmFsKG51bWJlcigpKVxufSk7XG5jb25zdCBQYXJzZWRJbnN0cnVjdGlvblN0cnVjdCA9IHR5cGUoe1xuICBwcm9ncmFtOiBzdHJpbmcoKSxcbiAgcHJvZ3JhbUlkOiBQdWJsaWNLZXlGcm9tU3RyaW5nLFxuICBwYXJzZWQ6IHVua25vd24oKVxufSk7XG5jb25zdCBQYXJ0aWFsbHlEZWNvZGVkSW5zdHJ1Y3Rpb25TdHJ1Y3QgPSB0eXBlKHtcbiAgcHJvZ3JhbUlkOiBQdWJsaWNLZXlGcm9tU3RyaW5nLFxuICBhY2NvdW50czogYXJyYXkoUHVibGljS2V5RnJvbVN0cmluZyksXG4gIGRhdGE6IHN0cmluZygpXG59KTtcbmNvbnN0IFNpbXVsYXRlZFRyYW5zYWN0aW9uUmVzcG9uc2VTdHJ1Y3QgPSBqc29uUnBjUmVzdWx0QW5kQ29udGV4dCh0eXBlKHtcbiAgZXJyOiBudWxsYWJsZSh1bmlvbihbdHlwZSh7fSksIHN0cmluZygpXSkpLFxuICBsb2dzOiBudWxsYWJsZShhcnJheShzdHJpbmcoKSkpLFxuICBhY2NvdW50czogb3B0aW9uYWwobnVsbGFibGUoYXJyYXkobnVsbGFibGUodHlwZSh7XG4gICAgZXhlY3V0YWJsZTogYm9vbGVhbigpLFxuICAgIG93bmVyOiBzdHJpbmcoKSxcbiAgICBsYW1wb3J0czogbnVtYmVyKCksXG4gICAgZGF0YTogYXJyYXkoc3RyaW5nKCkpLFxuICAgIHJlbnRFcG9jaDogb3B0aW9uYWwobnVtYmVyKCkpXG4gIH0pKSkpKSxcbiAgdW5pdHNDb25zdW1lZDogb3B0aW9uYWwobnVtYmVyKCkpLFxuICByZXR1cm5EYXRhOiBvcHRpb25hbChudWxsYWJsZSh0eXBlKHtcbiAgICBwcm9ncmFtSWQ6IHN0cmluZygpLFxuICAgIGRhdGE6IHR1cGxlKFtzdHJpbmcoKSwgbGl0ZXJhbCgnYmFzZTY0JyldKVxuICB9KSkpLFxuICBpbm5lckluc3RydWN0aW9uczogb3B0aW9uYWwobnVsbGFibGUoYXJyYXkodHlwZSh7XG4gICAgaW5kZXg6IG51bWJlcigpLFxuICAgIGluc3RydWN0aW9uczogYXJyYXkodW5pb24oW1BhcnNlZEluc3RydWN0aW9uU3RydWN0LCBQYXJ0aWFsbHlEZWNvZGVkSW5zdHJ1Y3Rpb25TdHJ1Y3RdKSlcbiAgfSkpKSlcbn0pKTtcblxuLyoqXG4gKiBNZXRhZGF0YSBmb3IgYSBwYXJzZWQgY29uZmlybWVkIHRyYW5zYWN0aW9uIG9uIHRoZSBsZWRnZXJcbiAqXG4gKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIHNpbmNlIFJQQyB2MS44LjAuIFBsZWFzZSB1c2Uge0BsaW5rIFBhcnNlZFRyYW5zYWN0aW9uTWV0YX0gaW5zdGVhZC5cbiAqL1xuXG4vKipcbiAqIENvbGxlY3Rpb24gb2YgYWRkcmVzc2VzIGxvYWRlZCBieSBhIHRyYW5zYWN0aW9uIHVzaW5nIGFkZHJlc3MgdGFibGUgbG9va3Vwc1xuICovXG5cbi8qKlxuICogTWV0YWRhdGEgZm9yIGEgcGFyc2VkIHRyYW5zYWN0aW9uIG9uIHRoZSBsZWRnZXJcbiAqL1xuXG4vKipcbiAqIE1ldGFkYXRhIGZvciBhIGNvbmZpcm1lZCB0cmFuc2FjdGlvbiBvbiB0aGUgbGVkZ2VyXG4gKi9cblxuLyoqXG4gKiBBIHByb2Nlc3NlZCB0cmFuc2FjdGlvbiBmcm9tIHRoZSBSUEMgQVBJXG4gKi9cblxuLyoqXG4gKiBBIHByb2Nlc3NlZCB0cmFuc2FjdGlvbiBmcm9tIHRoZSBSUEMgQVBJXG4gKi9cblxuLyoqXG4gKiBBIHByb2Nlc3NlZCB0cmFuc2FjdGlvbiBtZXNzYWdlIGZyb20gdGhlIFJQQyBBUElcbiAqL1xuXG4vKipcbiAqIEEgY29uZmlybWVkIHRyYW5zYWN0aW9uIG9uIHRoZSBsZWRnZXJcbiAqXG4gKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIHNpbmNlIFJQQyB2MS44LjAuXG4gKi9cblxuLyoqXG4gKiBBIHBhcnRpYWxseSBkZWNvZGVkIHRyYW5zYWN0aW9uIGluc3RydWN0aW9uXG4gKi9cblxuLyoqXG4gKiBBIHBhcnNlZCB0cmFuc2FjdGlvbiBtZXNzYWdlIGFjY291bnRcbiAqL1xuXG4vKipcbiAqIEEgcGFyc2VkIHRyYW5zYWN0aW9uIGluc3RydWN0aW9uXG4gKi9cblxuLyoqXG4gKiBBIHBhcnNlZCBhZGRyZXNzIHRhYmxlIGxvb2t1cFxuICovXG5cbi8qKlxuICogQSBwYXJzZWQgdHJhbnNhY3Rpb24gbWVzc2FnZVxuICovXG5cbi8qKlxuICogQSBwYXJzZWQgdHJhbnNhY3Rpb25cbiAqL1xuXG4vKipcbiAqIEEgcGFyc2VkIGFuZCBjb25maXJtZWQgdHJhbnNhY3Rpb24gb24gdGhlIGxlZGdlclxuICpcbiAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgc2luY2UgUlBDIHYxLjguMC4gUGxlYXNlIHVzZSB7QGxpbmsgUGFyc2VkVHJhbnNhY3Rpb25XaXRoTWV0YX0gaW5zdGVhZC5cbiAqL1xuXG4vKipcbiAqIEEgcGFyc2VkIHRyYW5zYWN0aW9uIG9uIHRoZSBsZWRnZXIgd2l0aCBtZXRhXG4gKi9cblxuLyoqXG4gKiBBIHByb2Nlc3NlZCBibG9jayBmZXRjaGVkIGZyb20gdGhlIFJQQyBBUElcbiAqL1xuXG4vKipcbiAqIEEgcHJvY2Vzc2VkIGJsb2NrIGZldGNoZWQgZnJvbSB0aGUgUlBDIEFQSSB3aGVyZSB0aGUgYHRyYW5zYWN0aW9uRGV0YWlsc2AgbW9kZSBpcyBgYWNjb3VudHNgXG4gKi9cblxuLyoqXG4gKiBBIHByb2Nlc3NlZCBibG9jayBmZXRjaGVkIGZyb20gdGhlIFJQQyBBUEkgd2hlcmUgdGhlIGB0cmFuc2FjdGlvbkRldGFpbHNgIG1vZGUgaXMgYG5vbmVgXG4gKi9cblxuLyoqXG4gKiBBIGJsb2NrIHdpdGggcGFyc2VkIHRyYW5zYWN0aW9uc1xuICovXG5cbi8qKlxuICogQSBibG9jayB3aXRoIHBhcnNlZCB0cmFuc2FjdGlvbnMgd2hlcmUgdGhlIGB0cmFuc2FjdGlvbkRldGFpbHNgIG1vZGUgaXMgYGFjY291bnRzYFxuICovXG5cbi8qKlxuICogQSBibG9jayB3aXRoIHBhcnNlZCB0cmFuc2FjdGlvbnMgd2hlcmUgdGhlIGB0cmFuc2FjdGlvbkRldGFpbHNgIG1vZGUgaXMgYG5vbmVgXG4gKi9cblxuLyoqXG4gKiBBIHByb2Nlc3NlZCBibG9jayBmZXRjaGVkIGZyb20gdGhlIFJQQyBBUElcbiAqL1xuXG4vKipcbiAqIEEgcHJvY2Vzc2VkIGJsb2NrIGZldGNoZWQgZnJvbSB0aGUgUlBDIEFQSSB3aGVyZSB0aGUgYHRyYW5zYWN0aW9uRGV0YWlsc2AgbW9kZSBpcyBgYWNjb3VudHNgXG4gKi9cblxuLyoqXG4gKiBBIHByb2Nlc3NlZCBibG9jayBmZXRjaGVkIGZyb20gdGhlIFJQQyBBUEkgd2hlcmUgdGhlIGB0cmFuc2FjdGlvbkRldGFpbHNgIG1vZGUgaXMgYG5vbmVgXG4gKi9cblxuLyoqXG4gKiBBIGNvbmZpcm1lZCBibG9jayBvbiB0aGUgbGVkZ2VyXG4gKlxuICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBzaW5jZSBSUEMgdjEuOC4wLlxuICovXG5cbi8qKlxuICogQSBCbG9jayBvbiB0aGUgbGVkZ2VyIHdpdGggc2lnbmF0dXJlcyBvbmx5XG4gKi9cblxuLyoqXG4gKiByZWNlbnQgYmxvY2sgcHJvZHVjdGlvbiBpbmZvcm1hdGlvblxuICovXG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldEJsb2NrUHJvZHVjdGlvblwiIG1lc3NhZ2VcbiAqL1xuY29uc3QgQmxvY2tQcm9kdWN0aW9uUmVzcG9uc2VTdHJ1Y3QgPSBqc29uUnBjUmVzdWx0QW5kQ29udGV4dCh0eXBlKHtcbiAgYnlJZGVudGl0eTogcmVjb3JkKHN0cmluZygpLCBhcnJheShudW1iZXIoKSkpLFxuICByYW5nZTogdHlwZSh7XG4gICAgZmlyc3RTbG90OiBudW1iZXIoKSxcbiAgICBsYXN0U2xvdDogbnVtYmVyKClcbiAgfSlcbn0pKTtcblxuLyoqXG4gKiBBIHBlcmZvcm1hbmNlIHNhbXBsZVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJwY0NsaWVudCh1cmwsIGh0dHBIZWFkZXJzLCBjdXN0b21GZXRjaCwgZmV0Y2hNaWRkbGV3YXJlLCBkaXNhYmxlUmV0cnlPblJhdGVMaW1pdCwgaHR0cEFnZW50KSB7XG4gIGNvbnN0IGZldGNoID0gY3VzdG9tRmV0Y2ggPyBjdXN0b21GZXRjaCA6IGZldGNoSW1wbDtcbiAgbGV0IGFnZW50O1xuICB7XG4gICAgaWYgKGh0dHBBZ2VudCAhPSBudWxsKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1lvdSBoYXZlIHN1cHBsaWVkIGFuIGBodHRwQWdlbnRgIHdoZW4gY3JlYXRpbmcgYSBgQ29ubmVjdGlvbmAgaW4gYSBicm93c2VyIGVudmlyb25tZW50LicgKyAnSXQgaGFzIGJlZW4gaWdub3JlZDsgYGh0dHBBZ2VudGAgaXMgb25seSB1c2VkIGluIE5vZGUgZW52aXJvbm1lbnRzLicpO1xuICAgIH1cbiAgfVxuICBsZXQgZmV0Y2hXaXRoTWlkZGxld2FyZTtcbiAgaWYgKGZldGNoTWlkZGxld2FyZSkge1xuICAgIGZldGNoV2l0aE1pZGRsZXdhcmUgPSBhc3luYyAoaW5mbywgaW5pdCkgPT4ge1xuICAgICAgY29uc3QgbW9kaWZpZWRGZXRjaEFyZ3MgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZmV0Y2hNaWRkbGV3YXJlKGluZm8sIGluaXQsIChtb2RpZmllZEluZm8sIG1vZGlmaWVkSW5pdCkgPT4gcmVzb2x2ZShbbW9kaWZpZWRJbmZvLCBtb2RpZmllZEluaXRdKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYXdhaXQgZmV0Y2goLi4ubW9kaWZpZWRGZXRjaEFyZ3MpO1xuICAgIH07XG4gIH1cbiAgY29uc3QgY2xpZW50QnJvd3NlciA9IG5ldyBScGNDbGllbnQoYXN5bmMgKHJlcXVlc3QsIGNhbGxiYWNrKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogcmVxdWVzdCxcbiAgICAgIGFnZW50LFxuICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH0sIGh0dHBIZWFkZXJzIHx8IHt9LCBDT01NT05fSFRUUF9IRUFERVJTKVxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIGxldCB0b29fbWFueV9yZXF1ZXN0c19yZXRyaWVzID0gNTtcbiAgICAgIGxldCByZXM7XG4gICAgICBsZXQgd2FpdFRpbWUgPSA1MDA7XG4gICAgICBmb3IgKDs7KSB7XG4gICAgICAgIGlmIChmZXRjaFdpdGhNaWRkbGV3YXJlKSB7XG4gICAgICAgICAgcmVzID0gYXdhaXQgZmV0Y2hXaXRoTWlkZGxld2FyZSh1cmwsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcyA9IGF3YWl0IGZldGNoKHVybCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcy5zdGF0dXMgIT09IDQyOSAvKiBUb28gbWFueSByZXF1ZXN0cyAqLykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNhYmxlUmV0cnlPblJhdGVMaW1pdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRvb19tYW55X3JlcXVlc3RzX3JldHJpZXMgLT0gMTtcbiAgICAgICAgaWYgKHRvb19tYW55X3JlcXVlc3RzX3JldHJpZXMgPT09IDApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yKGBTZXJ2ZXIgcmVzcG9uZGVkIHdpdGggJHtyZXMuc3RhdHVzfSAke3Jlcy5zdGF0dXNUZXh0fS4gIFJldHJ5aW5nIGFmdGVyICR7d2FpdFRpbWV9bXMgZGVsYXkuLi5gKTtcbiAgICAgICAgYXdhaXQgc2xlZXAod2FpdFRpbWUpO1xuICAgICAgICB3YWl0VGltZSAqPSAyO1xuICAgICAgfVxuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKGAke3Jlcy5zdGF0dXN9ICR7cmVzLnN0YXR1c1RleHR9OiAke3RleHR9YCkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSBjYWxsYmFjayhlcnIpO1xuICAgIH1cbiAgfSwge30pO1xuICByZXR1cm4gY2xpZW50QnJvd3Nlcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJwY1JlcXVlc3QoY2xpZW50KSB7XG4gIHJldHVybiAobWV0aG9kLCBhcmdzKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNsaWVudC5yZXF1ZXN0KG1ldGhvZCwgYXJncywgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUnBjQmF0Y2hSZXF1ZXN0KGNsaWVudCkge1xuICByZXR1cm4gcmVxdWVzdHMgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBEbyBub3RoaW5nIGlmIHJlcXVlc3RzIGlzIGVtcHR5XG4gICAgICBpZiAocmVxdWVzdHMubGVuZ3RoID09PSAwKSByZXNvbHZlKFtdKTtcbiAgICAgIGNvbnN0IGJhdGNoID0gcmVxdWVzdHMubWFwKHBhcmFtcyA9PiB7XG4gICAgICAgIHJldHVybiBjbGllbnQucmVxdWVzdChwYXJhbXMubWV0aG9kTmFtZSwgcGFyYW1zLmFyZ3MpO1xuICAgICAgfSk7XG4gICAgICBjbGllbnQucmVxdWVzdChiYXRjaCwgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRJbmZsYXRpb25Hb3Zlcm5vclwiIG1lc3NhZ2VcbiAqL1xuY29uc3QgR2V0SW5mbGF0aW9uR292ZXJub3JScGNSZXN1bHQgPSBqc29uUnBjUmVzdWx0KEdldEluZmxhdGlvbkdvdmVybm9yUmVzdWx0KTtcblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiZ2V0SW5mbGF0aW9uUmF0ZVwiIG1lc3NhZ2VcbiAqL1xuY29uc3QgR2V0SW5mbGF0aW9uUmF0ZVJwY1Jlc3VsdCA9IGpzb25ScGNSZXN1bHQoR2V0SW5mbGF0aW9uUmF0ZVJlc3VsdCk7XG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldFJlY2VudFByaW9yaXRpemF0aW9uRmVlc1wiIG1lc3NhZ2VcbiAqL1xuY29uc3QgR2V0UmVjZW50UHJpb3JpdGl6YXRpb25GZWVzUnBjUmVzdWx0ID0ganNvblJwY1Jlc3VsdChHZXRSZWNlbnRQcmlvcml0aXphdGlvbkZlZXNSZXN1bHQpO1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRFcG9jaEluZm9cIiBtZXNzYWdlXG4gKi9cbmNvbnN0IEdldEVwb2NoSW5mb1JwY1Jlc3VsdCA9IGpzb25ScGNSZXN1bHQoR2V0RXBvY2hJbmZvUmVzdWx0KTtcblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiZ2V0RXBvY2hTY2hlZHVsZVwiIG1lc3NhZ2VcbiAqL1xuY29uc3QgR2V0RXBvY2hTY2hlZHVsZVJwY1Jlc3VsdCA9IGpzb25ScGNSZXN1bHQoR2V0RXBvY2hTY2hlZHVsZVJlc3VsdCk7XG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldExlYWRlclNjaGVkdWxlXCIgbWVzc2FnZVxuICovXG5jb25zdCBHZXRMZWFkZXJTY2hlZHVsZVJwY1Jlc3VsdCA9IGpzb25ScGNSZXN1bHQoR2V0TGVhZGVyU2NoZWR1bGVSZXN1bHQpO1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJtaW5pbXVtTGVkZ2VyU2xvdFwiIGFuZCBcImdldEZpcnN0QXZhaWxhYmxlQmxvY2tcIiBtZXNzYWdlc1xuICovXG5jb25zdCBTbG90UnBjUmVzdWx0ID0ganNvblJwY1Jlc3VsdChudW1iZXIoKSk7XG5cbi8qKlxuICogU3VwcGx5XG4gKi9cblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiZ2V0U3VwcGx5XCIgbWVzc2FnZVxuICovXG5jb25zdCBHZXRTdXBwbHlScGNSZXN1bHQgPSBqc29uUnBjUmVzdWx0QW5kQ29udGV4dCh0eXBlKHtcbiAgdG90YWw6IG51bWJlcigpLFxuICBjaXJjdWxhdGluZzogbnVtYmVyKCksXG4gIG5vbkNpcmN1bGF0aW5nOiBudW1iZXIoKSxcbiAgbm9uQ2lyY3VsYXRpbmdBY2NvdW50czogYXJyYXkoUHVibGljS2V5RnJvbVN0cmluZylcbn0pKTtcblxuLyoqXG4gKiBUb2tlbiBhbW91bnQgb2JqZWN0IHdoaWNoIHJldHVybnMgYSB0b2tlbiBhbW91bnQgaW4gZGlmZmVyZW50IGZvcm1hdHNcbiAqIGZvciB2YXJpb3VzIGNsaWVudCB1c2UgY2FzZXMuXG4gKi9cblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyBzdHJ1Y3R1cmUgZm9yIHRva2VuIGFtb3VudHNcbiAqL1xuY29uc3QgVG9rZW5BbW91bnRSZXN1bHQgPSB0eXBlKHtcbiAgYW1vdW50OiBzdHJpbmcoKSxcbiAgdWlBbW91bnQ6IG51bGxhYmxlKG51bWJlcigpKSxcbiAgZGVjaW1hbHM6IG51bWJlcigpLFxuICB1aUFtb3VudFN0cmluZzogb3B0aW9uYWwoc3RyaW5nKCkpXG59KTtcblxuLyoqXG4gKiBUb2tlbiBhZGRyZXNzIGFuZCBiYWxhbmNlLlxuICovXG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldFRva2VuTGFyZ2VzdEFjY291bnRzXCIgbWVzc2FnZVxuICovXG5jb25zdCBHZXRUb2tlbkxhcmdlc3RBY2NvdW50c1Jlc3VsdCA9IGpzb25ScGNSZXN1bHRBbmRDb250ZXh0KGFycmF5KHR5cGUoe1xuICBhZGRyZXNzOiBQdWJsaWNLZXlGcm9tU3RyaW5nLFxuICBhbW91bnQ6IHN0cmluZygpLFxuICB1aUFtb3VudDogbnVsbGFibGUobnVtYmVyKCkpLFxuICBkZWNpbWFsczogbnVtYmVyKCksXG4gIHVpQW1vdW50U3RyaW5nOiBvcHRpb25hbChzdHJpbmcoKSlcbn0pKSk7XG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldFRva2VuQWNjb3VudHNCeU93bmVyXCIgbWVzc2FnZVxuICovXG5jb25zdCBHZXRUb2tlbkFjY291bnRzQnlPd25lciA9IGpzb25ScGNSZXN1bHRBbmRDb250ZXh0KGFycmF5KHR5cGUoe1xuICBwdWJrZXk6IFB1YmxpY0tleUZyb21TdHJpbmcsXG4gIGFjY291bnQ6IHR5cGUoe1xuICAgIGV4ZWN1dGFibGU6IGJvb2xlYW4oKSxcbiAgICBvd25lcjogUHVibGljS2V5RnJvbVN0cmluZyxcbiAgICBsYW1wb3J0czogbnVtYmVyKCksXG4gICAgZGF0YTogQnVmZmVyRnJvbVJhd0FjY291bnREYXRhLFxuICAgIHJlbnRFcG9jaDogbnVtYmVyKClcbiAgfSlcbn0pKSk7XG5jb25zdCBQYXJzZWRBY2NvdW50RGF0YVJlc3VsdCA9IHR5cGUoe1xuICBwcm9ncmFtOiBzdHJpbmcoKSxcbiAgcGFyc2VkOiB1bmtub3duKCksXG4gIHNwYWNlOiBudW1iZXIoKVxufSk7XG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldFRva2VuQWNjb3VudHNCeU93bmVyXCIgbWVzc2FnZSB3aXRoIHBhcnNlZCBkYXRhXG4gKi9cbmNvbnN0IEdldFBhcnNlZFRva2VuQWNjb3VudHNCeU93bmVyID0ganNvblJwY1Jlc3VsdEFuZENvbnRleHQoYXJyYXkodHlwZSh7XG4gIHB1YmtleTogUHVibGljS2V5RnJvbVN0cmluZyxcbiAgYWNjb3VudDogdHlwZSh7XG4gICAgZXhlY3V0YWJsZTogYm9vbGVhbigpLFxuICAgIG93bmVyOiBQdWJsaWNLZXlGcm9tU3RyaW5nLFxuICAgIGxhbXBvcnRzOiBudW1iZXIoKSxcbiAgICBkYXRhOiBQYXJzZWRBY2NvdW50RGF0YVJlc3VsdCxcbiAgICByZW50RXBvY2g6IG51bWJlcigpXG4gIH0pXG59KSkpO1xuXG4vKipcbiAqIFBhaXIgb2YgYW4gYWNjb3VudCBhZGRyZXNzIGFuZCBpdHMgYmFsYW5jZVxuICovXG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldExhcmdlc3RBY2NvdW50c1wiIG1lc3NhZ2VcbiAqL1xuY29uc3QgR2V0TGFyZ2VzdEFjY291bnRzUnBjUmVzdWx0ID0ganNvblJwY1Jlc3VsdEFuZENvbnRleHQoYXJyYXkodHlwZSh7XG4gIGxhbXBvcnRzOiBudW1iZXIoKSxcbiAgYWRkcmVzczogUHVibGljS2V5RnJvbVN0cmluZ1xufSkpKTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgQWNjb3VudEluZm9SZXN1bHQgPSB0eXBlKHtcbiAgZXhlY3V0YWJsZTogYm9vbGVhbigpLFxuICBvd25lcjogUHVibGljS2V5RnJvbVN0cmluZyxcbiAgbGFtcG9ydHM6IG51bWJlcigpLFxuICBkYXRhOiBCdWZmZXJGcm9tUmF3QWNjb3VudERhdGEsXG4gIHJlbnRFcG9jaDogbnVtYmVyKClcbn0pO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBLZXllZEFjY291bnRJbmZvUmVzdWx0ID0gdHlwZSh7XG4gIHB1YmtleTogUHVibGljS2V5RnJvbVN0cmluZyxcbiAgYWNjb3VudDogQWNjb3VudEluZm9SZXN1bHRcbn0pO1xuY29uc3QgUGFyc2VkT3JSYXdBY2NvdW50RGF0YSA9IGNvZXJjZSh1bmlvbihbaW5zdGFuY2UoQnVmZmVyKSwgUGFyc2VkQWNjb3VudERhdGFSZXN1bHRdKSwgdW5pb24oW1Jhd0FjY291bnREYXRhUmVzdWx0LCBQYXJzZWRBY2NvdW50RGF0YVJlc3VsdF0pLCB2YWx1ZSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBjcmVhdGUodmFsdWUsIEJ1ZmZlckZyb21SYXdBY2NvdW50RGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59KTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgUGFyc2VkQWNjb3VudEluZm9SZXN1bHQgPSB0eXBlKHtcbiAgZXhlY3V0YWJsZTogYm9vbGVhbigpLFxuICBvd25lcjogUHVibGljS2V5RnJvbVN0cmluZyxcbiAgbGFtcG9ydHM6IG51bWJlcigpLFxuICBkYXRhOiBQYXJzZWRPclJhd0FjY291bnREYXRhLFxuICByZW50RXBvY2g6IG51bWJlcigpXG59KTtcbmNvbnN0IEtleWVkUGFyc2VkQWNjb3VudEluZm9SZXN1bHQgPSB0eXBlKHtcbiAgcHVia2V5OiBQdWJsaWNLZXlGcm9tU3RyaW5nLFxuICBhY2NvdW50OiBQYXJzZWRBY2NvdW50SW5mb1Jlc3VsdFxufSk7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IFN0YWtlQWN0aXZhdGlvblJlc3VsdCA9IHR5cGUoe1xuICBzdGF0ZTogdW5pb24oW2xpdGVyYWwoJ2FjdGl2ZScpLCBsaXRlcmFsKCdpbmFjdGl2ZScpLCBsaXRlcmFsKCdhY3RpdmF0aW5nJyksIGxpdGVyYWwoJ2RlYWN0aXZhdGluZycpXSksXG4gIGFjdGl2ZTogbnVtYmVyKCksXG4gIGluYWN0aXZlOiBudW1iZXIoKVxufSk7XG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldENvbmZpcm1lZFNpZ25hdHVyZXNGb3JBZGRyZXNzMlwiIG1lc3NhZ2VcbiAqL1xuXG5jb25zdCBHZXRDb25maXJtZWRTaWduYXR1cmVzRm9yQWRkcmVzczJScGNSZXN1bHQgPSBqc29uUnBjUmVzdWx0KGFycmF5KHR5cGUoe1xuICBzaWduYXR1cmU6IHN0cmluZygpLFxuICBzbG90OiBudW1iZXIoKSxcbiAgZXJyOiBUcmFuc2FjdGlvbkVycm9yUmVzdWx0LFxuICBtZW1vOiBudWxsYWJsZShzdHJpbmcoKSksXG4gIGJsb2NrVGltZTogb3B0aW9uYWwobnVsbGFibGUobnVtYmVyKCkpKVxufSkpKTtcblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiZ2V0U2lnbmF0dXJlc0ZvckFkZHJlc3NcIiBtZXNzYWdlXG4gKi9cbmNvbnN0IEdldFNpZ25hdHVyZXNGb3JBZGRyZXNzUnBjUmVzdWx0ID0ganNvblJwY1Jlc3VsdChhcnJheSh0eXBlKHtcbiAgc2lnbmF0dXJlOiBzdHJpbmcoKSxcbiAgc2xvdDogbnVtYmVyKCksXG4gIGVycjogVHJhbnNhY3Rpb25FcnJvclJlc3VsdCxcbiAgbWVtbzogbnVsbGFibGUoc3RyaW5nKCkpLFxuICBibG9ja1RpbWU6IG9wdGlvbmFsKG51bGxhYmxlKG51bWJlcigpKSlcbn0pKSk7XG5cbi8qKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJhY2NvdW50Tm90aWZpY2F0aW9uXCIgbWVzc2FnZVxuICovXG5jb25zdCBBY2NvdW50Tm90aWZpY2F0aW9uUmVzdWx0ID0gdHlwZSh7XG4gIHN1YnNjcmlwdGlvbjogbnVtYmVyKCksXG4gIHJlc3VsdDogbm90aWZpY2F0aW9uUmVzdWx0QW5kQ29udGV4dChBY2NvdW50SW5mb1Jlc3VsdClcbn0pO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBQcm9ncmFtQWNjb3VudEluZm9SZXN1bHQgPSB0eXBlKHtcbiAgcHVia2V5OiBQdWJsaWNLZXlGcm9tU3RyaW5nLFxuICBhY2NvdW50OiBBY2NvdW50SW5mb1Jlc3VsdFxufSk7XG5cbi8qKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJwcm9ncmFtTm90aWZpY2F0aW9uXCIgbWVzc2FnZVxuICovXG5jb25zdCBQcm9ncmFtQWNjb3VudE5vdGlmaWNhdGlvblJlc3VsdCA9IHR5cGUoe1xuICBzdWJzY3JpcHRpb246IG51bWJlcigpLFxuICByZXN1bHQ6IG5vdGlmaWNhdGlvblJlc3VsdEFuZENvbnRleHQoUHJvZ3JhbUFjY291bnRJbmZvUmVzdWx0KVxufSk7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IFNsb3RJbmZvUmVzdWx0ID0gdHlwZSh7XG4gIHBhcmVudDogbnVtYmVyKCksXG4gIHNsb3Q6IG51bWJlcigpLFxuICByb290OiBudW1iZXIoKVxufSk7XG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcInNsb3ROb3RpZmljYXRpb25cIiBtZXNzYWdlXG4gKi9cbmNvbnN0IFNsb3ROb3RpZmljYXRpb25SZXN1bHQgPSB0eXBlKHtcbiAgc3Vic2NyaXB0aW9uOiBudW1iZXIoKSxcbiAgcmVzdWx0OiBTbG90SW5mb1Jlc3VsdFxufSk7XG5cbi8qKlxuICogU2xvdCB1cGRhdGVzIHdoaWNoIGNhbiBiZSB1c2VkIGZvciB0cmFja2luZyB0aGUgbGl2ZSBwcm9ncmVzcyBvZiBhIGNsdXN0ZXIuXG4gKiAtIGBcImZpcnN0U2hyZWRSZWNlaXZlZFwiYDogY29ubmVjdGVkIG5vZGUgcmVjZWl2ZWQgdGhlIGZpcnN0IHNocmVkIG9mIGEgYmxvY2suXG4gKiBJbmRpY2F0ZXMgdGhhdCBhIG5ldyBibG9jayB0aGF0IGlzIGJlaW5nIHByb2R1Y2VkLlxuICogLSBgXCJjb21wbGV0ZWRcImA6IGNvbm5lY3RlZCBub2RlIGhhcyByZWNlaXZlZCBhbGwgc2hyZWRzIG9mIGEgYmxvY2suIEluZGljYXRlc1xuICogYSBibG9jayB3YXMgcmVjZW50bHkgcHJvZHVjZWQuXG4gKiAtIGBcIm9wdGltaXN0aWNDb25maXJtYXRpb25cImA6IGJsb2NrIHdhcyBvcHRpbWlzdGljYWxseSBjb25maXJtZWQgYnkgdGhlXG4gKiBjbHVzdGVyLiBJdCBpcyBub3QgZ3VhcmFudGVlZCB0aGF0IGFuIG9wdGltaXN0aWMgY29uZmlybWF0aW9uIG5vdGlmaWNhdGlvblxuICogd2lsbCBiZSBzZW50IGZvciBldmVyeSBmaW5hbGl6ZWQgYmxvY2tzLlxuICogLSBgXCJyb290XCJgOiB0aGUgY29ubmVjdGVkIG5vZGUgcm9vdGVkIHRoaXMgYmxvY2suXG4gKiAtIGBcImNyZWF0ZWRCYW5rXCJgOiB0aGUgY29ubmVjdGVkIG5vZGUgaGFzIHN0YXJ0ZWQgdmFsaWRhdGluZyB0aGlzIGJsb2NrLlxuICogLSBgXCJmcm96ZW5cImA6IHRoZSBjb25uZWN0ZWQgbm9kZSBoYXMgdmFsaWRhdGVkIHRoaXMgYmxvY2suXG4gKiAtIGBcImRlYWRcImA6IHRoZSBjb25uZWN0ZWQgbm9kZSBmYWlsZWQgdG8gdmFsaWRhdGUgdGhpcyBibG9jay5cbiAqL1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBTbG90VXBkYXRlUmVzdWx0ID0gdW5pb24oW3R5cGUoe1xuICB0eXBlOiB1bmlvbihbbGl0ZXJhbCgnZmlyc3RTaHJlZFJlY2VpdmVkJyksIGxpdGVyYWwoJ2NvbXBsZXRlZCcpLCBsaXRlcmFsKCdvcHRpbWlzdGljQ29uZmlybWF0aW9uJyksIGxpdGVyYWwoJ3Jvb3QnKV0pLFxuICBzbG90OiBudW1iZXIoKSxcbiAgdGltZXN0YW1wOiBudW1iZXIoKVxufSksIHR5cGUoe1xuICB0eXBlOiBsaXRlcmFsKCdjcmVhdGVkQmFuaycpLFxuICBwYXJlbnQ6IG51bWJlcigpLFxuICBzbG90OiBudW1iZXIoKSxcbiAgdGltZXN0YW1wOiBudW1iZXIoKVxufSksIHR5cGUoe1xuICB0eXBlOiBsaXRlcmFsKCdmcm96ZW4nKSxcbiAgc2xvdDogbnVtYmVyKCksXG4gIHRpbWVzdGFtcDogbnVtYmVyKCksXG4gIHN0YXRzOiB0eXBlKHtcbiAgICBudW1UcmFuc2FjdGlvbkVudHJpZXM6IG51bWJlcigpLFxuICAgIG51bVN1Y2Nlc3NmdWxUcmFuc2FjdGlvbnM6IG51bWJlcigpLFxuICAgIG51bUZhaWxlZFRyYW5zYWN0aW9uczogbnVtYmVyKCksXG4gICAgbWF4VHJhbnNhY3Rpb25zUGVyRW50cnk6IG51bWJlcigpXG4gIH0pXG59KSwgdHlwZSh7XG4gIHR5cGU6IGxpdGVyYWwoJ2RlYWQnKSxcbiAgc2xvdDogbnVtYmVyKCksXG4gIHRpbWVzdGFtcDogbnVtYmVyKCksXG4gIGVycjogc3RyaW5nKClcbn0pXSk7XG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcInNsb3RzVXBkYXRlc05vdGlmaWNhdGlvblwiIG1lc3NhZ2VcbiAqL1xuY29uc3QgU2xvdFVwZGF0ZU5vdGlmaWNhdGlvblJlc3VsdCA9IHR5cGUoe1xuICBzdWJzY3JpcHRpb246IG51bWJlcigpLFxuICByZXN1bHQ6IFNsb3RVcGRhdGVSZXN1bHRcbn0pO1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJzaWduYXR1cmVOb3RpZmljYXRpb25cIiBtZXNzYWdlXG4gKi9cbmNvbnN0IFNpZ25hdHVyZU5vdGlmaWNhdGlvblJlc3VsdCA9IHR5cGUoe1xuICBzdWJzY3JpcHRpb246IG51bWJlcigpLFxuICByZXN1bHQ6IG5vdGlmaWNhdGlvblJlc3VsdEFuZENvbnRleHQodW5pb24oW1NpZ25hdHVyZVN0YXR1c1Jlc3VsdCwgU2lnbmF0dXJlUmVjZWl2ZWRSZXN1bHRdKSlcbn0pO1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJyb290Tm90aWZpY2F0aW9uXCIgbWVzc2FnZVxuICovXG5jb25zdCBSb290Tm90aWZpY2F0aW9uUmVzdWx0ID0gdHlwZSh7XG4gIHN1YnNjcmlwdGlvbjogbnVtYmVyKCksXG4gIHJlc3VsdDogbnVtYmVyKClcbn0pO1xuY29uc3QgQ29udGFjdEluZm9SZXN1bHQgPSB0eXBlKHtcbiAgcHVia2V5OiBzdHJpbmcoKSxcbiAgZ29zc2lwOiBudWxsYWJsZShzdHJpbmcoKSksXG4gIHRwdTogbnVsbGFibGUoc3RyaW5nKCkpLFxuICBycGM6IG51bGxhYmxlKHN0cmluZygpKSxcbiAgdmVyc2lvbjogbnVsbGFibGUoc3RyaW5nKCkpXG59KTtcbmNvbnN0IFZvdGVBY2NvdW50SW5mb1Jlc3VsdCA9IHR5cGUoe1xuICB2b3RlUHVia2V5OiBzdHJpbmcoKSxcbiAgbm9kZVB1YmtleTogc3RyaW5nKCksXG4gIGFjdGl2YXRlZFN0YWtlOiBudW1iZXIoKSxcbiAgZXBvY2hWb3RlQWNjb3VudDogYm9vbGVhbigpLFxuICBlcG9jaENyZWRpdHM6IGFycmF5KHR1cGxlKFtudW1iZXIoKSwgbnVtYmVyKCksIG51bWJlcigpXSkpLFxuICBjb21taXNzaW9uOiBudW1iZXIoKSxcbiAgbGFzdFZvdGU6IG51bWJlcigpLFxuICByb290U2xvdDogbnVsbGFibGUobnVtYmVyKCkpXG59KTtcblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiZ2V0Vm90ZUFjY291bnRzXCIgbWVzc2FnZVxuICovXG5jb25zdCBHZXRWb3RlQWNjb3VudHMgPSBqc29uUnBjUmVzdWx0KHR5cGUoe1xuICBjdXJyZW50OiBhcnJheShWb3RlQWNjb3VudEluZm9SZXN1bHQpLFxuICBkZWxpbnF1ZW50OiBhcnJheShWb3RlQWNjb3VudEluZm9SZXN1bHQpXG59KSk7XG5jb25zdCBDb25maXJtYXRpb25TdGF0dXMgPSB1bmlvbihbbGl0ZXJhbCgncHJvY2Vzc2VkJyksIGxpdGVyYWwoJ2NvbmZpcm1lZCcpLCBsaXRlcmFsKCdmaW5hbGl6ZWQnKV0pO1xuY29uc3QgU2lnbmF0dXJlU3RhdHVzUmVzcG9uc2UgPSB0eXBlKHtcbiAgc2xvdDogbnVtYmVyKCksXG4gIGNvbmZpcm1hdGlvbnM6IG51bGxhYmxlKG51bWJlcigpKSxcbiAgZXJyOiBUcmFuc2FjdGlvbkVycm9yUmVzdWx0LFxuICBjb25maXJtYXRpb25TdGF0dXM6IG9wdGlvbmFsKENvbmZpcm1hdGlvblN0YXR1cylcbn0pO1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRTaWduYXR1cmVTdGF0dXNlc1wiIG1lc3NhZ2VcbiAqL1xuY29uc3QgR2V0U2lnbmF0dXJlU3RhdHVzZXNScGNSZXN1bHQgPSBqc29uUnBjUmVzdWx0QW5kQ29udGV4dChhcnJheShudWxsYWJsZShTaWduYXR1cmVTdGF0dXNSZXNwb25zZSkpKTtcblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiZ2V0TWluaW11bUJhbGFuY2VGb3JSZW50RXhlbXB0aW9uXCIgbWVzc2FnZVxuICovXG5jb25zdCBHZXRNaW5pbXVtQmFsYW5jZUZvclJlbnRFeGVtcHRpb25ScGNSZXN1bHQgPSBqc29uUnBjUmVzdWx0KG51bWJlcigpKTtcbmNvbnN0IEFkZHJlc3NUYWJsZUxvb2t1cFN0cnVjdCA9IHR5cGUoe1xuICBhY2NvdW50S2V5OiBQdWJsaWNLZXlGcm9tU3RyaW5nLFxuICB3cml0YWJsZUluZGV4ZXM6IGFycmF5KG51bWJlcigpKSxcbiAgcmVhZG9ubHlJbmRleGVzOiBhcnJheShudW1iZXIoKSlcbn0pO1xuY29uc3QgQ29uZmlybWVkVHJhbnNhY3Rpb25SZXN1bHQgPSB0eXBlKHtcbiAgc2lnbmF0dXJlczogYXJyYXkoc3RyaW5nKCkpLFxuICBtZXNzYWdlOiB0eXBlKHtcbiAgICBhY2NvdW50S2V5czogYXJyYXkoc3RyaW5nKCkpLFxuICAgIGhlYWRlcjogdHlwZSh7XG4gICAgICBudW1SZXF1aXJlZFNpZ25hdHVyZXM6IG51bWJlcigpLFxuICAgICAgbnVtUmVhZG9ubHlTaWduZWRBY2NvdW50czogbnVtYmVyKCksXG4gICAgICBudW1SZWFkb25seVVuc2lnbmVkQWNjb3VudHM6IG51bWJlcigpXG4gICAgfSksXG4gICAgaW5zdHJ1Y3Rpb25zOiBhcnJheSh0eXBlKHtcbiAgICAgIGFjY291bnRzOiBhcnJheShudW1iZXIoKSksXG4gICAgICBkYXRhOiBzdHJpbmcoKSxcbiAgICAgIHByb2dyYW1JZEluZGV4OiBudW1iZXIoKVxuICAgIH0pKSxcbiAgICByZWNlbnRCbG9ja2hhc2g6IHN0cmluZygpLFxuICAgIGFkZHJlc3NUYWJsZUxvb2t1cHM6IG9wdGlvbmFsKGFycmF5KEFkZHJlc3NUYWJsZUxvb2t1cFN0cnVjdCkpXG4gIH0pXG59KTtcbmNvbnN0IEFubm90YXRlZEFjY291bnRLZXkgPSB0eXBlKHtcbiAgcHVia2V5OiBQdWJsaWNLZXlGcm9tU3RyaW5nLFxuICBzaWduZXI6IGJvb2xlYW4oKSxcbiAgd3JpdGFibGU6IGJvb2xlYW4oKSxcbiAgc291cmNlOiBvcHRpb25hbCh1bmlvbihbbGl0ZXJhbCgndHJhbnNhY3Rpb24nKSwgbGl0ZXJhbCgnbG9va3VwVGFibGUnKV0pKVxufSk7XG5jb25zdCBDb25maXJtZWRUcmFuc2FjdGlvbkFjY291bnRzTW9kZVJlc3VsdCA9IHR5cGUoe1xuICBhY2NvdW50S2V5czogYXJyYXkoQW5ub3RhdGVkQWNjb3VudEtleSksXG4gIHNpZ25hdHVyZXM6IGFycmF5KHN0cmluZygpKVxufSk7XG5jb25zdCBQYXJzZWRJbnN0cnVjdGlvblJlc3VsdCA9IHR5cGUoe1xuICBwYXJzZWQ6IHVua25vd24oKSxcbiAgcHJvZ3JhbTogc3RyaW5nKCksXG4gIHByb2dyYW1JZDogUHVibGljS2V5RnJvbVN0cmluZ1xufSk7XG5jb25zdCBSYXdJbnN0cnVjdGlvblJlc3VsdCA9IHR5cGUoe1xuICBhY2NvdW50czogYXJyYXkoUHVibGljS2V5RnJvbVN0cmluZyksXG4gIGRhdGE6IHN0cmluZygpLFxuICBwcm9ncmFtSWQ6IFB1YmxpY0tleUZyb21TdHJpbmdcbn0pO1xuY29uc3QgSW5zdHJ1Y3Rpb25SZXN1bHQgPSB1bmlvbihbUmF3SW5zdHJ1Y3Rpb25SZXN1bHQsIFBhcnNlZEluc3RydWN0aW9uUmVzdWx0XSk7XG5jb25zdCBVbmtub3duSW5zdHJ1Y3Rpb25SZXN1bHQgPSB1bmlvbihbdHlwZSh7XG4gIHBhcnNlZDogdW5rbm93bigpLFxuICBwcm9ncmFtOiBzdHJpbmcoKSxcbiAgcHJvZ3JhbUlkOiBzdHJpbmcoKVxufSksIHR5cGUoe1xuICBhY2NvdW50czogYXJyYXkoc3RyaW5nKCkpLFxuICBkYXRhOiBzdHJpbmcoKSxcbiAgcHJvZ3JhbUlkOiBzdHJpbmcoKVxufSldKTtcbmNvbnN0IFBhcnNlZE9yUmF3SW5zdHJ1Y3Rpb24gPSBjb2VyY2UoSW5zdHJ1Y3Rpb25SZXN1bHQsIFVua25vd25JbnN0cnVjdGlvblJlc3VsdCwgdmFsdWUgPT4ge1xuICBpZiAoJ2FjY291bnRzJyBpbiB2YWx1ZSkge1xuICAgIHJldHVybiBjcmVhdGUodmFsdWUsIFJhd0luc3RydWN0aW9uUmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlKHZhbHVlLCBQYXJzZWRJbnN0cnVjdGlvblJlc3VsdCk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBQYXJzZWRDb25maXJtZWRUcmFuc2FjdGlvblJlc3VsdCA9IHR5cGUoe1xuICBzaWduYXR1cmVzOiBhcnJheShzdHJpbmcoKSksXG4gIG1lc3NhZ2U6IHR5cGUoe1xuICAgIGFjY291bnRLZXlzOiBhcnJheShBbm5vdGF0ZWRBY2NvdW50S2V5KSxcbiAgICBpbnN0cnVjdGlvbnM6IGFycmF5KFBhcnNlZE9yUmF3SW5zdHJ1Y3Rpb24pLFxuICAgIHJlY2VudEJsb2NraGFzaDogc3RyaW5nKCksXG4gICAgYWRkcmVzc1RhYmxlTG9va3Vwczogb3B0aW9uYWwobnVsbGFibGUoYXJyYXkoQWRkcmVzc1RhYmxlTG9va3VwU3RydWN0KSkpXG4gIH0pXG59KTtcbmNvbnN0IFRva2VuQmFsYW5jZVJlc3VsdCA9IHR5cGUoe1xuICBhY2NvdW50SW5kZXg6IG51bWJlcigpLFxuICBtaW50OiBzdHJpbmcoKSxcbiAgb3duZXI6IG9wdGlvbmFsKHN0cmluZygpKSxcbiAgcHJvZ3JhbUlkOiBvcHRpb25hbChzdHJpbmcoKSksXG4gIHVpVG9rZW5BbW91bnQ6IFRva2VuQW1vdW50UmVzdWx0XG59KTtcbmNvbnN0IExvYWRlZEFkZHJlc3Nlc1Jlc3VsdCA9IHR5cGUoe1xuICB3cml0YWJsZTogYXJyYXkoUHVibGljS2V5RnJvbVN0cmluZyksXG4gIHJlYWRvbmx5OiBhcnJheShQdWJsaWNLZXlGcm9tU3RyaW5nKVxufSk7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmNvbnN0IENvbmZpcm1lZFRyYW5zYWN0aW9uTWV0YVJlc3VsdCA9IHR5cGUoe1xuICBlcnI6IFRyYW5zYWN0aW9uRXJyb3JSZXN1bHQsXG4gIGZlZTogbnVtYmVyKCksXG4gIGlubmVySW5zdHJ1Y3Rpb25zOiBvcHRpb25hbChudWxsYWJsZShhcnJheSh0eXBlKHtcbiAgICBpbmRleDogbnVtYmVyKCksXG4gICAgaW5zdHJ1Y3Rpb25zOiBhcnJheSh0eXBlKHtcbiAgICAgIGFjY291bnRzOiBhcnJheShudW1iZXIoKSksXG4gICAgICBkYXRhOiBzdHJpbmcoKSxcbiAgICAgIHByb2dyYW1JZEluZGV4OiBudW1iZXIoKVxuICAgIH0pKVxuICB9KSkpKSxcbiAgcHJlQmFsYW5jZXM6IGFycmF5KG51bWJlcigpKSxcbiAgcG9zdEJhbGFuY2VzOiBhcnJheShudW1iZXIoKSksXG4gIGxvZ01lc3NhZ2VzOiBvcHRpb25hbChudWxsYWJsZShhcnJheShzdHJpbmcoKSkpKSxcbiAgcHJlVG9rZW5CYWxhbmNlczogb3B0aW9uYWwobnVsbGFibGUoYXJyYXkoVG9rZW5CYWxhbmNlUmVzdWx0KSkpLFxuICBwb3N0VG9rZW5CYWxhbmNlczogb3B0aW9uYWwobnVsbGFibGUoYXJyYXkoVG9rZW5CYWxhbmNlUmVzdWx0KSkpLFxuICBsb2FkZWRBZGRyZXNzZXM6IG9wdGlvbmFsKExvYWRlZEFkZHJlc3Nlc1Jlc3VsdCksXG4gIGNvbXB1dGVVbml0c0NvbnN1bWVkOiBvcHRpb25hbChudW1iZXIoKSlcbn0pO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBQYXJzZWRDb25maXJtZWRUcmFuc2FjdGlvbk1ldGFSZXN1bHQgPSB0eXBlKHtcbiAgZXJyOiBUcmFuc2FjdGlvbkVycm9yUmVzdWx0LFxuICBmZWU6IG51bWJlcigpLFxuICBpbm5lckluc3RydWN0aW9uczogb3B0aW9uYWwobnVsbGFibGUoYXJyYXkodHlwZSh7XG4gICAgaW5kZXg6IG51bWJlcigpLFxuICAgIGluc3RydWN0aW9uczogYXJyYXkoUGFyc2VkT3JSYXdJbnN0cnVjdGlvbilcbiAgfSkpKSksXG4gIHByZUJhbGFuY2VzOiBhcnJheShudW1iZXIoKSksXG4gIHBvc3RCYWxhbmNlczogYXJyYXkobnVtYmVyKCkpLFxuICBsb2dNZXNzYWdlczogb3B0aW9uYWwobnVsbGFibGUoYXJyYXkoc3RyaW5nKCkpKSksXG4gIHByZVRva2VuQmFsYW5jZXM6IG9wdGlvbmFsKG51bGxhYmxlKGFycmF5KFRva2VuQmFsYW5jZVJlc3VsdCkpKSxcbiAgcG9zdFRva2VuQmFsYW5jZXM6IG9wdGlvbmFsKG51bGxhYmxlKGFycmF5KFRva2VuQmFsYW5jZVJlc3VsdCkpKSxcbiAgbG9hZGVkQWRkcmVzc2VzOiBvcHRpb25hbChMb2FkZWRBZGRyZXNzZXNSZXN1bHQpLFxuICBjb21wdXRlVW5pdHNDb25zdW1lZDogb3B0aW9uYWwobnVtYmVyKCkpXG59KTtcbmNvbnN0IFRyYW5zYWN0aW9uVmVyc2lvblN0cnVjdCA9IHVuaW9uKFtsaXRlcmFsKDApLCBsaXRlcmFsKCdsZWdhY3knKV0pO1xuXG4vKiogQGludGVybmFsICovXG5jb25zdCBSZXdhcmRzUmVzdWx0ID0gdHlwZSh7XG4gIHB1YmtleTogc3RyaW5nKCksXG4gIGxhbXBvcnRzOiBudW1iZXIoKSxcbiAgcG9zdEJhbGFuY2U6IG51bGxhYmxlKG51bWJlcigpKSxcbiAgcmV3YXJkVHlwZTogbnVsbGFibGUoc3RyaW5nKCkpLFxuICBjb21taXNzaW9uOiBvcHRpb25hbChudWxsYWJsZShudW1iZXIoKSkpXG59KTtcblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiZ2V0QmxvY2tcIiBtZXNzYWdlXG4gKi9cbmNvbnN0IEdldEJsb2NrUnBjUmVzdWx0ID0ganNvblJwY1Jlc3VsdChudWxsYWJsZSh0eXBlKHtcbiAgYmxvY2toYXNoOiBzdHJpbmcoKSxcbiAgcHJldmlvdXNCbG9ja2hhc2g6IHN0cmluZygpLFxuICBwYXJlbnRTbG90OiBudW1iZXIoKSxcbiAgdHJhbnNhY3Rpb25zOiBhcnJheSh0eXBlKHtcbiAgICB0cmFuc2FjdGlvbjogQ29uZmlybWVkVHJhbnNhY3Rpb25SZXN1bHQsXG4gICAgbWV0YTogbnVsbGFibGUoQ29uZmlybWVkVHJhbnNhY3Rpb25NZXRhUmVzdWx0KSxcbiAgICB2ZXJzaW9uOiBvcHRpb25hbChUcmFuc2FjdGlvblZlcnNpb25TdHJ1Y3QpXG4gIH0pKSxcbiAgcmV3YXJkczogb3B0aW9uYWwoYXJyYXkoUmV3YXJkc1Jlc3VsdCkpLFxuICBibG9ja1RpbWU6IG51bGxhYmxlKG51bWJlcigpKSxcbiAgYmxvY2tIZWlnaHQ6IG51bGxhYmxlKG51bWJlcigpKVxufSkpKTtcblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiZ2V0QmxvY2tcIiBtZXNzYWdlIHdoZW4gYHRyYW5zYWN0aW9uRGV0YWlsc2AgaXMgYG5vbmVgXG4gKi9cbmNvbnN0IEdldE5vbmVNb2RlQmxvY2tScGNSZXN1bHQgPSBqc29uUnBjUmVzdWx0KG51bGxhYmxlKHR5cGUoe1xuICBibG9ja2hhc2g6IHN0cmluZygpLFxuICBwcmV2aW91c0Jsb2NraGFzaDogc3RyaW5nKCksXG4gIHBhcmVudFNsb3Q6IG51bWJlcigpLFxuICByZXdhcmRzOiBvcHRpb25hbChhcnJheShSZXdhcmRzUmVzdWx0KSksXG4gIGJsb2NrVGltZTogbnVsbGFibGUobnVtYmVyKCkpLFxuICBibG9ja0hlaWdodDogbnVsbGFibGUobnVtYmVyKCkpXG59KSkpO1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRCbG9ja1wiIG1lc3NhZ2Ugd2hlbiBgdHJhbnNhY3Rpb25EZXRhaWxzYCBpcyBgYWNjb3VudHNgXG4gKi9cbmNvbnN0IEdldEFjY291bnRzTW9kZUJsb2NrUnBjUmVzdWx0ID0ganNvblJwY1Jlc3VsdChudWxsYWJsZSh0eXBlKHtcbiAgYmxvY2toYXNoOiBzdHJpbmcoKSxcbiAgcHJldmlvdXNCbG9ja2hhc2g6IHN0cmluZygpLFxuICBwYXJlbnRTbG90OiBudW1iZXIoKSxcbiAgdHJhbnNhY3Rpb25zOiBhcnJheSh0eXBlKHtcbiAgICB0cmFuc2FjdGlvbjogQ29uZmlybWVkVHJhbnNhY3Rpb25BY2NvdW50c01vZGVSZXN1bHQsXG4gICAgbWV0YTogbnVsbGFibGUoQ29uZmlybWVkVHJhbnNhY3Rpb25NZXRhUmVzdWx0KSxcbiAgICB2ZXJzaW9uOiBvcHRpb25hbChUcmFuc2FjdGlvblZlcnNpb25TdHJ1Y3QpXG4gIH0pKSxcbiAgcmV3YXJkczogb3B0aW9uYWwoYXJyYXkoUmV3YXJkc1Jlc3VsdCkpLFxuICBibG9ja1RpbWU6IG51bGxhYmxlKG51bWJlcigpKSxcbiAgYmxvY2tIZWlnaHQ6IG51bGxhYmxlKG51bWJlcigpKVxufSkpKTtcblxuLyoqXG4gKiBFeHBlY3RlZCBwYXJzZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldEJsb2NrXCIgbWVzc2FnZVxuICovXG5jb25zdCBHZXRQYXJzZWRCbG9ja1JwY1Jlc3VsdCA9IGpzb25ScGNSZXN1bHQobnVsbGFibGUodHlwZSh7XG4gIGJsb2NraGFzaDogc3RyaW5nKCksXG4gIHByZXZpb3VzQmxvY2toYXNoOiBzdHJpbmcoKSxcbiAgcGFyZW50U2xvdDogbnVtYmVyKCksXG4gIHRyYW5zYWN0aW9uczogYXJyYXkodHlwZSh7XG4gICAgdHJhbnNhY3Rpb246IFBhcnNlZENvbmZpcm1lZFRyYW5zYWN0aW9uUmVzdWx0LFxuICAgIG1ldGE6IG51bGxhYmxlKFBhcnNlZENvbmZpcm1lZFRyYW5zYWN0aW9uTWV0YVJlc3VsdCksXG4gICAgdmVyc2lvbjogb3B0aW9uYWwoVHJhbnNhY3Rpb25WZXJzaW9uU3RydWN0KVxuICB9KSksXG4gIHJld2FyZHM6IG9wdGlvbmFsKGFycmF5KFJld2FyZHNSZXN1bHQpKSxcbiAgYmxvY2tUaW1lOiBudWxsYWJsZShudW1iZXIoKSksXG4gIGJsb2NrSGVpZ2h0OiBudWxsYWJsZShudW1iZXIoKSlcbn0pKSk7XG5cbi8qKlxuICogRXhwZWN0ZWQgcGFyc2VkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRCbG9ja1wiIG1lc3NhZ2UgIHdoZW4gYHRyYW5zYWN0aW9uRGV0YWlsc2AgaXMgYGFjY291bnRzYFxuICovXG5jb25zdCBHZXRQYXJzZWRBY2NvdW50c01vZGVCbG9ja1JwY1Jlc3VsdCA9IGpzb25ScGNSZXN1bHQobnVsbGFibGUodHlwZSh7XG4gIGJsb2NraGFzaDogc3RyaW5nKCksXG4gIHByZXZpb3VzQmxvY2toYXNoOiBzdHJpbmcoKSxcbiAgcGFyZW50U2xvdDogbnVtYmVyKCksXG4gIHRyYW5zYWN0aW9uczogYXJyYXkodHlwZSh7XG4gICAgdHJhbnNhY3Rpb246IENvbmZpcm1lZFRyYW5zYWN0aW9uQWNjb3VudHNNb2RlUmVzdWx0LFxuICAgIG1ldGE6IG51bGxhYmxlKFBhcnNlZENvbmZpcm1lZFRyYW5zYWN0aW9uTWV0YVJlc3VsdCksXG4gICAgdmVyc2lvbjogb3B0aW9uYWwoVHJhbnNhY3Rpb25WZXJzaW9uU3RydWN0KVxuICB9KSksXG4gIHJld2FyZHM6IG9wdGlvbmFsKGFycmF5KFJld2FyZHNSZXN1bHQpKSxcbiAgYmxvY2tUaW1lOiBudWxsYWJsZShudW1iZXIoKSksXG4gIGJsb2NrSGVpZ2h0OiBudWxsYWJsZShudW1iZXIoKSlcbn0pKSk7XG5cbi8qKlxuICogRXhwZWN0ZWQgcGFyc2VkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRCbG9ja1wiIG1lc3NhZ2UgIHdoZW4gYHRyYW5zYWN0aW9uRGV0YWlsc2AgaXMgYG5vbmVgXG4gKi9cbmNvbnN0IEdldFBhcnNlZE5vbmVNb2RlQmxvY2tScGNSZXN1bHQgPSBqc29uUnBjUmVzdWx0KG51bGxhYmxlKHR5cGUoe1xuICBibG9ja2hhc2g6IHN0cmluZygpLFxuICBwcmV2aW91c0Jsb2NraGFzaDogc3RyaW5nKCksXG4gIHBhcmVudFNsb3Q6IG51bWJlcigpLFxuICByZXdhcmRzOiBvcHRpb25hbChhcnJheShSZXdhcmRzUmVzdWx0KSksXG4gIGJsb2NrVGltZTogbnVsbGFibGUobnVtYmVyKCkpLFxuICBibG9ja0hlaWdodDogbnVsbGFibGUobnVtYmVyKCkpXG59KSkpO1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRDb25maXJtZWRCbG9ja1wiIG1lc3NhZ2VcbiAqXG4gKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIHNpbmNlIFJQQyB2MS44LjAuIFBsZWFzZSB1c2Uge0BsaW5rIEdldEJsb2NrUnBjUmVzdWx0fSBpbnN0ZWFkLlxuICovXG5jb25zdCBHZXRDb25maXJtZWRCbG9ja1JwY1Jlc3VsdCA9IGpzb25ScGNSZXN1bHQobnVsbGFibGUodHlwZSh7XG4gIGJsb2NraGFzaDogc3RyaW5nKCksXG4gIHByZXZpb3VzQmxvY2toYXNoOiBzdHJpbmcoKSxcbiAgcGFyZW50U2xvdDogbnVtYmVyKCksXG4gIHRyYW5zYWN0aW9uczogYXJyYXkodHlwZSh7XG4gICAgdHJhbnNhY3Rpb246IENvbmZpcm1lZFRyYW5zYWN0aW9uUmVzdWx0LFxuICAgIG1ldGE6IG51bGxhYmxlKENvbmZpcm1lZFRyYW5zYWN0aW9uTWV0YVJlc3VsdClcbiAgfSkpLFxuICByZXdhcmRzOiBvcHRpb25hbChhcnJheShSZXdhcmRzUmVzdWx0KSksXG4gIGJsb2NrVGltZTogbnVsbGFibGUobnVtYmVyKCkpXG59KSkpO1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRCbG9ja1wiIG1lc3NhZ2VcbiAqL1xuY29uc3QgR2V0QmxvY2tTaWduYXR1cmVzUnBjUmVzdWx0ID0ganNvblJwY1Jlc3VsdChudWxsYWJsZSh0eXBlKHtcbiAgYmxvY2toYXNoOiBzdHJpbmcoKSxcbiAgcHJldmlvdXNCbG9ja2hhc2g6IHN0cmluZygpLFxuICBwYXJlbnRTbG90OiBudW1iZXIoKSxcbiAgc2lnbmF0dXJlczogYXJyYXkoc3RyaW5nKCkpLFxuICBibG9ja1RpbWU6IG51bGxhYmxlKG51bWJlcigpKVxufSkpKTtcblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiZ2V0VHJhbnNhY3Rpb25cIiBtZXNzYWdlXG4gKi9cbmNvbnN0IEdldFRyYW5zYWN0aW9uUnBjUmVzdWx0ID0ganNvblJwY1Jlc3VsdChudWxsYWJsZSh0eXBlKHtcbiAgc2xvdDogbnVtYmVyKCksXG4gIG1ldGE6IG51bGxhYmxlKENvbmZpcm1lZFRyYW5zYWN0aW9uTWV0YVJlc3VsdCksXG4gIGJsb2NrVGltZTogb3B0aW9uYWwobnVsbGFibGUobnVtYmVyKCkpKSxcbiAgdHJhbnNhY3Rpb246IENvbmZpcm1lZFRyYW5zYWN0aW9uUmVzdWx0LFxuICB2ZXJzaW9uOiBvcHRpb25hbChUcmFuc2FjdGlvblZlcnNpb25TdHJ1Y3QpXG59KSkpO1xuXG4vKipcbiAqIEV4cGVjdGVkIHBhcnNlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiZ2V0VHJhbnNhY3Rpb25cIiBtZXNzYWdlXG4gKi9cbmNvbnN0IEdldFBhcnNlZFRyYW5zYWN0aW9uUnBjUmVzdWx0ID0ganNvblJwY1Jlc3VsdChudWxsYWJsZSh0eXBlKHtcbiAgc2xvdDogbnVtYmVyKCksXG4gIHRyYW5zYWN0aW9uOiBQYXJzZWRDb25maXJtZWRUcmFuc2FjdGlvblJlc3VsdCxcbiAgbWV0YTogbnVsbGFibGUoUGFyc2VkQ29uZmlybWVkVHJhbnNhY3Rpb25NZXRhUmVzdWx0KSxcbiAgYmxvY2tUaW1lOiBvcHRpb25hbChudWxsYWJsZShudW1iZXIoKSkpLFxuICB2ZXJzaW9uOiBvcHRpb25hbChUcmFuc2FjdGlvblZlcnNpb25TdHJ1Y3QpXG59KSkpO1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJnZXRMYXRlc3RCbG9ja2hhc2hcIiBtZXNzYWdlXG4gKi9cbmNvbnN0IEdldExhdGVzdEJsb2NraGFzaFJwY1Jlc3VsdCA9IGpzb25ScGNSZXN1bHRBbmRDb250ZXh0KHR5cGUoe1xuICBibG9ja2hhc2g6IHN0cmluZygpLFxuICBsYXN0VmFsaWRCbG9ja0hlaWdodDogbnVtYmVyKClcbn0pKTtcblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwiaXNCbG9ja2hhc2hWYWxpZFwiIG1lc3NhZ2VcbiAqL1xuY29uc3QgSXNCbG9ja2hhc2hWYWxpZFJwY1Jlc3VsdCA9IGpzb25ScGNSZXN1bHRBbmRDb250ZXh0KGJvb2xlYW4oKSk7XG5jb25zdCBQZXJmU2FtcGxlUmVzdWx0ID0gdHlwZSh7XG4gIHNsb3Q6IG51bWJlcigpLFxuICBudW1UcmFuc2FjdGlvbnM6IG51bWJlcigpLFxuICBudW1TbG90czogbnVtYmVyKCksXG4gIHNhbXBsZVBlcmlvZFNlY3M6IG51bWJlcigpXG59KTtcblxuLypcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciBcImdldFJlY2VudFBlcmZvcm1hbmNlU2FtcGxlc1wiIG1lc3NhZ2VcbiAqL1xuY29uc3QgR2V0UmVjZW50UGVyZm9ybWFuY2VTYW1wbGVzUnBjUmVzdWx0ID0ganNvblJwY1Jlc3VsdChhcnJheShQZXJmU2FtcGxlUmVzdWx0KSk7XG5cbi8qKlxuICogRXhwZWN0ZWQgSlNPTiBSUEMgcmVzcG9uc2UgZm9yIHRoZSBcImdldEZlZUNhbGN1bGF0b3JGb3JCbG9ja2hhc2hcIiBtZXNzYWdlXG4gKi9cbmNvbnN0IEdldEZlZUNhbGN1bGF0b3JScGNSZXN1bHQgPSBqc29uUnBjUmVzdWx0QW5kQ29udGV4dChudWxsYWJsZSh0eXBlKHtcbiAgZmVlQ2FsY3VsYXRvcjogdHlwZSh7XG4gICAgbGFtcG9ydHNQZXJTaWduYXR1cmU6IG51bWJlcigpXG4gIH0pXG59KSkpO1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJyZXF1ZXN0QWlyZHJvcFwiIG1lc3NhZ2VcbiAqL1xuY29uc3QgUmVxdWVzdEFpcmRyb3BScGNSZXN1bHQgPSBqc29uUnBjUmVzdWx0KHN0cmluZygpKTtcblxuLyoqXG4gKiBFeHBlY3RlZCBKU09OIFJQQyByZXNwb25zZSBmb3IgdGhlIFwic2VuZFRyYW5zYWN0aW9uXCIgbWVzc2FnZVxuICovXG5jb25zdCBTZW5kVHJhbnNhY3Rpb25ScGNSZXN1bHQgPSBqc29uUnBjUmVzdWx0KHN0cmluZygpKTtcblxuLyoqXG4gKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgbGF0ZXN0IHNsb3QgYmVpbmcgcHJvY2Vzc2VkIGJ5IGEgbm9kZVxuICovXG5cbi8qKlxuICogUGFyc2VkIGFjY291bnQgZGF0YVxuICovXG5cbi8qKlxuICogU3Rha2UgQWN0aXZhdGlvbiBkYXRhXG4gKi9cblxuLyoqXG4gKiBEYXRhIHNsaWNlIGFyZ3VtZW50IGZvciBnZXRQcm9ncmFtQWNjb3VudHNcbiAqL1xuXG4vKipcbiAqIE1lbW9yeSBjb21wYXJpc29uIGZpbHRlciBmb3IgZ2V0UHJvZ3JhbUFjY291bnRzXG4gKi9cblxuLyoqXG4gKiBEYXRhIHNpemUgY29tcGFyaXNvbiBmaWx0ZXIgZm9yIGdldFByb2dyYW1BY2NvdW50c1xuICovXG5cbi8qKlxuICogQSBmaWx0ZXIgb2JqZWN0IGZvciBnZXRQcm9ncmFtQWNjb3VudHNcbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBnZXRQcm9ncmFtQWNjb3VudHMgcmVxdWVzdHNcbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBnZXRQYXJzZWRQcm9ncmFtQWNjb3VudHNcbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBnZXRNdWx0aXBsZUFjY291bnRzXG4gKi9cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgYGdldFN0YWtlQWN0aXZhdGlvbmBcbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBgZ2V0U3Rha2VBY3RpdmF0aW9uYFxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGBnZXRTdGFrZUFjdGl2YXRpb25gXG4gKi9cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9iamVjdCBmb3IgYGdldE5vbmNlYFxuICovXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGBnZXROb25jZUFuZENvbnRleHRgXG4gKi9cblxuLyoqXG4gKiBJbmZvcm1hdGlvbiBkZXNjcmliaW5nIGFuIGFjY291bnRcbiAqL1xuXG4vKipcbiAqIEFjY291bnQgaW5mb3JtYXRpb24gaWRlbnRpZmllZCBieSBwdWJrZXlcbiAqL1xuXG4vKipcbiAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciBhY2NvdW50IGNoYW5nZSBub3RpZmljYXRpb25zXG4gKi9cblxuLyoqXG4gKiBDYWxsYmFjayBmdW5jdGlvbiBmb3IgcHJvZ3JhbSBhY2NvdW50IGNoYW5nZSBub3RpZmljYXRpb25zXG4gKi9cblxuLyoqXG4gKiBDYWxsYmFjayBmdW5jdGlvbiBmb3Igc2xvdCBjaGFuZ2Ugbm90aWZpY2F0aW9uc1xuICovXG5cbi8qKlxuICogQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHNsb3QgdXBkYXRlIG5vdGlmaWNhdGlvbnNcbiAqL1xuXG4vKipcbiAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciBzaWduYXR1cmUgc3RhdHVzIG5vdGlmaWNhdGlvbnNcbiAqL1xuXG4vKipcbiAqIFNpZ25hdHVyZSBzdGF0dXMgbm90aWZpY2F0aW9uIHdpdGggdHJhbnNhY3Rpb24gcmVzdWx0XG4gKi9cblxuLyoqXG4gKiBTaWduYXR1cmUgcmVjZWl2ZWQgbm90aWZpY2F0aW9uXG4gKi9cblxuLyoqXG4gKiBDYWxsYmFjayBmdW5jdGlvbiBmb3Igc2lnbmF0dXJlIG5vdGlmaWNhdGlvbnNcbiAqL1xuXG4vKipcbiAqIFNpZ25hdHVyZSBzdWJzY3JpcHRpb24gb3B0aW9uc1xuICovXG5cbi8qKlxuICogQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHJvb3QgY2hhbmdlIG5vdGlmaWNhdGlvbnNcbiAqL1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBMb2dzUmVzdWx0ID0gdHlwZSh7XG4gIGVycjogVHJhbnNhY3Rpb25FcnJvclJlc3VsdCxcbiAgbG9nczogYXJyYXkoc3RyaW5nKCkpLFxuICBzaWduYXR1cmU6IHN0cmluZygpXG59KTtcblxuLyoqXG4gKiBMb2dzIHJlc3VsdC5cbiAqL1xuXG4vKipcbiAqIEV4cGVjdGVkIEpTT04gUlBDIHJlc3BvbnNlIGZvciB0aGUgXCJsb2dzTm90aWZpY2F0aW9uXCIgbWVzc2FnZS5cbiAqL1xuY29uc3QgTG9nc05vdGlmaWNhdGlvblJlc3VsdCA9IHR5cGUoe1xuICByZXN1bHQ6IG5vdGlmaWNhdGlvblJlc3VsdEFuZENvbnRleHQoTG9nc1Jlc3VsdCksXG4gIHN1YnNjcmlwdGlvbjogbnVtYmVyKClcbn0pO1xuXG4vKipcbiAqIEZpbHRlciBmb3IgbG9nIHN1YnNjcmlwdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBDYWxsYmFjayBmdW5jdGlvbiBmb3IgbG9nIG5vdGlmaWNhdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBTaWduYXR1cmUgcmVzdWx0XG4gKi9cblxuLyoqXG4gKiBUcmFuc2FjdGlvbiBlcnJvclxuICovXG5cbi8qKlxuICogVHJhbnNhY3Rpb24gY29uZmlybWF0aW9uIHN0YXR1c1xuICogPHByZT5cbiAqICAgJ3Byb2Nlc3NlZCc6IFRyYW5zYWN0aW9uIGxhbmRlZCBpbiBhIGJsb2NrIHdoaWNoIGhhcyByZWFjaGVkIDEgY29uZmlybWF0aW9uIGJ5IHRoZSBjb25uZWN0ZWQgbm9kZVxuICogICAnY29uZmlybWVkJzogVHJhbnNhY3Rpb24gbGFuZGVkIGluIGEgYmxvY2sgd2hpY2ggaGFzIHJlYWNoZWQgMSBjb25maXJtYXRpb24gYnkgdGhlIGNsdXN0ZXJcbiAqICAgJ2ZpbmFsaXplZCc6IFRyYW5zYWN0aW9uIGxhbmRlZCBpbiBhIGJsb2NrIHdoaWNoIGhhcyBiZWVuIGZpbmFsaXplZCBieSB0aGUgY2x1c3RlclxuICogPC9wcmU+XG4gKi9cblxuLyoqXG4gKiBTaWduYXR1cmUgc3RhdHVzXG4gKi9cblxuLyoqXG4gKiBBIGNvbmZpcm1lZCBzaWduYXR1cmUgd2l0aCBpdHMgc3RhdHVzXG4gKi9cblxuLyoqXG4gKiBBbiBvYmplY3QgZGVmaW5pbmcgaGVhZGVycyB0byBiZSBwYXNzZWQgdG8gdGhlIFJQQyBzZXJ2ZXJcbiAqL1xuXG4vKipcbiAqIFRoZSB0eXBlIG9mIHRoZSBKYXZhU2NyaXB0IGBmZXRjaCgpYCBBUElcbiAqL1xuXG4vKipcbiAqIEEgY2FsbGJhY2sgdXNlZCB0byBhdWdtZW50IHRoZSBvdXRnb2luZyBIVFRQIHJlcXVlc3RcbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gZm9yIGluc3RhbnRpYXRpbmcgYSBDb25uZWN0aW9uXG4gKi9cblxuLyoqIEBpbnRlcm5hbCAqL1xuY29uc3QgQ09NTU9OX0hUVFBfSEVBREVSUyA9IHtcbiAgJ3NvbGFuYS1jbGllbnQnOiBganMvJHtcIjEuMC4wLW1haW50ZW5hbmNlXCJ9YFxufTtcblxuLyoqXG4gKiBBIGNvbm5lY3Rpb24gdG8gYSBmdWxsbm9kZSBKU09OIFJQQyBlbmRwb2ludFxuICovXG5jbGFzcyBDb25uZWN0aW9uIHtcbiAgLyoqXG4gICAqIEVzdGFibGlzaCBhIEpTT04gUlBDIGNvbm5lY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIGVuZHBvaW50IFVSTCB0byB0aGUgZnVsbG5vZGUgSlNPTiBSUEMgZW5kcG9pbnRcbiAgICogQHBhcmFtIGNvbW1pdG1lbnRPckNvbmZpZyBvcHRpb25hbCBkZWZhdWx0IGNvbW1pdG1lbnQgbGV2ZWwgb3Igb3B0aW9uYWwgQ29ubmVjdGlvbkNvbmZpZyBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgKi9cbiAgY29uc3RydWN0b3IoZW5kcG9pbnQsIF9jb21taXRtZW50T3JDb25maWcpIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fY29tbWl0bWVudCA9IHZvaWQgMDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fY29uZmlybVRyYW5zYWN0aW9uSW5pdGlhbFRpbWVvdXQgPSB2b2lkIDA7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX3JwY0VuZHBvaW50ID0gdm9pZCAwO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICB0aGlzLl9ycGNXc0VuZHBvaW50ID0gdm9pZCAwO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICB0aGlzLl9ycGNDbGllbnQgPSB2b2lkIDA7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX3JwY1JlcXVlc3QgPSB2b2lkIDA7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX3JwY0JhdGNoUmVxdWVzdCA9IHZvaWQgMDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fcnBjV2ViU29ja2V0ID0gdm9pZCAwO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICB0aGlzLl9ycGNXZWJTb2NrZXRDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fcnBjV2ViU29ja2V0SGVhcnRiZWF0ID0gbnVsbDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fcnBjV2ViU29ja2V0SWRsZVRpbWVvdXQgPSBudWxsO1xuICAgIC8qKiBAaW50ZXJuYWxcbiAgICAgKiBBIG51bWJlciB0aGF0IHdlIGluY3JlbWVudCBldmVyeSB0aW1lIGFuIGFjdGl2ZSBjb25uZWN0aW9uIGNsb3Nlcy5cbiAgICAgKiBVc2VkIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBzYW1lIHNvY2tldCBjb25uZWN0aW9uIHRoYXQgd2FzIG9wZW5cbiAgICAgKiB3aGVuIGFuIGFzeW5jIG9wZXJhdGlvbiBzdGFydGVkIGlzIHRoZSBzYW1lIG9uZSB0aGF0J3MgYWN0aXZlIHdoZW5cbiAgICAgKiBpdHMgY29udGludWF0aW9uIGZpcmVzLlxuICAgICAqXG4gICAgICovXG4gICAgdGhpcy5fcnBjV2ViU29ja2V0R2VuZXJhdGlvbiA9IDA7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX2Rpc2FibGVCbG9ja2hhc2hDYWNoaW5nID0gZmFsc2U7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX3BvbGxpbmdCbG9ja2hhc2ggPSBmYWxzZTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fYmxvY2toYXNoSW5mbyA9IHtcbiAgICAgIGxhdGVzdEJsb2NraGFzaDogbnVsbCxcbiAgICAgIGxhc3RGZXRjaDogMCxcbiAgICAgIHRyYW5zYWN0aW9uU2lnbmF0dXJlczogW10sXG4gICAgICBzaW11bGF0ZWRTaWduYXR1cmVzOiBbXVxuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX25leHRDbGllbnRTdWJzY3JpcHRpb25JZCA9IDA7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbkRpc3Bvc2VGdW5jdGlvbnNCeUNsaWVudFN1YnNjcmlwdGlvbklkID0ge307XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbkhhc2hCeUNsaWVudFN1YnNjcmlwdGlvbklkID0ge307XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvblN0YXRlQ2hhbmdlQ2FsbGJhY2tzQnlIYXNoID0ge307XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbkNhbGxiYWNrc0J5U2VydmVyU3Vic2NyaXB0aW9uSWQgPSB7fTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uc0J5SGFzaCA9IHt9O1xuICAgIC8qKlxuICAgICAqIFNwZWNpYWwgY2FzZS5cbiAgICAgKiBBZnRlciBhIHNpZ25hdHVyZSBpcyBwcm9jZXNzZWQsIFJQQ3MgYXV0b21hdGljYWxseSBkaXNwb3NlIG9mIHRoZVxuICAgICAqIHN1YnNjcmlwdGlvbiBvbiB0aGUgc2VydmVyIHNpZGUuIFdlIG5lZWQgdG8gdHJhY2sgd2hpY2ggb2YgdGhlc2VcbiAgICAgKiBzdWJzY3JpcHRpb25zIGhhdmUgYmVlbiBkaXNwb3NlZCBpbiBzdWNoIGEgd2F5LCBzbyB0aGF0IHdlIGtub3dcbiAgICAgKiB3aGV0aGVyIHRoZSBjbGllbnQgaXMgZGVhbGluZyB3aXRoIGEgbm90LXlldC1wcm9jZXNzZWQgc2lnbmF0dXJlXG4gICAgICogKGluIHdoaWNoIGNhc2Ugd2UgbXVzdCB0ZWFyIGRvd24gdGhlIHNlcnZlciBzdWJzY3JpcHRpb24pIG9yIGFuXG4gICAgICogYWxyZWFkeS1wcm9jZXNzZWQgc2lnbmF0dXJlIChpbiB3aGljaCBjYXNlIHRoZSBjbGllbnQgY2FuIHNpbXBseVxuICAgICAqIGNsZWFyIG91dCB0aGUgc3Vic2NyaXB0aW9uIGxvY2FsbHkgd2l0aG91dCB0ZWxsaW5nIHRoZSBzZXJ2ZXIpLlxuICAgICAqXG4gICAgICogTk9URTogVGhlcmUgaXMgYSBwcm9wb3NhbCB0byBlbGltaW5hdGUgdGhpcyBzcGVjaWFsIGNhc2UsIGhlcmU6XG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL3NvbGFuYS1sYWJzL3NvbGFuYS9pc3N1ZXMvMTg4OTJcbiAgICAgKi9cbiAgICAvKiogQGludGVybmFsICovXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uc0F1dG9EaXNwb3NlZEJ5UnBjID0gbmV3IFNldCgpO1xuICAgIC8qXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBibG9jayBoZWlnaHQgb2YgdGhlIG5vZGVcbiAgICAgKi9cbiAgICB0aGlzLmdldEJsb2NrSGVpZ2h0ID0gKCgpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3RQcm9taXNlcyA9IHt9O1xuICAgICAgcmV0dXJuIGFzeW5jIGNvbW1pdG1lbnRPckNvbmZpZyA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBjb21taXRtZW50LFxuICAgICAgICAgIGNvbmZpZ1xuICAgICAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKGNvbW1pdG1lbnRPckNvbmZpZyk7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW10sIGNvbW1pdG1lbnQsIHVuZGVmaW5lZCAvKiBlbmNvZGluZyAqLywgY29uZmlnKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdEhhc2ggPSBmYXN0U3RhYmxlU3RyaW5naWZ5KGFyZ3MpO1xuICAgICAgICByZXF1ZXN0UHJvbWlzZXNbcmVxdWVzdEhhc2hdID0gcmVxdWVzdFByb21pc2VzW3JlcXVlc3RIYXNoXSA/PyAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRCbG9ja0hlaWdodCcsIGFyZ3MpO1xuICAgICAgICAgICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywganNvblJwY1Jlc3VsdChudW1iZXIoKSkpO1xuICAgICAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBibG9jayBoZWlnaHQgaW5mb3JtYXRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXMucmVzdWx0O1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBkZWxldGUgcmVxdWVzdFByb21pc2VzW3JlcXVlc3RIYXNoXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCByZXF1ZXN0UHJvbWlzZXNbcmVxdWVzdEhhc2hdO1xuICAgICAgfTtcbiAgICB9KSgpO1xuICAgIGxldCB3c0VuZHBvaW50O1xuICAgIGxldCBodHRwSGVhZGVycztcbiAgICBsZXQgZmV0Y2g7XG4gICAgbGV0IGZldGNoTWlkZGxld2FyZTtcbiAgICBsZXQgZGlzYWJsZVJldHJ5T25SYXRlTGltaXQ7XG4gICAgbGV0IGh0dHBBZ2VudDtcbiAgICBpZiAoX2NvbW1pdG1lbnRPckNvbmZpZyAmJiB0eXBlb2YgX2NvbW1pdG1lbnRPckNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2NvbW1pdG1lbnQgPSBfY29tbWl0bWVudE9yQ29uZmlnO1xuICAgIH0gZWxzZSBpZiAoX2NvbW1pdG1lbnRPckNvbmZpZykge1xuICAgICAgdGhpcy5fY29tbWl0bWVudCA9IF9jb21taXRtZW50T3JDb25maWcuY29tbWl0bWVudDtcbiAgICAgIHRoaXMuX2NvbmZpcm1UcmFuc2FjdGlvbkluaXRpYWxUaW1lb3V0ID0gX2NvbW1pdG1lbnRPckNvbmZpZy5jb25maXJtVHJhbnNhY3Rpb25Jbml0aWFsVGltZW91dDtcbiAgICAgIHdzRW5kcG9pbnQgPSBfY29tbWl0bWVudE9yQ29uZmlnLndzRW5kcG9pbnQ7XG4gICAgICBodHRwSGVhZGVycyA9IF9jb21taXRtZW50T3JDb25maWcuaHR0cEhlYWRlcnM7XG4gICAgICBmZXRjaCA9IF9jb21taXRtZW50T3JDb25maWcuZmV0Y2g7XG4gICAgICBmZXRjaE1pZGRsZXdhcmUgPSBfY29tbWl0bWVudE9yQ29uZmlnLmZldGNoTWlkZGxld2FyZTtcbiAgICAgIGRpc2FibGVSZXRyeU9uUmF0ZUxpbWl0ID0gX2NvbW1pdG1lbnRPckNvbmZpZy5kaXNhYmxlUmV0cnlPblJhdGVMaW1pdDtcbiAgICAgIGh0dHBBZ2VudCA9IF9jb21taXRtZW50T3JDb25maWcuaHR0cEFnZW50O1xuICAgIH1cbiAgICB0aGlzLl9ycGNFbmRwb2ludCA9IGFzc2VydEVuZHBvaW50VXJsKGVuZHBvaW50KTtcbiAgICB0aGlzLl9ycGNXc0VuZHBvaW50ID0gd3NFbmRwb2ludCB8fCBtYWtlV2Vic29ja2V0VXJsKGVuZHBvaW50KTtcbiAgICB0aGlzLl9ycGNDbGllbnQgPSBjcmVhdGVScGNDbGllbnQoZW5kcG9pbnQsIGh0dHBIZWFkZXJzLCBmZXRjaCwgZmV0Y2hNaWRkbGV3YXJlLCBkaXNhYmxlUmV0cnlPblJhdGVMaW1pdCwgaHR0cEFnZW50KTtcbiAgICB0aGlzLl9ycGNSZXF1ZXN0ID0gY3JlYXRlUnBjUmVxdWVzdCh0aGlzLl9ycGNDbGllbnQpO1xuICAgIHRoaXMuX3JwY0JhdGNoUmVxdWVzdCA9IGNyZWF0ZVJwY0JhdGNoUmVxdWVzdCh0aGlzLl9ycGNDbGllbnQpO1xuICAgIHRoaXMuX3JwY1dlYlNvY2tldCA9IG5ldyBScGNXZWJTb2NrZXRDbGllbnQodGhpcy5fcnBjV3NFbmRwb2ludCwge1xuICAgICAgYXV0b2Nvbm5lY3Q6IGZhbHNlLFxuICAgICAgbWF4X3JlY29ubmVjdHM6IEluZmluaXR5XG4gICAgfSk7XG4gICAgdGhpcy5fcnBjV2ViU29ja2V0Lm9uKCdvcGVuJywgdGhpcy5fd3NPbk9wZW4uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5fcnBjV2ViU29ja2V0Lm9uKCdlcnJvcicsIHRoaXMuX3dzT25FcnJvci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLl9ycGNXZWJTb2NrZXQub24oJ2Nsb3NlJywgdGhpcy5fd3NPbkNsb3NlLmJpbmQodGhpcykpO1xuICAgIHRoaXMuX3JwY1dlYlNvY2tldC5vbignYWNjb3VudE5vdGlmaWNhdGlvbicsIHRoaXMuX3dzT25BY2NvdW50Tm90aWZpY2F0aW9uLmJpbmQodGhpcykpO1xuICAgIHRoaXMuX3JwY1dlYlNvY2tldC5vbigncHJvZ3JhbU5vdGlmaWNhdGlvbicsIHRoaXMuX3dzT25Qcm9ncmFtQWNjb3VudE5vdGlmaWNhdGlvbi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLl9ycGNXZWJTb2NrZXQub24oJ3Nsb3ROb3RpZmljYXRpb24nLCB0aGlzLl93c09uU2xvdE5vdGlmaWNhdGlvbi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLl9ycGNXZWJTb2NrZXQub24oJ3Nsb3RzVXBkYXRlc05vdGlmaWNhdGlvbicsIHRoaXMuX3dzT25TbG90VXBkYXRlc05vdGlmaWNhdGlvbi5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLl9ycGNXZWJTb2NrZXQub24oJ3NpZ25hdHVyZU5vdGlmaWNhdGlvbicsIHRoaXMuX3dzT25TaWduYXR1cmVOb3RpZmljYXRpb24uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5fcnBjV2ViU29ja2V0Lm9uKCdyb290Tm90aWZpY2F0aW9uJywgdGhpcy5fd3NPblJvb3ROb3RpZmljYXRpb24uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5fcnBjV2ViU29ja2V0Lm9uKCdsb2dzTm90aWZpY2F0aW9uJywgdGhpcy5fd3NPbkxvZ3NOb3RpZmljYXRpb24uYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgY29tbWl0bWVudCB1c2VkIGZvciByZXF1ZXN0c1xuICAgKi9cbiAgZ2V0IGNvbW1pdG1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbW1pdG1lbnQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIFJQQyBlbmRwb2ludFxuICAgKi9cbiAgZ2V0IHJwY0VuZHBvaW50KCkge1xuICAgIHJldHVybiB0aGlzLl9ycGNFbmRwb2ludDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCB0aGUgYmFsYW5jZSBmb3IgdGhlIHNwZWNpZmllZCBwdWJsaWMga2V5LCByZXR1cm4gd2l0aCBjb250ZXh0XG4gICAqL1xuICBhc3luYyBnZXRCYWxhbmNlQW5kQ29udGV4dChwdWJsaWNLZXksIGNvbW1pdG1lbnRPckNvbmZpZykge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnXG4gICAgfSA9IGV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyhjb21taXRtZW50T3JDb25maWcpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW3B1YmxpY0tleS50b0Jhc2U1OCgpXSwgY29tbWl0bWVudCwgdW5kZWZpbmVkIC8qIGVuY29kaW5nICovLCBjb25maWcpO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldEJhbGFuY2UnLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBqc29uUnBjUmVzdWx0QW5kQ29udGV4dChudW1iZXIoKSkpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsIGBmYWlsZWQgdG8gZ2V0IGJhbGFuY2UgZm9yICR7cHVibGljS2V5LnRvQmFzZTU4KCl9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBiYWxhbmNlIGZvciB0aGUgc3BlY2lmaWVkIHB1YmxpYyBrZXlcbiAgICovXG4gIGFzeW5jIGdldEJhbGFuY2UocHVibGljS2V5LCBjb21taXRtZW50T3JDb25maWcpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRCYWxhbmNlQW5kQ29udGV4dChwdWJsaWNLZXksIGNvbW1pdG1lbnRPckNvbmZpZykudGhlbih4ID0+IHgudmFsdWUpLmNhdGNoKGUgPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gZ2V0IGJhbGFuY2Ugb2YgYWNjb3VudCAnICsgcHVibGljS2V5LnRvQmFzZTU4KCkgKyAnOiAnICsgZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIGVzdGltYXRlZCBwcm9kdWN0aW9uIHRpbWUgb2YgYSBibG9ja1xuICAgKi9cbiAgYXN5bmMgZ2V0QmxvY2tUaW1lKHNsb3QpIHtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRCbG9ja1RpbWUnLCBbc2xvdF0pO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIGpzb25ScGNSZXN1bHQobnVsbGFibGUobnVtYmVyKCkpKSk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgYGZhaWxlZCB0byBnZXQgYmxvY2sgdGltZSBmb3Igc2xvdCAke3Nsb3R9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBsb3dlc3Qgc2xvdCB0aGF0IHRoZSBub2RlIGhhcyBpbmZvcm1hdGlvbiBhYm91dCBpbiBpdHMgbGVkZ2VyLlxuICAgKiBUaGlzIHZhbHVlIG1heSBpbmNyZWFzZSBvdmVyIHRpbWUgaWYgdGhlIG5vZGUgaXMgY29uZmlndXJlZCB0byBwdXJnZSBvbGRlciBsZWRnZXIgZGF0YVxuICAgKi9cbiAgYXN5bmMgZ2V0TWluaW11bUxlZGdlclNsb3QoKSB7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnbWluaW11bUxlZGdlclNsb3QnLCBbXSk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywganNvblJwY1Jlc3VsdChudW1iZXIoKSkpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IG1pbmltdW0gbGVkZ2VyIHNsb3QnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIHNsb3Qgb2YgdGhlIGxvd2VzdCBjb25maXJtZWQgYmxvY2sgdGhhdCBoYXMgbm90IGJlZW4gcHVyZ2VkIGZyb20gdGhlIGxlZGdlclxuICAgKi9cbiAgYXN5bmMgZ2V0Rmlyc3RBdmFpbGFibGVCbG9jaygpIHtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRGaXJzdEF2YWlsYWJsZUJsb2NrJywgW10pO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIFNsb3RScGNSZXN1bHQpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IGZpcnN0IGF2YWlsYWJsZSBibG9jaycpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBzdXBwbHlcbiAgICovXG4gIGFzeW5jIGdldFN1cHBseShjb25maWcpIHtcbiAgICBsZXQgY29uZmlnQXJnID0ge307XG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25maWdBcmcgPSB7XG4gICAgICAgIGNvbW1pdG1lbnQ6IGNvbmZpZ1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZykge1xuICAgICAgY29uZmlnQXJnID0ge1xuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIGNvbW1pdG1lbnQ6IGNvbmZpZyAmJiBjb25maWcuY29tbWl0bWVudCB8fCB0aGlzLmNvbW1pdG1lbnRcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZ0FyZyA9IHtcbiAgICAgICAgY29tbWl0bWVudDogdGhpcy5jb21taXRtZW50XG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRTdXBwbHknLCBbY29uZmlnQXJnXSk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0U3VwcGx5UnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBzdXBwbHknKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIGN1cnJlbnQgc3VwcGx5IG9mIGEgdG9rZW4gbWludFxuICAgKi9cbiAgYXN5bmMgZ2V0VG9rZW5TdXBwbHkodG9rZW5NaW50QWRkcmVzcywgY29tbWl0bWVudCkge1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW3Rva2VuTWludEFkZHJlc3MudG9CYXNlNTgoKV0sIGNvbW1pdG1lbnQpO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldFRva2VuU3VwcGx5JywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywganNvblJwY1Jlc3VsdEFuZENvbnRleHQoVG9rZW5BbW91bnRSZXN1bHQpKTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCB0b2tlbiBzdXBwbHknKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIGN1cnJlbnQgYmFsYW5jZSBvZiBhIHRva2VuIGFjY291bnRcbiAgICovXG4gIGFzeW5jIGdldFRva2VuQWNjb3VudEJhbGFuY2UodG9rZW5BZGRyZXNzLCBjb21taXRtZW50KSB7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJncyhbdG9rZW5BZGRyZXNzLnRvQmFzZTU4KCldLCBjb21taXRtZW50KTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRUb2tlbkFjY291bnRCYWxhbmNlJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywganNvblJwY1Jlc3VsdEFuZENvbnRleHQoVG9rZW5BbW91bnRSZXN1bHQpKTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCB0b2tlbiBhY2NvdW50IGJhbGFuY2UnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYWxsIHRoZSB0b2tlbiBhY2NvdW50cyBvd25lZCBieSB0aGUgc3BlY2lmaWVkIGFjY291bnRcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxScGNSZXNwb25zZUFuZENvbnRleHQ8R2V0UHJvZ3JhbUFjY291bnRzUmVzcG9uc2U+fVxuICAgKi9cbiAgYXN5bmMgZ2V0VG9rZW5BY2NvdW50c0J5T3duZXIob3duZXJBZGRyZXNzLCBmaWx0ZXIsIGNvbW1pdG1lbnRPckNvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgICBjb25maWdcbiAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKGNvbW1pdG1lbnRPckNvbmZpZyk7XG4gICAgbGV0IF9hcmdzID0gW293bmVyQWRkcmVzcy50b0Jhc2U1OCgpXTtcbiAgICBpZiAoJ21pbnQnIGluIGZpbHRlcikge1xuICAgICAgX2FyZ3MucHVzaCh7XG4gICAgICAgIG1pbnQ6IGZpbHRlci5taW50LnRvQmFzZTU4KClcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfYXJncy5wdXNoKHtcbiAgICAgICAgcHJvZ3JhbUlkOiBmaWx0ZXIucHJvZ3JhbUlkLnRvQmFzZTU4KClcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzKF9hcmdzLCBjb21taXRtZW50LCAnYmFzZTY0JywgY29uZmlnKTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRUb2tlbkFjY291bnRzQnlPd25lcicsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldFRva2VuQWNjb3VudHNCeU93bmVyKTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCBgZmFpbGVkIHRvIGdldCB0b2tlbiBhY2NvdW50cyBvd25lZCBieSBhY2NvdW50ICR7b3duZXJBZGRyZXNzLnRvQmFzZTU4KCl9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHBhcnNlZCB0b2tlbiBhY2NvdW50cyBvd25lZCBieSB0aGUgc3BlY2lmaWVkIGFjY291bnRcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxScGNSZXNwb25zZUFuZENvbnRleHQ8QXJyYXk8e3B1YmtleTogUHVibGljS2V5LCBhY2NvdW50OiBBY2NvdW50SW5mbzxQYXJzZWRBY2NvdW50RGF0YT59Pj4+fVxuICAgKi9cbiAgYXN5bmMgZ2V0UGFyc2VkVG9rZW5BY2NvdW50c0J5T3duZXIob3duZXJBZGRyZXNzLCBmaWx0ZXIsIGNvbW1pdG1lbnQpIHtcbiAgICBsZXQgX2FyZ3MgPSBbb3duZXJBZGRyZXNzLnRvQmFzZTU4KCldO1xuICAgIGlmICgnbWludCcgaW4gZmlsdGVyKSB7XG4gICAgICBfYXJncy5wdXNoKHtcbiAgICAgICAgbWludDogZmlsdGVyLm1pbnQudG9CYXNlNTgoKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9hcmdzLnB1c2goe1xuICAgICAgICBwcm9ncmFtSWQ6IGZpbHRlci5wcm9ncmFtSWQudG9CYXNlNTgoKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoX2FyZ3MsIGNvbW1pdG1lbnQsICdqc29uUGFyc2VkJyk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0VG9rZW5BY2NvdW50c0J5T3duZXInLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRQYXJzZWRUb2tlbkFjY291bnRzQnlPd25lcik7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgYGZhaWxlZCB0byBnZXQgdG9rZW4gYWNjb3VudHMgb3duZWQgYnkgYWNjb3VudCAke293bmVyQWRkcmVzcy50b0Jhc2U1OCgpfWApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCB0aGUgMjAgbGFyZ2VzdCBhY2NvdW50cyB3aXRoIHRoZWlyIGN1cnJlbnQgYmFsYW5jZXNcbiAgICovXG4gIGFzeW5jIGdldExhcmdlc3RBY2NvdW50cyhjb25maWcpIHtcbiAgICBjb25zdCBhcmcgPSB7XG4gICAgICAuLi5jb25maWcsXG4gICAgICBjb21taXRtZW50OiBjb25maWcgJiYgY29uZmlnLmNvbW1pdG1lbnQgfHwgdGhpcy5jb21taXRtZW50XG4gICAgfTtcbiAgICBjb25zdCBhcmdzID0gYXJnLmZpbHRlciB8fCBhcmcuY29tbWl0bWVudCA/IFthcmddIDogW107XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0TGFyZ2VzdEFjY291bnRzJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0TGFyZ2VzdEFjY291bnRzUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBsYXJnZXN0IGFjY291bnRzJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSAyMCBsYXJnZXN0IHRva2VuIGFjY291bnRzIHdpdGggdGhlaXIgY3VycmVudCBiYWxhbmNlc1xuICAgKiBmb3IgYSBnaXZlbiBtaW50LlxuICAgKi9cbiAgYXN5bmMgZ2V0VG9rZW5MYXJnZXN0QWNjb3VudHMobWludEFkZHJlc3MsIGNvbW1pdG1lbnQpIHtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzKFttaW50QWRkcmVzcy50b0Jhc2U1OCgpXSwgY29tbWl0bWVudCk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0VG9rZW5MYXJnZXN0QWNjb3VudHMnLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRUb2tlbkxhcmdlc3RBY2NvdW50c1Jlc3VsdCk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgdG9rZW4gbGFyZ2VzdCBhY2NvdW50cycpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhbGwgdGhlIGFjY291bnQgaW5mbyBmb3IgdGhlIHNwZWNpZmllZCBwdWJsaWMga2V5LCByZXR1cm4gd2l0aCBjb250ZXh0XG4gICAqL1xuICBhc3luYyBnZXRBY2NvdW50SW5mb0FuZENvbnRleHQocHVibGljS2V5LCBjb21taXRtZW50T3JDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnXG4gICAgfSA9IGV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyhjb21taXRtZW50T3JDb25maWcpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW3B1YmxpY0tleS50b0Jhc2U1OCgpXSwgY29tbWl0bWVudCwgJ2Jhc2U2NCcsIGNvbmZpZyk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0QWNjb3VudEluZm8nLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBqc29uUnBjUmVzdWx0QW5kQ29udGV4dChudWxsYWJsZShBY2NvdW50SW5mb1Jlc3VsdCkpKTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCBgZmFpbGVkIHRvIGdldCBpbmZvIGFib3V0IGFjY291bnQgJHtwdWJsaWNLZXkudG9CYXNlNTgoKX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggcGFyc2VkIGFjY291bnQgaW5mbyBmb3IgdGhlIHNwZWNpZmllZCBwdWJsaWMga2V5XG4gICAqL1xuICBhc3luYyBnZXRQYXJzZWRBY2NvdW50SW5mbyhwdWJsaWNLZXksIGNvbW1pdG1lbnRPckNvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgICBjb25maWdcbiAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKGNvbW1pdG1lbnRPckNvbmZpZyk7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJncyhbcHVibGljS2V5LnRvQmFzZTU4KCldLCBjb21taXRtZW50LCAnanNvblBhcnNlZCcsIGNvbmZpZyk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0QWNjb3VudEluZm8nLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBqc29uUnBjUmVzdWx0QW5kQ29udGV4dChudWxsYWJsZShQYXJzZWRBY2NvdW50SW5mb1Jlc3VsdCkpKTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCBgZmFpbGVkIHRvIGdldCBpbmZvIGFib3V0IGFjY291bnQgJHtwdWJsaWNLZXkudG9CYXNlNTgoKX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYWxsIHRoZSBhY2NvdW50IGluZm8gZm9yIHRoZSBzcGVjaWZpZWQgcHVibGljIGtleVxuICAgKi9cbiAgYXN5bmMgZ2V0QWNjb3VudEluZm8ocHVibGljS2V5LCBjb21taXRtZW50T3JDb25maWcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5nZXRBY2NvdW50SW5mb0FuZENvbnRleHQocHVibGljS2V5LCBjb21taXRtZW50T3JDb25maWcpO1xuICAgICAgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBnZXQgaW5mbyBhYm91dCBhY2NvdW50ICcgKyBwdWJsaWNLZXkudG9CYXNlNTgoKSArICc6ICcgKyBlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYWxsIHRoZSBhY2NvdW50IGluZm8gZm9yIG11bHRpcGxlIGFjY291bnRzIHNwZWNpZmllZCBieSBhbiBhcnJheSBvZiBwdWJsaWMga2V5cywgcmV0dXJuIHdpdGggY29udGV4dFxuICAgKi9cbiAgYXN5bmMgZ2V0TXVsdGlwbGVQYXJzZWRBY2NvdW50cyhwdWJsaWNLZXlzLCByYXdDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnXG4gICAgfSA9IGV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyhyYXdDb25maWcpO1xuICAgIGNvbnN0IGtleXMgPSBwdWJsaWNLZXlzLm1hcChrZXkgPT4ga2V5LnRvQmFzZTU4KCkpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW2tleXNdLCBjb21taXRtZW50LCAnanNvblBhcnNlZCcsIGNvbmZpZyk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0TXVsdGlwbGVBY2NvdW50cycsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIGpzb25ScGNSZXN1bHRBbmRDb250ZXh0KGFycmF5KG51bGxhYmxlKFBhcnNlZEFjY291bnRJbmZvUmVzdWx0KSkpKTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCBgZmFpbGVkIHRvIGdldCBpbmZvIGZvciBhY2NvdW50cyAke2tleXN9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGFsbCB0aGUgYWNjb3VudCBpbmZvIGZvciBtdWx0aXBsZSBhY2NvdW50cyBzcGVjaWZpZWQgYnkgYW4gYXJyYXkgb2YgcHVibGljIGtleXMsIHJldHVybiB3aXRoIGNvbnRleHRcbiAgICovXG4gIGFzeW5jIGdldE11bHRpcGxlQWNjb3VudHNJbmZvQW5kQ29udGV4dChwdWJsaWNLZXlzLCBjb21taXRtZW50T3JDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnXG4gICAgfSA9IGV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyhjb21taXRtZW50T3JDb25maWcpO1xuICAgIGNvbnN0IGtleXMgPSBwdWJsaWNLZXlzLm1hcChrZXkgPT4ga2V5LnRvQmFzZTU4KCkpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW2tleXNdLCBjb21taXRtZW50LCAnYmFzZTY0JywgY29uZmlnKTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRNdWx0aXBsZUFjY291bnRzJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywganNvblJwY1Jlc3VsdEFuZENvbnRleHQoYXJyYXkobnVsbGFibGUoQWNjb3VudEluZm9SZXN1bHQpKSkpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsIGBmYWlsZWQgdG8gZ2V0IGluZm8gZm9yIGFjY291bnRzICR7a2V5c31gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYWxsIHRoZSBhY2NvdW50IGluZm8gZm9yIG11bHRpcGxlIGFjY291bnRzIHNwZWNpZmllZCBieSBhbiBhcnJheSBvZiBwdWJsaWMga2V5c1xuICAgKi9cbiAgYXN5bmMgZ2V0TXVsdGlwbGVBY2NvdW50c0luZm8ocHVibGljS2V5cywgY29tbWl0bWVudE9yQ29uZmlnKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5nZXRNdWx0aXBsZUFjY291bnRzSW5mb0FuZENvbnRleHQocHVibGljS2V5cywgY29tbWl0bWVudE9yQ29uZmlnKTtcbiAgICByZXR1cm4gcmVzLnZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZXBvY2ggYWN0aXZhdGlvbiBpbmZvcm1hdGlvbiBmb3IgYSBzdGFrZSBhY2NvdW50IHRoYXQgaGFzIGJlZW4gZGVsZWdhdGVkXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgc2luY2UgUlBDIHYxLjE4OyB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5cbiAgICovXG4gIGFzeW5jIGdldFN0YWtlQWN0aXZhdGlvbihwdWJsaWNLZXksIGNvbW1pdG1lbnRPckNvbmZpZywgZXBvY2gpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnXG4gICAgfSA9IGV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyhjb21taXRtZW50T3JDb25maWcpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW3B1YmxpY0tleS50b0Jhc2U1OCgpXSwgY29tbWl0bWVudCwgdW5kZWZpbmVkIC8qIGVuY29kaW5nICovLCB7XG4gICAgICAuLi5jb25maWcsXG4gICAgICBlcG9jaDogZXBvY2ggIT0gbnVsbCA/IGVwb2NoIDogY29uZmlnPy5lcG9jaFxuICAgIH0pO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldFN0YWtlQWN0aXZhdGlvbicsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIGpzb25ScGNSZXN1bHQoU3Rha2VBY3RpdmF0aW9uUmVzdWx0KSk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgYGZhaWxlZCB0byBnZXQgU3Rha2UgQWN0aXZhdGlvbiAke3B1YmxpY0tleS50b0Jhc2U1OCgpfWApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhbGwgdGhlIGFjY291bnRzIG93bmVkIGJ5IHRoZSBzcGVjaWZpZWQgcHJvZ3JhbSBpZFxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PHtwdWJrZXk6IFB1YmxpY0tleSwgYWNjb3VudDogQWNjb3VudEluZm88QnVmZmVyPn0+Pn1cbiAgICovXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGUtY2xhc3MtbWVtYmVyc1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBlLWNsYXNzLW1lbWJlcnNcbiAgYXN5bmMgZ2V0UHJvZ3JhbUFjY291bnRzKHByb2dyYW1JZCwgY29uZmlnT3JDb21taXRtZW50KSB7XG4gICAgY29uc3Qge1xuICAgICAgY29tbWl0bWVudCxcbiAgICAgIGNvbmZpZ1xuICAgIH0gPSBleHRyYWN0Q29tbWl0bWVudEZyb21Db25maWcoY29uZmlnT3JDb21taXRtZW50KTtcbiAgICBjb25zdCB7XG4gICAgICBlbmNvZGluZyxcbiAgICAgIC4uLmNvbmZpZ1dpdGhvdXRFbmNvZGluZ1xuICAgIH0gPSBjb25maWcgfHwge307XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJncyhbcHJvZ3JhbUlkLnRvQmFzZTU4KCldLCBjb21taXRtZW50LCBlbmNvZGluZyB8fCAnYmFzZTY0Jywge1xuICAgICAgLi4uY29uZmlnV2l0aG91dEVuY29kaW5nLFxuICAgICAgLi4uKGNvbmZpZ1dpdGhvdXRFbmNvZGluZy5maWx0ZXJzID8ge1xuICAgICAgICBmaWx0ZXJzOiBhcHBseURlZmF1bHRNZW1jbXBFbmNvZGluZ1RvRmlsdGVycyhjb25maWdXaXRob3V0RW5jb2RpbmcuZmlsdGVycylcbiAgICAgIH0gOiBudWxsKVxuICAgIH0pO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldFByb2dyYW1BY2NvdW50cycsIGFyZ3MpO1xuICAgIGNvbnN0IGJhc2VTY2hlbWEgPSBhcnJheShLZXllZEFjY291bnRJbmZvUmVzdWx0KTtcbiAgICBjb25zdCByZXMgPSBjb25maWdXaXRob3V0RW5jb2Rpbmcud2l0aENvbnRleHQgPT09IHRydWUgPyBjcmVhdGUodW5zYWZlUmVzLCBqc29uUnBjUmVzdWx0QW5kQ29udGV4dChiYXNlU2NoZW1hKSkgOiBjcmVhdGUodW5zYWZlUmVzLCBqc29uUnBjUmVzdWx0KGJhc2VTY2hlbWEpKTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCBgZmFpbGVkIHRvIGdldCBhY2NvdW50cyBvd25lZCBieSBwcm9ncmFtICR7cHJvZ3JhbUlkLnRvQmFzZTU4KCl9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGFuZCBwYXJzZSBhbGwgdGhlIGFjY291bnRzIG93bmVkIGJ5IHRoZSBzcGVjaWZpZWQgcHJvZ3JhbSBpZFxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PHtwdWJrZXk6IFB1YmxpY0tleSwgYWNjb3VudDogQWNjb3VudEluZm88QnVmZmVyIHwgUGFyc2VkQWNjb3VudERhdGE+fT4+fVxuICAgKi9cbiAgYXN5bmMgZ2V0UGFyc2VkUHJvZ3JhbUFjY291bnRzKHByb2dyYW1JZCwgY29uZmlnT3JDb21taXRtZW50KSB7XG4gICAgY29uc3Qge1xuICAgICAgY29tbWl0bWVudCxcbiAgICAgIGNvbmZpZ1xuICAgIH0gPSBleHRyYWN0Q29tbWl0bWVudEZyb21Db25maWcoY29uZmlnT3JDb21taXRtZW50KTtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzKFtwcm9ncmFtSWQudG9CYXNlNTgoKV0sIGNvbW1pdG1lbnQsICdqc29uUGFyc2VkJywgY29uZmlnKTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRQcm9ncmFtQWNjb3VudHMnLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBqc29uUnBjUmVzdWx0KGFycmF5KEtleWVkUGFyc2VkQWNjb3VudEluZm9SZXN1bHQpKSk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgYGZhaWxlZCB0byBnZXQgYWNjb3VudHMgb3duZWQgYnkgcHJvZ3JhbSAke3Byb2dyYW1JZC50b0Jhc2U1OCgpfWApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKiBAZGVwcmVjYXRlZCBJbnN0ZWFkLCBjYWxsIGBjb25maXJtVHJhbnNhY3Rpb25gIGFuZCBwYXNzIGluIHtAbGluayBUcmFuc2FjdGlvbkNvbmZpcm1hdGlvblN0cmF0ZWd5fSAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZHVwZS1jbGFzcy1tZW1iZXJzXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGUtY2xhc3MtbWVtYmVyc1xuICBhc3luYyBjb25maXJtVHJhbnNhY3Rpb24oc3RyYXRlZ3ksIGNvbW1pdG1lbnQpIHtcbiAgICBsZXQgcmF3U2lnbmF0dXJlO1xuICAgIGlmICh0eXBlb2Ygc3RyYXRlZ3kgPT0gJ3N0cmluZycpIHtcbiAgICAgIHJhd1NpZ25hdHVyZSA9IHN0cmF0ZWd5O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb25maWcgPSBzdHJhdGVneTtcbiAgICAgIGlmIChjb25maWcuYWJvcnRTaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGNvbmZpZy5hYm9ydFNpZ25hbC5yZWFzb24pO1xuICAgICAgfVxuICAgICAgcmF3U2lnbmF0dXJlID0gY29uZmlnLnNpZ25hdHVyZTtcbiAgICB9XG4gICAgbGV0IGRlY29kZWRTaWduYXR1cmU7XG4gICAgdHJ5IHtcbiAgICAgIGRlY29kZWRTaWduYXR1cmUgPSBiczU4LmRlY29kZShyYXdTaWduYXR1cmUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaWduYXR1cmUgbXVzdCBiZSBiYXNlNTggZW5jb2RlZDogJyArIHJhd1NpZ25hdHVyZSk7XG4gICAgfVxuICAgIGFzc2VydChkZWNvZGVkU2lnbmF0dXJlLmxlbmd0aCA9PT0gNjQsICdzaWduYXR1cmUgaGFzIGludmFsaWQgbGVuZ3RoJyk7XG4gICAgaWYgKHR5cGVvZiBzdHJhdGVneSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbmZpcm1UcmFuc2FjdGlvblVzaW5nTGVnYWN5VGltZW91dFN0cmF0ZWd5KHtcbiAgICAgICAgY29tbWl0bWVudDogY29tbWl0bWVudCB8fCB0aGlzLmNvbW1pdG1lbnQsXG4gICAgICAgIHNpZ25hdHVyZTogcmF3U2lnbmF0dXJlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCdsYXN0VmFsaWRCbG9ja0hlaWdodCcgaW4gc3RyYXRlZ3kpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbmZpcm1UcmFuc2FjdGlvblVzaW5nQmxvY2tIZWlnaHRFeGNlZWRhbmNlU3RyYXRlZ3koe1xuICAgICAgICBjb21taXRtZW50OiBjb21taXRtZW50IHx8IHRoaXMuY29tbWl0bWVudCxcbiAgICAgICAgc3RyYXRlZ3lcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jb25maXJtVHJhbnNhY3Rpb25Vc2luZ0R1cmFibGVOb25jZVN0cmF0ZWd5KHtcbiAgICAgICAgY29tbWl0bWVudDogY29tbWl0bWVudCB8fCB0aGlzLmNvbW1pdG1lbnQsXG4gICAgICAgIHN0cmF0ZWd5XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZ2V0Q2FuY2VsbGF0aW9uUHJvbWlzZShzaWduYWwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHNpZ25hbCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZWplY3Qoc2lnbmFsLnJlYXNvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KHNpZ25hbC5yZWFzb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBnZXRUcmFuc2FjdGlvbkNvbmZpcm1hdGlvblByb21pc2Uoe1xuICAgIGNvbW1pdG1lbnQsXG4gICAgc2lnbmF0dXJlXG4gIH0pIHtcbiAgICBsZXQgc2lnbmF0dXJlU3Vic2NyaXB0aW9uSWQ7XG4gICAgbGV0IGRpc3Bvc2VTaWduYXR1cmVTdWJzY3JpcHRpb25TdGF0ZUNoYW5nZU9ic2VydmVyO1xuICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgY29uc3QgY29uZmlybWF0aW9uUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNpZ25hdHVyZVN1YnNjcmlwdGlvbklkID0gdGhpcy5vblNpZ25hdHVyZShzaWduYXR1cmUsIChyZXN1bHQsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICBzaWduYXR1cmVTdWJzY3JpcHRpb25JZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogcmVzdWx0XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgIF9fdHlwZTogVHJhbnNhY3Rpb25TdGF0dXMuUFJPQ0VTU0VELFxuICAgICAgICAgICAgcmVzcG9uc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgY29tbWl0bWVudCk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvblNldHVwUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmVTdWJzY3JpcHRpb25TZXR1cCA9PiB7XG4gICAgICAgICAgaWYgKHNpZ25hdHVyZVN1YnNjcmlwdGlvbklkID09IG51bGwpIHtcbiAgICAgICAgICAgIHJlc29sdmVTdWJzY3JpcHRpb25TZXR1cCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaXNwb3NlU2lnbmF0dXJlU3Vic2NyaXB0aW9uU3RhdGVDaGFuZ2VPYnNlcnZlciA9IHRoaXMuX29uU3Vic2NyaXB0aW9uU3RhdGVDaGFuZ2Uoc2lnbmF0dXJlU3Vic2NyaXB0aW9uSWQsIG5leHRTdGF0ZSA9PiB7XG4gICAgICAgICAgICAgIGlmIChuZXh0U3RhdGUgPT09ICdzdWJzY3JpYmVkJykge1xuICAgICAgICAgICAgICAgIHJlc29sdmVTdWJzY3JpcHRpb25TZXR1cCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGF3YWl0IHN1YnNjcmlwdGlvblNldHVwUHJvbWlzZTtcbiAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5nZXRTaWduYXR1cmVTdGF0dXMoc2lnbmF0dXJlKTtcbiAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIGlmIChyZXNwb25zZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIH0gPSByZXNwb25zZTtcbiAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsdWU/LmVycikge1xuICAgICAgICAgICAgcmVqZWN0KHZhbHVlLmVycik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY29tbWl0bWVudCkge1xuICAgICAgICAgICAgICBjYXNlICdjb25maXJtZWQnOlxuICAgICAgICAgICAgICBjYXNlICdzaW5nbGUnOlxuICAgICAgICAgICAgICBjYXNlICdzaW5nbGVHb3NzaXAnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5jb25maXJtYXRpb25TdGF0dXMgPT09ICdwcm9jZXNzZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSAnZmluYWxpemVkJzpcbiAgICAgICAgICAgICAgY2FzZSAnbWF4JzpcbiAgICAgICAgICAgICAgY2FzZSAncm9vdCc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmNvbmZpcm1hdGlvblN0YXR1cyA9PT0gJ3Byb2Nlc3NlZCcgfHwgdmFsdWUuY29uZmlybWF0aW9uU3RhdHVzID09PSAnY29uZmlybWVkJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGV4aGF1c3QgZW51bXMgdG8gZW5zdXJlIGZ1bGwgY292ZXJhZ2VcbiAgICAgICAgICAgICAgY2FzZSAncHJvY2Vzc2VkJzpcbiAgICAgICAgICAgICAgY2FzZSAncmVjZW50JzpcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIF9fdHlwZTogVHJhbnNhY3Rpb25TdGF0dXMuUFJPQ0VTU0VELFxuICAgICAgICAgICAgICByZXNwb25zZToge1xuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGFib3J0Q29uZmlybWF0aW9uID0gKCkgPT4ge1xuICAgICAgaWYgKGRpc3Bvc2VTaWduYXR1cmVTdWJzY3JpcHRpb25TdGF0ZUNoYW5nZU9ic2VydmVyKSB7XG4gICAgICAgIGRpc3Bvc2VTaWduYXR1cmVTdWJzY3JpcHRpb25TdGF0ZUNoYW5nZU9ic2VydmVyKCk7XG4gICAgICAgIGRpc3Bvc2VTaWduYXR1cmVTdWJzY3JpcHRpb25TdGF0ZUNoYW5nZU9ic2VydmVyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHNpZ25hdHVyZVN1YnNjcmlwdGlvbklkICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVTaWduYXR1cmVMaXN0ZW5lcihzaWduYXR1cmVTdWJzY3JpcHRpb25JZCk7XG4gICAgICAgIHNpZ25hdHVyZVN1YnNjcmlwdGlvbklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIGFib3J0Q29uZmlybWF0aW9uLFxuICAgICAgY29uZmlybWF0aW9uUHJvbWlzZVxuICAgIH07XG4gIH1cbiAgYXN5bmMgY29uZmlybVRyYW5zYWN0aW9uVXNpbmdCbG9ja0hlaWdodEV4Y2VlZGFuY2VTdHJhdGVneSh7XG4gICAgY29tbWl0bWVudCxcbiAgICBzdHJhdGVneToge1xuICAgICAgYWJvcnRTaWduYWwsXG4gICAgICBsYXN0VmFsaWRCbG9ja0hlaWdodCxcbiAgICAgIHNpZ25hdHVyZVxuICAgIH1cbiAgfSkge1xuICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgY29uc3QgZXhwaXJ5UHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgY29uc3QgY2hlY2tCbG9ja0hlaWdodCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBibG9ja0hlaWdodCA9IGF3YWl0IHRoaXMuZ2V0QmxvY2tIZWlnaHQoY29tbWl0bWVudCk7XG4gICAgICAgICAgcmV0dXJuIGJsb2NrSGVpZ2h0O1xuICAgICAgICB9IGNhdGNoIChfZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBjdXJyZW50QmxvY2tIZWlnaHQgPSBhd2FpdCBjaGVja0Jsb2NrSGVpZ2h0KCk7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgIHdoaWxlIChjdXJyZW50QmxvY2tIZWlnaHQgPD0gbGFzdFZhbGlkQmxvY2tIZWlnaHQpIHtcbiAgICAgICAgICBhd2FpdCBzbGVlcCgxMDAwKTtcbiAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIGN1cnJlbnRCbG9ja0hlaWdodCA9IGF3YWl0IGNoZWNrQmxvY2tIZWlnaHQoKTtcbiAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIF9fdHlwZTogVHJhbnNhY3Rpb25TdGF0dXMuQkxPQ0tIRUlHSFRfRVhDRUVERURcbiAgICAgICAgfSk7XG4gICAgICB9KSgpO1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGFib3J0Q29uZmlybWF0aW9uLFxuICAgICAgY29uZmlybWF0aW9uUHJvbWlzZVxuICAgIH0gPSB0aGlzLmdldFRyYW5zYWN0aW9uQ29uZmlybWF0aW9uUHJvbWlzZSh7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgc2lnbmF0dXJlXG4gICAgfSk7XG4gICAgY29uc3QgY2FuY2VsbGF0aW9uUHJvbWlzZSA9IHRoaXMuZ2V0Q2FuY2VsbGF0aW9uUHJvbWlzZShhYm9ydFNpZ25hbCk7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgb3V0Y29tZSA9IGF3YWl0IFByb21pc2UucmFjZShbY2FuY2VsbGF0aW9uUHJvbWlzZSwgY29uZmlybWF0aW9uUHJvbWlzZSwgZXhwaXJ5UHJvbWlzZV0pO1xuICAgICAgaWYgKG91dGNvbWUuX190eXBlID09PSBUcmFuc2FjdGlvblN0YXR1cy5QUk9DRVNTRUQpIHtcbiAgICAgICAgcmVzdWx0ID0gb3V0Y29tZS5yZXNwb25zZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUcmFuc2FjdGlvbkV4cGlyZWRCbG9ja2hlaWdodEV4Y2VlZGVkRXJyb3Ioc2lnbmF0dXJlKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBhYm9ydENvbmZpcm1hdGlvbigpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGFzeW5jIGNvbmZpcm1UcmFuc2FjdGlvblVzaW5nRHVyYWJsZU5vbmNlU3RyYXRlZ3koe1xuICAgIGNvbW1pdG1lbnQsXG4gICAgc3RyYXRlZ3k6IHtcbiAgICAgIGFib3J0U2lnbmFsLFxuICAgICAgbWluQ29udGV4dFNsb3QsXG4gICAgICBub25jZUFjY291bnRQdWJrZXksXG4gICAgICBub25jZVZhbHVlLFxuICAgICAgc2lnbmF0dXJlXG4gICAgfVxuICB9KSB7XG4gICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICBjb25zdCBleHBpcnlQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBsZXQgY3VycmVudE5vbmNlVmFsdWUgPSBub25jZVZhbHVlO1xuICAgICAgbGV0IGxhc3RDaGVja2VkU2xvdCA9IG51bGw7XG4gICAgICBjb25zdCBnZXRDdXJyZW50Tm9uY2VWYWx1ZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgdmFsdWU6IG5vbmNlQWNjb3VudFxuICAgICAgICAgIH0gPSBhd2FpdCB0aGlzLmdldE5vbmNlQW5kQ29udGV4dChub25jZUFjY291bnRQdWJrZXksIHtcbiAgICAgICAgICAgIGNvbW1pdG1lbnQsXG4gICAgICAgICAgICBtaW5Db250ZXh0U2xvdFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxhc3RDaGVja2VkU2xvdCA9IGNvbnRleHQuc2xvdDtcbiAgICAgICAgICByZXR1cm4gbm9uY2VBY2NvdW50Py5ub25jZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIElmIGZvciB3aGF0ZXZlciByZWFzb24gd2UgY2FuJ3QgcmVhY2gvcmVhZCB0aGUgbm9uY2VcbiAgICAgICAgICAvLyBhY2NvdW50LCBqdXN0IGtlZXAgdXNpbmcgdGhlIGxhc3Qta25vd24gdmFsdWUuXG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnROb25jZVZhbHVlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgY3VycmVudE5vbmNlVmFsdWUgPSBhd2FpdCBnZXRDdXJyZW50Tm9uY2VWYWx1ZSgpO1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICB3aGlsZSAodHJ1ZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAobm9uY2VWYWx1ZSAhPT0gY3VycmVudE5vbmNlVmFsdWUpIHtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICBfX3R5cGU6IFRyYW5zYWN0aW9uU3RhdHVzLk5PTkNFX0lOVkFMSUQsXG4gICAgICAgICAgICAgIHNsb3RJbldoaWNoTm9uY2VEaWRBZHZhbmNlOiBsYXN0Q2hlY2tlZFNsb3RcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhd2FpdCBzbGVlcCgyMDAwKTtcbiAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIGN1cnJlbnROb25jZVZhbHVlID0gYXdhaXQgZ2V0Q3VycmVudE5vbmNlVmFsdWUoKTtcbiAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KSgpO1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGFib3J0Q29uZmlybWF0aW9uLFxuICAgICAgY29uZmlybWF0aW9uUHJvbWlzZVxuICAgIH0gPSB0aGlzLmdldFRyYW5zYWN0aW9uQ29uZmlybWF0aW9uUHJvbWlzZSh7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgc2lnbmF0dXJlXG4gICAgfSk7XG4gICAgY29uc3QgY2FuY2VsbGF0aW9uUHJvbWlzZSA9IHRoaXMuZ2V0Q2FuY2VsbGF0aW9uUHJvbWlzZShhYm9ydFNpZ25hbCk7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgb3V0Y29tZSA9IGF3YWl0IFByb21pc2UucmFjZShbY2FuY2VsbGF0aW9uUHJvbWlzZSwgY29uZmlybWF0aW9uUHJvbWlzZSwgZXhwaXJ5UHJvbWlzZV0pO1xuICAgICAgaWYgKG91dGNvbWUuX190eXBlID09PSBUcmFuc2FjdGlvblN0YXR1cy5QUk9DRVNTRUQpIHtcbiAgICAgICAgcmVzdWx0ID0gb3V0Y29tZS5yZXNwb25zZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIERvdWJsZSBjaGVjayB0aGF0IHRoZSB0cmFuc2FjdGlvbiBpcyBpbmRlZWQgdW5jb25maXJtZWQuXG4gICAgICAgIGxldCBzaWduYXR1cmVTdGF0dXM7XG4gICAgICAgIHdoaWxlICh0cnVlIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IHRoaXMuZ2V0U2lnbmF0dXJlU3RhdHVzKHNpZ25hdHVyZSk7XG4gICAgICAgICAgaWYgKHN0YXR1cyA9PSBudWxsKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXR1cy5jb250ZXh0LnNsb3QgPCAob3V0Y29tZS5zbG90SW5XaGljaE5vbmNlRGlkQWR2YW5jZSA/PyBtaW5Db250ZXh0U2xvdCkpIHtcbiAgICAgICAgICAgIGF3YWl0IHNsZWVwKDQwMCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2lnbmF0dXJlU3RhdHVzID0gc3RhdHVzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaWduYXR1cmVTdGF0dXM/LnZhbHVlKSB7XG4gICAgICAgICAgY29uc3QgY29tbWl0bWVudEZvclN0YXR1cyA9IGNvbW1pdG1lbnQgfHwgJ2ZpbmFsaXplZCc7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY29uZmlybWF0aW9uU3RhdHVzXG4gICAgICAgICAgfSA9IHNpZ25hdHVyZVN0YXR1cy52YWx1ZTtcbiAgICAgICAgICBzd2l0Y2ggKGNvbW1pdG1lbnRGb3JTdGF0dXMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3Byb2Nlc3NlZCc6XG4gICAgICAgICAgICBjYXNlICdyZWNlbnQnOlxuICAgICAgICAgICAgICBpZiAoY29uZmlybWF0aW9uU3RhdHVzICE9PSAncHJvY2Vzc2VkJyAmJiBjb25maXJtYXRpb25TdGF0dXMgIT09ICdjb25maXJtZWQnICYmIGNvbmZpcm1hdGlvblN0YXR1cyAhPT0gJ2ZpbmFsaXplZCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHJhbnNhY3Rpb25FeHBpcmVkTm9uY2VJbnZhbGlkRXJyb3Ioc2lnbmF0dXJlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbmZpcm1lZCc6XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUnOlxuICAgICAgICAgICAgY2FzZSAnc2luZ2xlR29zc2lwJzpcbiAgICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvblN0YXR1cyAhPT0gJ2NvbmZpcm1lZCcgJiYgY29uZmlybWF0aW9uU3RhdHVzICE9PSAnZmluYWxpemVkJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUcmFuc2FjdGlvbkV4cGlyZWROb25jZUludmFsaWRFcnJvcihzaWduYXR1cmUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZmluYWxpemVkJzpcbiAgICAgICAgICAgIGNhc2UgJ21heCc6XG4gICAgICAgICAgICBjYXNlICdyb290JzpcbiAgICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvblN0YXR1cyAhPT0gJ2ZpbmFsaXplZCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHJhbnNhY3Rpb25FeHBpcmVkTm9uY2VJbnZhbGlkRXJyb3Ioc2lnbmF0dXJlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIC8vIEV4aGF1c3RpdmUgc3dpdGNoLlxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgICAgICAgIChfID0+IHt9KShjb21taXRtZW50Rm9yU3RhdHVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgY29udGV4dDogc2lnbmF0dXJlU3RhdHVzLmNvbnRleHQsXG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICBlcnI6IHNpZ25hdHVyZVN0YXR1cy52YWx1ZS5lcnJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUcmFuc2FjdGlvbkV4cGlyZWROb25jZUludmFsaWRFcnJvcihzaWduYXR1cmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgYWJvcnRDb25maXJtYXRpb24oKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBhc3luYyBjb25maXJtVHJhbnNhY3Rpb25Vc2luZ0xlZ2FjeVRpbWVvdXRTdHJhdGVneSh7XG4gICAgY29tbWl0bWVudCxcbiAgICBzaWduYXR1cmVcbiAgfSkge1xuICAgIGxldCB0aW1lb3V0SWQ7XG4gICAgY29uc3QgZXhwaXJ5UHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgbGV0IHRpbWVvdXRNcyA9IHRoaXMuX2NvbmZpcm1UcmFuc2FjdGlvbkluaXRpYWxUaW1lb3V0IHx8IDYwICogMTAwMDtcbiAgICAgIHN3aXRjaCAoY29tbWl0bWVudCkge1xuICAgICAgICBjYXNlICdwcm9jZXNzZWQnOlxuICAgICAgICBjYXNlICdyZWNlbnQnOlxuICAgICAgICBjYXNlICdzaW5nbGUnOlxuICAgICAgICBjYXNlICdjb25maXJtZWQnOlxuICAgICAgICBjYXNlICdzaW5nbGVHb3NzaXAnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRpbWVvdXRNcyA9IHRoaXMuX2NvbmZpcm1UcmFuc2FjdGlvbkluaXRpYWxUaW1lb3V0IHx8IDMwICogMTAwMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh7XG4gICAgICAgIF9fdHlwZTogVHJhbnNhY3Rpb25TdGF0dXMuVElNRURfT1VULFxuICAgICAgICB0aW1lb3V0TXNcbiAgICAgIH0pLCB0aW1lb3V0TXMpO1xuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGFib3J0Q29uZmlybWF0aW9uLFxuICAgICAgY29uZmlybWF0aW9uUHJvbWlzZVxuICAgIH0gPSB0aGlzLmdldFRyYW5zYWN0aW9uQ29uZmlybWF0aW9uUHJvbWlzZSh7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgc2lnbmF0dXJlXG4gICAgfSk7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgb3V0Y29tZSA9IGF3YWl0IFByb21pc2UucmFjZShbY29uZmlybWF0aW9uUHJvbWlzZSwgZXhwaXJ5UHJvbWlzZV0pO1xuICAgICAgaWYgKG91dGNvbWUuX190eXBlID09PSBUcmFuc2FjdGlvblN0YXR1cy5QUk9DRVNTRUQpIHtcbiAgICAgICAgcmVzdWx0ID0gb3V0Y29tZS5yZXNwb25zZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUcmFuc2FjdGlvbkV4cGlyZWRUaW1lb3V0RXJyb3Ioc2lnbmF0dXJlLCBvdXRjb21lLnRpbWVvdXRNcyAvIDEwMDApO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgIGFib3J0Q29uZmlybWF0aW9uKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBsaXN0IG9mIG5vZGVzIHRoYXQgYXJlIGN1cnJlbnRseSBwYXJ0aWNpcGF0aW5nIGluIHRoZSBjbHVzdGVyXG4gICAqL1xuICBhc3luYyBnZXRDbHVzdGVyTm9kZXMoKSB7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0Q2x1c3Rlck5vZGVzJywgW10pO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIGpzb25ScGNSZXN1bHQoYXJyYXkoQ29udGFjdEluZm9SZXN1bHQpKSk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgY2x1c3RlciBub2RlcycpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGxpc3Qgb2Ygbm9kZXMgdGhhdCBhcmUgY3VycmVudGx5IHBhcnRpY2lwYXRpbmcgaW4gdGhlIGNsdXN0ZXJcbiAgICovXG4gIGFzeW5jIGdldFZvdGVBY2NvdW50cyhjb21taXRtZW50KSB7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJncyhbXSwgY29tbWl0bWVudCk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0Vm90ZUFjY291bnRzJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0Vm90ZUFjY291bnRzKTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCB2b3RlIGFjY291bnRzJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBjdXJyZW50IHNsb3QgdGhhdCB0aGUgbm9kZSBpcyBwcm9jZXNzaW5nXG4gICAqL1xuICBhc3luYyBnZXRTbG90KGNvbW1pdG1lbnRPckNvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgICBjb25maWdcbiAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKGNvbW1pdG1lbnRPckNvbmZpZyk7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJncyhbXSwgY29tbWl0bWVudCwgdW5kZWZpbmVkIC8qIGVuY29kaW5nICovLCBjb25maWcpO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldFNsb3QnLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBqc29uUnBjUmVzdWx0KG51bWJlcigpKSk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgc2xvdCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCB0aGUgY3VycmVudCBzbG90IGxlYWRlciBvZiB0aGUgY2x1c3RlclxuICAgKi9cbiAgYXN5bmMgZ2V0U2xvdExlYWRlcihjb21taXRtZW50T3JDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnXG4gICAgfSA9IGV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyhjb21taXRtZW50T3JDb25maWcpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW10sIGNvbW1pdG1lbnQsIHVuZGVmaW5lZCAvKiBlbmNvZGluZyAqLywgY29uZmlnKTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRTbG90TGVhZGVyJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywganNvblJwY1Jlc3VsdChzdHJpbmcoKSkpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IHNsb3QgbGVhZGVyJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGBsaW1pdGAgbnVtYmVyIG9mIHNsb3QgbGVhZGVycyBzdGFydGluZyBmcm9tIGBzdGFydFNsb3RgXG4gICAqXG4gICAqIEBwYXJhbSBzdGFydFNsb3QgZmV0Y2ggc2xvdCBsZWFkZXJzIHN0YXJ0aW5nIGZyb20gdGhpcyBzbG90XG4gICAqIEBwYXJhbSBsaW1pdCBudW1iZXIgb2Ygc2xvdCBsZWFkZXJzIHRvIHJldHVyblxuICAgKi9cbiAgYXN5bmMgZ2V0U2xvdExlYWRlcnMoc3RhcnRTbG90LCBsaW1pdCkge1xuICAgIGNvbnN0IGFyZ3MgPSBbc3RhcnRTbG90LCBsaW1pdF07XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0U2xvdExlYWRlcnMnLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBqc29uUnBjUmVzdWx0KGFycmF5KFB1YmxpY0tleUZyb21TdHJpbmcpKSk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgc2xvdCBsZWFkZXJzJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBjdXJyZW50IHN0YXR1cyBvZiBhIHNpZ25hdHVyZVxuICAgKi9cbiAgYXN5bmMgZ2V0U2lnbmF0dXJlU3RhdHVzKHNpZ25hdHVyZSwgY29uZmlnKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29udGV4dCxcbiAgICAgIHZhbHVlOiB2YWx1ZXNcbiAgICB9ID0gYXdhaXQgdGhpcy5nZXRTaWduYXR1cmVTdGF0dXNlcyhbc2lnbmF0dXJlXSwgY29uZmlnKTtcbiAgICBhc3NlcnQodmFsdWVzLmxlbmd0aCA9PT0gMSk7XG4gICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRleHQsXG4gICAgICB2YWx1ZVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIGN1cnJlbnQgc3RhdHVzZXMgb2YgYSBiYXRjaCBvZiBzaWduYXR1cmVzXG4gICAqL1xuICBhc3luYyBnZXRTaWduYXR1cmVTdGF0dXNlcyhzaWduYXR1cmVzLCBjb25maWcpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBbc2lnbmF0dXJlc107XG4gICAgaWYgKGNvbmZpZykge1xuICAgICAgcGFyYW1zLnB1c2goY29uZmlnKTtcbiAgICB9XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0U2lnbmF0dXJlU3RhdHVzZXMnLCBwYXJhbXMpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldFNpZ25hdHVyZVN0YXR1c2VzUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBzaWduYXR1cmUgc3RhdHVzJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uIGNvdW50IG9mIHRoZSBjbHVzdGVyXG4gICAqL1xuICBhc3luYyBnZXRUcmFuc2FjdGlvbkNvdW50KGNvbW1pdG1lbnRPckNvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgICBjb25maWdcbiAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKGNvbW1pdG1lbnRPckNvbmZpZyk7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJncyhbXSwgY29tbWl0bWVudCwgdW5kZWZpbmVkIC8qIGVuY29kaW5nICovLCBjb25maWcpO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldFRyYW5zYWN0aW9uQ291bnQnLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBqc29uUnBjUmVzdWx0KG51bWJlcigpKSk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgdHJhbnNhY3Rpb24gY291bnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIGN1cnJlbnQgdG90YWwgY3VycmVuY3kgc3VwcGx5IG9mIHRoZSBjbHVzdGVyIGluIGxhbXBvcnRzXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgc2luY2UgUlBDIHYxLjIuOC4gUGxlYXNlIHVzZSB7QGxpbmsgZ2V0U3VwcGx5fSBpbnN0ZWFkLlxuICAgKi9cbiAgYXN5bmMgZ2V0VG90YWxTdXBwbHkoY29tbWl0bWVudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0U3VwcGx5KHtcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgICBleGNsdWRlTm9uQ2lyY3VsYXRpbmdBY2NvdW50c0xpc3Q6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0LnZhbHVlLnRvdGFsO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBjbHVzdGVyIEluZmxhdGlvbkdvdmVybm9yIHBhcmFtZXRlcnNcbiAgICovXG4gIGFzeW5jIGdldEluZmxhdGlvbkdvdmVybm9yKGNvbW1pdG1lbnQpIHtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzKFtdLCBjb21taXRtZW50KTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRJbmZsYXRpb25Hb3Zlcm5vcicsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldEluZmxhdGlvbkdvdmVybm9yUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBpbmZsYXRpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIGluZmxhdGlvbiByZXdhcmQgZm9yIGEgbGlzdCBvZiBhZGRyZXNzZXMgZm9yIGFuIGVwb2NoXG4gICAqL1xuICBhc3luYyBnZXRJbmZsYXRpb25SZXdhcmQoYWRkcmVzc2VzLCBlcG9jaCwgY29tbWl0bWVudE9yQ29uZmlnKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29tbWl0bWVudCxcbiAgICAgIGNvbmZpZ1xuICAgIH0gPSBleHRyYWN0Q29tbWl0bWVudEZyb21Db25maWcoY29tbWl0bWVudE9yQ29uZmlnKTtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzKFthZGRyZXNzZXMubWFwKHB1YmtleSA9PiBwdWJrZXkudG9CYXNlNTgoKSldLCBjb21taXRtZW50LCB1bmRlZmluZWQgLyogZW5jb2RpbmcgKi8sIHtcbiAgICAgIC4uLmNvbmZpZyxcbiAgICAgIGVwb2NoOiBlcG9jaCAhPSBudWxsID8gZXBvY2ggOiBjb25maWc/LmVwb2NoXG4gICAgfSk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0SW5mbGF0aW9uUmV3YXJkJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0SW5mbGF0aW9uUmV3YXJkUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBpbmZsYXRpb24gcmV3YXJkJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBzcGVjaWZpYyBpbmZsYXRpb24gdmFsdWVzIGZvciB0aGUgY3VycmVudCBlcG9jaFxuICAgKi9cbiAgYXN5bmMgZ2V0SW5mbGF0aW9uUmF0ZSgpIHtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRJbmZsYXRpb25SYXRlJywgW10pO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldEluZmxhdGlvblJhdGVScGNSZXN1bHQpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IGluZmxhdGlvbiByYXRlJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBFcG9jaCBJbmZvIHBhcmFtZXRlcnNcbiAgICovXG4gIGFzeW5jIGdldEVwb2NoSW5mbyhjb21taXRtZW50T3JDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnXG4gICAgfSA9IGV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyhjb21taXRtZW50T3JDb25maWcpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW10sIGNvbW1pdG1lbnQsIHVuZGVmaW5lZCAvKiBlbmNvZGluZyAqLywgY29uZmlnKTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRFcG9jaEluZm8nLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRFcG9jaEluZm9ScGNSZXN1bHQpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IGVwb2NoIGluZm8nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIEVwb2NoIFNjaGVkdWxlIHBhcmFtZXRlcnNcbiAgICovXG4gIGFzeW5jIGdldEVwb2NoU2NoZWR1bGUoKSB7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0RXBvY2hTY2hlZHVsZScsIFtdKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRFcG9jaFNjaGVkdWxlUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBlcG9jaCBzY2hlZHVsZScpO1xuICAgIH1cbiAgICBjb25zdCBlcG9jaFNjaGVkdWxlID0gcmVzLnJlc3VsdDtcbiAgICByZXR1cm4gbmV3IEVwb2NoU2NoZWR1bGUoZXBvY2hTY2hlZHVsZS5zbG90c1BlckVwb2NoLCBlcG9jaFNjaGVkdWxlLmxlYWRlclNjaGVkdWxlU2xvdE9mZnNldCwgZXBvY2hTY2hlZHVsZS53YXJtdXAsIGVwb2NoU2NoZWR1bGUuZmlyc3ROb3JtYWxFcG9jaCwgZXBvY2hTY2hlZHVsZS5maXJzdE5vcm1hbFNsb3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBsZWFkZXIgc2NoZWR1bGUgZm9yIHRoZSBjdXJyZW50IGVwb2NoXG4gICAqIEByZXR1cm4ge1Byb21pc2U8UnBjUmVzcG9uc2VBbmRDb250ZXh0PExlYWRlclNjaGVkdWxlPj59XG4gICAqL1xuICBhc3luYyBnZXRMZWFkZXJTY2hlZHVsZSgpIHtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRMZWFkZXJTY2hlZHVsZScsIFtdKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRMZWFkZXJTY2hlZHVsZVJwY1Jlc3VsdCk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgbGVhZGVyIHNjaGVkdWxlJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBtaW5pbXVtIGJhbGFuY2UgbmVlZGVkIHRvIGV4ZW1wdCBhbiBhY2NvdW50IG9mIGBkYXRhTGVuZ3RoYFxuICAgKiBzaXplIGZyb20gcmVudFxuICAgKi9cbiAgYXN5bmMgZ2V0TWluaW11bUJhbGFuY2VGb3JSZW50RXhlbXB0aW9uKGRhdGFMZW5ndGgsIGNvbW1pdG1lbnQpIHtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzKFtkYXRhTGVuZ3RoXSwgY29tbWl0bWVudCk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0TWluaW11bUJhbGFuY2VGb3JSZW50RXhlbXB0aW9uJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0TWluaW11bUJhbGFuY2VGb3JSZW50RXhlbXB0aW9uUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIGNvbnNvbGUud2FybignVW5hYmxlIHRvIGZldGNoIG1pbmltdW0gYmFsYW5jZSBmb3IgcmVudCBleGVtcHRpb24nKTtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhIHJlY2VudCBibG9ja2hhc2ggZnJvbSB0aGUgY2x1c3RlciwgcmV0dXJuIHdpdGggY29udGV4dFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFJwY1Jlc3BvbnNlQW5kQ29udGV4dDx7YmxvY2toYXNoOiBCbG9ja2hhc2gsIGZlZUNhbGN1bGF0b3I6IEZlZUNhbGN1bGF0b3J9Pj59XG4gICAqXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgc2luY2UgUlBDIHYxLjkuMC4gUGxlYXNlIHVzZSB7QGxpbmsgZ2V0TGF0ZXN0QmxvY2toYXNofSBpbnN0ZWFkLlxuICAgKi9cbiAgYXN5bmMgZ2V0UmVjZW50QmxvY2toYXNoQW5kQ29udGV4dChjb21taXRtZW50KSB7XG4gICAgY29uc3Qge1xuICAgICAgY29udGV4dCxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGJsb2NraGFzaFxuICAgICAgfVxuICAgIH0gPSBhd2FpdCB0aGlzLmdldExhdGVzdEJsb2NraGFzaEFuZENvbnRleHQoY29tbWl0bWVudCk7XG4gICAgY29uc3QgZmVlQ2FsY3VsYXRvciA9IHtcbiAgICAgIGdldCBsYW1wb3J0c1BlclNpZ25hdHVyZSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY2FwYWJpbGl0eSB0byBmZXRjaCBgbGFtcG9ydHNQZXJTaWduYXR1cmVgIHVzaW5nIHRoZSBgZ2V0UmVjZW50QmxvY2toYXNoYCBBUEkgaXMgJyArICdubyBsb25nZXIgb2ZmZXJlZCBieSB0aGUgbmV0d29yay4gVXNlIHRoZSBgZ2V0RmVlRm9yTWVzc2FnZWAgQVBJIHRvIG9idGFpbiB0aGUgZmVlICcgKyAnZm9yIGEgZ2l2ZW4gbWVzc2FnZS4nKTtcbiAgICAgIH0sXG4gICAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBjb250ZXh0LFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgYmxvY2toYXNoLFxuICAgICAgICBmZWVDYWxjdWxhdG9yXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCByZWNlbnQgcGVyZm9ybWFuY2Ugc2FtcGxlc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PFBlcmZTYW1wbGU+Pn1cbiAgICovXG4gIGFzeW5jIGdldFJlY2VudFBlcmZvcm1hbmNlU2FtcGxlcyhsaW1pdCkge1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldFJlY2VudFBlcmZvcm1hbmNlU2FtcGxlcycsIGxpbWl0ID8gW2xpbWl0XSA6IFtdKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRSZWNlbnRQZXJmb3JtYW5jZVNhbXBsZXNScGNSZXN1bHQpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IHJlY2VudCBwZXJmb3JtYW5jZSBzYW1wbGVzJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBmZWUgY2FsY3VsYXRvciBmb3IgYSByZWNlbnQgYmxvY2toYXNoIGZyb20gdGhlIGNsdXN0ZXIsIHJldHVybiB3aXRoIGNvbnRleHRcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBzaW5jZSBSUEMgdjEuOS4wLiBQbGVhc2UgdXNlIHtAbGluayBnZXRGZWVGb3JNZXNzYWdlfSBpbnN0ZWFkLlxuICAgKi9cbiAgYXN5bmMgZ2V0RmVlQ2FsY3VsYXRvckZvckJsb2NraGFzaChibG9ja2hhc2gsIGNvbW1pdG1lbnQpIHtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzKFtibG9ja2hhc2hdLCBjb21taXRtZW50KTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRGZWVDYWxjdWxhdG9yRm9yQmxvY2toYXNoJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0RmVlQ2FsY3VsYXRvclJwY1Jlc3VsdCk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgZmVlIGNhbGN1bGF0b3InKTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgY29udGV4dCxcbiAgICAgIHZhbHVlXG4gICAgfSA9IHJlcy5yZXN1bHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRleHQsXG4gICAgICB2YWx1ZTogdmFsdWUgIT09IG51bGwgPyB2YWx1ZS5mZWVDYWxjdWxhdG9yIDogbnVsbFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIGZlZSBmb3IgYSBtZXNzYWdlIGZyb20gdGhlIGNsdXN0ZXIsIHJldHVybiB3aXRoIGNvbnRleHRcbiAgICovXG4gIGFzeW5jIGdldEZlZUZvck1lc3NhZ2UobWVzc2FnZSwgY29tbWl0bWVudCkge1xuICAgIGNvbnN0IHdpcmVNZXNzYWdlID0gdG9CdWZmZXIobWVzc2FnZS5zZXJpYWxpemUoKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW3dpcmVNZXNzYWdlXSwgY29tbWl0bWVudCk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0RmVlRm9yTWVzc2FnZScsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIGpzb25ScGNSZXN1bHRBbmRDb250ZXh0KG51bGxhYmxlKG51bWJlcigpKSkpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IGZlZSBmb3IgbWVzc2FnZScpO1xuICAgIH1cbiAgICBpZiAocmVzLnJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGJsb2NraGFzaCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhIGxpc3Qgb2YgcHJpb3JpdGl6YXRpb24gZmVlcyBmcm9tIHJlY2VudCBibG9ja3MuXG4gICAqL1xuICBhc3luYyBnZXRSZWNlbnRQcmlvcml0aXphdGlvbkZlZXMoY29uZmlnKSB7XG4gICAgY29uc3QgYWNjb3VudHMgPSBjb25maWc/LmxvY2tlZFdyaXRhYmxlQWNjb3VudHM/Lm1hcChrZXkgPT4ga2V5LnRvQmFzZTU4KCkpO1xuICAgIGNvbnN0IGFyZ3MgPSBhY2NvdW50cz8ubGVuZ3RoID8gW2FjY291bnRzXSA6IFtdO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldFJlY2VudFByaW9yaXRpemF0aW9uRmVlcycsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldFJlY2VudFByaW9yaXRpemF0aW9uRmVlc1JwY1Jlc3VsdCk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgcmVjZW50IHByaW9yaXRpemF0aW9uIGZlZXMnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIEZldGNoIGEgcmVjZW50IGJsb2NraGFzaCBmcm9tIHRoZSBjbHVzdGVyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8e2Jsb2NraGFzaDogQmxvY2toYXNoLCBmZWVDYWxjdWxhdG9yOiBGZWVDYWxjdWxhdG9yfT59XG4gICAqXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgc2luY2UgUlBDIHYxLjguMC4gUGxlYXNlIHVzZSB7QGxpbmsgZ2V0TGF0ZXN0QmxvY2toYXNofSBpbnN0ZWFkLlxuICAgKi9cbiAgYXN5bmMgZ2V0UmVjZW50QmxvY2toYXNoKGNvbW1pdG1lbnQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5nZXRSZWNlbnRCbG9ja2hhc2hBbmRDb250ZXh0KGNvbW1pdG1lbnQpO1xuICAgICAgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBnZXQgcmVjZW50IGJsb2NraGFzaDogJyArIGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCB0aGUgbGF0ZXN0IGJsb2NraGFzaCBmcm9tIHRoZSBjbHVzdGVyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QmxvY2toYXNoV2l0aEV4cGlyeUJsb2NrSGVpZ2h0Pn1cbiAgICovXG4gIGFzeW5jIGdldExhdGVzdEJsb2NraGFzaChjb21taXRtZW50T3JDb25maWcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5nZXRMYXRlc3RCbG9ja2hhc2hBbmRDb250ZXh0KGNvbW1pdG1lbnRPckNvbmZpZyk7XG4gICAgICByZXR1cm4gcmVzLnZhbHVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZmFpbGVkIHRvIGdldCByZWNlbnQgYmxvY2toYXNoOiAnICsgZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRoZSBsYXRlc3QgYmxvY2toYXNoIGZyb20gdGhlIGNsdXN0ZXJcbiAgICogQHJldHVybiB7UHJvbWlzZTxCbG9ja2hhc2hXaXRoRXhwaXJ5QmxvY2tIZWlnaHQ+fVxuICAgKi9cbiAgYXN5bmMgZ2V0TGF0ZXN0QmxvY2toYXNoQW5kQ29udGV4dChjb21taXRtZW50T3JDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnXG4gICAgfSA9IGV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyhjb21taXRtZW50T3JDb25maWcpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW10sIGNvbW1pdG1lbnQsIHVuZGVmaW5lZCAvKiBlbmNvZGluZyAqLywgY29uZmlnKTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRMYXRlc3RCbG9ja2hhc2gnLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRMYXRlc3RCbG9ja2hhc2hScGNSZXN1bHQpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IGxhdGVzdCBibG9ja2hhc2gnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIGEgYmxvY2toYXNoIGlzIHN0aWxsIHZhbGlkIG9yIG5vdFxuICAgKi9cbiAgYXN5bmMgaXNCbG9ja2hhc2hWYWxpZChibG9ja2hhc2gsIHJhd0NvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgICBjb25maWdcbiAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKHJhd0NvbmZpZyk7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJncyhbYmxvY2toYXNoXSwgY29tbWl0bWVudCwgdW5kZWZpbmVkIC8qIGVuY29kaW5nICovLCBjb25maWcpO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2lzQmxvY2toYXNoVmFsaWQnLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBJc0Jsb2NraGFzaFZhbGlkUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGRldGVybWluZSBpZiB0aGUgYmxvY2toYXNoIGAnICsgYmxvY2toYXNoICsgJ2BpcyB2YWxpZCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCB0aGUgbm9kZSB2ZXJzaW9uXG4gICAqL1xuICBhc3luYyBnZXRWZXJzaW9uKCkge1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldFZlcnNpb24nLCBbXSk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywganNvblJwY1Jlc3VsdChWZXJzaW9uUmVzdWx0KSk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgdmVyc2lvbicpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCB0aGUgZ2VuZXNpcyBoYXNoXG4gICAqL1xuICBhc3luYyBnZXRHZW5lc2lzSGFzaCgpIHtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRHZW5lc2lzSGFzaCcsIFtdKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBqc29uUnBjUmVzdWx0KHN0cmluZygpKSk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgZ2VuZXNpcyBoYXNoJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGEgcHJvY2Vzc2VkIGJsb2NrIGZyb20gdGhlIGNsdXN0ZXIuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIEluc3RlYWQsIGNhbGwgYGdldEJsb2NrYCB1c2luZyBhIGBHZXRWZXJzaW9uZWRCbG9ja0NvbmZpZ2AgYnlcbiAgICogc2V0dGluZyB0aGUgYG1heFN1cHBvcnRlZFRyYW5zYWN0aW9uVmVyc2lvbmAgcHJvcGVydHkuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBJbnN0ZWFkLCBjYWxsIGBnZXRCbG9ja2AgdXNpbmcgYSBgR2V0VmVyc2lvbmVkQmxvY2tDb25maWdgIGJ5XG4gICAqIHNldHRpbmcgdGhlIGBtYXhTdXBwb3J0ZWRUcmFuc2FjdGlvblZlcnNpb25gIHByb3BlcnR5LlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGUtY2xhc3MtbWVtYmVyc1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBJbnN0ZWFkLCBjYWxsIGBnZXRCbG9ja2AgdXNpbmcgYSBgR2V0VmVyc2lvbmVkQmxvY2tDb25maWdgIGJ5XG4gICAqIHNldHRpbmcgdGhlIGBtYXhTdXBwb3J0ZWRUcmFuc2FjdGlvblZlcnNpb25gIHByb3BlcnR5LlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGUtY2xhc3MtbWVtYmVyc1xuXG4gIC8qKlxuICAgKiBGZXRjaCBhIHByb2Nlc3NlZCBibG9jayBmcm9tIHRoZSBjbHVzdGVyLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGUtY2xhc3MtbWVtYmVyc1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBlLWNsYXNzLW1lbWJlcnNcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZHVwZS1jbGFzcy1tZW1iZXJzXG5cbiAgLyoqXG4gICAqIEZldGNoIGEgcHJvY2Vzc2VkIGJsb2NrIGZyb20gdGhlIGNsdXN0ZXIuXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZHVwZS1jbGFzcy1tZW1iZXJzXG4gIGFzeW5jIGdldEJsb2NrKHNsb3QsIHJhd0NvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgICBjb25maWdcbiAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKHJhd0NvbmZpZyk7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJnc0F0TGVhc3RDb25maXJtZWQoW3Nsb3RdLCBjb21taXRtZW50LCB1bmRlZmluZWQgLyogZW5jb2RpbmcgKi8sIGNvbmZpZyk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0QmxvY2snLCBhcmdzKTtcbiAgICB0cnkge1xuICAgICAgc3dpdGNoIChjb25maWc/LnRyYW5zYWN0aW9uRGV0YWlscykge1xuICAgICAgICBjYXNlICdhY2NvdW50cyc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0QWNjb3VudHNNb2RlQmxvY2tScGNSZXN1bHQpO1xuICAgICAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICAgICAgICAgIHRocm93IHJlcy5lcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXMucmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnbm9uZSc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0Tm9uZU1vZGVCbG9ja1JwY1Jlc3VsdCk7XG4gICAgICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgICAgICAgdGhyb3cgcmVzLmVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldEJsb2NrUnBjUmVzdWx0KTtcbiAgICAgICAgICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgICAgICAgICB0aHJvdyByZXMuZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICAgfSA9IHJlcztcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgPyB7XG4gICAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zOiByZXN1bHQudHJhbnNhY3Rpb25zLm1hcCgoe1xuICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgIG1ldGEsXG4gICAgICAgICAgICAgICAgdmVyc2lvblxuICAgICAgICAgICAgICB9KSA9PiAoe1xuICAgICAgICAgICAgICAgIG1ldGEsXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgIC4uLnRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogdmVyc2lvbmVkTWVzc2FnZUZyb21SZXNwb25zZSh2ZXJzaW9uLCB0cmFuc2FjdGlvbi5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmVyc2lvblxuICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH0gOiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKGUsICdmYWlsZWQgdG8gZ2V0IGNvbmZpcm1lZCBibG9jaycpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBwYXJzZWQgdHJhbnNhY3Rpb24gZGV0YWlscyBmb3IgYSBjb25maXJtZWQgb3IgZmluYWxpemVkIGJsb2NrXG4gICAqL1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBlLWNsYXNzLW1lbWJlcnNcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZHVwZS1jbGFzcy1tZW1iZXJzXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGUtY2xhc3MtbWVtYmVyc1xuICBhc3luYyBnZXRQYXJzZWRCbG9jayhzbG90LCByYXdDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnXG4gICAgfSA9IGV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyhyYXdDb25maWcpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3NBdExlYXN0Q29uZmlybWVkKFtzbG90XSwgY29tbWl0bWVudCwgJ2pzb25QYXJzZWQnLCBjb25maWcpO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldEJsb2NrJywgYXJncyk7XG4gICAgdHJ5IHtcbiAgICAgIHN3aXRjaCAoY29uZmlnPy50cmFuc2FjdGlvbkRldGFpbHMpIHtcbiAgICAgICAgY2FzZSAnYWNjb3VudHMnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldFBhcnNlZEFjY291bnRzTW9kZUJsb2NrUnBjUmVzdWx0KTtcbiAgICAgICAgICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgICAgICAgICB0aHJvdyByZXMuZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ25vbmUnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldFBhcnNlZE5vbmVNb2RlQmxvY2tScGNSZXN1bHQpO1xuICAgICAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICAgICAgICAgIHRocm93IHJlcy5lcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXMucmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRQYXJzZWRCbG9ja1JwY1Jlc3VsdCk7XG4gICAgICAgICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgICAgICAgdGhyb3cgcmVzLmVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IoZSwgJ2ZhaWxlZCB0byBnZXQgYmxvY2snKTtcbiAgICB9XG4gIH1cbiAgLypcbiAgICogUmV0dXJucyByZWNlbnQgYmxvY2sgcHJvZHVjdGlvbiBpbmZvcm1hdGlvbiBmcm9tIHRoZSBjdXJyZW50IG9yIHByZXZpb3VzIGVwb2NoXG4gICAqL1xuICBhc3luYyBnZXRCbG9ja1Byb2R1Y3Rpb24oY29uZmlnT3JDb21taXRtZW50KSB7XG4gICAgbGV0IGV4dHJhO1xuICAgIGxldCBjb21taXRtZW50O1xuICAgIGlmICh0eXBlb2YgY29uZmlnT3JDb21taXRtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29tbWl0bWVudCA9IGNvbmZpZ09yQ29tbWl0bWVudDtcbiAgICB9IGVsc2UgaWYgKGNvbmZpZ09yQ29tbWl0bWVudCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjb21taXRtZW50OiBjLFxuICAgICAgICAuLi5yZXN0XG4gICAgICB9ID0gY29uZmlnT3JDb21taXRtZW50O1xuICAgICAgY29tbWl0bWVudCA9IGM7XG4gICAgICBleHRyYSA9IHJlc3Q7XG4gICAgfVxuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW10sIGNvbW1pdG1lbnQsICdiYXNlNjQnLCBleHRyYSk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0QmxvY2tQcm9kdWN0aW9uJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgQmxvY2tQcm9kdWN0aW9uUmVzcG9uc2VTdHJ1Y3QpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IGJsb2NrIHByb2R1Y3Rpb24gaW5mb3JtYXRpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYSBjb25maXJtZWQgb3IgZmluYWxpemVkIHRyYW5zYWN0aW9uIGZyb20gdGhlIGNsdXN0ZXIuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIEluc3RlYWQsIGNhbGwgYGdldFRyYW5zYWN0aW9uYCB1c2luZyBhXG4gICAqIGBHZXRWZXJzaW9uZWRUcmFuc2FjdGlvbkNvbmZpZ2AgYnkgc2V0dGluZyB0aGVcbiAgICogYG1heFN1cHBvcnRlZFRyYW5zYWN0aW9uVmVyc2lvbmAgcHJvcGVydHkuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBGZXRjaCBhIGNvbmZpcm1lZCBvciBmaW5hbGl6ZWQgdHJhbnNhY3Rpb24gZnJvbSB0aGUgY2x1c3Rlci5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBlLWNsYXNzLW1lbWJlcnNcblxuICAvKipcbiAgICogRmV0Y2ggYSBjb25maXJtZWQgb3IgZmluYWxpemVkIHRyYW5zYWN0aW9uIGZyb20gdGhlIGNsdXN0ZXIuXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZHVwZS1jbGFzcy1tZW1iZXJzXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9uKHNpZ25hdHVyZSwgcmF3Q29uZmlnKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29tbWl0bWVudCxcbiAgICAgIGNvbmZpZ1xuICAgIH0gPSBleHRyYWN0Q29tbWl0bWVudEZyb21Db25maWcocmF3Q29uZmlnKTtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzQXRMZWFzdENvbmZpcm1lZChbc2lnbmF0dXJlXSwgY29tbWl0bWVudCwgdW5kZWZpbmVkIC8qIGVuY29kaW5nICovLCBjb25maWcpO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldFRyYW5zYWN0aW9uJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0VHJhbnNhY3Rpb25ScGNSZXN1bHQpO1xuICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IHRyYW5zYWN0aW9uJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHJlcy5yZXN1bHQ7XG4gICAgaWYgKCFyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlc3VsdCxcbiAgICAgIHRyYW5zYWN0aW9uOiB7XG4gICAgICAgIC4uLnJlc3VsdC50cmFuc2FjdGlvbixcbiAgICAgICAgbWVzc2FnZTogdmVyc2lvbmVkTWVzc2FnZUZyb21SZXNwb25zZShyZXN1bHQudmVyc2lvbiwgcmVzdWx0LnRyYW5zYWN0aW9uLm1lc3NhZ2UpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBwYXJzZWQgdHJhbnNhY3Rpb24gZGV0YWlscyBmb3IgYSBjb25maXJtZWQgb3IgZmluYWxpemVkIHRyYW5zYWN0aW9uXG4gICAqL1xuICBhc3luYyBnZXRQYXJzZWRUcmFuc2FjdGlvbihzaWduYXR1cmUsIGNvbW1pdG1lbnRPckNvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgICBjb25maWdcbiAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKGNvbW1pdG1lbnRPckNvbmZpZyk7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJnc0F0TGVhc3RDb25maXJtZWQoW3NpZ25hdHVyZV0sIGNvbW1pdG1lbnQsICdqc29uUGFyc2VkJywgY29uZmlnKTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRUcmFuc2FjdGlvbicsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldFBhcnNlZFRyYW5zYWN0aW9uUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCB0cmFuc2FjdGlvbicpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBwYXJzZWQgdHJhbnNhY3Rpb24gZGV0YWlscyBmb3IgYSBiYXRjaCBvZiBjb25maXJtZWQgdHJhbnNhY3Rpb25zXG4gICAqL1xuICBhc3luYyBnZXRQYXJzZWRUcmFuc2FjdGlvbnMoc2lnbmF0dXJlcywgY29tbWl0bWVudE9yQ29uZmlnKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29tbWl0bWVudCxcbiAgICAgIGNvbmZpZ1xuICAgIH0gPSBleHRyYWN0Q29tbWl0bWVudEZyb21Db25maWcoY29tbWl0bWVudE9yQ29uZmlnKTtcbiAgICBjb25zdCBiYXRjaCA9IHNpZ25hdHVyZXMubWFwKHNpZ25hdHVyZSA9PiB7XG4gICAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzQXRMZWFzdENvbmZpcm1lZChbc2lnbmF0dXJlXSwgY29tbWl0bWVudCwgJ2pzb25QYXJzZWQnLCBjb25maWcpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWV0aG9kTmFtZTogJ2dldFRyYW5zYWN0aW9uJyxcbiAgICAgICAgYXJnc1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNCYXRjaFJlcXVlc3QoYmF0Y2gpO1xuICAgIGNvbnN0IHJlcyA9IHVuc2FmZVJlcy5tYXAodW5zYWZlUmVzID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldFBhcnNlZFRyYW5zYWN0aW9uUnBjUmVzdWx0KTtcbiAgICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgdHJhbnNhY3Rpb25zJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHRyYW5zYWN0aW9uIGRldGFpbHMgZm9yIGEgYmF0Y2ggb2YgY29uZmlybWVkIHRyYW5zYWN0aW9ucy5cbiAgICogU2ltaWxhciB0byB7QGxpbmsgZ2V0UGFyc2VkVHJhbnNhY3Rpb25zfSBidXQgcmV0dXJucyBhIHtAbGluayBUcmFuc2FjdGlvblJlc3BvbnNlfS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgSW5zdGVhZCwgY2FsbCBgZ2V0VHJhbnNhY3Rpb25zYCB1c2luZyBhXG4gICAqIGBHZXRWZXJzaW9uZWRUcmFuc2FjdGlvbkNvbmZpZ2AgYnkgc2V0dGluZyB0aGVcbiAgICogYG1heFN1cHBvcnRlZFRyYW5zYWN0aW9uVmVyc2lvbmAgcHJvcGVydHkuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBGZXRjaCB0cmFuc2FjdGlvbiBkZXRhaWxzIGZvciBhIGJhdGNoIG9mIGNvbmZpcm1lZCB0cmFuc2FjdGlvbnMuXG4gICAqIFNpbWlsYXIgdG8ge0BsaW5rIGdldFBhcnNlZFRyYW5zYWN0aW9uc30gYnV0IHJldHVybnMgYSB7QGxpbmtcbiAgICogVmVyc2lvbmVkVHJhbnNhY3Rpb25SZXNwb25zZX0uXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZHVwZS1jbGFzcy1tZW1iZXJzXG5cbiAgLyoqXG4gICAqIEZldGNoIHRyYW5zYWN0aW9uIGRldGFpbHMgZm9yIGEgYmF0Y2ggb2YgY29uZmlybWVkIHRyYW5zYWN0aW9ucy5cbiAgICogU2ltaWxhciB0byB7QGxpbmsgZ2V0UGFyc2VkVHJhbnNhY3Rpb25zfSBidXQgcmV0dXJucyBhIHtAbGlua1xuICAgKiBWZXJzaW9uZWRUcmFuc2FjdGlvblJlc3BvbnNlfS5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBlLWNsYXNzLW1lbWJlcnNcbiAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25zKHNpZ25hdHVyZXMsIGNvbW1pdG1lbnRPckNvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgICBjb25maWdcbiAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKGNvbW1pdG1lbnRPckNvbmZpZyk7XG4gICAgY29uc3QgYmF0Y2ggPSBzaWduYXR1cmVzLm1hcChzaWduYXR1cmUgPT4ge1xuICAgICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJnc0F0TGVhc3RDb25maXJtZWQoW3NpZ25hdHVyZV0sIGNvbW1pdG1lbnQsIHVuZGVmaW5lZCAvKiBlbmNvZGluZyAqLywgY29uZmlnKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1ldGhvZE5hbWU6ICdnZXRUcmFuc2FjdGlvbicsXG4gICAgICAgIGFyZ3NcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjQmF0Y2hSZXF1ZXN0KGJhdGNoKTtcbiAgICBjb25zdCByZXMgPSB1bnNhZmVSZXMubWFwKHVuc2FmZVJlcyA9PiB7XG4gICAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRUcmFuc2FjdGlvblJwY1Jlc3VsdCk7XG4gICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNvbGFuYUpTT05SUENFcnJvcihyZXMuZXJyb3IsICdmYWlsZWQgdG8gZ2V0IHRyYW5zYWN0aW9ucycpO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdWx0ID0gcmVzLnJlc3VsdDtcbiAgICAgIGlmICghcmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICB0cmFuc2FjdGlvbjoge1xuICAgICAgICAgIC4uLnJlc3VsdC50cmFuc2FjdGlvbixcbiAgICAgICAgICBtZXNzYWdlOiB2ZXJzaW9uZWRNZXNzYWdlRnJvbVJlc3BvbnNlKHJlc3VsdC52ZXJzaW9uLCByZXN1bHQudHJhbnNhY3Rpb24ubWVzc2FnZSlcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGEgbGlzdCBvZiBUcmFuc2FjdGlvbnMgYW5kIHRyYW5zYWN0aW9uIHN0YXR1c2VzIGZyb20gdGhlIGNsdXN0ZXJcbiAgICogZm9yIGEgY29uZmlybWVkIGJsb2NrLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIHNpbmNlIFJQQyB2MS43LjAuIFBsZWFzZSB1c2Uge0BsaW5rIGdldEJsb2NrfSBpbnN0ZWFkLlxuICAgKi9cbiAgYXN5bmMgZ2V0Q29uZmlybWVkQmxvY2soc2xvdCwgY29tbWl0bWVudCkge1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3NBdExlYXN0Q29uZmlybWVkKFtzbG90XSwgY29tbWl0bWVudCk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0QmxvY2snLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRDb25maXJtZWRCbG9ja1JwY1Jlc3VsdCk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgY29uZmlybWVkIGJsb2NrJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IHJlcy5yZXN1bHQ7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29uZmlybWVkIGJsb2NrICcgKyBzbG90ICsgJyBub3QgZm91bmQnKTtcbiAgICB9XG4gICAgY29uc3QgYmxvY2sgPSB7XG4gICAgICAuLi5yZXN1bHQsXG4gICAgICB0cmFuc2FjdGlvbnM6IHJlc3VsdC50cmFuc2FjdGlvbnMubWFwKCh7XG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICBtZXRhXG4gICAgICB9KSA9PiB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgTWVzc2FnZSh0cmFuc2FjdGlvbi5tZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtZXRhLFxuICAgICAgICAgIHRyYW5zYWN0aW9uOiB7XG4gICAgICAgICAgICAuLi50cmFuc2FjdGlvbixcbiAgICAgICAgICAgIG1lc3NhZ2VcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmJsb2NrLFxuICAgICAgdHJhbnNhY3Rpb25zOiBibG9jay50cmFuc2FjdGlvbnMubWFwKCh7XG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICBtZXRhXG4gICAgICB9KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWV0YSxcbiAgICAgICAgICB0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24ucG9wdWxhdGUodHJhbnNhY3Rpb24ubWVzc2FnZSwgdHJhbnNhY3Rpb24uc2lnbmF0dXJlcylcbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBjb25maXJtZWQgYmxvY2tzIGJldHdlZW4gdHdvIHNsb3RzXG4gICAqL1xuICBhc3luYyBnZXRCbG9ja3Moc3RhcnRTbG90LCBlbmRTbG90LCBjb21taXRtZW50KSB7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJnc0F0TGVhc3RDb25maXJtZWQoZW5kU2xvdCAhPT0gdW5kZWZpbmVkID8gW3N0YXJ0U2xvdCwgZW5kU2xvdF0gOiBbc3RhcnRTbG90XSwgY29tbWl0bWVudCk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0QmxvY2tzJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywganNvblJwY1Jlc3VsdChhcnJheShudW1iZXIoKSkpKTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBibG9ja3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYSBsaXN0IG9mIFNpZ25hdHVyZXMgZnJvbSB0aGUgY2x1c3RlciBmb3IgYSBibG9jaywgZXhjbHVkaW5nIHJld2FyZHNcbiAgICovXG4gIGFzeW5jIGdldEJsb2NrU2lnbmF0dXJlcyhzbG90LCBjb21taXRtZW50KSB7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJnc0F0TGVhc3RDb25maXJtZWQoW3Nsb3RdLCBjb21taXRtZW50LCB1bmRlZmluZWQsIHtcbiAgICAgIHRyYW5zYWN0aW9uRGV0YWlsczogJ3NpZ25hdHVyZXMnLFxuICAgICAgcmV3YXJkczogZmFsc2VcbiAgICB9KTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRCbG9jaycsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldEJsb2NrU2lnbmF0dXJlc1JwY1Jlc3VsdCk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgYmxvY2snKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gcmVzLnJlc3VsdDtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCbG9jayAnICsgc2xvdCArICcgbm90IGZvdW5kJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYSBsaXN0IG9mIFNpZ25hdHVyZXMgZnJvbSB0aGUgY2x1c3RlciBmb3IgYSBjb25maXJtZWQgYmxvY2ssIGV4Y2x1ZGluZyByZXdhcmRzXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgc2luY2UgUlBDIHYxLjcuMC4gUGxlYXNlIHVzZSB7QGxpbmsgZ2V0QmxvY2tTaWduYXR1cmVzfSBpbnN0ZWFkLlxuICAgKi9cbiAgYXN5bmMgZ2V0Q29uZmlybWVkQmxvY2tTaWduYXR1cmVzKHNsb3QsIGNvbW1pdG1lbnQpIHtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzQXRMZWFzdENvbmZpcm1lZChbc2xvdF0sIGNvbW1pdG1lbnQsIHVuZGVmaW5lZCwge1xuICAgICAgdHJhbnNhY3Rpb25EZXRhaWxzOiAnc2lnbmF0dXJlcycsXG4gICAgICByZXdhcmRzOiBmYWxzZVxuICAgIH0pO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ2dldEJsb2NrJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0QmxvY2tTaWduYXR1cmVzUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBjb25maXJtZWQgYmxvY2snKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gcmVzLnJlc3VsdDtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb25maXJtZWQgYmxvY2sgJyArIHNsb3QgKyAnIG5vdCBmb3VuZCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGEgdHJhbnNhY3Rpb24gZGV0YWlscyBmb3IgYSBjb25maXJtZWQgdHJhbnNhY3Rpb25cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBzaW5jZSBSUEMgdjEuNy4wLiBQbGVhc2UgdXNlIHtAbGluayBnZXRUcmFuc2FjdGlvbn0gaW5zdGVhZC5cbiAgICovXG4gIGFzeW5jIGdldENvbmZpcm1lZFRyYW5zYWN0aW9uKHNpZ25hdHVyZSwgY29tbWl0bWVudCkge1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3NBdExlYXN0Q29uZmlybWVkKFtzaWduYXR1cmVdLCBjb21taXRtZW50KTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRUcmFuc2FjdGlvbicsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldFRyYW5zYWN0aW9uUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCB0cmFuc2FjdGlvbicpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSByZXMucmVzdWx0O1xuICAgIGlmICghcmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgTWVzc2FnZShyZXN1bHQudHJhbnNhY3Rpb24ubWVzc2FnZSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlcyA9IHJlc3VsdC50cmFuc2FjdGlvbi5zaWduYXR1cmVzO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXN1bHQsXG4gICAgICB0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb24ucG9wdWxhdGUobWVzc2FnZSwgc2lnbmF0dXJlcylcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHBhcnNlZCB0cmFuc2FjdGlvbiBkZXRhaWxzIGZvciBhIGNvbmZpcm1lZCB0cmFuc2FjdGlvblxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIHNpbmNlIFJQQyB2MS43LjAuIFBsZWFzZSB1c2Uge0BsaW5rIGdldFBhcnNlZFRyYW5zYWN0aW9ufSBpbnN0ZWFkLlxuICAgKi9cbiAgYXN5bmMgZ2V0UGFyc2VkQ29uZmlybWVkVHJhbnNhY3Rpb24oc2lnbmF0dXJlLCBjb21taXRtZW50KSB7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJnc0F0TGVhc3RDb25maXJtZWQoW3NpZ25hdHVyZV0sIGNvbW1pdG1lbnQsICdqc29uUGFyc2VkJyk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0VHJhbnNhY3Rpb24nLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBHZXRQYXJzZWRUcmFuc2FjdGlvblJwY1Jlc3VsdCk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgY29uZmlybWVkIHRyYW5zYWN0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIHBhcnNlZCB0cmFuc2FjdGlvbiBkZXRhaWxzIGZvciBhIGJhdGNoIG9mIGNvbmZpcm1lZCB0cmFuc2FjdGlvbnNcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBzaW5jZSBSUEMgdjEuNy4wLiBQbGVhc2UgdXNlIHtAbGluayBnZXRQYXJzZWRUcmFuc2FjdGlvbnN9IGluc3RlYWQuXG4gICAqL1xuICBhc3luYyBnZXRQYXJzZWRDb25maXJtZWRUcmFuc2FjdGlvbnMoc2lnbmF0dXJlcywgY29tbWl0bWVudCkge1xuICAgIGNvbnN0IGJhdGNoID0gc2lnbmF0dXJlcy5tYXAoc2lnbmF0dXJlID0+IHtcbiAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3NBdExlYXN0Q29uZmlybWVkKFtzaWduYXR1cmVdLCBjb21taXRtZW50LCAnanNvblBhcnNlZCcpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWV0aG9kTmFtZTogJ2dldFRyYW5zYWN0aW9uJyxcbiAgICAgICAgYXJnc1xuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNCYXRjaFJlcXVlc3QoYmF0Y2gpO1xuICAgIGNvbnN0IHJlcyA9IHVuc2FmZVJlcy5tYXAodW5zYWZlUmVzID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldFBhcnNlZFRyYW5zYWN0aW9uUnBjUmVzdWx0KTtcbiAgICAgIGlmICgnZXJyb3InIGluIHJlcykge1xuICAgICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgJ2ZhaWxlZCB0byBnZXQgY29uZmlybWVkIHRyYW5zYWN0aW9ucycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhIGxpc3Qgb2YgYWxsIHRoZSBjb25maXJtZWQgc2lnbmF0dXJlcyBmb3IgdHJhbnNhY3Rpb25zIGludm9sdmluZyBhbiBhZGRyZXNzXG4gICAqIHdpdGhpbiBhIHNwZWNpZmllZCBzbG90IHJhbmdlLiBNYXggcmFuZ2UgYWxsb3dlZCBpcyAxMCwwMDAgc2xvdHMuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgc2luY2UgUlBDIHYxLjMuIFBsZWFzZSB1c2Uge0BsaW5rIGdldENvbmZpcm1lZFNpZ25hdHVyZXNGb3JBZGRyZXNzMn0gaW5zdGVhZC5cbiAgICpcbiAgICogQHBhcmFtIGFkZHJlc3MgcXVlcmllZCBhZGRyZXNzXG4gICAqIEBwYXJhbSBzdGFydFNsb3Qgc3RhcnQgc2xvdCwgaW5jbHVzaXZlXG4gICAqIEBwYXJhbSBlbmRTbG90IGVuZCBzbG90LCBpbmNsdXNpdmVcbiAgICovXG4gIGFzeW5jIGdldENvbmZpcm1lZFNpZ25hdHVyZXNGb3JBZGRyZXNzKGFkZHJlc3MsIHN0YXJ0U2xvdCwgZW5kU2xvdCkge1xuICAgIGxldCBvcHRpb25zID0ge307XG4gICAgbGV0IGZpcnN0QXZhaWxhYmxlQmxvY2sgPSBhd2FpdCB0aGlzLmdldEZpcnN0QXZhaWxhYmxlQmxvY2soKTtcbiAgICB3aGlsZSAoISgndW50aWwnIGluIG9wdGlvbnMpKSB7XG4gICAgICBzdGFydFNsb3QtLTtcbiAgICAgIGlmIChzdGFydFNsb3QgPD0gMCB8fCBzdGFydFNsb3QgPCBmaXJzdEF2YWlsYWJsZUJsb2NrKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSBhd2FpdCB0aGlzLmdldENvbmZpcm1lZEJsb2NrU2lnbmF0dXJlcyhzdGFydFNsb3QsICdmaW5hbGl6ZWQnKTtcbiAgICAgICAgaWYgKGJsb2NrLnNpZ25hdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIG9wdGlvbnMudW50aWwgPSBibG9jay5zaWduYXR1cmVzW2Jsb2NrLnNpZ25hdHVyZXMubGVuZ3RoIC0gMV0udG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnIubWVzc2FnZS5pbmNsdWRlcygnc2tpcHBlZCcpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBoaWdoZXN0Q29uZmlybWVkUm9vdCA9IGF3YWl0IHRoaXMuZ2V0U2xvdCgnZmluYWxpemVkJyk7XG4gICAgd2hpbGUgKCEoJ2JlZm9yZScgaW4gb3B0aW9ucykpIHtcbiAgICAgIGVuZFNsb3QrKztcbiAgICAgIGlmIChlbmRTbG90ID4gaGlnaGVzdENvbmZpcm1lZFJvb3QpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBibG9jayA9IGF3YWl0IHRoaXMuZ2V0Q29uZmlybWVkQmxvY2tTaWduYXR1cmVzKGVuZFNsb3QpO1xuICAgICAgICBpZiAoYmxvY2suc2lnbmF0dXJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgb3B0aW9ucy5iZWZvcmUgPSBibG9jay5zaWduYXR1cmVzW2Jsb2NrLnNpZ25hdHVyZXMubGVuZ3RoIC0gMV0udG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnIubWVzc2FnZS5pbmNsdWRlcygnc2tpcHBlZCcpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNvbmZpcm1lZFNpZ25hdHVyZUluZm8gPSBhd2FpdCB0aGlzLmdldENvbmZpcm1lZFNpZ25hdHVyZXNGb3JBZGRyZXNzMihhZGRyZXNzLCBvcHRpb25zKTtcbiAgICByZXR1cm4gY29uZmlybWVkU2lnbmF0dXJlSW5mby5tYXAoaW5mbyA9PiBpbmZvLnNpZ25hdHVyZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjb25maXJtZWQgc2lnbmF0dXJlcyBmb3IgdHJhbnNhY3Rpb25zIGludm9sdmluZyBhblxuICAgKiBhZGRyZXNzIGJhY2t3YXJkcyBpbiB0aW1lIGZyb20gdGhlIHByb3ZpZGVkIHNpZ25hdHVyZSBvciBtb3N0IHJlY2VudCBjb25maXJtZWQgYmxvY2tcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBzaW5jZSBSUEMgdjEuNy4wLiBQbGVhc2UgdXNlIHtAbGluayBnZXRTaWduYXR1cmVzRm9yQWRkcmVzc30gaW5zdGVhZC5cbiAgICovXG4gIGFzeW5jIGdldENvbmZpcm1lZFNpZ25hdHVyZXNGb3JBZGRyZXNzMihhZGRyZXNzLCBvcHRpb25zLCBjb21taXRtZW50KSB7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJnc0F0TGVhc3RDb25maXJtZWQoW2FkZHJlc3MudG9CYXNlNTgoKV0sIGNvbW1pdG1lbnQsIHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0Q29uZmlybWVkU2lnbmF0dXJlc0ZvckFkZHJlc3MyJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgR2V0Q29uZmlybWVkU2lnbmF0dXJlc0ZvckFkZHJlc3MyUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBjb25maXJtZWQgc2lnbmF0dXJlcyBmb3IgYWRkcmVzcycpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGNvbmZpcm1lZCBzaWduYXR1cmVzIGZvciB0cmFuc2FjdGlvbnMgaW52b2x2aW5nIGFuXG4gICAqIGFkZHJlc3MgYmFja3dhcmRzIGluIHRpbWUgZnJvbSB0aGUgcHJvdmlkZWQgc2lnbmF0dXJlIG9yIG1vc3QgcmVjZW50IGNvbmZpcm1lZCBibG9ja1xuICAgKlxuICAgKlxuICAgKiBAcGFyYW0gYWRkcmVzcyBxdWVyaWVkIGFkZHJlc3NcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIGdldFNpZ25hdHVyZXNGb3JBZGRyZXNzKGFkZHJlc3MsIG9wdGlvbnMsIGNvbW1pdG1lbnQpIHtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzQXRMZWFzdENvbmZpcm1lZChbYWRkcmVzcy50b0Jhc2U1OCgpXSwgY29tbWl0bWVudCwgdW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdnZXRTaWduYXR1cmVzRm9yQWRkcmVzcycsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIEdldFNpZ25hdHVyZXNGb3JBZGRyZXNzUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCAnZmFpbGVkIHRvIGdldCBzaWduYXR1cmVzIGZvciBhZGRyZXNzJyk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG4gIGFzeW5jIGdldEFkZHJlc3NMb29rdXBUYWJsZShhY2NvdW50S2V5LCBjb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb250ZXh0LFxuICAgICAgdmFsdWU6IGFjY291bnRJbmZvXG4gICAgfSA9IGF3YWl0IHRoaXMuZ2V0QWNjb3VudEluZm9BbmRDb250ZXh0KGFjY291bnRLZXksIGNvbmZpZyk7XG4gICAgbGV0IHZhbHVlID0gbnVsbDtcbiAgICBpZiAoYWNjb3VudEluZm8gIT09IG51bGwpIHtcbiAgICAgIHZhbHVlID0gbmV3IEFkZHJlc3NMb29rdXBUYWJsZUFjY291bnQoe1xuICAgICAgICBrZXk6IGFjY291bnRLZXksXG4gICAgICAgIHN0YXRlOiBBZGRyZXNzTG9va3VwVGFibGVBY2NvdW50LmRlc2VyaWFsaXplKGFjY291bnRJbmZvLmRhdGEpXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRleHQsXG4gICAgICB2YWx1ZVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggdGhlIGNvbnRlbnRzIG9mIGEgTm9uY2UgYWNjb3VudCBmcm9tIHRoZSBjbHVzdGVyLCByZXR1cm4gd2l0aCBjb250ZXh0XG4gICAqL1xuICBhc3luYyBnZXROb25jZUFuZENvbnRleHQobm9uY2VBY2NvdW50LCBjb21taXRtZW50T3JDb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb250ZXh0LFxuICAgICAgdmFsdWU6IGFjY291bnRJbmZvXG4gICAgfSA9IGF3YWl0IHRoaXMuZ2V0QWNjb3VudEluZm9BbmRDb250ZXh0KG5vbmNlQWNjb3VudCwgY29tbWl0bWVudE9yQ29uZmlnKTtcbiAgICBsZXQgdmFsdWUgPSBudWxsO1xuICAgIGlmIChhY2NvdW50SW5mbyAhPT0gbnVsbCkge1xuICAgICAgdmFsdWUgPSBOb25jZUFjY291bnQuZnJvbUFjY291bnREYXRhKGFjY291bnRJbmZvLmRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY29udGV4dCxcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCB0aGUgY29udGVudHMgb2YgYSBOb25jZSBhY2NvdW50IGZyb20gdGhlIGNsdXN0ZXJcbiAgICovXG4gIGFzeW5jIGdldE5vbmNlKG5vbmNlQWNjb3VudCwgY29tbWl0bWVudE9yQ29uZmlnKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0Tm9uY2VBbmRDb250ZXh0KG5vbmNlQWNjb3VudCwgY29tbWl0bWVudE9yQ29uZmlnKS50aGVuKHggPT4geC52YWx1ZSkuY2F0Y2goZSA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWxlZCB0byBnZXQgbm9uY2UgZm9yIGFjY291bnQgJyArIG5vbmNlQWNjb3VudC50b0Jhc2U1OCgpICsgJzogJyArIGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgYW4gYWxsb2NhdGlvbiBvZiBsYW1wb3J0cyB0byB0aGUgc3BlY2lmaWVkIGFkZHJlc3NcbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBpbXBvcnQgeyBDb25uZWN0aW9uLCBQdWJsaWNLZXksIExBTVBPUlRTX1BFUl9TT0wgfSBmcm9tIFwiQHNvbGFuYS93ZWIzLmpzXCI7XG4gICAqXG4gICAqIChhc3luYyAoKSA9PiB7XG4gICAqICAgY29uc3QgY29ubmVjdGlvbiA9IG5ldyBDb25uZWN0aW9uKFwiaHR0cHM6Ly9hcGkudGVzdG5ldC5zb2xhbmEuY29tXCIsIFwiY29uZmlybWVkXCIpO1xuICAgKiAgIGNvbnN0IG15QWRkcmVzcyA9IG5ldyBQdWJsaWNLZXkoXCIybnIxYkhGVDg2Vzl0R255dm1ZVzR2Y0hLc1FCM3NWUWZuZGRhc3o0a0V4TVwiKTtcbiAgICogICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBjb25uZWN0aW9uLnJlcXVlc3RBaXJkcm9wKG15QWRkcmVzcywgTEFNUE9SVFNfUEVSX1NPTCk7XG4gICAqICAgYXdhaXQgY29ubmVjdGlvbi5jb25maXJtVHJhbnNhY3Rpb24oc2lnbmF0dXJlKTtcbiAgICogfSkoKTtcbiAgICogYGBgXG4gICAqL1xuICBhc3luYyByZXF1ZXN0QWlyZHJvcCh0bywgbGFtcG9ydHMpIHtcbiAgICBjb25zdCB1bnNhZmVSZXMgPSBhd2FpdCB0aGlzLl9ycGNSZXF1ZXN0KCdyZXF1ZXN0QWlyZHJvcCcsIFt0by50b0Jhc2U1OCgpLCBsYW1wb3J0c10pO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIFJlcXVlc3RBaXJkcm9wUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIHRocm93IG5ldyBTb2xhbmFKU09OUlBDRXJyb3IocmVzLmVycm9yLCBgYWlyZHJvcCB0byAke3RvLnRvQmFzZTU4KCl9IGZhaWxlZGApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIF9ibG9ja2hhc2hXaXRoRXhwaXJ5QmxvY2tIZWlnaHQoZGlzYWJsZUNhY2hlKSB7XG4gICAgaWYgKCFkaXNhYmxlQ2FjaGUpIHtcbiAgICAgIC8vIFdhaXQgZm9yIHBvbGxpbmcgdG8gZmluaXNoXG4gICAgICB3aGlsZSAodGhpcy5fcG9sbGluZ0Jsb2NraGFzaCkge1xuICAgICAgICBhd2FpdCBzbGVlcCgxMDApO1xuICAgICAgfVxuICAgICAgY29uc3QgdGltZVNpbmNlRmV0Y2ggPSBEYXRlLm5vdygpIC0gdGhpcy5fYmxvY2toYXNoSW5mby5sYXN0RmV0Y2g7XG4gICAgICBjb25zdCBleHBpcmVkID0gdGltZVNpbmNlRmV0Y2ggPj0gQkxPQ0tIQVNIX0NBQ0hFX1RJTUVPVVRfTVM7XG4gICAgICBpZiAodGhpcy5fYmxvY2toYXNoSW5mby5sYXRlc3RCbG9ja2hhc2ggIT09IG51bGwgJiYgIWV4cGlyZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NraGFzaEluZm8ubGF0ZXN0QmxvY2toYXNoO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fcG9sbE5ld0Jsb2NraGFzaCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYXN5bmMgX3BvbGxOZXdCbG9ja2hhc2goKSB7XG4gICAgdGhpcy5fcG9sbGluZ0Jsb2NraGFzaCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCBjYWNoZWRMYXRlc3RCbG9ja2hhc2ggPSB0aGlzLl9ibG9ja2hhc2hJbmZvLmxhdGVzdEJsb2NraGFzaDtcbiAgICAgIGNvbnN0IGNhY2hlZEJsb2NraGFzaCA9IGNhY2hlZExhdGVzdEJsb2NraGFzaCA/IGNhY2hlZExhdGVzdEJsb2NraGFzaC5ibG9ja2hhc2ggOiBudWxsO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1MDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGxhdGVzdEJsb2NraGFzaCA9IGF3YWl0IHRoaXMuZ2V0TGF0ZXN0QmxvY2toYXNoKCdmaW5hbGl6ZWQnKTtcbiAgICAgICAgaWYgKGNhY2hlZEJsb2NraGFzaCAhPT0gbGF0ZXN0QmxvY2toYXNoLmJsb2NraGFzaCkge1xuICAgICAgICAgIHRoaXMuX2Jsb2NraGFzaEluZm8gPSB7XG4gICAgICAgICAgICBsYXRlc3RCbG9ja2hhc2gsXG4gICAgICAgICAgICBsYXN0RmV0Y2g6IERhdGUubm93KCksXG4gICAgICAgICAgICB0cmFuc2FjdGlvblNpZ25hdHVyZXM6IFtdLFxuICAgICAgICAgICAgc2ltdWxhdGVkU2lnbmF0dXJlczogW11cbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBsYXRlc3RCbG9ja2hhc2g7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTbGVlcCBmb3IgYXBwcm94aW1hdGVseSBoYWxmIGEgc2xvdFxuICAgICAgICBhd2FpdCBzbGVlcChNU19QRVJfU0xPVCAvIDIpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gb2J0YWluIGEgbmV3IGJsb2NraGFzaCBhZnRlciAke0RhdGUubm93KCkgLSBzdGFydFRpbWV9bXNgKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5fcG9sbGluZ0Jsb2NraGFzaCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgdGhlIHN0YWtlIG1pbmltdW0gZGVsZWdhdGlvblxuICAgKi9cbiAgYXN5bmMgZ2V0U3Rha2VNaW5pbXVtRGVsZWdhdGlvbihjb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnOiBjb25maWdBcmdcbiAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKGNvbmZpZyk7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJncyhbXSwgY29tbWl0bWVudCwgJ2Jhc2U2NCcsIGNvbmZpZ0FyZyk7XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnZ2V0U3Rha2VNaW5pbXVtRGVsZWdhdGlvbicsIGFyZ3MpO1xuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZSh1bnNhZmVSZXMsIGpzb25ScGNSZXN1bHRBbmRDb250ZXh0KG51bWJlcigpKSk7XG4gICAgaWYgKCdlcnJvcicgaW4gcmVzKSB7XG4gICAgICB0aHJvdyBuZXcgU29sYW5hSlNPTlJQQ0Vycm9yKHJlcy5lcnJvciwgYGZhaWxlZCB0byBnZXQgc3Rha2UgbWluaW11bSBkZWxlZ2F0aW9uYCk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNpbXVsYXRlIGEgdHJhbnNhY3Rpb25cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgSW5zdGVhZCwgY2FsbCB7QGxpbmsgc2ltdWxhdGVUcmFuc2FjdGlvbn0gd2l0aCB7QGxpbmtcbiAgICogVmVyc2lvbmVkVHJhbnNhY3Rpb259IGFuZCB7QGxpbmsgU2ltdWxhdGVUcmFuc2FjdGlvbkNvbmZpZ30gcGFyYW1ldGVyc1xuICAgKi9cblxuICAvKipcbiAgICogU2ltdWxhdGUgYSB0cmFuc2FjdGlvblxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGUtY2xhc3MtbWVtYmVyc1xuXG4gIC8qKlxuICAgKiBTaW11bGF0ZSBhIHRyYW5zYWN0aW9uXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZHVwZS1jbGFzcy1tZW1iZXJzXG4gIGFzeW5jIHNpbXVsYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25Pck1lc3NhZ2UsIGNvbmZpZ09yU2lnbmVycywgaW5jbHVkZUFjY291bnRzKSB7XG4gICAgaWYgKCdtZXNzYWdlJyBpbiB0cmFuc2FjdGlvbk9yTWVzc2FnZSkge1xuICAgICAgY29uc3QgdmVyc2lvbmVkVHggPSB0cmFuc2FjdGlvbk9yTWVzc2FnZTtcbiAgICAgIGNvbnN0IHdpcmVUcmFuc2FjdGlvbiA9IHZlcnNpb25lZFR4LnNlcmlhbGl6ZSgpO1xuICAgICAgY29uc3QgZW5jb2RlZFRyYW5zYWN0aW9uID0gQnVmZmVyLmZyb20od2lyZVRyYW5zYWN0aW9uKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWdPclNpZ25lcnMpIHx8IGluY2x1ZGVBY2NvdW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudHMnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbmZpZyA9IGNvbmZpZ09yU2lnbmVycyB8fCB7fTtcbiAgICAgIGNvbmZpZy5lbmNvZGluZyA9ICdiYXNlNjQnO1xuICAgICAgaWYgKCEoJ2NvbW1pdG1lbnQnIGluIGNvbmZpZykpIHtcbiAgICAgICAgY29uZmlnLmNvbW1pdG1lbnQgPSB0aGlzLmNvbW1pdG1lbnQ7XG4gICAgICB9XG4gICAgICBpZiAoY29uZmlnT3JTaWduZXJzICYmIHR5cGVvZiBjb25maWdPclNpZ25lcnMgPT09ICdvYmplY3QnICYmICdpbm5lckluc3RydWN0aW9ucycgaW4gY29uZmlnT3JTaWduZXJzKSB7XG4gICAgICAgIGNvbmZpZy5pbm5lckluc3RydWN0aW9ucyA9IGNvbmZpZ09yU2lnbmVycy5pbm5lckluc3RydWN0aW9ucztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFyZ3MgPSBbZW5jb2RlZFRyYW5zYWN0aW9uLCBjb25maWddO1xuICAgICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnc2ltdWxhdGVUcmFuc2FjdGlvbicsIGFyZ3MpO1xuICAgICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgU2ltdWxhdGVkVHJhbnNhY3Rpb25SZXNwb25zZVN0cnVjdCk7XG4gICAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gc2ltdWxhdGUgdHJhbnNhY3Rpb246ICcgKyByZXMuZXJyb3IubWVzc2FnZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzLnJlc3VsdDtcbiAgICB9XG4gICAgbGV0IHRyYW5zYWN0aW9uO1xuICAgIGlmICh0cmFuc2FjdGlvbk9yTWVzc2FnZSBpbnN0YW5jZW9mIFRyYW5zYWN0aW9uKSB7XG4gICAgICBsZXQgb3JpZ2luYWxUeCA9IHRyYW5zYWN0aW9uT3JNZXNzYWdlO1xuICAgICAgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oKTtcbiAgICAgIHRyYW5zYWN0aW9uLmZlZVBheWVyID0gb3JpZ2luYWxUeC5mZWVQYXllcjtcbiAgICAgIHRyYW5zYWN0aW9uLmluc3RydWN0aW9ucyA9IHRyYW5zYWN0aW9uT3JNZXNzYWdlLmluc3RydWN0aW9ucztcbiAgICAgIHRyYW5zYWN0aW9uLm5vbmNlSW5mbyA9IG9yaWdpbmFsVHgubm9uY2VJbmZvO1xuICAgICAgdHJhbnNhY3Rpb24uc2lnbmF0dXJlcyA9IG9yaWdpbmFsVHguc2lnbmF0dXJlcztcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNhY3Rpb24gPSBUcmFuc2FjdGlvbi5wb3B1bGF0ZSh0cmFuc2FjdGlvbk9yTWVzc2FnZSk7XG4gICAgICAvLyBIQUNLOiB0aGlzIGZ1bmN0aW9uIHJlbGllcyBvbiBtdXRhdGluZyB0aGUgcG9wdWxhdGVkIHRyYW5zYWN0aW9uXG4gICAgICB0cmFuc2FjdGlvbi5fbWVzc2FnZSA9IHRyYW5zYWN0aW9uLl9qc29uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoY29uZmlnT3JTaWduZXJzICE9PSB1bmRlZmluZWQgJiYgIUFycmF5LmlzQXJyYXkoY29uZmlnT3JTaWduZXJzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50cycpO1xuICAgIH1cbiAgICBjb25zdCBzaWduZXJzID0gY29uZmlnT3JTaWduZXJzO1xuICAgIGlmICh0cmFuc2FjdGlvbi5ub25jZUluZm8gJiYgc2lnbmVycykge1xuICAgICAgdHJhbnNhY3Rpb24uc2lnbiguLi5zaWduZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRpc2FibGVDYWNoZSA9IHRoaXMuX2Rpc2FibGVCbG9ja2hhc2hDYWNoaW5nO1xuICAgICAgZm9yICg7Oykge1xuICAgICAgICBjb25zdCBsYXRlc3RCbG9ja2hhc2ggPSBhd2FpdCB0aGlzLl9ibG9ja2hhc2hXaXRoRXhwaXJ5QmxvY2tIZWlnaHQoZGlzYWJsZUNhY2hlKTtcbiAgICAgICAgdHJhbnNhY3Rpb24ubGFzdFZhbGlkQmxvY2tIZWlnaHQgPSBsYXRlc3RCbG9ja2hhc2gubGFzdFZhbGlkQmxvY2tIZWlnaHQ7XG4gICAgICAgIHRyYW5zYWN0aW9uLnJlY2VudEJsb2NraGFzaCA9IGxhdGVzdEJsb2NraGFzaC5ibG9ja2hhc2g7XG4gICAgICAgIGlmICghc2lnbmVycykgYnJlYWs7XG4gICAgICAgIHRyYW5zYWN0aW9uLnNpZ24oLi4uc2lnbmVycyk7XG4gICAgICAgIGlmICghdHJhbnNhY3Rpb24uc2lnbmF0dXJlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCchc2lnbmF0dXJlJyk7IC8vIHNob3VsZCBuZXZlciBoYXBwZW5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSB0cmFuc2FjdGlvbi5zaWduYXR1cmUudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICBpZiAoIXRoaXMuX2Jsb2NraGFzaEluZm8uc2ltdWxhdGVkU2lnbmF0dXJlcy5pbmNsdWRlcyhzaWduYXR1cmUpICYmICF0aGlzLl9ibG9ja2hhc2hJbmZvLnRyYW5zYWN0aW9uU2lnbmF0dXJlcy5pbmNsdWRlcyhzaWduYXR1cmUpKSB7XG4gICAgICAgICAgLy8gVGhlIHNpZ25hdHVyZSBvZiB0aGlzIHRyYW5zYWN0aW9uIGhhcyBub3QgYmVlbiBzZWVuIGJlZm9yZSB3aXRoIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgcmVjZW50QmxvY2toYXNoLCBhbGwgZG9uZS4gTGV0J3MgYnJlYWtcbiAgICAgICAgICB0aGlzLl9ibG9ja2hhc2hJbmZvLnNpbXVsYXRlZFNpZ25hdHVyZXMucHVzaChzaWduYXR1cmUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoaXMgdHJhbnNhY3Rpb24gd291bGQgYmUgdHJlYXRlZCBhcyBkdXBsaWNhdGUgKGl0cyBkZXJpdmVkIHNpZ25hdHVyZVxuICAgICAgICAgIC8vIG1hdGNoZWQgdG8gb25lIG9mIGFscmVhZHkgcmVjb3JkZWQgc2lnbmF0dXJlcykuXG4gICAgICAgICAgLy8gU28sIHdlIG11c3QgZmV0Y2ggYSBuZXcgYmxvY2toYXNoIGZvciBhIGRpZmZlcmVudCBzaWduYXR1cmUgYnkgZGlzYWJsaW5nXG4gICAgICAgICAgLy8gb3VyIGNhY2hlIG5vdCB0byB3YWl0IGZvciB0aGUgY2FjaGUgZXhwaXJhdGlvbiAoQkxPQ0tIQVNIX0NBQ0hFX1RJTUVPVVRfTVMpLlxuICAgICAgICAgIGRpc2FibGVDYWNoZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZSA9IHRyYW5zYWN0aW9uLl9jb21waWxlKCk7XG4gICAgY29uc3Qgc2lnbkRhdGEgPSBtZXNzYWdlLnNlcmlhbGl6ZSgpO1xuICAgIGNvbnN0IHdpcmVUcmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uLl9zZXJpYWxpemUoc2lnbkRhdGEpO1xuICAgIGNvbnN0IGVuY29kZWRUcmFuc2FjdGlvbiA9IHdpcmVUcmFuc2FjdGlvbi50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgZW5jb2Rpbmc6ICdiYXNlNjQnLFxuICAgICAgY29tbWl0bWVudDogdGhpcy5jb21taXRtZW50XG4gICAgfTtcbiAgICBpZiAoaW5jbHVkZUFjY291bnRzKSB7XG4gICAgICBjb25zdCBhZGRyZXNzZXMgPSAoQXJyYXkuaXNBcnJheShpbmNsdWRlQWNjb3VudHMpID8gaW5jbHVkZUFjY291bnRzIDogbWVzc2FnZS5ub25Qcm9ncmFtSWRzKCkpLm1hcChrZXkgPT4ga2V5LnRvQmFzZTU4KCkpO1xuICAgICAgY29uZmlnWydhY2NvdW50cyddID0ge1xuICAgICAgICBlbmNvZGluZzogJ2Jhc2U2NCcsXG4gICAgICAgIGFkZHJlc3Nlc1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHNpZ25lcnMpIHtcbiAgICAgIGNvbmZpZy5zaWdWZXJpZnkgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY29uZmlnT3JTaWduZXJzICYmIHR5cGVvZiBjb25maWdPclNpZ25lcnMgPT09ICdvYmplY3QnICYmICdpbm5lckluc3RydWN0aW9ucycgaW4gY29uZmlnT3JTaWduZXJzKSB7XG4gICAgICBjb25maWcuaW5uZXJJbnN0cnVjdGlvbnMgPSBjb25maWdPclNpZ25lcnMuaW5uZXJJbnN0cnVjdGlvbnM7XG4gICAgfVxuICAgIGNvbnN0IGFyZ3MgPSBbZW5jb2RlZFRyYW5zYWN0aW9uLCBjb25maWddO1xuICAgIGNvbnN0IHVuc2FmZVJlcyA9IGF3YWl0IHRoaXMuX3JwY1JlcXVlc3QoJ3NpbXVsYXRlVHJhbnNhY3Rpb24nLCBhcmdzKTtcbiAgICBjb25zdCByZXMgPSBjcmVhdGUodW5zYWZlUmVzLCBTaW11bGF0ZWRUcmFuc2FjdGlvblJlc3BvbnNlU3RydWN0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIGxldCBsb2dzO1xuICAgICAgaWYgKCdkYXRhJyBpbiByZXMuZXJyb3IpIHtcbiAgICAgICAgbG9ncyA9IHJlcy5lcnJvci5kYXRhLmxvZ3M7XG4gICAgICAgIGlmIChsb2dzICYmIEFycmF5LmlzQXJyYXkobG9ncykpIHtcbiAgICAgICAgICBjb25zdCB0cmFjZUluZGVudCA9ICdcXG4gICAgJztcbiAgICAgICAgICBjb25zdCBsb2dUcmFjZSA9IHRyYWNlSW5kZW50ICsgbG9ncy5qb2luKHRyYWNlSW5kZW50KTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKHJlcy5lcnJvci5tZXNzYWdlLCBsb2dUcmFjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBTZW5kVHJhbnNhY3Rpb25FcnJvcih7XG4gICAgICAgIGFjdGlvbjogJ3NpbXVsYXRlJyxcbiAgICAgICAgc2lnbmF0dXJlOiAnJyxcbiAgICAgICAgdHJhbnNhY3Rpb25NZXNzYWdlOiByZXMuZXJyb3IubWVzc2FnZSxcbiAgICAgICAgbG9nczogbG9nc1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXMucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ24gYW5kIHNlbmQgYSB0cmFuc2FjdGlvblxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBJbnN0ZWFkLCBjYWxsIHtAbGluayBzZW5kVHJhbnNhY3Rpb259IHdpdGggYSB7QGxpbmtcbiAgICogVmVyc2lvbmVkVHJhbnNhY3Rpb259XG4gICAqL1xuXG4gIC8qKlxuICAgKiBTZW5kIGEgc2lnbmVkIHRyYW5zYWN0aW9uXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZHVwZS1jbGFzcy1tZW1iZXJzXG5cbiAgLyoqXG4gICAqIFNpZ24gYW5kIHNlbmQgYSB0cmFuc2FjdGlvblxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGUtY2xhc3MtbWVtYmVyc1xuICBhc3luYyBzZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIHNpZ25lcnNPck9wdGlvbnMsIG9wdGlvbnMpIHtcbiAgICBpZiAoJ3ZlcnNpb24nIGluIHRyYW5zYWN0aW9uKSB7XG4gICAgICBpZiAoc2lnbmVyc09yT3B0aW9ucyAmJiBBcnJheS5pc0FycmF5KHNpZ25lcnNPck9wdGlvbnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudHMnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHdpcmVUcmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uLnNlcmlhbGl6ZSgpO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZFJhd1RyYW5zYWN0aW9uKHdpcmVUcmFuc2FjdGlvbiwgc2lnbmVyc09yT3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChzaWduZXJzT3JPcHRpb25zID09PSB1bmRlZmluZWQgfHwgIUFycmF5LmlzQXJyYXkoc2lnbmVyc09yT3B0aW9ucykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudHMnKTtcbiAgICB9XG4gICAgY29uc3Qgc2lnbmVycyA9IHNpZ25lcnNPck9wdGlvbnM7XG4gICAgaWYgKHRyYW5zYWN0aW9uLm5vbmNlSW5mbykge1xuICAgICAgdHJhbnNhY3Rpb24uc2lnbiguLi5zaWduZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRpc2FibGVDYWNoZSA9IHRoaXMuX2Rpc2FibGVCbG9ja2hhc2hDYWNoaW5nO1xuICAgICAgZm9yICg7Oykge1xuICAgICAgICBjb25zdCBsYXRlc3RCbG9ja2hhc2ggPSBhd2FpdCB0aGlzLl9ibG9ja2hhc2hXaXRoRXhwaXJ5QmxvY2tIZWlnaHQoZGlzYWJsZUNhY2hlKTtcbiAgICAgICAgdHJhbnNhY3Rpb24ubGFzdFZhbGlkQmxvY2tIZWlnaHQgPSBsYXRlc3RCbG9ja2hhc2gubGFzdFZhbGlkQmxvY2tIZWlnaHQ7XG4gICAgICAgIHRyYW5zYWN0aW9uLnJlY2VudEJsb2NraGFzaCA9IGxhdGVzdEJsb2NraGFzaC5ibG9ja2hhc2g7XG4gICAgICAgIHRyYW5zYWN0aW9uLnNpZ24oLi4uc2lnbmVycyk7XG4gICAgICAgIGlmICghdHJhbnNhY3Rpb24uc2lnbmF0dXJlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCchc2lnbmF0dXJlJyk7IC8vIHNob3VsZCBuZXZlciBoYXBwZW5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSB0cmFuc2FjdGlvbi5zaWduYXR1cmUudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICBpZiAoIXRoaXMuX2Jsb2NraGFzaEluZm8udHJhbnNhY3Rpb25TaWduYXR1cmVzLmluY2x1ZGVzKHNpZ25hdHVyZSkpIHtcbiAgICAgICAgICAvLyBUaGUgc2lnbmF0dXJlIG9mIHRoaXMgdHJhbnNhY3Rpb24gaGFzIG5vdCBiZWVuIHNlZW4gYmVmb3JlIHdpdGggdGhlXG4gICAgICAgICAgLy8gY3VycmVudCByZWNlbnRCbG9ja2hhc2gsIGFsbCBkb25lLiBMZXQncyBicmVha1xuICAgICAgICAgIHRoaXMuX2Jsb2NraGFzaEluZm8udHJhbnNhY3Rpb25TaWduYXR1cmVzLnB1c2goc2lnbmF0dXJlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGlzIHRyYW5zYWN0aW9uIHdvdWxkIGJlIHRyZWF0ZWQgYXMgZHVwbGljYXRlIChpdHMgZGVyaXZlZCBzaWduYXR1cmVcbiAgICAgICAgICAvLyBtYXRjaGVkIHRvIG9uZSBvZiBhbHJlYWR5IHJlY29yZGVkIHNpZ25hdHVyZXMpLlxuICAgICAgICAgIC8vIFNvLCB3ZSBtdXN0IGZldGNoIGEgbmV3IGJsb2NraGFzaCBmb3IgYSBkaWZmZXJlbnQgc2lnbmF0dXJlIGJ5IGRpc2FibGluZ1xuICAgICAgICAgIC8vIG91ciBjYWNoZSBub3QgdG8gd2FpdCBmb3IgdGhlIGNhY2hlIGV4cGlyYXRpb24gKEJMT0NLSEFTSF9DQUNIRV9USU1FT1VUX01TKS5cbiAgICAgICAgICBkaXNhYmxlQ2FjaGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHdpcmVUcmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uLnNlcmlhbGl6ZSgpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmRSYXdUcmFuc2FjdGlvbih3aXJlVHJhbnNhY3Rpb24sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgYSB0cmFuc2FjdGlvbiB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gc2lnbmVkIGFuZCBzZXJpYWxpemVkIGludG8gdGhlXG4gICAqIHdpcmUgZm9ybWF0XG4gICAqL1xuICBhc3luYyBzZW5kUmF3VHJhbnNhY3Rpb24ocmF3VHJhbnNhY3Rpb24sIG9wdGlvbnMpIHtcbiAgICBjb25zdCBlbmNvZGVkVHJhbnNhY3Rpb24gPSB0b0J1ZmZlcihyYXdUcmFuc2FjdGlvbikudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VuZEVuY29kZWRUcmFuc2FjdGlvbihlbmNvZGVkVHJhbnNhY3Rpb24sIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBhIHRyYW5zYWN0aW9uIHRoYXQgaGFzIGFscmVhZHkgYmVlbiBzaWduZWQsIHNlcmlhbGl6ZWQgaW50byB0aGVcbiAgICogd2lyZSBmb3JtYXQsIGFuZCBlbmNvZGVkIGFzIGEgYmFzZTY0IHN0cmluZ1xuICAgKi9cbiAgYXN5bmMgc2VuZEVuY29kZWRUcmFuc2FjdGlvbihlbmNvZGVkVHJhbnNhY3Rpb24sIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBlbmNvZGluZzogJ2Jhc2U2NCdcbiAgICB9O1xuICAgIGNvbnN0IHNraXBQcmVmbGlnaHQgPSBvcHRpb25zICYmIG9wdGlvbnMuc2tpcFByZWZsaWdodDtcbiAgICBjb25zdCBwcmVmbGlnaHRDb21taXRtZW50ID0gc2tpcFByZWZsaWdodCA9PT0gdHJ1ZSA/ICdwcm9jZXNzZWQnIC8vIEZJWE1FIFJlbW92ZSB3aGVuIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnphLXh5ei9hZ2F2ZS9wdWxsLzQ4MyBpcyBkZXBsb3llZC5cbiAgICA6IG9wdGlvbnMgJiYgb3B0aW9ucy5wcmVmbGlnaHRDb21taXRtZW50IHx8IHRoaXMuY29tbWl0bWVudDtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm1heFJldHJpZXMgIT0gbnVsbCkge1xuICAgICAgY29uZmlnLm1heFJldHJpZXMgPSBvcHRpb25zLm1heFJldHJpZXM7XG4gICAgfVxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubWluQ29udGV4dFNsb3QgIT0gbnVsbCkge1xuICAgICAgY29uZmlnLm1pbkNvbnRleHRTbG90ID0gb3B0aW9ucy5taW5Db250ZXh0U2xvdDtcbiAgICB9XG4gICAgaWYgKHNraXBQcmVmbGlnaHQpIHtcbiAgICAgIGNvbmZpZy5za2lwUHJlZmxpZ2h0ID0gc2tpcFByZWZsaWdodDtcbiAgICB9XG4gICAgaWYgKHByZWZsaWdodENvbW1pdG1lbnQpIHtcbiAgICAgIGNvbmZpZy5wcmVmbGlnaHRDb21taXRtZW50ID0gcHJlZmxpZ2h0Q29tbWl0bWVudDtcbiAgICB9XG4gICAgY29uc3QgYXJncyA9IFtlbmNvZGVkVHJhbnNhY3Rpb24sIGNvbmZpZ107XG4gICAgY29uc3QgdW5zYWZlUmVzID0gYXdhaXQgdGhpcy5fcnBjUmVxdWVzdCgnc2VuZFRyYW5zYWN0aW9uJywgYXJncyk7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlKHVuc2FmZVJlcywgU2VuZFRyYW5zYWN0aW9uUnBjUmVzdWx0KTtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXMpIHtcbiAgICAgIGxldCBsb2dzID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKCdkYXRhJyBpbiByZXMuZXJyb3IpIHtcbiAgICAgICAgbG9ncyA9IHJlcy5lcnJvci5kYXRhLmxvZ3M7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgU2VuZFRyYW5zYWN0aW9uRXJyb3Ioe1xuICAgICAgICBhY3Rpb246IHNraXBQcmVmbGlnaHQgPyAnc2VuZCcgOiAnc2ltdWxhdGUnLFxuICAgICAgICBzaWduYXR1cmU6ICcnLFxuICAgICAgICB0cmFuc2FjdGlvbk1lc3NhZ2U6IHJlcy5lcnJvci5tZXNzYWdlLFxuICAgICAgICBsb2dzOiBsb2dzXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5yZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfd3NPbk9wZW4oKSB7XG4gICAgdGhpcy5fcnBjV2ViU29ja2V0Q29ubmVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLl9ycGNXZWJTb2NrZXRIZWFydGJlYXQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAvLyBQaW5nIHNlcnZlciBldmVyeSA1cyB0byBwcmV2ZW50IGlkbGUgdGltZW91dHNcbiAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5fcnBjV2ViU29ja2V0Lm5vdGlmeSgncGluZycpO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgICAgICB9IGNhdGNoIHt9XG4gICAgICB9KSgpO1xuICAgIH0sIDUwMDApO1xuICAgIHRoaXMuX3VwZGF0ZVN1YnNjcmlwdGlvbnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF93c09uRXJyb3IoZXJyKSB7XG4gICAgdGhpcy5fcnBjV2ViU29ja2V0Q29ubmVjdGVkID0gZmFsc2U7XG4gICAgY29uc29sZS5lcnJvcignd3MgZXJyb3I6JywgZXJyLm1lc3NhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3dzT25DbG9zZShjb2RlKSB7XG4gICAgdGhpcy5fcnBjV2ViU29ja2V0Q29ubmVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcnBjV2ViU29ja2V0R2VuZXJhdGlvbiA9ICh0aGlzLl9ycGNXZWJTb2NrZXRHZW5lcmF0aW9uICsgMSkgJSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICBpZiAodGhpcy5fcnBjV2ViU29ja2V0SWRsZVRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9ycGNXZWJTb2NrZXRJZGxlVGltZW91dCk7XG4gICAgICB0aGlzLl9ycGNXZWJTb2NrZXRJZGxlVGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLl9ycGNXZWJTb2NrZXRIZWFydGJlYXQpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fcnBjV2ViU29ja2V0SGVhcnRiZWF0KTtcbiAgICAgIHRoaXMuX3JwY1dlYlNvY2tldEhlYXJ0YmVhdCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSAxMDAwKSB7XG4gICAgICAvLyBleHBsaWNpdCBjbG9zZSwgY2hlY2sgaWYgYW55IHN1YnNjcmlwdGlvbnMgaGF2ZSBiZWVuIG1hZGUgc2luY2UgY2xvc2VcbiAgICAgIHRoaXMuX3VwZGF0ZVN1YnNjcmlwdGlvbnMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBpbXBsaWNpdCBjbG9zZSwgcHJlcGFyZSBzdWJzY3JpcHRpb25zIGZvciBhdXRvLXJlY29ubmVjdFxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbkNhbGxiYWNrc0J5U2VydmVyU3Vic2NyaXB0aW9uSWQgPSB7fTtcbiAgICBPYmplY3QuZW50cmllcyh0aGlzLl9zdWJzY3JpcHRpb25zQnlIYXNoKS5mb3JFYWNoKChbaGFzaCwgc3Vic2NyaXB0aW9uXSkgPT4ge1xuICAgICAgdGhpcy5fc2V0U3Vic2NyaXB0aW9uKGhhc2gsIHtcbiAgICAgICAgLi4uc3Vic2NyaXB0aW9uLFxuICAgICAgICBzdGF0ZTogJ3BlbmRpbmcnXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9zZXRTdWJzY3JpcHRpb24oaGFzaCwgbmV4dFN1YnNjcmlwdGlvbikge1xuICAgIGNvbnN0IHByZXZTdGF0ZSA9IHRoaXMuX3N1YnNjcmlwdGlvbnNCeUhhc2hbaGFzaF0/LnN0YXRlO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNCeUhhc2hbaGFzaF0gPSBuZXh0U3Vic2NyaXB0aW9uO1xuICAgIGlmIChwcmV2U3RhdGUgIT09IG5leHRTdWJzY3JpcHRpb24uc3RhdGUpIHtcbiAgICAgIGNvbnN0IHN0YXRlQ2hhbmdlQ2FsbGJhY2tzID0gdGhpcy5fc3Vic2NyaXB0aW9uU3RhdGVDaGFuZ2VDYWxsYmFja3NCeUhhc2hbaGFzaF07XG4gICAgICBpZiAoc3RhdGVDaGFuZ2VDYWxsYmFja3MpIHtcbiAgICAgICAgc3RhdGVDaGFuZ2VDYWxsYmFja3MuZm9yRWFjaChjYiA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNiKG5leHRTdWJzY3JpcHRpb24uc3RhdGUpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgICAgICAgfSBjYXRjaCB7fVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfb25TdWJzY3JpcHRpb25TdGF0ZUNoYW5nZShjbGllbnRTdWJzY3JpcHRpb25JZCwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBoYXNoID0gdGhpcy5fc3Vic2NyaXB0aW9uSGFzaEJ5Q2xpZW50U3Vic2NyaXB0aW9uSWRbY2xpZW50U3Vic2NyaXB0aW9uSWRdO1xuICAgIGlmIChoYXNoID09IG51bGwpIHtcbiAgICAgIHJldHVybiAoKSA9PiB7fTtcbiAgICB9XG4gICAgY29uc3Qgc3RhdGVDaGFuZ2VDYWxsYmFja3MgPSB0aGlzLl9zdWJzY3JpcHRpb25TdGF0ZUNoYW5nZUNhbGxiYWNrc0J5SGFzaFtoYXNoXSB8fD0gbmV3IFNldCgpO1xuICAgIHN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmRlbGV0ZShjYWxsYmFjayk7XG4gICAgICBpZiAoc3RhdGVDaGFuZ2VDYWxsYmFja3Muc2l6ZSA9PT0gMCkge1xuICAgICAgICBkZWxldGUgdGhpcy5fc3Vic2NyaXB0aW9uU3RhdGVDaGFuZ2VDYWxsYmFja3NCeUhhc2hbaGFzaF07XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGFzeW5jIF91cGRhdGVTdWJzY3JpcHRpb25zKCkge1xuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9zdWJzY3JpcHRpb25zQnlIYXNoKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmICh0aGlzLl9ycGNXZWJTb2NrZXRDb25uZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5fcnBjV2ViU29ja2V0Q29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3JwY1dlYlNvY2tldElkbGVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fcnBjV2ViU29ja2V0SWRsZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9ycGNXZWJTb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIHN3YWxsb3cgZXJyb3IgaWYgc29ja2V0IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkLlxuICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciB3aGVuIGNsb3Npbmcgc29ja2V0IGNvbm5lY3Rpb246ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCA1MDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcnBjV2ViU29ja2V0SWRsZVRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9ycGNXZWJTb2NrZXRJZGxlVGltZW91dCk7XG4gICAgICB0aGlzLl9ycGNXZWJTb2NrZXRJZGxlVGltZW91dCA9IG51bGw7XG4gICAgICB0aGlzLl9ycGNXZWJTb2NrZXRDb25uZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX3JwY1dlYlNvY2tldENvbm5lY3RlZCkge1xuICAgICAgdGhpcy5fcnBjV2ViU29ja2V0LmNvbm5lY3QoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYWN0aXZlV2ViU29ja2V0R2VuZXJhdGlvbiA9IHRoaXMuX3JwY1dlYlNvY2tldEdlbmVyYXRpb247XG4gICAgY29uc3QgaXNDdXJyZW50Q29ubmVjdGlvblN0aWxsQWN0aXZlID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGFjdGl2ZVdlYlNvY2tldEdlbmVyYXRpb24gPT09IHRoaXMuX3JwY1dlYlNvY2tldEdlbmVyYXRpb247XG4gICAgfTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAvLyBEb24ndCBiZSB0ZW1wdGVkIHRvIGNoYW5nZSB0aGlzIHRvIGBPYmplY3QuZW50cmllc2AuIFdlIGNhbGxcbiAgICAvLyBgX3VwZGF0ZVN1YnNjcmlwdGlvbnNgIHJlY3Vyc2l2ZWx5IHdoZW4gcHJvY2Vzc2luZyB0aGUgc3RhdGUsXG4gICAgLy8gc28gaXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBsb29rIHVwIHRoZSAqY3VycmVudCogdmVyc2lvbiBvZlxuICAgIC8vIGVhY2ggc3Vic2NyaXB0aW9uLCBldmVyeSB0aW1lIHdlIHByb2Nlc3MgYSBoYXNoLlxuICAgIE9iamVjdC5rZXlzKHRoaXMuX3N1YnNjcmlwdGlvbnNCeUhhc2gpLm1hcChhc3luYyBoYXNoID0+IHtcbiAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuX3N1YnNjcmlwdGlvbnNCeUhhc2hbaGFzaF07XG4gICAgICBpZiAoc3Vic2NyaXB0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gVGhpcyBlbnRyeSBoYXMgc2luY2UgYmVlbiBkZWxldGVkLiBTa2lwLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHN1YnNjcmlwdGlvbi5zdGF0ZSkge1xuICAgICAgICBjYXNlICdwZW5kaW5nJzpcbiAgICAgICAgY2FzZSAndW5zdWJzY3JpYmVkJzpcbiAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLmNhbGxiYWNrcy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFlvdSBjYW4gZW5kIHVwIGhlcmUgd2hlbjpcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAtIGEgc3Vic2NyaXB0aW9uIGhhcyByZWNlbnRseSB1bnN1YnNjcmliZWRcbiAgICAgICAgICAgICAqICAgd2l0aG91dCBoYXZpbmcgbmV3IGNhbGxiYWNrcyBhZGRlZCB0byBpdFxuICAgICAgICAgICAgICogICB3aGlsZSB0aGUgdW5zdWJzY3JpYmUgd2FzIGluIGZsaWdodCwgb3JcbiAgICAgICAgICAgICAqIC0gd2hlbiBhIHBlbmRpbmcgc3Vic2NyaXB0aW9uIGhhcyBpdHNcbiAgICAgICAgICAgICAqICAgbGlzdGVuZXJzIHJlbW92ZWQgYmVmb3JlIGEgcmVxdWVzdCB3YXNcbiAgICAgICAgICAgICAqICAgc2VudCB0byB0aGUgc2VydmVyLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEJlaW5nIHRoYXQgbm9ib2R5IGlzIGludGVyZXN0ZWQgaW4gdGhpc1xuICAgICAgICAgICAgICogc3Vic2NyaXB0aW9uIGFueSBsb25nZXIsIGRlbGV0ZSBpdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N1YnNjcmlwdGlvbnNCeUhhc2hbaGFzaF07XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnN0YXRlID09PSAndW5zdWJzY3JpYmVkJykge1xuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fc3Vic2NyaXB0aW9uQ2FsbGJhY2tzQnlTZXJ2ZXJTdWJzY3JpcHRpb25JZFtzdWJzY3JpcHRpb24uc2VydmVyU3Vic2NyaXB0aW9uSWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fdXBkYXRlU3Vic2NyaXB0aW9ucygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhd2FpdCAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICBtZXRob2RcbiAgICAgICAgICAgIH0gPSBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB0aGlzLl9zZXRTdWJzY3JpcHRpb24oaGFzaCwge1xuICAgICAgICAgICAgICAgIC4uLnN1YnNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3N1YnNjcmliaW5nJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgY29uc3Qgc2VydmVyU3Vic2NyaXB0aW9uSWQgPSBhd2FpdCB0aGlzLl9ycGNXZWJTb2NrZXQuY2FsbChtZXRob2QsIGFyZ3MpO1xuICAgICAgICAgICAgICB0aGlzLl9zZXRTdWJzY3JpcHRpb24oaGFzaCwge1xuICAgICAgICAgICAgICAgIC4uLnN1YnNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBzZXJ2ZXJTdWJzY3JpcHRpb25JZCxcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3N1YnNjcmliZWQnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25DYWxsYmFja3NCeVNlcnZlclN1YnNjcmlwdGlvbklkW3NlcnZlclN1YnNjcmlwdGlvbklkXSA9IHN1YnNjcmlwdGlvbi5jYWxsYmFja3M7XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3VwZGF0ZVN1YnNjcmlwdGlvbnMoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgUmVjZWl2ZWQgJHtlIGluc3RhbmNlb2YgRXJyb3IgPyAnJyA6ICdKU09OLVJQQyAnfWVycm9yIGNhbGxpbmcgXFxgJHttZXRob2R9XFxgYCwge1xuICAgICAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmICghaXNDdXJyZW50Q29ubmVjdGlvblN0aWxsQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gVE9ETzogTWF5YmUgYWRkIGFuICdlcnJvcmVkJyBzdGF0ZSBvciBhIHJldHJ5IGxpbWl0P1xuICAgICAgICAgICAgICB0aGlzLl9zZXRTdWJzY3JpcHRpb24oaGFzaCwge1xuICAgICAgICAgICAgICAgIC4uLnN1YnNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3BlbmRpbmcnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVTdWJzY3JpcHRpb25zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3Vic2NyaWJlZCc6XG4gICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbi5jYWxsYmFja3Muc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gQnkgdGhlIHRpbWUgd2Ugc3VjY2Vzc2Z1bGx5IHNldCB1cCBhIHN1YnNjcmlwdGlvblxuICAgICAgICAgICAgLy8gd2l0aCB0aGUgc2VydmVyLCB0aGUgY2xpZW50IHN0b3BwZWQgY2FyaW5nIGFib3V0IGl0LlxuICAgICAgICAgICAgLy8gVGVhciBpdCBkb3duIG5vdy5cbiAgICAgICAgICAgIGF3YWl0IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzZXJ2ZXJTdWJzY3JpcHRpb25JZCxcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZU1ldGhvZFxuICAgICAgICAgICAgICB9ID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uc0F1dG9EaXNwb3NlZEJ5UnBjLmhhcyhzZXJ2ZXJTdWJzY3JpcHRpb25JZCkpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBTcGVjaWFsIGNhc2UuXG4gICAgICAgICAgICAgICAgICogSWYgd2UncmUgZGVhbGluZyB3aXRoIGEgc3Vic2NyaXB0aW9uIHRoYXQgaGFzIGJlZW4gYXV0by1cbiAgICAgICAgICAgICAgICAgKiBkaXNwb3NlZCBieSB0aGUgUlBDLCB0aGVuIHdlIGNhbiBza2lwIHRoZSBSUEMgY2FsbCB0b1xuICAgICAgICAgICAgICAgICAqIHRlYXIgZG93biB0aGUgc3Vic2NyaXB0aW9uIGhlcmUuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBOT1RFOiBUaGVyZSBpcyBhIHByb3Bvc2FsIHRvIGVsaW1pbmF0ZSB0aGlzIHNwZWNpYWwgY2FzZSwgaGVyZTpcbiAgICAgICAgICAgICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vc29sYW5hLWxhYnMvc29sYW5hL2lzc3Vlcy8xODg5MlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNBdXRvRGlzcG9zZWRCeVJwYy5kZWxldGUoc2VydmVyU3Vic2NyaXB0aW9uSWQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldFN1YnNjcmlwdGlvbihoYXNoLCB7XG4gICAgICAgICAgICAgICAgICAuLi5zdWJzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICBzdGF0ZTogJ3Vuc3Vic2NyaWJpbmcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0U3Vic2NyaXB0aW9uKGhhc2gsIHtcbiAgICAgICAgICAgICAgICAgIC4uLnN1YnNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgIHN0YXRlOiAndW5zdWJzY3JpYmluZydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fcnBjV2ViU29ja2V0LmNhbGwodW5zdWJzY3JpYmVNZXRob2QsIFtzZXJ2ZXJTdWJzY3JpcHRpb25JZF0pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHt1bnN1YnNjcmliZU1ldGhvZH0gZXJyb3I6YCwgZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICghaXNDdXJyZW50Q29ubmVjdGlvblN0aWxsQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gVE9ETzogTWF5YmUgYWRkIGFuICdlcnJvcmVkJyBzdGF0ZSBvciBhIHJldHJ5IGxpbWl0P1xuICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0U3Vic2NyaXB0aW9uKGhhc2gsIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uc3Vic2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogJ3N1YnNjcmliZWQnXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3VwZGF0ZVN1YnNjcmlwdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5fc2V0U3Vic2NyaXB0aW9uKGhhc2gsIHtcbiAgICAgICAgICAgICAgICAuLi5zdWJzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgc3RhdGU6ICd1bnN1YnNjcmliZWQnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVTdWJzY3JpcHRpb25zKCk7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfaGFuZGxlU2VydmVyTm90aWZpY2F0aW9uKHNlcnZlclN1YnNjcmlwdGlvbklkLCBjYWxsYmFja0FyZ3MpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSB0aGlzLl9zdWJzY3JpcHRpb25DYWxsYmFja3NCeVNlcnZlclN1YnNjcmlwdGlvbklkW3NlcnZlclN1YnNjcmlwdGlvbklkXTtcbiAgICBpZiAoY2FsbGJhY2tzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGJhY2tzLmZvckVhY2goY2IgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IoXG4gICAgICAgIC8vIEkgZmFpbGVkIHRvIGZpbmQgYSB3YXkgdG8gY29udmluY2UgVHlwZVNjcmlwdCB0aGF0IGBjYmAgaXMgb2YgdHlwZVxuICAgICAgICAvLyBgVENhbGxiYWNrYCB3aGljaCBpcyBjZXJ0YWlubHkgY29tcGF0aWJsZSB3aXRoIGBQYXJhbWV0ZXJzPFRDYWxsYmFjaz5gLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy80NzYxNVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIC4uLmNhbGxiYWNrQXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfd3NPbkFjY291bnROb3RpZmljYXRpb24obm90aWZpY2F0aW9uKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVzdWx0LFxuICAgICAgc3Vic2NyaXB0aW9uXG4gICAgfSA9IGNyZWF0ZShub3RpZmljYXRpb24sIEFjY291bnROb3RpZmljYXRpb25SZXN1bHQpO1xuICAgIHRoaXMuX2hhbmRsZVNlcnZlck5vdGlmaWNhdGlvbihzdWJzY3JpcHRpb24sIFtyZXN1bHQudmFsdWUsIHJlc3VsdC5jb250ZXh0XSk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfbWFrZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb25Db25maWcsXG4gIC8qKlxuICAgKiBXaGVuIHByZXBhcmluZyBgYXJnc2AgZm9yIGEgY2FsbCB0byBgX21ha2VTdWJzY3JpcHRpb25gLCBiZSBzdXJlXG4gICAqIHRvIGNhcmVmdWxseSBhcHBseSBhIGRlZmF1bHQgYGNvbW1pdG1lbnRgIHByb3BlcnR5LCBpZiBuZWNlc3NhcnkuXG4gICAqXG4gICAqIC0gSWYgdGhlIHVzZXIgc3VwcGxpZWQgYSBgY29tbWl0bWVudGAgdXNlIHRoYXQuXG4gICAqIC0gT3RoZXJ3aXNlLCBpZiB0aGUgYENvbm5lY3Rpb246OmNvbW1pdG1lbnRgIGlzIHNldCwgdXNlIHRoYXQuXG4gICAqIC0gT3RoZXJ3aXNlLCBzZXQgaXQgdG8gdGhlIFJQQyBzZXJ2ZXIgZGVmYXVsdDogYGZpbmFsaXplZGAuXG4gICAqXG4gICAqIFRoaXMgaXMgZXh0cmVtZWx5IGltcG9ydGFudCB0byBlbnN1cmUgdGhhdCB0aGVzZSB0d28gZnVuZGFtZW50YWxseVxuICAgKiBpZGVudGljYWwgc3Vic2NyaXB0aW9ucyBwcm9kdWNlIHRoZSBzYW1lIGlkZW50aWZ5aW5nIGhhc2g6XG4gICAqXG4gICAqIC0gQSBzdWJzY3JpcHRpb24gbWFkZSB3aXRob3V0IHNwZWNpZnlpbmcgYSBjb21taXRtZW50LlxuICAgKiAtIEEgc3Vic2NyaXB0aW9uIG1hZGUgd2hlcmUgdGhlIGNvbW1pdG1lbnQgc3BlY2lmaWVkIGlzIHRoZSBzYW1lXG4gICAqICAgYXMgdGhlIGRlZmF1bHQgYXBwbGllZCB0byB0aGUgc3Vic2NyaXB0aW9uIGFib3ZlLlxuICAgKlxuICAgKiBFeGFtcGxlOyB0aGVzZSB0d28gc3Vic2NyaXB0aW9ucyBtdXN0IHByb2R1Y2UgdGhlIHNhbWUgaGFzaDpcbiAgICpcbiAgICogLSBBbiBgYWNjb3VudFN1YnNjcmliZWAgc3Vic2NyaXB0aW9uIGZvciBgJ1BVQktFWSdgXG4gICAqIC0gQW4gYGFjY291bnRTdWJzY3JpYmVgIHN1YnNjcmlwdGlvbiBmb3IgYCdQVUJLRVknYCB3aXRoIGNvbW1pdG1lbnRcbiAgICogICBgJ2ZpbmFsaXplZCdgLlxuICAgKlxuICAgKiBTZWUgdGhlICdtYWtpbmcgYSBzdWJzY3JpcHRpb24gd2l0aCBkZWZhdWx0ZWQgcGFyYW1zIG9taXR0ZWQnIHRlc3RcbiAgICogaW4gYGNvbm5lY3Rpb24tc3Vic2NyaXB0aW9ucy50c2AgZm9yIG1vcmUuXG4gICAqL1xuICBhcmdzKSB7XG4gICAgY29uc3QgY2xpZW50U3Vic2NyaXB0aW9uSWQgPSB0aGlzLl9uZXh0Q2xpZW50U3Vic2NyaXB0aW9uSWQrKztcbiAgICBjb25zdCBoYXNoID0gZmFzdFN0YWJsZVN0cmluZ2lmeShbc3Vic2NyaXB0aW9uQ29uZmlnLm1ldGhvZCwgYXJnc10pO1xuICAgIGNvbnN0IGV4aXN0aW5nU3Vic2NyaXB0aW9uID0gdGhpcy5fc3Vic2NyaXB0aW9uc0J5SGFzaFtoYXNoXTtcbiAgICBpZiAoZXhpc3RpbmdTdWJzY3JpcHRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uc0J5SGFzaFtoYXNoXSA9IHtcbiAgICAgICAgLi4uc3Vic2NyaXB0aW9uQ29uZmlnLFxuICAgICAgICBhcmdzLFxuICAgICAgICBjYWxsYmFja3M6IG5ldyBTZXQoW3N1YnNjcmlwdGlvbkNvbmZpZy5jYWxsYmFja10pLFxuICAgICAgICBzdGF0ZTogJ3BlbmRpbmcnXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZ1N1YnNjcmlwdGlvbi5jYWxsYmFja3MuYWRkKHN1YnNjcmlwdGlvbkNvbmZpZy5jYWxsYmFjayk7XG4gICAgfVxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbkhhc2hCeUNsaWVudFN1YnNjcmlwdGlvbklkW2NsaWVudFN1YnNjcmlwdGlvbklkXSA9IGhhc2g7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uRGlzcG9zZUZ1bmN0aW9uc0J5Q2xpZW50U3Vic2NyaXB0aW9uSWRbY2xpZW50U3Vic2NyaXB0aW9uSWRdID0gYXN5bmMgKCkgPT4ge1xuICAgICAgZGVsZXRlIHRoaXMuX3N1YnNjcmlwdGlvbkRpc3Bvc2VGdW5jdGlvbnNCeUNsaWVudFN1YnNjcmlwdGlvbklkW2NsaWVudFN1YnNjcmlwdGlvbklkXTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdWJzY3JpcHRpb25IYXNoQnlDbGllbnRTdWJzY3JpcHRpb25JZFtjbGllbnRTdWJzY3JpcHRpb25JZF07XG4gICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB0aGlzLl9zdWJzY3JpcHRpb25zQnlIYXNoW2hhc2hdO1xuICAgICAgYXNzZXJ0KHN1YnNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkLCBgQ291bGQgbm90IGZpbmQgYSBcXGBTdWJzY3JpcHRpb25cXGAgd2hlbiB0ZWFyaW5nIGRvd24gY2xpZW50IHN1YnNjcmlwdGlvbiAjJHtjbGllbnRTdWJzY3JpcHRpb25JZH1gKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5jYWxsYmFja3MuZGVsZXRlKHN1YnNjcmlwdGlvbkNvbmZpZy5jYWxsYmFjayk7XG4gICAgICBhd2FpdCB0aGlzLl91cGRhdGVTdWJzY3JpcHRpb25zKCk7XG4gICAgfTtcbiAgICB0aGlzLl91cGRhdGVTdWJzY3JpcHRpb25zKCk7XG4gICAgcmV0dXJuIGNsaWVudFN1YnNjcmlwdGlvbklkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuZXZlciB0aGUgc3BlY2lmaWVkIGFjY291bnQgY2hhbmdlc1xuICAgKlxuICAgKiBAcGFyYW0gcHVibGljS2V5IFB1YmxpYyBrZXkgb2YgdGhlIGFjY291bnQgdG8gbW9uaXRvclxuICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gaW52b2tlIHdoZW5ldmVyIHRoZSBhY2NvdW50IGlzIGNoYW5nZWRcbiAgICogQHBhcmFtIGNvbmZpZ1xuICAgKiBAcmV0dXJuIHN1YnNjcmlwdGlvbiBpZFxuICAgKi9cblxuICAvKiogQGRlcHJlY2F0ZWQgSW5zdGVhZCwgcGFzcyBpbiBhbiB7QGxpbmsgQWNjb3VudFN1YnNjcmlwdGlvbkNvbmZpZ30gKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWR1cGUtY2xhc3MtbWVtYmVyc1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBlLWNsYXNzLW1lbWJlcnNcbiAgb25BY2NvdW50Q2hhbmdlKHB1YmxpY0tleSwgY2FsbGJhY2ssIGNvbW1pdG1lbnRPckNvbmZpZykge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbW1pdG1lbnQsXG4gICAgICBjb25maWdcbiAgICB9ID0gZXh0cmFjdENvbW1pdG1lbnRGcm9tQ29uZmlnKGNvbW1pdG1lbnRPckNvbmZpZyk7XG4gICAgY29uc3QgYXJncyA9IHRoaXMuX2J1aWxkQXJncyhbcHVibGljS2V5LnRvQmFzZTU4KCldLCBjb21taXRtZW50IHx8IHRoaXMuX2NvbW1pdG1lbnQgfHwgJ2ZpbmFsaXplZCcsXG4gICAgLy8gQXBwbHkgY29ubmVjdGlvbi9zZXJ2ZXIgZGVmYXVsdC5cbiAgICAnYmFzZTY0JywgY29uZmlnKTtcbiAgICByZXR1cm4gdGhpcy5fbWFrZVN1YnNjcmlwdGlvbih7XG4gICAgICBjYWxsYmFjayxcbiAgICAgIG1ldGhvZDogJ2FjY291bnRTdWJzY3JpYmUnLFxuICAgICAgdW5zdWJzY3JpYmVNZXRob2Q6ICdhY2NvdW50VW5zdWJzY3JpYmUnXG4gICAgfSwgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogRGVyZWdpc3RlciBhbiBhY2NvdW50IG5vdGlmaWNhdGlvbiBjYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0gY2xpZW50U3Vic2NyaXB0aW9uSWQgY2xpZW50IHN1YnNjcmlwdGlvbiBpZCB0byBkZXJlZ2lzdGVyXG4gICAqL1xuICBhc3luYyByZW1vdmVBY2NvdW50Q2hhbmdlTGlzdGVuZXIoY2xpZW50U3Vic2NyaXB0aW9uSWQpIHtcbiAgICBhd2FpdCB0aGlzLl91bnN1YnNjcmliZUNsaWVudFN1YnNjcmlwdGlvbihjbGllbnRTdWJzY3JpcHRpb25JZCwgJ2FjY291bnQgY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfd3NPblByb2dyYW1BY2NvdW50Tm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN1YnNjcmlwdGlvblxuICAgIH0gPSBjcmVhdGUobm90aWZpY2F0aW9uLCBQcm9ncmFtQWNjb3VudE5vdGlmaWNhdGlvblJlc3VsdCk7XG4gICAgdGhpcy5faGFuZGxlU2VydmVyTm90aWZpY2F0aW9uKHN1YnNjcmlwdGlvbiwgW3tcbiAgICAgIGFjY291bnRJZDogcmVzdWx0LnZhbHVlLnB1YmtleSxcbiAgICAgIGFjY291bnRJbmZvOiByZXN1bHQudmFsdWUuYWNjb3VudFxuICAgIH0sIHJlc3VsdC5jb250ZXh0XSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW5ldmVyIGFjY291bnRzIG93bmVkIGJ5IHRoZVxuICAgKiBzcGVjaWZpZWQgcHJvZ3JhbSBjaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIHByb2dyYW1JZCBQdWJsaWMga2V5IG9mIHRoZSBwcm9ncmFtIHRvIG1vbml0b3JcbiAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGludm9rZSB3aGVuZXZlciB0aGUgYWNjb3VudCBpcyBjaGFuZ2VkXG4gICAqIEBwYXJhbSBjb25maWdcbiAgICogQHJldHVybiBzdWJzY3JpcHRpb24gaWRcbiAgICovXG5cbiAgLyoqIEBkZXByZWNhdGVkIEluc3RlYWQsIHBhc3MgaW4gYSB7QGxpbmsgUHJvZ3JhbUFjY291bnRTdWJzY3JpcHRpb25Db25maWd9ICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kdXBlLWNsYXNzLW1lbWJlcnNcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZHVwZS1jbGFzcy1tZW1iZXJzXG4gIG9uUHJvZ3JhbUFjY291bnRDaGFuZ2UocHJvZ3JhbUlkLCBjYWxsYmFjaywgY29tbWl0bWVudE9yQ29uZmlnLCBtYXliZUZpbHRlcnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgY29uZmlnXG4gICAgfSA9IGV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyhjb21taXRtZW50T3JDb25maWcpO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW3Byb2dyYW1JZC50b0Jhc2U1OCgpXSwgY29tbWl0bWVudCB8fCB0aGlzLl9jb21taXRtZW50IHx8ICdmaW5hbGl6ZWQnLFxuICAgIC8vIEFwcGx5IGNvbm5lY3Rpb24vc2VydmVyIGRlZmF1bHQuXG4gICAgJ2Jhc2U2NCcgLyogZW5jb2RpbmcgKi8sIGNvbmZpZyA/IGNvbmZpZyA6IG1heWJlRmlsdGVycyA/IHtcbiAgICAgIGZpbHRlcnM6IGFwcGx5RGVmYXVsdE1lbWNtcEVuY29kaW5nVG9GaWx0ZXJzKG1heWJlRmlsdGVycylcbiAgICB9IDogdW5kZWZpbmVkIC8qIGV4dHJhICovKTtcbiAgICByZXR1cm4gdGhpcy5fbWFrZVN1YnNjcmlwdGlvbih7XG4gICAgICBjYWxsYmFjayxcbiAgICAgIG1ldGhvZDogJ3Byb2dyYW1TdWJzY3JpYmUnLFxuICAgICAgdW5zdWJzY3JpYmVNZXRob2Q6ICdwcm9ncmFtVW5zdWJzY3JpYmUnXG4gICAgfSwgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogRGVyZWdpc3RlciBhbiBhY2NvdW50IG5vdGlmaWNhdGlvbiBjYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0gY2xpZW50U3Vic2NyaXB0aW9uSWQgY2xpZW50IHN1YnNjcmlwdGlvbiBpZCB0byBkZXJlZ2lzdGVyXG4gICAqL1xuICBhc3luYyByZW1vdmVQcm9ncmFtQWNjb3VudENoYW5nZUxpc3RlbmVyKGNsaWVudFN1YnNjcmlwdGlvbklkKSB7XG4gICAgYXdhaXQgdGhpcy5fdW5zdWJzY3JpYmVDbGllbnRTdWJzY3JpcHRpb24oY2xpZW50U3Vic2NyaXB0aW9uSWQsICdwcm9ncmFtIGFjY291bnQgY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuZXZlciBsb2dzIGFyZSBlbWl0dGVkLlxuICAgKi9cbiAgb25Mb2dzKGZpbHRlciwgY2FsbGJhY2ssIGNvbW1pdG1lbnQpIHtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzKFt0eXBlb2YgZmlsdGVyID09PSAnb2JqZWN0JyA/IHtcbiAgICAgIG1lbnRpb25zOiBbZmlsdGVyLnRvU3RyaW5nKCldXG4gICAgfSA6IGZpbHRlcl0sIGNvbW1pdG1lbnQgfHwgdGhpcy5fY29tbWl0bWVudCB8fCAnZmluYWxpemVkJyAvLyBBcHBseSBjb25uZWN0aW9uL3NlcnZlciBkZWZhdWx0LlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuX21ha2VTdWJzY3JpcHRpb24oe1xuICAgICAgY2FsbGJhY2ssXG4gICAgICBtZXRob2Q6ICdsb2dzU3Vic2NyaWJlJyxcbiAgICAgIHVuc3Vic2NyaWJlTWV0aG9kOiAnbG9nc1Vuc3Vic2NyaWJlJ1xuICAgIH0sIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlcmVnaXN0ZXIgYSBsb2dzIGNhbGxiYWNrLlxuICAgKlxuICAgKiBAcGFyYW0gY2xpZW50U3Vic2NyaXB0aW9uSWQgY2xpZW50IHN1YnNjcmlwdGlvbiBpZCB0byBkZXJlZ2lzdGVyLlxuICAgKi9cbiAgYXN5bmMgcmVtb3ZlT25Mb2dzTGlzdGVuZXIoY2xpZW50U3Vic2NyaXB0aW9uSWQpIHtcbiAgICBhd2FpdCB0aGlzLl91bnN1YnNjcmliZUNsaWVudFN1YnNjcmlwdGlvbihjbGllbnRTdWJzY3JpcHRpb25JZCwgJ2xvZ3MnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF93c09uTG9nc05vdGlmaWNhdGlvbihub3RpZmljYXRpb24pIHtcbiAgICBjb25zdCB7XG4gICAgICByZXN1bHQsXG4gICAgICBzdWJzY3JpcHRpb25cbiAgICB9ID0gY3JlYXRlKG5vdGlmaWNhdGlvbiwgTG9nc05vdGlmaWNhdGlvblJlc3VsdCk7XG4gICAgdGhpcy5faGFuZGxlU2VydmVyTm90aWZpY2F0aW9uKHN1YnNjcmlwdGlvbiwgW3Jlc3VsdC52YWx1ZSwgcmVzdWx0LmNvbnRleHRdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF93c09uU2xvdE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24pIHtcbiAgICBjb25zdCB7XG4gICAgICByZXN1bHQsXG4gICAgICBzdWJzY3JpcHRpb25cbiAgICB9ID0gY3JlYXRlKG5vdGlmaWNhdGlvbiwgU2xvdE5vdGlmaWNhdGlvblJlc3VsdCk7XG4gICAgdGhpcy5faGFuZGxlU2VydmVyTm90aWZpY2F0aW9uKHN1YnNjcmlwdGlvbiwgW3Jlc3VsdF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB1cG9uIHNsb3QgY2hhbmdlc1xuICAgKlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gaW52b2tlIHdoZW5ldmVyIHRoZSBzbG90IGNoYW5nZXNcbiAgICogQHJldHVybiBzdWJzY3JpcHRpb24gaWRcbiAgICovXG4gIG9uU2xvdENoYW5nZShjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl9tYWtlU3Vic2NyaXB0aW9uKHtcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgbWV0aG9kOiAnc2xvdFN1YnNjcmliZScsXG4gICAgICB1bnN1YnNjcmliZU1ldGhvZDogJ3Nsb3RVbnN1YnNjcmliZSdcbiAgICB9LCBbXSAvKiBhcmdzICovKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXJlZ2lzdGVyIGEgc2xvdCBub3RpZmljYXRpb24gY2FsbGJhY2tcbiAgICpcbiAgICogQHBhcmFtIGNsaWVudFN1YnNjcmlwdGlvbklkIGNsaWVudCBzdWJzY3JpcHRpb24gaWQgdG8gZGVyZWdpc3RlclxuICAgKi9cbiAgYXN5bmMgcmVtb3ZlU2xvdENoYW5nZUxpc3RlbmVyKGNsaWVudFN1YnNjcmlwdGlvbklkKSB7XG4gICAgYXdhaXQgdGhpcy5fdW5zdWJzY3JpYmVDbGllbnRTdWJzY3JpcHRpb24oY2xpZW50U3Vic2NyaXB0aW9uSWQsICdzbG90IGNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3dzT25TbG90VXBkYXRlc05vdGlmaWNhdGlvbihub3RpZmljYXRpb24pIHtcbiAgICBjb25zdCB7XG4gICAgICByZXN1bHQsXG4gICAgICBzdWJzY3JpcHRpb25cbiAgICB9ID0gY3JlYXRlKG5vdGlmaWNhdGlvbiwgU2xvdFVwZGF0ZU5vdGlmaWNhdGlvblJlc3VsdCk7XG4gICAgdGhpcy5faGFuZGxlU2VydmVyTm90aWZpY2F0aW9uKHN1YnNjcmlwdGlvbiwgW3Jlc3VsdF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB1cG9uIHNsb3QgdXBkYXRlcy4ge0BsaW5rIFNsb3RVcGRhdGV9J3NcbiAgICogbWF5IGJlIHVzZWZ1bCB0byB0cmFjayBsaXZlIHByb2dyZXNzIG9mIGEgY2x1c3Rlci5cbiAgICpcbiAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGludm9rZSB3aGVuZXZlciB0aGUgc2xvdCB1cGRhdGVzXG4gICAqIEByZXR1cm4gc3Vic2NyaXB0aW9uIGlkXG4gICAqL1xuICBvblNsb3RVcGRhdGUoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fbWFrZVN1YnNjcmlwdGlvbih7XG4gICAgICBjYWxsYmFjayxcbiAgICAgIG1ldGhvZDogJ3Nsb3RzVXBkYXRlc1N1YnNjcmliZScsXG4gICAgICB1bnN1YnNjcmliZU1ldGhvZDogJ3Nsb3RzVXBkYXRlc1Vuc3Vic2NyaWJlJ1xuICAgIH0sIFtdIC8qIGFyZ3MgKi8pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlcmVnaXN0ZXIgYSBzbG90IHVwZGF0ZSBub3RpZmljYXRpb24gY2FsbGJhY2tcbiAgICpcbiAgICogQHBhcmFtIGNsaWVudFN1YnNjcmlwdGlvbklkIGNsaWVudCBzdWJzY3JpcHRpb24gaWQgdG8gZGVyZWdpc3RlclxuICAgKi9cbiAgYXN5bmMgcmVtb3ZlU2xvdFVwZGF0ZUxpc3RlbmVyKGNsaWVudFN1YnNjcmlwdGlvbklkKSB7XG4gICAgYXdhaXQgdGhpcy5fdW5zdWJzY3JpYmVDbGllbnRTdWJzY3JpcHRpb24oY2xpZW50U3Vic2NyaXB0aW9uSWQsICdzbG90IHVwZGF0ZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuICBhc3luYyBfdW5zdWJzY3JpYmVDbGllbnRTdWJzY3JpcHRpb24oY2xpZW50U3Vic2NyaXB0aW9uSWQsIHN1YnNjcmlwdGlvbk5hbWUpIHtcbiAgICBjb25zdCBkaXNwb3NlID0gdGhpcy5fc3Vic2NyaXB0aW9uRGlzcG9zZUZ1bmN0aW9uc0J5Q2xpZW50U3Vic2NyaXB0aW9uSWRbY2xpZW50U3Vic2NyaXB0aW9uSWRdO1xuICAgIGlmIChkaXNwb3NlKSB7XG4gICAgICBhd2FpdCBkaXNwb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybignSWdub3JlZCB1bnN1YnNjcmliZSByZXF1ZXN0IGJlY2F1c2UgYW4gYWN0aXZlIHN1YnNjcmlwdGlvbiB3aXRoIGlkICcgKyBgXFxgJHtjbGllbnRTdWJzY3JpcHRpb25JZH1cXGAgZm9yICcke3N1YnNjcmlwdGlvbk5hbWV9JyBldmVudHMgYCArICdjb3VsZCBub3QgYmUgZm91bmQuJyk7XG4gICAgfVxuICB9XG4gIF9idWlsZEFyZ3MoYXJncywgb3ZlcnJpZGUsIGVuY29kaW5nLCBleHRyYSkge1xuICAgIGNvbnN0IGNvbW1pdG1lbnQgPSBvdmVycmlkZSB8fCB0aGlzLl9jb21taXRtZW50O1xuICAgIGlmIChjb21taXRtZW50IHx8IGVuY29kaW5nIHx8IGV4dHJhKSB7XG4gICAgICBsZXQgb3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKGVuY29kaW5nKSB7XG4gICAgICAgIG9wdGlvbnMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgICAgIH1cbiAgICAgIGlmIChjb21taXRtZW50KSB7XG4gICAgICAgIG9wdGlvbnMuY29tbWl0bWVudCA9IGNvbW1pdG1lbnQ7XG4gICAgICB9XG4gICAgICBpZiAoZXh0cmEpIHtcbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24ob3B0aW9ucywgZXh0cmEpO1xuICAgICAgfVxuICAgICAgYXJncy5wdXNoKG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gYXJncztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9idWlsZEFyZ3NBdExlYXN0Q29uZmlybWVkKGFyZ3MsIG92ZXJyaWRlLCBlbmNvZGluZywgZXh0cmEpIHtcbiAgICBjb25zdCBjb21taXRtZW50ID0gb3ZlcnJpZGUgfHwgdGhpcy5fY29tbWl0bWVudDtcbiAgICBpZiAoY29tbWl0bWVudCAmJiAhWydjb25maXJtZWQnLCAnZmluYWxpemVkJ10uaW5jbHVkZXMoY29tbWl0bWVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVXNpbmcgQ29ubmVjdGlvbiB3aXRoIGRlZmF1bHQgY29tbWl0bWVudDogYCcgKyB0aGlzLl9jb21taXRtZW50ICsgJ2AsIGJ1dCBtZXRob2QgcmVxdWlyZXMgYXQgbGVhc3QgYGNvbmZpcm1lZGAnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2J1aWxkQXJncyhhcmdzLCBvdmVycmlkZSwgZW5jb2RpbmcsIGV4dHJhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF93c09uU2lnbmF0dXJlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN1YnNjcmlwdGlvblxuICAgIH0gPSBjcmVhdGUobm90aWZpY2F0aW9uLCBTaWduYXR1cmVOb3RpZmljYXRpb25SZXN1bHQpO1xuICAgIGlmIChyZXN1bHQudmFsdWUgIT09ICdyZWNlaXZlZFNpZ25hdHVyZScpIHtcbiAgICAgIC8qKlxuICAgICAgICogU3BlY2lhbCBjYXNlLlxuICAgICAgICogQWZ0ZXIgYSBzaWduYXR1cmUgaXMgcHJvY2Vzc2VkLCBSUENzIGF1dG9tYXRpY2FsbHkgZGlzcG9zZSBvZiB0aGVcbiAgICAgICAqIHN1YnNjcmlwdGlvbiBvbiB0aGUgc2VydmVyIHNpZGUuIFdlIG5lZWQgdG8gdHJhY2sgd2hpY2ggb2YgdGhlc2VcbiAgICAgICAqIHN1YnNjcmlwdGlvbnMgaGF2ZSBiZWVuIGRpc3Bvc2VkIGluIHN1Y2ggYSB3YXksIHNvIHRoYXQgd2Uga25vd1xuICAgICAgICogd2hldGhlciB0aGUgY2xpZW50IGlzIGRlYWxpbmcgd2l0aCBhIG5vdC15ZXQtcHJvY2Vzc2VkIHNpZ25hdHVyZVxuICAgICAgICogKGluIHdoaWNoIGNhc2Ugd2UgbXVzdCB0ZWFyIGRvd24gdGhlIHNlcnZlciBzdWJzY3JpcHRpb24pIG9yIGFuXG4gICAgICAgKiBhbHJlYWR5LXByb2Nlc3NlZCBzaWduYXR1cmUgKGluIHdoaWNoIGNhc2UgdGhlIGNsaWVudCBjYW4gc2ltcGx5XG4gICAgICAgKiBjbGVhciBvdXQgdGhlIHN1YnNjcmlwdGlvbiBsb2NhbGx5IHdpdGhvdXQgdGVsbGluZyB0aGUgc2VydmVyKS5cbiAgICAgICAqXG4gICAgICAgKiBOT1RFOiBUaGVyZSBpcyBhIHByb3Bvc2FsIHRvIGVsaW1pbmF0ZSB0aGlzIHNwZWNpYWwgY2FzZSwgaGVyZTpcbiAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2xhbmEtbGFicy9zb2xhbmEvaXNzdWVzLzE4ODkyXG4gICAgICAgKi9cbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNBdXRvRGlzcG9zZWRCeVJwYy5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICB9XG4gICAgdGhpcy5faGFuZGxlU2VydmVyTm90aWZpY2F0aW9uKHN1YnNjcmlwdGlvbiwgcmVzdWx0LnZhbHVlID09PSAncmVjZWl2ZWRTaWduYXR1cmUnID8gW3tcbiAgICAgIHR5cGU6ICdyZWNlaXZlZCdcbiAgICB9LCByZXN1bHQuY29udGV4dF0gOiBbe1xuICAgICAgdHlwZTogJ3N0YXR1cycsXG4gICAgICByZXN1bHQ6IHJlc3VsdC52YWx1ZVxuICAgIH0sIHJlc3VsdC5jb250ZXh0XSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHVwb24gc2lnbmF0dXJlIHVwZGF0ZXNcbiAgICpcbiAgICogQHBhcmFtIHNpZ25hdHVyZSBUcmFuc2FjdGlvbiBzaWduYXR1cmUgc3RyaW5nIGluIGJhc2UgNThcbiAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGludm9rZSBvbiBzaWduYXR1cmUgbm90aWZpY2F0aW9uc1xuICAgKiBAcGFyYW0gY29tbWl0bWVudCBTcGVjaWZ5IHRoZSBjb21taXRtZW50IGxldmVsIHNpZ25hdHVyZSBtdXN0IHJlYWNoIGJlZm9yZSBub3RpZmljYXRpb25cbiAgICogQHJldHVybiBzdWJzY3JpcHRpb24gaWRcbiAgICovXG4gIG9uU2lnbmF0dXJlKHNpZ25hdHVyZSwgY2FsbGJhY2ssIGNvbW1pdG1lbnQpIHtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5fYnVpbGRBcmdzKFtzaWduYXR1cmVdLCBjb21taXRtZW50IHx8IHRoaXMuX2NvbW1pdG1lbnQgfHwgJ2ZpbmFsaXplZCcgLy8gQXBwbHkgY29ubmVjdGlvbi9zZXJ2ZXIgZGVmYXVsdC5cbiAgICApO1xuICAgIGNvbnN0IGNsaWVudFN1YnNjcmlwdGlvbklkID0gdGhpcy5fbWFrZVN1YnNjcmlwdGlvbih7XG4gICAgICBjYWxsYmFjazogKG5vdGlmaWNhdGlvbiwgY29udGV4dCkgPT4ge1xuICAgICAgICBpZiAobm90aWZpY2F0aW9uLnR5cGUgPT09ICdzdGF0dXMnKSB7XG4gICAgICAgICAgY2FsbGJhY2sobm90aWZpY2F0aW9uLnJlc3VsdCwgY29udGV4dCk7XG4gICAgICAgICAgLy8gU2lnbmF0dXJlcyBzdWJzY3JpcHRpb25zIGFyZSBhdXRvLXJlbW92ZWQgYnkgdGhlIFJQQyBzZXJ2aWNlXG4gICAgICAgICAgLy8gc28gbm8gbmVlZCB0byBleHBsaWNpdGx5IHNlbmQgYW4gdW5zdWJzY3JpYmUgbWVzc2FnZS5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVTaWduYXR1cmVMaXN0ZW5lcihjbGllbnRTdWJzY3JpcHRpb25JZCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICAgICAgICB9IGNhdGNoIChfZXJyKSB7XG4gICAgICAgICAgICAvLyBBbHJlYWR5IHJlbW92ZWQuXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbWV0aG9kOiAnc2lnbmF0dXJlU3Vic2NyaWJlJyxcbiAgICAgIHVuc3Vic2NyaWJlTWV0aG9kOiAnc2lnbmF0dXJlVW5zdWJzY3JpYmUnXG4gICAgfSwgYXJncyk7XG4gICAgcmV0dXJuIGNsaWVudFN1YnNjcmlwdGlvbklkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCB3aGVuIGEgdHJhbnNhY3Rpb24gaXNcbiAgICogcmVjZWl2ZWQgYW5kL29yIHByb2Nlc3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHNpZ25hdHVyZSBUcmFuc2FjdGlvbiBzaWduYXR1cmUgc3RyaW5nIGluIGJhc2UgNThcbiAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGludm9rZSBvbiBzaWduYXR1cmUgbm90aWZpY2F0aW9uc1xuICAgKiBAcGFyYW0gb3B0aW9ucyBFbmFibGUgcmVjZWl2ZWQgbm90aWZpY2F0aW9ucyBhbmQgc2V0IHRoZSBjb21taXRtZW50XG4gICAqICAgbGV2ZWwgdGhhdCBzaWduYXR1cmUgbXVzdCByZWFjaCBiZWZvcmUgbm90aWZpY2F0aW9uXG4gICAqIEByZXR1cm4gc3Vic2NyaXB0aW9uIGlkXG4gICAqL1xuICBvblNpZ25hdHVyZVdpdGhPcHRpb25zKHNpZ25hdHVyZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb21taXRtZW50LFxuICAgICAgLi4uZXh0cmFcbiAgICB9ID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGNvbW1pdG1lbnQ6IG9wdGlvbnMgJiYgb3B0aW9ucy5jb21taXRtZW50IHx8IHRoaXMuX2NvbW1pdG1lbnQgfHwgJ2ZpbmFsaXplZCcgLy8gQXBwbHkgY29ubmVjdGlvbi9zZXJ2ZXIgZGVmYXVsdC5cbiAgICB9O1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLl9idWlsZEFyZ3MoW3NpZ25hdHVyZV0sIGNvbW1pdG1lbnQsIHVuZGVmaW5lZCAvKiBlbmNvZGluZyAqLywgZXh0cmEpO1xuICAgIGNvbnN0IGNsaWVudFN1YnNjcmlwdGlvbklkID0gdGhpcy5fbWFrZVN1YnNjcmlwdGlvbih7XG4gICAgICBjYWxsYmFjazogKG5vdGlmaWNhdGlvbiwgY29udGV4dCkgPT4ge1xuICAgICAgICBjYWxsYmFjayhub3RpZmljYXRpb24sIGNvbnRleHQpO1xuICAgICAgICAvLyBTaWduYXR1cmVzIHN1YnNjcmlwdGlvbnMgYXJlIGF1dG8tcmVtb3ZlZCBieSB0aGUgUlBDIHNlcnZpY2VcbiAgICAgICAgLy8gc28gbm8gbmVlZCB0byBleHBsaWNpdGx5IHNlbmQgYW4gdW5zdWJzY3JpYmUgbWVzc2FnZS5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLnJlbW92ZVNpZ25hdHVyZUxpc3RlbmVyKGNsaWVudFN1YnNjcmlwdGlvbklkKTtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBjYXRjaCAoX2Vycikge1xuICAgICAgICAgIC8vIEFscmVhZHkgcmVtb3ZlZC5cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG1ldGhvZDogJ3NpZ25hdHVyZVN1YnNjcmliZScsXG4gICAgICB1bnN1YnNjcmliZU1ldGhvZDogJ3NpZ25hdHVyZVVuc3Vic2NyaWJlJ1xuICAgIH0sIGFyZ3MpO1xuICAgIHJldHVybiBjbGllbnRTdWJzY3JpcHRpb25JZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXJlZ2lzdGVyIGEgc2lnbmF0dXJlIG5vdGlmaWNhdGlvbiBjYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0gY2xpZW50U3Vic2NyaXB0aW9uSWQgY2xpZW50IHN1YnNjcmlwdGlvbiBpZCB0byBkZXJlZ2lzdGVyXG4gICAqL1xuICBhc3luYyByZW1vdmVTaWduYXR1cmVMaXN0ZW5lcihjbGllbnRTdWJzY3JpcHRpb25JZCkge1xuICAgIGF3YWl0IHRoaXMuX3Vuc3Vic2NyaWJlQ2xpZW50U3Vic2NyaXB0aW9uKGNsaWVudFN1YnNjcmlwdGlvbklkLCAnc2lnbmF0dXJlIHJlc3VsdCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3dzT25Sb290Tm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc3VsdCxcbiAgICAgIHN1YnNjcmlwdGlvblxuICAgIH0gPSBjcmVhdGUobm90aWZpY2F0aW9uLCBSb290Tm90aWZpY2F0aW9uUmVzdWx0KTtcbiAgICB0aGlzLl9oYW5kbGVTZXJ2ZXJOb3RpZmljYXRpb24oc3Vic2NyaXB0aW9uLCBbcmVzdWx0XSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHVwb24gcm9vdCBjaGFuZ2VzXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayBGdW5jdGlvbiB0byBpbnZva2Ugd2hlbmV2ZXIgdGhlIHJvb3QgY2hhbmdlc1xuICAgKiBAcmV0dXJuIHN1YnNjcmlwdGlvbiBpZFxuICAgKi9cbiAgb25Sb290Q2hhbmdlKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX21ha2VTdWJzY3JpcHRpb24oe1xuICAgICAgY2FsbGJhY2ssXG4gICAgICBtZXRob2Q6ICdyb290U3Vic2NyaWJlJyxcbiAgICAgIHVuc3Vic2NyaWJlTWV0aG9kOiAncm9vdFVuc3Vic2NyaWJlJ1xuICAgIH0sIFtdIC8qIGFyZ3MgKi8pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlcmVnaXN0ZXIgYSByb290IG5vdGlmaWNhdGlvbiBjYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0gY2xpZW50U3Vic2NyaXB0aW9uSWQgY2xpZW50IHN1YnNjcmlwdGlvbiBpZCB0byBkZXJlZ2lzdGVyXG4gICAqL1xuICBhc3luYyByZW1vdmVSb290Q2hhbmdlTGlzdGVuZXIoY2xpZW50U3Vic2NyaXB0aW9uSWQpIHtcbiAgICBhd2FpdCB0aGlzLl91bnN1YnNjcmliZUNsaWVudFN1YnNjcmlwdGlvbihjbGllbnRTdWJzY3JpcHRpb25JZCwgJ3Jvb3QgY2hhbmdlJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBLZXlwYWlyIHNpZ25lciBpbnRlcmZhY2VcbiAqL1xuXG4vKipcbiAqIEFuIGFjY291bnQga2V5cGFpciB1c2VkIGZvciBzaWduaW5nIHRyYW5zYWN0aW9ucy5cbiAqL1xuY2xhc3MgS2V5cGFpciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcga2V5cGFpciBpbnN0YW5jZS5cbiAgICogR2VuZXJhdGUgcmFuZG9tIGtleXBhaXIgaWYgbm8ge0BsaW5rIEVkMjU1MTlLZXlwYWlyfSBpcyBwcm92aWRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtFZDI1NTE5S2V5cGFpcn0ga2V5cGFpciBlZDI1NTE5IGtleXBhaXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKGtleXBhaXIpIHtcbiAgICB0aGlzLl9rZXlwYWlyID0gdm9pZCAwO1xuICAgIHRoaXMuX2tleXBhaXIgPSBrZXlwYWlyID8/IGdlbmVyYXRlS2V5cGFpcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgbmV3IHJhbmRvbSBrZXlwYWlyXG4gICAqXG4gICAqIEByZXR1cm5zIHtLZXlwYWlyfSBLZXlwYWlyXG4gICAqL1xuICBzdGF0aWMgZ2VuZXJhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBLZXlwYWlyKGdlbmVyYXRlS2V5cGFpcigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBrZXlwYWlyIGZyb20gYSByYXcgc2VjcmV0IGtleSBieXRlIGFycmF5LlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIHRvIHJlY3JlYXRlIGEga2V5cGFpciBmcm9tIGEgcHJldmlvdXNseVxuICAgKiBnZW5lcmF0ZWQgc2VjcmV0IGtleS4gR2VuZXJhdGluZyBrZXlwYWlycyBmcm9tIGEgcmFuZG9tIHNlZWQgc2hvdWxkIGJlIGRvbmVcbiAgICogd2l0aCB0aGUge0BsaW5rIEtleXBhaXIuZnJvbVNlZWR9IG1ldGhvZC5cbiAgICpcbiAgICogQHRocm93cyBlcnJvciBpZiB0aGUgcHJvdmlkZWQgc2VjcmV0IGtleSBpcyBpbnZhbGlkIGFuZCB2YWxpZGF0aW9uIGlzIG5vdCBza2lwcGVkLlxuICAgKlxuICAgKiBAcGFyYW0gc2VjcmV0S2V5IHNlY3JldCBrZXkgYnl0ZSBhcnJheVxuICAgKiBAcGFyYW0gb3B0aW9ucyBza2lwIHNlY3JldCBrZXkgdmFsaWRhdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7S2V5cGFpcn0gS2V5cGFpclxuICAgKi9cbiAgc3RhdGljIGZyb21TZWNyZXRLZXkoc2VjcmV0S2V5LCBvcHRpb25zKSB7XG4gICAgaWYgKHNlY3JldEtleS5ieXRlTGVuZ3RoICE9PSA2NCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgc2VjcmV0IGtleSBzaXplJyk7XG4gICAgfVxuICAgIGNvbnN0IHB1YmxpY0tleSA9IHNlY3JldEtleS5zbGljZSgzMiwgNjQpO1xuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5za2lwVmFsaWRhdGlvbikge1xuICAgICAgY29uc3QgcHJpdmF0ZVNjYWxhciA9IHNlY3JldEtleS5zbGljZSgwLCAzMik7XG4gICAgICBjb25zdCBjb21wdXRlZFB1YmxpY0tleSA9IGdldFB1YmxpY0tleShwcml2YXRlU2NhbGFyKTtcbiAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCAzMjsgaWkrKykge1xuICAgICAgICBpZiAocHVibGljS2V5W2lpXSAhPT0gY29tcHV0ZWRQdWJsaWNLZXlbaWldKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm92aWRlZCBzZWNyZXRLZXkgaXMgaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgS2V5cGFpcih7XG4gICAgICBwdWJsaWNLZXksXG4gICAgICBzZWNyZXRLZXlcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIGtleXBhaXIgZnJvbSBhIDMyIGJ5dGUgc2VlZC5cbiAgICpcbiAgICogQHBhcmFtIHNlZWQgc2VlZCBieXRlIGFycmF5XG4gICAqXG4gICAqIEByZXR1cm5zIHtLZXlwYWlyfSBLZXlwYWlyXG4gICAqL1xuICBzdGF0aWMgZnJvbVNlZWQoc2VlZCkge1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IGdldFB1YmxpY0tleShzZWVkKTtcbiAgICBjb25zdCBzZWNyZXRLZXkgPSBuZXcgVWludDhBcnJheSg2NCk7XG4gICAgc2VjcmV0S2V5LnNldChzZWVkKTtcbiAgICBzZWNyZXRLZXkuc2V0KHB1YmxpY0tleSwgMzIpO1xuICAgIHJldHVybiBuZXcgS2V5cGFpcih7XG4gICAgICBwdWJsaWNLZXksXG4gICAgICBzZWNyZXRLZXlcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgcHVibGljIGtleSBmb3IgdGhpcyBrZXlwYWlyXG4gICAqXG4gICAqIEByZXR1cm5zIHtQdWJsaWNLZXl9IFB1YmxpY0tleVxuICAgKi9cbiAgZ2V0IHB1YmxpY0tleSgpIHtcbiAgICByZXR1cm4gbmV3IFB1YmxpY0tleSh0aGlzLl9rZXlwYWlyLnB1YmxpY0tleSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHJhdyBzZWNyZXQga2V5IGZvciB0aGlzIGtleXBhaXJcbiAgICogQHJldHVybnMge1VpbnQ4QXJyYXl9IFNlY3JldCBrZXkgaW4gYW4gYXJyYXkgb2YgVWludDggYnl0ZXNcbiAgICovXG4gIGdldCBzZWNyZXRLZXkoKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMuX2tleXBhaXIuc2VjcmV0S2V5KTtcbiAgfVxufVxuXG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHZhbGlkIExvb2t1cFRhYmxlSW5zdHJ1Y3Rpb25UeXBlJ3NcbiAqL1xuXG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHZhbGlkIGFkZHJlc3MgbG9va3VwIHRhYmxlIEluc3RydWN0aW9uVHlwZSdzXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgTE9PS1VQX1RBQkxFX0lOU1RSVUNUSU9OX0xBWU9VVFMgPSBPYmplY3QuZnJlZXplKHtcbiAgQ3JlYXRlTG9va3VwVGFibGU6IHtcbiAgICBpbmRleDogMCxcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyksIHU2NCgncmVjZW50U2xvdCcpLCBCdWZmZXJMYXlvdXQudTgoJ2J1bXBTZWVkJyldKVxuICB9LFxuICBGcmVlemVMb29rdXBUYWJsZToge1xuICAgIGluZGV4OiAxLFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKV0pXG4gIH0sXG4gIEV4dGVuZExvb2t1cFRhYmxlOiB7XG4gICAgaW5kZXg6IDIsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpLCB1NjQoKSwgQnVmZmVyTGF5b3V0LnNlcShwdWJsaWNLZXkoKSwgQnVmZmVyTGF5b3V0Lm9mZnNldChCdWZmZXJMYXlvdXQudTMyKCksIC04KSwgJ2FkZHJlc3NlcycpXSlcbiAgfSxcbiAgRGVhY3RpdmF0ZUxvb2t1cFRhYmxlOiB7XG4gICAgaW5kZXg6IDMsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpXSlcbiAgfSxcbiAgQ2xvc2VMb29rdXBUYWJsZToge1xuICAgIGluZGV4OiA0LFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKV0pXG4gIH1cbn0pO1xuY2xhc3MgQWRkcmVzc0xvb2t1cFRhYmxlSW5zdHJ1Y3Rpb24ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHt9XG4gIHN0YXRpYyBkZWNvZGVJbnN0cnVjdGlvblR5cGUoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgY29uc3QgaW5zdHJ1Y3Rpb25UeXBlTGF5b3V0ID0gQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKTtcbiAgICBjb25zdCBpbmRleCA9IGluc3RydWN0aW9uVHlwZUxheW91dC5kZWNvZGUoaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgbGV0IHR5cGU7XG4gICAgZm9yIChjb25zdCBbbGF5b3V0VHlwZSwgbGF5b3V0XSBvZiBPYmplY3QuZW50cmllcyhMT09LVVBfVEFCTEVfSU5TVFJVQ1RJT05fTEFZT1VUUykpIHtcbiAgICAgIGlmIChsYXlvdXQuaW5kZXggPT0gaW5kZXgpIHtcbiAgICAgICAgdHlwZSA9IGxheW91dFR5cGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBJbnN0cnVjdGlvbi4gU2hvdWxkIGJlIGEgTG9va3VwVGFibGUgSW5zdHJ1Y3Rpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cbiAgc3RhdGljIGRlY29kZUNyZWF0ZUxvb2t1cFRhYmxlKGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIHRoaXMuY2hlY2tLZXlzTGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDQpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlY2VudFNsb3RcbiAgICB9ID0gZGVjb2RlRGF0YSQxKExPT0tVUF9UQUJMRV9JTlNUUlVDVElPTl9MQVlPVVRTLkNyZWF0ZUxvb2t1cFRhYmxlLCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgYXV0aG9yaXR5OiBpbnN0cnVjdGlvbi5rZXlzWzFdLnB1YmtleSxcbiAgICAgIHBheWVyOiBpbnN0cnVjdGlvbi5rZXlzWzJdLnB1YmtleSxcbiAgICAgIHJlY2VudFNsb3Q6IE51bWJlcihyZWNlbnRTbG90KVxuICAgIH07XG4gIH1cbiAgc3RhdGljIGRlY29kZUV4dGVuZExvb2t1cFRhYmxlKGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIGlmIChpbnN0cnVjdGlvbi5rZXlzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBpbnN0cnVjdGlvbjsgZm91bmQgJHtpbnN0cnVjdGlvbi5rZXlzLmxlbmd0aH0ga2V5cywgZXhwZWN0ZWQgYXQgbGVhc3QgMmApO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBhZGRyZXNzZXNcbiAgICB9ID0gZGVjb2RlRGF0YSQxKExPT0tVUF9UQUJMRV9JTlNUUlVDVElPTl9MQVlPVVRTLkV4dGVuZExvb2t1cFRhYmxlLCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgbG9va3VwVGFibGU6IGluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5LFxuICAgICAgYXV0aG9yaXR5OiBpbnN0cnVjdGlvbi5rZXlzWzFdLnB1YmtleSxcbiAgICAgIHBheWVyOiBpbnN0cnVjdGlvbi5rZXlzLmxlbmd0aCA+IDIgPyBpbnN0cnVjdGlvbi5rZXlzWzJdLnB1YmtleSA6IHVuZGVmaW5lZCxcbiAgICAgIGFkZHJlc3NlczogYWRkcmVzc2VzLm1hcChidWZmZXIgPT4gbmV3IFB1YmxpY0tleShidWZmZXIpKVxuICAgIH07XG4gIH1cbiAgc3RhdGljIGRlY29kZUNsb3NlTG9va3VwVGFibGUoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgdGhpcy5jaGVja0tleXNMZW5ndGgoaW5zdHJ1Y3Rpb24ua2V5cywgMyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvb2t1cFRhYmxlOiBpbnN0cnVjdGlvbi5rZXlzWzBdLnB1YmtleSxcbiAgICAgIGF1dGhvcml0eTogaW5zdHJ1Y3Rpb24ua2V5c1sxXS5wdWJrZXksXG4gICAgICByZWNpcGllbnQ6IGluc3RydWN0aW9uLmtleXNbMl0ucHVia2V5XG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZGVjb2RlRnJlZXplTG9va3VwVGFibGUoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgdGhpcy5jaGVja0tleXNMZW5ndGgoaW5zdHJ1Y3Rpb24ua2V5cywgMik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvb2t1cFRhYmxlOiBpbnN0cnVjdGlvbi5rZXlzWzBdLnB1YmtleSxcbiAgICAgIGF1dGhvcml0eTogaW5zdHJ1Y3Rpb24ua2V5c1sxXS5wdWJrZXlcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBkZWNvZGVEZWFjdGl2YXRlTG9va3VwVGFibGUoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgdGhpcy5jaGVja0tleXNMZW5ndGgoaW5zdHJ1Y3Rpb24ua2V5cywgMik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvb2t1cFRhYmxlOiBpbnN0cnVjdGlvbi5rZXlzWzBdLnB1YmtleSxcbiAgICAgIGF1dGhvcml0eTogaW5zdHJ1Y3Rpb24ua2V5c1sxXS5wdWJrZXlcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgc3RhdGljIGNoZWNrUHJvZ3JhbUlkKHByb2dyYW1JZCkge1xuICAgIGlmICghcHJvZ3JhbUlkLmVxdWFscyhBZGRyZXNzTG9va3VwVGFibGVQcm9ncmFtLnByb2dyYW1JZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbnN0cnVjdGlvbjsgcHJvZ3JhbUlkIGlzIG5vdCBBZGRyZXNzTG9va3VwVGFibGUgUHJvZ3JhbScpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzdGF0aWMgY2hlY2tLZXlzTGVuZ3RoKGtleXMsIGV4cGVjdGVkTGVuZ3RoKSB7XG4gICAgaWYgKGtleXMubGVuZ3RoIDwgZXhwZWN0ZWRMZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBpbnN0cnVjdGlvbjsgZm91bmQgJHtrZXlzLmxlbmd0aH0ga2V5cywgZXhwZWN0ZWQgYXQgbGVhc3QgJHtleHBlY3RlZExlbmd0aH1gKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIEFkZHJlc3NMb29rdXBUYWJsZVByb2dyYW0ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHt9XG4gIHN0YXRpYyBjcmVhdGVMb29rdXBUYWJsZShwYXJhbXMpIHtcbiAgICBjb25zdCBbbG9va3VwVGFibGVBZGRyZXNzLCBidW1wU2VlZF0gPSBQdWJsaWNLZXkuZmluZFByb2dyYW1BZGRyZXNzU3luYyhbcGFyYW1zLmF1dGhvcml0eS50b0J1ZmZlcigpLCB0b0J1ZmZlckxFKEJpZ0ludChwYXJhbXMucmVjZW50U2xvdCksIDgpXSwgdGhpcy5wcm9ncmFtSWQpO1xuICAgIGNvbnN0IHR5cGUgPSBMT09LVVBfVEFCTEVfSU5TVFJVQ1RJT05fTEFZT1VUUy5DcmVhdGVMb29rdXBUYWJsZTtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICByZWNlbnRTbG90OiBCaWdJbnQocGFyYW1zLnJlY2VudFNsb3QpLFxuICAgICAgYnVtcFNlZWQ6IGJ1bXBTZWVkXG4gICAgfSk7XG4gICAgY29uc3Qga2V5cyA9IFt7XG4gICAgICBwdWJrZXk6IGxvb2t1cFRhYmxlQWRkcmVzcyxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICB9LCB7XG4gICAgICBwdWJrZXk6IHBhcmFtcy5hdXRob3JpdHksXG4gICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgfSwge1xuICAgICAgcHVia2V5OiBwYXJhbXMucGF5ZXIsXG4gICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICB9LCB7XG4gICAgICBwdWJrZXk6IFN5c3RlbVByb2dyYW0ucHJvZ3JhbUlkLFxuICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICB9XTtcbiAgICByZXR1cm4gW25ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBrZXlzOiBrZXlzLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pLCBsb29rdXBUYWJsZUFkZHJlc3NdO1xuICB9XG4gIHN0YXRpYyBmcmVlemVMb29rdXBUYWJsZShwYXJhbXMpIHtcbiAgICBjb25zdCB0eXBlID0gTE9PS1VQX1RBQkxFX0lOU1RSVUNUSU9OX0xBWU9VVFMuRnJlZXplTG9va3VwVGFibGU7XG4gICAgY29uc3QgZGF0YSA9IGVuY29kZURhdGEodHlwZSk7XG4gICAgY29uc3Qga2V5cyA9IFt7XG4gICAgICBwdWJrZXk6IHBhcmFtcy5sb29rdXBUYWJsZSxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICB9LCB7XG4gICAgICBwdWJrZXk6IHBhcmFtcy5hdXRob3JpdHksXG4gICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgfV07XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBrZXlzOiBrZXlzLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pO1xuICB9XG4gIHN0YXRpYyBleHRlbmRMb29rdXBUYWJsZShwYXJhbXMpIHtcbiAgICBjb25zdCB0eXBlID0gTE9PS1VQX1RBQkxFX0lOU1RSVUNUSU9OX0xBWU9VVFMuRXh0ZW5kTG9va3VwVGFibGU7XG4gICAgY29uc3QgZGF0YSA9IGVuY29kZURhdGEodHlwZSwge1xuICAgICAgYWRkcmVzc2VzOiBwYXJhbXMuYWRkcmVzc2VzLm1hcChhZGRyID0+IGFkZHIudG9CeXRlcygpKVxuICAgIH0pO1xuICAgIGNvbnN0IGtleXMgPSBbe1xuICAgICAgcHVia2V5OiBwYXJhbXMubG9va3VwVGFibGUsXG4gICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgfSwge1xuICAgICAgcHVia2V5OiBwYXJhbXMuYXV0aG9yaXR5LFxuICAgICAgaXNTaWduZXI6IHRydWUsXG4gICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgIH1dO1xuICAgIGlmIChwYXJhbXMucGF5ZXIpIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIHB1YmtleTogcGFyYW1zLnBheWVyLFxuICAgICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IFN5c3RlbVByb2dyYW0ucHJvZ3JhbUlkLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBrZXlzOiBrZXlzLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pO1xuICB9XG4gIHN0YXRpYyBkZWFjdGl2YXRlTG9va3VwVGFibGUocGFyYW1zKSB7XG4gICAgY29uc3QgdHlwZSA9IExPT0tVUF9UQUJMRV9JTlNUUlVDVElPTl9MQVlPVVRTLkRlYWN0aXZhdGVMb29rdXBUYWJsZTtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlKTtcbiAgICBjb25zdCBrZXlzID0gW3tcbiAgICAgIHB1YmtleTogcGFyYW1zLmxvb2t1cFRhYmxlLFxuICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIHB1YmtleTogcGFyYW1zLmF1dGhvcml0eSxcbiAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICB9XTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xuICAgICAgcHJvZ3JhbUlkOiB0aGlzLnByb2dyYW1JZCxcbiAgICAgIGtleXM6IGtleXMsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGNsb3NlTG9va3VwVGFibGUocGFyYW1zKSB7XG4gICAgY29uc3QgdHlwZSA9IExPT0tVUF9UQUJMRV9JTlNUUlVDVElPTl9MQVlPVVRTLkNsb3NlTG9va3VwVGFibGU7XG4gICAgY29uc3QgZGF0YSA9IGVuY29kZURhdGEodHlwZSk7XG4gICAgY29uc3Qga2V5cyA9IFt7XG4gICAgICBwdWJrZXk6IHBhcmFtcy5sb29rdXBUYWJsZSxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICB9LCB7XG4gICAgICBwdWJrZXk6IHBhcmFtcy5hdXRob3JpdHksXG4gICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgfSwge1xuICAgICAgcHVia2V5OiBwYXJhbXMucmVjaXBpZW50LFxuICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgIH1dO1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb25JbnN0cnVjdGlvbih7XG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAga2V5czoga2V5cyxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcbiAgfVxufVxuQWRkcmVzc0xvb2t1cFRhYmxlUHJvZ3JhbS5wcm9ncmFtSWQgPSBuZXcgUHVibGljS2V5KCdBZGRyZXNzTG9va3VwVGFiMWUxMTExMTExMTExMTExMTExMTExMTExMTExJyk7XG5cbi8qKlxuICogQ29tcHV0ZSBCdWRnZXQgSW5zdHJ1Y3Rpb24gY2xhc3NcbiAqL1xuY2xhc3MgQ29tcHV0ZUJ1ZGdldEluc3RydWN0aW9uIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgYSBjb21wdXRlIGJ1ZGdldCBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHR5cGUuXG4gICAqL1xuICBzdGF0aWMgZGVjb2RlSW5zdHJ1Y3Rpb25UeXBlKGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIGNvbnN0IGluc3RydWN0aW9uVHlwZUxheW91dCA9IEJ1ZmZlckxheW91dC51OCgnaW5zdHJ1Y3Rpb24nKTtcbiAgICBjb25zdCB0eXBlSW5kZXggPSBpbnN0cnVjdGlvblR5cGVMYXlvdXQuZGVjb2RlKGluc3RydWN0aW9uLmRhdGEpO1xuICAgIGxldCB0eXBlO1xuICAgIGZvciAoY29uc3QgW2l4VHlwZSwgbGF5b3V0XSBvZiBPYmplY3QuZW50cmllcyhDT01QVVRFX0JVREdFVF9JTlNUUlVDVElPTl9MQVlPVVRTKSkge1xuICAgICAgaWYgKGxheW91dC5pbmRleCA9PSB0eXBlSW5kZXgpIHtcbiAgICAgICAgdHlwZSA9IGl4VHlwZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnN0cnVjdGlvbiB0eXBlIGluY29ycmVjdDsgbm90IGEgQ29tcHV0ZUJ1ZGdldEluc3RydWN0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSByZXF1ZXN0IHVuaXRzIGNvbXB1dGUgYnVkZ2V0IGluc3RydWN0aW9uIGFuZCByZXRyaWV2ZSB0aGUgaW5zdHJ1Y3Rpb24gcGFyYW1zLlxuICAgKi9cbiAgc3RhdGljIGRlY29kZVJlcXVlc3RVbml0cyhpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICBjb25zdCB7XG4gICAgICB1bml0cyxcbiAgICAgIGFkZGl0aW9uYWxGZWVcbiAgICB9ID0gZGVjb2RlRGF0YSQxKENPTVBVVEVfQlVER0VUX0lOU1RSVUNUSU9OX0xBWU9VVFMuUmVxdWVzdFVuaXRzLCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgdW5pdHMsXG4gICAgICBhZGRpdGlvbmFsRmVlXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgcmVxdWVzdCBoZWFwIGZyYW1lIGNvbXB1dGUgYnVkZ2V0IGluc3RydWN0aW9uIGFuZCByZXRyaWV2ZSB0aGUgaW5zdHJ1Y3Rpb24gcGFyYW1zLlxuICAgKi9cbiAgc3RhdGljIGRlY29kZVJlcXVlc3RIZWFwRnJhbWUoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgY29uc3Qge1xuICAgICAgYnl0ZXNcbiAgICB9ID0gZGVjb2RlRGF0YSQxKENPTVBVVEVfQlVER0VUX0lOU1RSVUNUSU9OX0xBWU9VVFMuUmVxdWVzdEhlYXBGcmFtZSwgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJ5dGVzXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgc2V0IGNvbXB1dGUgdW5pdCBsaW1pdCBjb21wdXRlIGJ1ZGdldCBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVTZXRDb21wdXRlVW5pdExpbWl0KGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIGNvbnN0IHtcbiAgICAgIHVuaXRzXG4gICAgfSA9IGRlY29kZURhdGEkMShDT01QVVRFX0JVREdFVF9JTlNUUlVDVElPTl9MQVlPVVRTLlNldENvbXB1dGVVbml0TGltaXQsIGluc3RydWN0aW9uLmRhdGEpO1xuICAgIHJldHVybiB7XG4gICAgICB1bml0c1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIHNldCBjb21wdXRlIHVuaXQgcHJpY2UgY29tcHV0ZSBidWRnZXQgaW5zdHJ1Y3Rpb24gYW5kIHJldHJpZXZlIHRoZSBpbnN0cnVjdGlvbiBwYXJhbXMuXG4gICAqL1xuICBzdGF0aWMgZGVjb2RlU2V0Q29tcHV0ZVVuaXRQcmljZShpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICBjb25zdCB7XG4gICAgICBtaWNyb0xhbXBvcnRzXG4gICAgfSA9IGRlY29kZURhdGEkMShDT01QVVRFX0JVREdFVF9JTlNUUlVDVElPTl9MQVlPVVRTLlNldENvbXB1dGVVbml0UHJpY2UsIGluc3RydWN0aW9uLmRhdGEpO1xuICAgIHJldHVybiB7XG4gICAgICBtaWNyb0xhbXBvcnRzXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHN0YXRpYyBjaGVja1Byb2dyYW1JZChwcm9ncmFtSWQpIHtcbiAgICBpZiAoIXByb2dyYW1JZC5lcXVhbHMoQ29tcHV0ZUJ1ZGdldFByb2dyYW0ucHJvZ3JhbUlkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGluc3RydWN0aW9uOyBwcm9ncmFtSWQgaXMgbm90IENvbXB1dGVCdWRnZXRQcm9ncmFtJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQW4gZW51bWVyYXRpb24gb2YgdmFsaWQgQ29tcHV0ZUJ1ZGdldEluc3RydWN0aW9uVHlwZSdzXG4gKi9cblxuLyoqXG4gKiBSZXF1ZXN0IHVuaXRzIGluc3RydWN0aW9uIHBhcmFtc1xuICovXG5cbi8qKlxuICogUmVxdWVzdCBoZWFwIGZyYW1lIGluc3RydWN0aW9uIHBhcmFtc1xuICovXG5cbi8qKlxuICogU2V0IGNvbXB1dGUgdW5pdCBsaW1pdCBpbnN0cnVjdGlvbiBwYXJhbXNcbiAqL1xuXG4vKipcbiAqIFNldCBjb21wdXRlIHVuaXQgcHJpY2UgaW5zdHJ1Y3Rpb24gcGFyYW1zXG4gKi9cblxuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiB2YWxpZCBDb21wdXRlQnVkZ2V0IEluc3RydWN0aW9uVHlwZSdzXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3QgQ09NUFVURV9CVURHRVRfSU5TVFJVQ1RJT05fTEFZT1VUUyA9IE9iamVjdC5mcmVlemUoe1xuICBSZXF1ZXN0VW5pdHM6IHtcbiAgICBpbmRleDogMCxcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51OCgnaW5zdHJ1Y3Rpb24nKSwgQnVmZmVyTGF5b3V0LnUzMigndW5pdHMnKSwgQnVmZmVyTGF5b3V0LnUzMignYWRkaXRpb25hbEZlZScpXSlcbiAgfSxcbiAgUmVxdWVzdEhlYXBGcmFtZToge1xuICAgIGluZGV4OiAxLFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnU4KCdpbnN0cnVjdGlvbicpLCBCdWZmZXJMYXlvdXQudTMyKCdieXRlcycpXSlcbiAgfSxcbiAgU2V0Q29tcHV0ZVVuaXRMaW1pdDoge1xuICAgIGluZGV4OiAyLFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnU4KCdpbnN0cnVjdGlvbicpLCBCdWZmZXJMYXlvdXQudTMyKCd1bml0cycpXSlcbiAgfSxcbiAgU2V0Q29tcHV0ZVVuaXRQcmljZToge1xuICAgIGluZGV4OiAzLFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnU4KCdpbnN0cnVjdGlvbicpLCB1NjQoJ21pY3JvTGFtcG9ydHMnKV0pXG4gIH1cbn0pO1xuXG4vKipcbiAqIEZhY3RvcnkgY2xhc3MgZm9yIHRyYW5zYWN0aW9uIGluc3RydWN0aW9ucyB0byBpbnRlcmFjdCB3aXRoIHRoZSBDb21wdXRlIEJ1ZGdldCBwcm9ncmFtXG4gKi9cbmNsYXNzIENvbXB1dGVCdWRnZXRQcm9ncmFtIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBQdWJsaWMga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgQ29tcHV0ZSBCdWRnZXQgcHJvZ3JhbVxuICAgKi9cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgSW5zdGVhZCwgY2FsbCB7QGxpbmsgc2V0Q29tcHV0ZVVuaXRMaW1pdH0gYW5kL29yIHtAbGluayBzZXRDb21wdXRlVW5pdFByaWNlfVxuICAgKi9cbiAgc3RhdGljIHJlcXVlc3RVbml0cyhwYXJhbXMpIHtcbiAgICBjb25zdCB0eXBlID0gQ09NUFVURV9CVURHRVRfSU5TVFJVQ1RJT05fTEFZT1VUUy5SZXF1ZXN0VW5pdHM7XG4gICAgY29uc3QgZGF0YSA9IGVuY29kZURhdGEodHlwZSwgcGFyYW1zKTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xuICAgICAga2V5czogW10sXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG4gIHN0YXRpYyByZXF1ZXN0SGVhcEZyYW1lKHBhcmFtcykge1xuICAgIGNvbnN0IHR5cGUgPSBDT01QVVRFX0JVREdFVF9JTlNUUlVDVElPTl9MQVlPVVRTLlJlcXVlc3RIZWFwRnJhbWU7XG4gICAgY29uc3QgZGF0YSA9IGVuY29kZURhdGEodHlwZSwgcGFyYW1zKTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xuICAgICAga2V5czogW10sXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG4gIHN0YXRpYyBzZXRDb21wdXRlVW5pdExpbWl0KHBhcmFtcykge1xuICAgIGNvbnN0IHR5cGUgPSBDT01QVVRFX0JVREdFVF9JTlNUUlVDVElPTl9MQVlPVVRTLlNldENvbXB1dGVVbml0TGltaXQ7XG4gICAgY29uc3QgZGF0YSA9IGVuY29kZURhdGEodHlwZSwgcGFyYW1zKTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xuICAgICAga2V5czogW10sXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG4gIHN0YXRpYyBzZXRDb21wdXRlVW5pdFByaWNlKHBhcmFtcykge1xuICAgIGNvbnN0IHR5cGUgPSBDT01QVVRFX0JVREdFVF9JTlNUUlVDVElPTl9MQVlPVVRTLlNldENvbXB1dGVVbml0UHJpY2U7XG4gICAgY29uc3QgZGF0YSA9IGVuY29kZURhdGEodHlwZSwge1xuICAgICAgbWljcm9MYW1wb3J0czogQmlnSW50KHBhcmFtcy5taWNyb0xhbXBvcnRzKVxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb25JbnN0cnVjdGlvbih7XG4gICAgICBrZXlzOiBbXSxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cbn1cbkNvbXB1dGVCdWRnZXRQcm9ncmFtLnByb2dyYW1JZCA9IG5ldyBQdWJsaWNLZXkoJ0NvbXB1dGVCdWRnZXQxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEnKTtcblxuY29uc3QgUFJJVkFURV9LRVlfQllURVMkMSA9IDY0O1xuY29uc3QgUFVCTElDX0tFWV9CWVRFUyQxID0gMzI7XG5jb25zdCBTSUdOQVRVUkVfQllURVMgPSA2NDtcblxuLyoqXG4gKiBQYXJhbXMgZm9yIGNyZWF0aW5nIGFuIGVkMjU1MTkgaW5zdHJ1Y3Rpb24gdXNpbmcgYSBwdWJsaWMga2V5XG4gKi9cblxuLyoqXG4gKiBQYXJhbXMgZm9yIGNyZWF0aW5nIGFuIGVkMjU1MTkgaW5zdHJ1Y3Rpb24gdXNpbmcgYSBwcml2YXRlIGtleVxuICovXG5cbmNvbnN0IEVEMjU1MTlfSU5TVFJVQ1RJT05fTEFZT1VUID0gQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnU4KCdudW1TaWduYXR1cmVzJyksIEJ1ZmZlckxheW91dC51OCgncGFkZGluZycpLCBCdWZmZXJMYXlvdXQudTE2KCdzaWduYXR1cmVPZmZzZXQnKSwgQnVmZmVyTGF5b3V0LnUxNignc2lnbmF0dXJlSW5zdHJ1Y3Rpb25JbmRleCcpLCBCdWZmZXJMYXlvdXQudTE2KCdwdWJsaWNLZXlPZmZzZXQnKSwgQnVmZmVyTGF5b3V0LnUxNigncHVibGljS2V5SW5zdHJ1Y3Rpb25JbmRleCcpLCBCdWZmZXJMYXlvdXQudTE2KCdtZXNzYWdlRGF0YU9mZnNldCcpLCBCdWZmZXJMYXlvdXQudTE2KCdtZXNzYWdlRGF0YVNpemUnKSwgQnVmZmVyTGF5b3V0LnUxNignbWVzc2FnZUluc3RydWN0aW9uSW5kZXgnKV0pO1xuY2xhc3MgRWQyNTUxOVByb2dyYW0ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBrZXkgdGhhdCBpZGVudGlmaWVzIHRoZSBlZDI1NTE5IHByb2dyYW1cbiAgICovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBlZDI1NTE5IGluc3RydWN0aW9uIHdpdGggYSBwdWJsaWMga2V5IGFuZCBzaWduYXR1cmUuIFRoZVxuICAgKiBwdWJsaWMga2V5IG11c3QgYmUgYSBidWZmZXIgdGhhdCBpcyAzMiBieXRlcyBsb25nLCBhbmQgdGhlIHNpZ25hdHVyZVxuICAgKiBtdXN0IGJlIGEgYnVmZmVyIG9mIDY0IGJ5dGVzLlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUluc3RydWN0aW9uV2l0aFB1YmxpY0tleShwYXJhbXMpIHtcbiAgICBjb25zdCB7XG4gICAgICBwdWJsaWNLZXksXG4gICAgICBtZXNzYWdlLFxuICAgICAgc2lnbmF0dXJlLFxuICAgICAgaW5zdHJ1Y3Rpb25JbmRleFxuICAgIH0gPSBwYXJhbXM7XG4gICAgYXNzZXJ0KHB1YmxpY0tleS5sZW5ndGggPT09IFBVQkxJQ19LRVlfQllURVMkMSwgYFB1YmxpYyBLZXkgbXVzdCBiZSAke1BVQkxJQ19LRVlfQllURVMkMX0gYnl0ZXMgYnV0IHJlY2VpdmVkICR7cHVibGljS2V5Lmxlbmd0aH0gYnl0ZXNgKTtcbiAgICBhc3NlcnQoc2lnbmF0dXJlLmxlbmd0aCA9PT0gU0lHTkFUVVJFX0JZVEVTLCBgU2lnbmF0dXJlIG11c3QgYmUgJHtTSUdOQVRVUkVfQllURVN9IGJ5dGVzIGJ1dCByZWNlaXZlZCAke3NpZ25hdHVyZS5sZW5ndGh9IGJ5dGVzYCk7XG4gICAgY29uc3QgcHVibGljS2V5T2Zmc2V0ID0gRUQyNTUxOV9JTlNUUlVDVElPTl9MQVlPVVQuc3BhbjtcbiAgICBjb25zdCBzaWduYXR1cmVPZmZzZXQgPSBwdWJsaWNLZXlPZmZzZXQgKyBwdWJsaWNLZXkubGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2VEYXRhT2Zmc2V0ID0gc2lnbmF0dXJlT2Zmc2V0ICsgc2lnbmF0dXJlLmxlbmd0aDtcbiAgICBjb25zdCBudW1TaWduYXR1cmVzID0gMTtcbiAgICBjb25zdCBpbnN0cnVjdGlvbkRhdGEgPSBCdWZmZXIuYWxsb2MobWVzc2FnZURhdGFPZmZzZXQgKyBtZXNzYWdlLmxlbmd0aCk7XG4gICAgY29uc3QgaW5kZXggPSBpbnN0cnVjdGlvbkluZGV4ID09IG51bGwgPyAweGZmZmYgLy8gQW4gaW5kZXggb2YgYHUxNjo6TUFYYCBtYWtlcyBpdCBkZWZhdWx0IHRvIHRoZSBjdXJyZW50IGluc3RydWN0aW9uLlxuICAgIDogaW5zdHJ1Y3Rpb25JbmRleDtcbiAgICBFRDI1NTE5X0lOU1RSVUNUSU9OX0xBWU9VVC5lbmNvZGUoe1xuICAgICAgbnVtU2lnbmF0dXJlcyxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBzaWduYXR1cmVPZmZzZXQsXG4gICAgICBzaWduYXR1cmVJbnN0cnVjdGlvbkluZGV4OiBpbmRleCxcbiAgICAgIHB1YmxpY0tleU9mZnNldCxcbiAgICAgIHB1YmxpY0tleUluc3RydWN0aW9uSW5kZXg6IGluZGV4LFxuICAgICAgbWVzc2FnZURhdGFPZmZzZXQsXG4gICAgICBtZXNzYWdlRGF0YVNpemU6IG1lc3NhZ2UubGVuZ3RoLFxuICAgICAgbWVzc2FnZUluc3RydWN0aW9uSW5kZXg6IGluZGV4XG4gICAgfSwgaW5zdHJ1Y3Rpb25EYXRhKTtcbiAgICBpbnN0cnVjdGlvbkRhdGEuZmlsbChwdWJsaWNLZXksIHB1YmxpY0tleU9mZnNldCk7XG4gICAgaW5zdHJ1Y3Rpb25EYXRhLmZpbGwoc2lnbmF0dXJlLCBzaWduYXR1cmVPZmZzZXQpO1xuICAgIGluc3RydWN0aW9uRGF0YS5maWxsKG1lc3NhZ2UsIG1lc3NhZ2VEYXRhT2Zmc2V0KTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oe1xuICAgICAga2V5czogW10sXG4gICAgICBwcm9ncmFtSWQ6IEVkMjU1MTlQcm9ncmFtLnByb2dyYW1JZCxcbiAgICAgIGRhdGE6IGluc3RydWN0aW9uRGF0YVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBlZDI1NTE5IGluc3RydWN0aW9uIHdpdGggYSBwcml2YXRlIGtleS4gVGhlIHByaXZhdGUga2V5XG4gICAqIG11c3QgYmUgYSBidWZmZXIgdGhhdCBpcyA2NCBieXRlcyBsb25nLlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUluc3RydWN0aW9uV2l0aFByaXZhdGVLZXkocGFyYW1zKSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJpdmF0ZUtleSxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBpbnN0cnVjdGlvbkluZGV4XG4gICAgfSA9IHBhcmFtcztcbiAgICBhc3NlcnQocHJpdmF0ZUtleS5sZW5ndGggPT09IFBSSVZBVEVfS0VZX0JZVEVTJDEsIGBQcml2YXRlIGtleSBtdXN0IGJlICR7UFJJVkFURV9LRVlfQllURVMkMX0gYnl0ZXMgYnV0IHJlY2VpdmVkICR7cHJpdmF0ZUtleS5sZW5ndGh9IGJ5dGVzYCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGtleXBhaXIgPSBLZXlwYWlyLmZyb21TZWNyZXRLZXkocHJpdmF0ZUtleSk7XG4gICAgICBjb25zdCBwdWJsaWNLZXkgPSBrZXlwYWlyLnB1YmxpY0tleS50b0J5dGVzKCk7XG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBzaWduKG1lc3NhZ2UsIGtleXBhaXIuc2VjcmV0S2V5KTtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUluc3RydWN0aW9uV2l0aFB1YmxpY0tleSh7XG4gICAgICAgIHB1YmxpY0tleSxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgc2lnbmF0dXJlLFxuICAgICAgICBpbnN0cnVjdGlvbkluZGV4XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBjcmVhdGluZyBpbnN0cnVjdGlvbjsgJHtlcnJvcn1gKTtcbiAgICB9XG4gIH1cbn1cbkVkMjU1MTlQcm9ncmFtLnByb2dyYW1JZCA9IG5ldyBQdWJsaWNLZXkoJ0VkMjU1MTlTaWdWZXJpZnkxMTExMTExMTExMTExMTExMTExMTExMTExMTEnKTtcblxuY29uc3QgZWNkc2FTaWduID0gKG1zZ0hhc2gsIHByaXZLZXkpID0+IHtcbiAgY29uc3Qgc2lnbmF0dXJlID0gc2VjcDI1NmsxLnNpZ24obXNnSGFzaCwgcHJpdktleSk7XG4gIHJldHVybiBbc2lnbmF0dXJlLnRvQ29tcGFjdFJhd0J5dGVzKCksIHNpZ25hdHVyZS5yZWNvdmVyeV07XG59O1xuc2VjcDI1NmsxLnV0aWxzLmlzVmFsaWRQcml2YXRlS2V5O1xuY29uc3QgcHVibGljS2V5Q3JlYXRlID0gc2VjcDI1NmsxLmdldFB1YmxpY0tleTtcblxuY29uc3QgUFJJVkFURV9LRVlfQllURVMgPSAzMjtcbmNvbnN0IEVUSEVSRVVNX0FERFJFU1NfQllURVMgPSAyMDtcbmNvbnN0IFBVQkxJQ19LRVlfQllURVMgPSA2NDtcbmNvbnN0IFNJR05BVFVSRV9PRkZTRVRTX1NFUklBTElaRURfU0laRSA9IDExO1xuXG4vKipcbiAqIFBhcmFtcyBmb3IgY3JlYXRpbmcgYW4gc2VjcDI1NmsxIGluc3RydWN0aW9uIHVzaW5nIGEgcHVibGljIGtleVxuICovXG5cbi8qKlxuICogUGFyYW1zIGZvciBjcmVhdGluZyBhbiBzZWNwMjU2azEgaW5zdHJ1Y3Rpb24gdXNpbmcgYW4gRXRoZXJldW0gYWRkcmVzc1xuICovXG5cbi8qKlxuICogUGFyYW1zIGZvciBjcmVhdGluZyBhbiBzZWNwMjU2azEgaW5zdHJ1Y3Rpb24gdXNpbmcgYSBwcml2YXRlIGtleVxuICovXG5cbmNvbnN0IFNFQ1AyNTZLMV9JTlNUUlVDVElPTl9MQVlPVVQgPSBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTgoJ251bVNpZ25hdHVyZXMnKSwgQnVmZmVyTGF5b3V0LnUxNignc2lnbmF0dXJlT2Zmc2V0JyksIEJ1ZmZlckxheW91dC51OCgnc2lnbmF0dXJlSW5zdHJ1Y3Rpb25JbmRleCcpLCBCdWZmZXJMYXlvdXQudTE2KCdldGhBZGRyZXNzT2Zmc2V0JyksIEJ1ZmZlckxheW91dC51OCgnZXRoQWRkcmVzc0luc3RydWN0aW9uSW5kZXgnKSwgQnVmZmVyTGF5b3V0LnUxNignbWVzc2FnZURhdGFPZmZzZXQnKSwgQnVmZmVyTGF5b3V0LnUxNignbWVzc2FnZURhdGFTaXplJyksIEJ1ZmZlckxheW91dC51OCgnbWVzc2FnZUluc3RydWN0aW9uSW5kZXgnKSwgQnVmZmVyTGF5b3V0LmJsb2IoMjAsICdldGhBZGRyZXNzJyksIEJ1ZmZlckxheW91dC5ibG9iKDY0LCAnc2lnbmF0dXJlJyksIEJ1ZmZlckxheW91dC51OCgncmVjb3ZlcnlJZCcpXSk7XG5jbGFzcyBTZWNwMjU2azFQcm9ncmFtIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBQdWJsaWMga2V5IHRoYXQgaWRlbnRpZmllcyB0aGUgc2VjcDI1NmsxIHByb2dyYW1cbiAgICovXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhbiBFdGhlcmV1bSBhZGRyZXNzIGZyb20gYSBzZWNwMjU2azEgcHVibGljIGtleSBidWZmZXIuXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBwdWJsaWNLZXkgYSA2NCBieXRlIHNlY3AyNTZrMSBwdWJsaWMga2V5IGJ1ZmZlclxuICAgKi9cbiAgc3RhdGljIHB1YmxpY0tleVRvRXRoQWRkcmVzcyhwdWJsaWNLZXkpIHtcbiAgICBhc3NlcnQocHVibGljS2V5Lmxlbmd0aCA9PT0gUFVCTElDX0tFWV9CWVRFUywgYFB1YmxpYyBrZXkgbXVzdCBiZSAke1BVQkxJQ19LRVlfQllURVN9IGJ5dGVzIGJ1dCByZWNlaXZlZCAke3B1YmxpY0tleS5sZW5ndGh9IGJ5dGVzYCk7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbShrZWNjYWtfMjU2KHRvQnVmZmVyKHB1YmxpY0tleSkpKS5zbGljZSgtRVRIRVJFVU1fQUREUkVTU19CWVRFUyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgY29uc3RydWN0aW5nIEV0aGVyZXVtIGFkZHJlc3M6ICR7ZXJyb3J9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBzZWNwMjU2azEgaW5zdHJ1Y3Rpb24gd2l0aCBhIHB1YmxpYyBrZXkuIFRoZSBwdWJsaWMga2V5XG4gICAqIG11c3QgYmUgYSBidWZmZXIgdGhhdCBpcyA2NCBieXRlcyBsb25nLlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUluc3RydWN0aW9uV2l0aFB1YmxpY0tleShwYXJhbXMpIHtcbiAgICBjb25zdCB7XG4gICAgICBwdWJsaWNLZXksXG4gICAgICBtZXNzYWdlLFxuICAgICAgc2lnbmF0dXJlLFxuICAgICAgcmVjb3ZlcnlJZCxcbiAgICAgIGluc3RydWN0aW9uSW5kZXhcbiAgICB9ID0gcGFyYW1zO1xuICAgIHJldHVybiBTZWNwMjU2azFQcm9ncmFtLmNyZWF0ZUluc3RydWN0aW9uV2l0aEV0aEFkZHJlc3Moe1xuICAgICAgZXRoQWRkcmVzczogU2VjcDI1NmsxUHJvZ3JhbS5wdWJsaWNLZXlUb0V0aEFkZHJlc3MocHVibGljS2V5KSxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBzaWduYXR1cmUsXG4gICAgICByZWNvdmVyeUlkLFxuICAgICAgaW5zdHJ1Y3Rpb25JbmRleFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBzZWNwMjU2azEgaW5zdHJ1Y3Rpb24gd2l0aCBhbiBFdGhlcmV1bSBhZGRyZXNzLiBUaGUgYWRkcmVzc1xuICAgKiBtdXN0IGJlIGEgaGV4IHN0cmluZyBvciBhIGJ1ZmZlciB0aGF0IGlzIDIwIGJ5dGVzIGxvbmcuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlSW5zdHJ1Y3Rpb25XaXRoRXRoQWRkcmVzcyhwYXJhbXMpIHtcbiAgICBjb25zdCB7XG4gICAgICBldGhBZGRyZXNzOiByYXdBZGRyZXNzLFxuICAgICAgbWVzc2FnZSxcbiAgICAgIHNpZ25hdHVyZSxcbiAgICAgIHJlY292ZXJ5SWQsXG4gICAgICBpbnN0cnVjdGlvbkluZGV4ID0gMFxuICAgIH0gPSBwYXJhbXM7XG4gICAgbGV0IGV0aEFkZHJlc3M7XG4gICAgaWYgKHR5cGVvZiByYXdBZGRyZXNzID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHJhd0FkZHJlc3Muc3RhcnRzV2l0aCgnMHgnKSkge1xuICAgICAgICBldGhBZGRyZXNzID0gQnVmZmVyLmZyb20ocmF3QWRkcmVzcy5zdWJzdHIoMiksICdoZXgnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV0aEFkZHJlc3MgPSBCdWZmZXIuZnJvbShyYXdBZGRyZXNzLCAnaGV4Jyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGV0aEFkZHJlc3MgPSByYXdBZGRyZXNzO1xuICAgIH1cbiAgICBhc3NlcnQoZXRoQWRkcmVzcy5sZW5ndGggPT09IEVUSEVSRVVNX0FERFJFU1NfQllURVMsIGBBZGRyZXNzIG11c3QgYmUgJHtFVEhFUkVVTV9BRERSRVNTX0JZVEVTfSBieXRlcyBidXQgcmVjZWl2ZWQgJHtldGhBZGRyZXNzLmxlbmd0aH0gYnl0ZXNgKTtcbiAgICBjb25zdCBkYXRhU3RhcnQgPSAxICsgU0lHTkFUVVJFX09GRlNFVFNfU0VSSUFMSVpFRF9TSVpFO1xuICAgIGNvbnN0IGV0aEFkZHJlc3NPZmZzZXQgPSBkYXRhU3RhcnQ7XG4gICAgY29uc3Qgc2lnbmF0dXJlT2Zmc2V0ID0gZGF0YVN0YXJ0ICsgZXRoQWRkcmVzcy5sZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZURhdGFPZmZzZXQgPSBzaWduYXR1cmVPZmZzZXQgKyBzaWduYXR1cmUubGVuZ3RoICsgMTtcbiAgICBjb25zdCBudW1TaWduYXR1cmVzID0gMTtcbiAgICBjb25zdCBpbnN0cnVjdGlvbkRhdGEgPSBCdWZmZXIuYWxsb2MoU0VDUDI1NksxX0lOU1RSVUNUSU9OX0xBWU9VVC5zcGFuICsgbWVzc2FnZS5sZW5ndGgpO1xuICAgIFNFQ1AyNTZLMV9JTlNUUlVDVElPTl9MQVlPVVQuZW5jb2RlKHtcbiAgICAgIG51bVNpZ25hdHVyZXMsXG4gICAgICBzaWduYXR1cmVPZmZzZXQsXG4gICAgICBzaWduYXR1cmVJbnN0cnVjdGlvbkluZGV4OiBpbnN0cnVjdGlvbkluZGV4LFxuICAgICAgZXRoQWRkcmVzc09mZnNldCxcbiAgICAgIGV0aEFkZHJlc3NJbnN0cnVjdGlvbkluZGV4OiBpbnN0cnVjdGlvbkluZGV4LFxuICAgICAgbWVzc2FnZURhdGFPZmZzZXQsXG4gICAgICBtZXNzYWdlRGF0YVNpemU6IG1lc3NhZ2UubGVuZ3RoLFxuICAgICAgbWVzc2FnZUluc3RydWN0aW9uSW5kZXg6IGluc3RydWN0aW9uSW5kZXgsXG4gICAgICBzaWduYXR1cmU6IHRvQnVmZmVyKHNpZ25hdHVyZSksXG4gICAgICBldGhBZGRyZXNzOiB0b0J1ZmZlcihldGhBZGRyZXNzKSxcbiAgICAgIHJlY292ZXJ5SWRcbiAgICB9LCBpbnN0cnVjdGlvbkRhdGEpO1xuICAgIGluc3RydWN0aW9uRGF0YS5maWxsKHRvQnVmZmVyKG1lc3NhZ2UpLCBTRUNQMjU2SzFfSU5TVFJVQ1RJT05fTEFZT1VULnNwYW4pO1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb25JbnN0cnVjdGlvbih7XG4gICAgICBrZXlzOiBbXSxcbiAgICAgIHByb2dyYW1JZDogU2VjcDI1NmsxUHJvZ3JhbS5wcm9ncmFtSWQsXG4gICAgICBkYXRhOiBpbnN0cnVjdGlvbkRhdGFcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gc2VjcDI1NmsxIGluc3RydWN0aW9uIHdpdGggYSBwcml2YXRlIGtleS4gVGhlIHByaXZhdGUga2V5XG4gICAqIG11c3QgYmUgYSBidWZmZXIgdGhhdCBpcyAzMiBieXRlcyBsb25nLlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUluc3RydWN0aW9uV2l0aFByaXZhdGVLZXkocGFyYW1zKSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJpdmF0ZUtleTogcGtleSxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBpbnN0cnVjdGlvbkluZGV4XG4gICAgfSA9IHBhcmFtcztcbiAgICBhc3NlcnQocGtleS5sZW5ndGggPT09IFBSSVZBVEVfS0VZX0JZVEVTLCBgUHJpdmF0ZSBrZXkgbXVzdCBiZSAke1BSSVZBVEVfS0VZX0JZVEVTfSBieXRlcyBidXQgcmVjZWl2ZWQgJHtwa2V5Lmxlbmd0aH0gYnl0ZXNgKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IHRvQnVmZmVyKHBrZXkpO1xuICAgICAgY29uc3QgcHVibGljS2V5ID0gcHVibGljS2V5Q3JlYXRlKHByaXZhdGVLZXksIGZhbHNlIC8qIGlzQ29tcHJlc3NlZCAqLykuc2xpY2UoMSk7IC8vIHRocm93IGF3YXkgbGVhZGluZyBieXRlXG4gICAgICBjb25zdCBtZXNzYWdlSGFzaCA9IEJ1ZmZlci5mcm9tKGtlY2Nha18yNTYodG9CdWZmZXIobWVzc2FnZSkpKTtcbiAgICAgIGNvbnN0IFtzaWduYXR1cmUsIHJlY292ZXJ5SWRdID0gZWNkc2FTaWduKG1lc3NhZ2VIYXNoLCBwcml2YXRlS2V5KTtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUluc3RydWN0aW9uV2l0aFB1YmxpY0tleSh7XG4gICAgICAgIHB1YmxpY0tleSxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgc2lnbmF0dXJlLFxuICAgICAgICByZWNvdmVyeUlkLFxuICAgICAgICBpbnN0cnVjdGlvbkluZGV4XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBjcmVhdGluZyBpbnN0cnVjdGlvbjsgJHtlcnJvcn1gKTtcbiAgICB9XG4gIH1cbn1cblNlY3AyNTZrMVByb2dyYW0ucHJvZ3JhbUlkID0gbmV3IFB1YmxpY0tleSgnS2VjY2FrU2VjcDI1NmsxMTExMTExMTExMTExMTExMTExMTExMTExMTExMScpO1xuXG52YXIgX0xvY2t1cDtcblxuLyoqXG4gKiBBZGRyZXNzIG9mIHRoZSBzdGFrZSBjb25maWcgYWNjb3VudCB3aGljaCBjb25maWd1cmVzIHRoZSByYXRlXG4gKiBvZiBzdGFrZSB3YXJtdXAgYW5kIGNvb2xkb3duIGFzIHdlbGwgYXMgdGhlIHNsYXNoaW5nIHBlbmFsdHkuXG4gKi9cbmNvbnN0IFNUQUtFX0NPTkZJR19JRCA9IG5ldyBQdWJsaWNLZXkoJ1N0YWtlQ29uZmlnMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEnKTtcblxuLyoqXG4gKiBTdGFrZSBhY2NvdW50IGF1dGhvcml0eSBpbmZvXG4gKi9cbmNsYXNzIEF1dGhvcml6ZWQge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IEF1dGhvcml6ZWQgb2JqZWN0XG4gICAqIEBwYXJhbSBzdGFrZXIgdGhlIHN0YWtlIGF1dGhvcml0eVxuICAgKiBAcGFyYW0gd2l0aGRyYXdlciB0aGUgd2l0aGRyYXcgYXV0aG9yaXR5XG4gICAqL1xuICBjb25zdHJ1Y3RvcihzdGFrZXIsIHdpdGhkcmF3ZXIpIHtcbiAgICAvKiogc3Rha2UgYXV0aG9yaXR5ICovXG4gICAgdGhpcy5zdGFrZXIgPSB2b2lkIDA7XG4gICAgLyoqIHdpdGhkcmF3IGF1dGhvcml0eSAqL1xuICAgIHRoaXMud2l0aGRyYXdlciA9IHZvaWQgMDtcbiAgICB0aGlzLnN0YWtlciA9IHN0YWtlcjtcbiAgICB0aGlzLndpdGhkcmF3ZXIgPSB3aXRoZHJhd2VyO1xuICB9XG59XG4vKipcbiAqIFN0YWtlIGFjY291bnQgbG9ja3VwIGluZm9cbiAqL1xuY2xhc3MgTG9ja3VwIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBMb2NrdXAgb2JqZWN0XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih1bml4VGltZXN0YW1wLCBlcG9jaCwgY3VzdG9kaWFuKSB7XG4gICAgLyoqIFVuaXggdGltZXN0YW1wIG9mIGxvY2t1cCBleHBpcmF0aW9uICovXG4gICAgdGhpcy51bml4VGltZXN0YW1wID0gdm9pZCAwO1xuICAgIC8qKiBFcG9jaCBvZiBsb2NrdXAgZXhwaXJhdGlvbiAqL1xuICAgIHRoaXMuZXBvY2ggPSB2b2lkIDA7XG4gICAgLyoqIExvY2t1cCBjdXN0b2RpYW4gYXV0aG9yaXR5ICovXG4gICAgdGhpcy5jdXN0b2RpYW4gPSB2b2lkIDA7XG4gICAgdGhpcy51bml4VGltZXN0YW1wID0gdW5peFRpbWVzdGFtcDtcbiAgICB0aGlzLmVwb2NoID0gZXBvY2g7XG4gICAgdGhpcy5jdXN0b2RpYW4gPSBjdXN0b2RpYW47XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCwgaW5hY3RpdmUgTG9ja3VwIHZhbHVlXG4gICAqL1xufVxuX0xvY2t1cCA9IExvY2t1cDtcbkxvY2t1cC5kZWZhdWx0ID0gbmV3IF9Mb2NrdXAoMCwgMCwgUHVibGljS2V5LmRlZmF1bHQpO1xuLyoqXG4gKiBDcmVhdGUgc3Rha2UgYWNjb3VudCB0cmFuc2FjdGlvbiBwYXJhbXNcbiAqL1xuLyoqXG4gKiBDcmVhdGUgc3Rha2UgYWNjb3VudCB3aXRoIHNlZWQgdHJhbnNhY3Rpb24gcGFyYW1zXG4gKi9cbi8qKlxuICogSW5pdGlhbGl6ZSBzdGFrZSBpbnN0cnVjdGlvbiBwYXJhbXNcbiAqL1xuLyoqXG4gKiBEZWxlZ2F0ZSBzdGFrZSBpbnN0cnVjdGlvbiBwYXJhbXNcbiAqL1xuLyoqXG4gKiBBdXRob3JpemUgc3Rha2UgaW5zdHJ1Y3Rpb24gcGFyYW1zXG4gKi9cbi8qKlxuICogQXV0aG9yaXplIHN0YWtlIGluc3RydWN0aW9uIHBhcmFtcyB1c2luZyBhIGRlcml2ZWQga2V5XG4gKi9cbi8qKlxuICogU3BsaXQgc3Rha2UgaW5zdHJ1Y3Rpb24gcGFyYW1zXG4gKi9cbi8qKlxuICogU3BsaXQgd2l0aCBzZWVkIHRyYW5zYWN0aW9uIHBhcmFtc1xuICovXG4vKipcbiAqIFdpdGhkcmF3IHN0YWtlIGluc3RydWN0aW9uIHBhcmFtc1xuICovXG4vKipcbiAqIERlYWN0aXZhdGUgc3Rha2UgaW5zdHJ1Y3Rpb24gcGFyYW1zXG4gKi9cbi8qKlxuICogTWVyZ2Ugc3Rha2UgaW5zdHJ1Y3Rpb24gcGFyYW1zXG4gKi9cbi8qKlxuICogU3Rha2UgSW5zdHJ1Y3Rpb24gY2xhc3NcbiAqL1xuY2xhc3MgU3Rha2VJbnN0cnVjdGlvbiB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogRGVjb2RlIGEgc3Rha2UgaW5zdHJ1Y3Rpb24gYW5kIHJldHJpZXZlIHRoZSBpbnN0cnVjdGlvbiB0eXBlLlxuICAgKi9cbiAgc3RhdGljIGRlY29kZUluc3RydWN0aW9uVHlwZShpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICBjb25zdCBpbnN0cnVjdGlvblR5cGVMYXlvdXQgPSBCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpO1xuICAgIGNvbnN0IHR5cGVJbmRleCA9IGluc3RydWN0aW9uVHlwZUxheW91dC5kZWNvZGUoaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgbGV0IHR5cGU7XG4gICAgZm9yIChjb25zdCBbaXhUeXBlLCBsYXlvdXRdIG9mIE9iamVjdC5lbnRyaWVzKFNUQUtFX0lOU1RSVUNUSU9OX0xBWU9VVFMpKSB7XG4gICAgICBpZiAobGF5b3V0LmluZGV4ID09IHR5cGVJbmRleCkge1xuICAgICAgICB0eXBlID0gaXhUeXBlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luc3RydWN0aW9uIHR5cGUgaW5jb3JyZWN0OyBub3QgYSBTdGFrZUluc3RydWN0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIGluaXRpYWxpemUgc3Rha2UgaW5zdHJ1Y3Rpb24gYW5kIHJldHJpZXZlIHRoZSBpbnN0cnVjdGlvbiBwYXJhbXMuXG4gICAqL1xuICBzdGF0aWMgZGVjb2RlSW5pdGlhbGl6ZShpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDIpO1xuICAgIGNvbnN0IHtcbiAgICAgIGF1dGhvcml6ZWQsXG4gICAgICBsb2NrdXBcbiAgICB9ID0gZGVjb2RlRGF0YSQxKFNUQUtFX0lOU1RSVUNUSU9OX0xBWU9VVFMuSW5pdGlhbGl6ZSwgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YWtlUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzBdLnB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWQ6IG5ldyBBdXRob3JpemVkKG5ldyBQdWJsaWNLZXkoYXV0aG9yaXplZC5zdGFrZXIpLCBuZXcgUHVibGljS2V5KGF1dGhvcml6ZWQud2l0aGRyYXdlcikpLFxuICAgICAgbG9ja3VwOiBuZXcgTG9ja3VwKGxvY2t1cC51bml4VGltZXN0YW1wLCBsb2NrdXAuZXBvY2gsIG5ldyBQdWJsaWNLZXkobG9ja3VwLmN1c3RvZGlhbikpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgYSBkZWxlZ2F0ZSBzdGFrZSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVEZWxlZ2F0ZShpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDYpO1xuICAgIGRlY29kZURhdGEkMShTVEFLRV9JTlNUUlVDVElPTl9MQVlPVVRTLkRlbGVnYXRlLCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3Rha2VQdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5LFxuICAgICAgdm90ZVB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1sxXS5wdWJrZXksXG4gICAgICBhdXRob3JpemVkUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzVdLnB1YmtleVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGFuIGF1dGhvcml6ZSBzdGFrZSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVBdXRob3JpemUoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgdGhpcy5jaGVja0tleUxlbmd0aChpbnN0cnVjdGlvbi5rZXlzLCAzKTtcbiAgICBjb25zdCB7XG4gICAgICBuZXdBdXRob3JpemVkLFxuICAgICAgc3Rha2VBdXRob3JpemF0aW9uVHlwZVxuICAgIH0gPSBkZWNvZGVEYXRhJDEoU1RBS0VfSU5TVFJVQ1RJT05fTEFZT1VUUy5BdXRob3JpemUsIGluc3RydWN0aW9uLmRhdGEpO1xuICAgIGNvbnN0IG8gPSB7XG4gICAgICBzdGFrZVB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1swXS5wdWJrZXksXG4gICAgICBhdXRob3JpemVkUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzJdLnB1YmtleSxcbiAgICAgIG5ld0F1dGhvcml6ZWRQdWJrZXk6IG5ldyBQdWJsaWNLZXkobmV3QXV0aG9yaXplZCksXG4gICAgICBzdGFrZUF1dGhvcml6YXRpb25UeXBlOiB7XG4gICAgICAgIGluZGV4OiBzdGFrZUF1dGhvcml6YXRpb25UeXBlXG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaW5zdHJ1Y3Rpb24ua2V5cy5sZW5ndGggPiAzKSB7XG4gICAgICBvLmN1c3RvZGlhblB1YmtleSA9IGluc3RydWN0aW9uLmtleXNbM10ucHVia2V5O1xuICAgIH1cbiAgICByZXR1cm4gbztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgYW4gYXV0aG9yaXplLXdpdGgtc2VlZCBzdGFrZSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVBdXRob3JpemVXaXRoU2VlZChpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDIpO1xuICAgIGNvbnN0IHtcbiAgICAgIG5ld0F1dGhvcml6ZWQsXG4gICAgICBzdGFrZUF1dGhvcml6YXRpb25UeXBlLFxuICAgICAgYXV0aG9yaXR5U2VlZCxcbiAgICAgIGF1dGhvcml0eU93bmVyXG4gICAgfSA9IGRlY29kZURhdGEkMShTVEFLRV9JTlNUUlVDVElPTl9MQVlPVVRTLkF1dGhvcml6ZVdpdGhTZWVkLCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICBjb25zdCBvID0ge1xuICAgICAgc3Rha2VQdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMF0ucHVia2V5LFxuICAgICAgYXV0aG9yaXR5QmFzZTogaW5zdHJ1Y3Rpb24ua2V5c1sxXS5wdWJrZXksXG4gICAgICBhdXRob3JpdHlTZWVkOiBhdXRob3JpdHlTZWVkLFxuICAgICAgYXV0aG9yaXR5T3duZXI6IG5ldyBQdWJsaWNLZXkoYXV0aG9yaXR5T3duZXIpLFxuICAgICAgbmV3QXV0aG9yaXplZFB1YmtleTogbmV3IFB1YmxpY0tleShuZXdBdXRob3JpemVkKSxcbiAgICAgIHN0YWtlQXV0aG9yaXphdGlvblR5cGU6IHtcbiAgICAgICAgaW5kZXg6IHN0YWtlQXV0aG9yaXphdGlvblR5cGVcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpbnN0cnVjdGlvbi5rZXlzLmxlbmd0aCA+IDMpIHtcbiAgICAgIG8uY3VzdG9kaWFuUHVia2V5ID0gaW5zdHJ1Y3Rpb24ua2V5c1szXS5wdWJrZXk7XG4gICAgfVxuICAgIHJldHVybiBvO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIHNwbGl0IHN0YWtlIGluc3RydWN0aW9uIGFuZCByZXRyaWV2ZSB0aGUgaW5zdHJ1Y3Rpb24gcGFyYW1zLlxuICAgKi9cbiAgc3RhdGljIGRlY29kZVNwbGl0KGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIHRoaXMuY2hlY2tLZXlMZW5ndGgoaW5zdHJ1Y3Rpb24ua2V5cywgMyk7XG4gICAgY29uc3Qge1xuICAgICAgbGFtcG9ydHNcbiAgICB9ID0gZGVjb2RlRGF0YSQxKFNUQUtFX0lOU1RSVUNUSU9OX0xBWU9VVFMuU3BsaXQsIGluc3RydWN0aW9uLmRhdGEpO1xuICAgIHJldHVybiB7XG4gICAgICBzdGFrZVB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1swXS5wdWJrZXksXG4gICAgICBzcGxpdFN0YWtlUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzFdLnB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRQdWJrZXk6IGluc3RydWN0aW9uLmtleXNbMl0ucHVia2V5LFxuICAgICAgbGFtcG9ydHNcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIG1lcmdlIHN0YWtlIGluc3RydWN0aW9uIGFuZCByZXRyaWV2ZSB0aGUgaW5zdHJ1Y3Rpb24gcGFyYW1zLlxuICAgKi9cbiAgc3RhdGljIGRlY29kZU1lcmdlKGluc3RydWN0aW9uKSB7XG4gICAgdGhpcy5jaGVja1Byb2dyYW1JZChpbnN0cnVjdGlvbi5wcm9ncmFtSWQpO1xuICAgIHRoaXMuY2hlY2tLZXlMZW5ndGgoaW5zdHJ1Y3Rpb24ua2V5cywgMyk7XG4gICAgZGVjb2RlRGF0YSQxKFNUQUtFX0lOU1RSVUNUSU9OX0xBWU9VVFMuTWVyZ2UsIGluc3RydWN0aW9uLmRhdGEpO1xuICAgIHJldHVybiB7XG4gICAgICBzdGFrZVB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1swXS5wdWJrZXksXG4gICAgICBzb3VyY2VTdGFrZVB1YktleTogaW5zdHJ1Y3Rpb24ua2V5c1sxXS5wdWJrZXksXG4gICAgICBhdXRob3JpemVkUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzRdLnB1YmtleVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGEgd2l0aGRyYXcgc3Rha2UgaW5zdHJ1Y3Rpb24gYW5kIHJldHJpZXZlIHRoZSBpbnN0cnVjdGlvbiBwYXJhbXMuXG4gICAqL1xuICBzdGF0aWMgZGVjb2RlV2l0aGRyYXcoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgdGhpcy5jaGVja0tleUxlbmd0aChpbnN0cnVjdGlvbi5rZXlzLCA1KTtcbiAgICBjb25zdCB7XG4gICAgICBsYW1wb3J0c1xuICAgIH0gPSBkZWNvZGVEYXRhJDEoU1RBS0VfSU5TVFJVQ1RJT05fTEFZT1VUUy5XaXRoZHJhdywgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgY29uc3QgbyA9IHtcbiAgICAgIHN0YWtlUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzBdLnB1YmtleSxcbiAgICAgIHRvUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzFdLnB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRQdWJrZXk6IGluc3RydWN0aW9uLmtleXNbNF0ucHVia2V5LFxuICAgICAgbGFtcG9ydHNcbiAgICB9O1xuICAgIGlmIChpbnN0cnVjdGlvbi5rZXlzLmxlbmd0aCA+IDUpIHtcbiAgICAgIG8uY3VzdG9kaWFuUHVia2V5ID0gaW5zdHJ1Y3Rpb24ua2V5c1s1XS5wdWJrZXk7XG4gICAgfVxuICAgIHJldHVybiBvO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY29kZSBhIGRlYWN0aXZhdGUgc3Rha2UgaW5zdHJ1Y3Rpb24gYW5kIHJldHJpZXZlIHRoZSBpbnN0cnVjdGlvbiBwYXJhbXMuXG4gICAqL1xuICBzdGF0aWMgZGVjb2RlRGVhY3RpdmF0ZShpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDMpO1xuICAgIGRlY29kZURhdGEkMShTVEFLRV9JTlNUUlVDVElPTl9MQVlPVVRTLkRlYWN0aXZhdGUsIGluc3RydWN0aW9uLmRhdGEpO1xuICAgIHJldHVybiB7XG4gICAgICBzdGFrZVB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1swXS5wdWJrZXksXG4gICAgICBhdXRob3JpemVkUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzJdLnB1YmtleVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzdGF0aWMgY2hlY2tQcm9ncmFtSWQocHJvZ3JhbUlkKSB7XG4gICAgaWYgKCFwcm9ncmFtSWQuZXF1YWxzKFN0YWtlUHJvZ3JhbS5wcm9ncmFtSWQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaW5zdHJ1Y3Rpb247IHByb2dyYW1JZCBpcyBub3QgU3Rha2VQcm9ncmFtJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgc3RhdGljIGNoZWNrS2V5TGVuZ3RoKGtleXMsIGV4cGVjdGVkTGVuZ3RoKSB7XG4gICAgaWYgKGtleXMubGVuZ3RoIDwgZXhwZWN0ZWRMZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBpbnN0cnVjdGlvbjsgZm91bmQgJHtrZXlzLmxlbmd0aH0ga2V5cywgZXhwZWN0ZWQgYXQgbGVhc3QgJHtleHBlY3RlZExlbmd0aH1gKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiB2YWxpZCBTdGFrZUluc3RydWN0aW9uVHlwZSdzXG4gKi9cblxuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiB2YWxpZCBzdGFrZSBJbnN0cnVjdGlvblR5cGUnc1xuICogQGludGVybmFsXG4gKi9cbmNvbnN0IFNUQUtFX0lOU1RSVUNUSU9OX0xBWU9VVFMgPSBPYmplY3QuZnJlZXplKHtcbiAgSW5pdGlhbGl6ZToge1xuICAgIGluZGV4OiAwLFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKSwgYXV0aG9yaXplZCgpLCBsb2NrdXAoKV0pXG4gIH0sXG4gIEF1dGhvcml6ZToge1xuICAgIGluZGV4OiAxLFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKSwgcHVibGljS2V5KCduZXdBdXRob3JpemVkJyksIEJ1ZmZlckxheW91dC51MzIoJ3N0YWtlQXV0aG9yaXphdGlvblR5cGUnKV0pXG4gIH0sXG4gIERlbGVnYXRlOiB7XG4gICAgaW5kZXg6IDIsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpXSlcbiAgfSxcbiAgU3BsaXQ6IHtcbiAgICBpbmRleDogMyxcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyksIEJ1ZmZlckxheW91dC5uczY0KCdsYW1wb3J0cycpXSlcbiAgfSxcbiAgV2l0aGRyYXc6IHtcbiAgICBpbmRleDogNCxcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyksIEJ1ZmZlckxheW91dC5uczY0KCdsYW1wb3J0cycpXSlcbiAgfSxcbiAgRGVhY3RpdmF0ZToge1xuICAgIGluZGV4OiA1LFxuICAgIGxheW91dDogQnVmZmVyTGF5b3V0LnN0cnVjdChbQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKV0pXG4gIH0sXG4gIE1lcmdlOiB7XG4gICAgaW5kZXg6IDcsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpXSlcbiAgfSxcbiAgQXV0aG9yaXplV2l0aFNlZWQ6IHtcbiAgICBpbmRleDogOCxcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyksIHB1YmxpY0tleSgnbmV3QXV0aG9yaXplZCcpLCBCdWZmZXJMYXlvdXQudTMyKCdzdGFrZUF1dGhvcml6YXRpb25UeXBlJyksIHJ1c3RTdHJpbmcoJ2F1dGhvcml0eVNlZWQnKSwgcHVibGljS2V5KCdhdXRob3JpdHlPd25lcicpXSlcbiAgfVxufSk7XG5cbi8qKlxuICogU3Rha2UgYXV0aG9yaXphdGlvbiB0eXBlXG4gKi9cblxuLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiB2YWxpZCBTdGFrZUF1dGhvcml6YXRpb25MYXlvdXQnc1xuICovXG5jb25zdCBTdGFrZUF1dGhvcml6YXRpb25MYXlvdXQgPSBPYmplY3QuZnJlZXplKHtcbiAgU3Rha2VyOiB7XG4gICAgaW5kZXg6IDBcbiAgfSxcbiAgV2l0aGRyYXdlcjoge1xuICAgIGluZGV4OiAxXG4gIH1cbn0pO1xuXG4vKipcbiAqIEZhY3RvcnkgY2xhc3MgZm9yIHRyYW5zYWN0aW9ucyB0byBpbnRlcmFjdCB3aXRoIHRoZSBTdGFrZSBwcm9ncmFtXG4gKi9cbmNsYXNzIFN0YWtlUHJvZ3JhbSB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogUHVibGljIGtleSB0aGF0IGlkZW50aWZpZXMgdGhlIFN0YWtlIHByb2dyYW1cbiAgICovXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGFuIEluaXRpYWxpemUgaW5zdHJ1Y3Rpb24gdG8gYWRkIHRvIGEgU3Rha2UgQ3JlYXRlIHRyYW5zYWN0aW9uXG4gICAqL1xuICBzdGF0aWMgaW5pdGlhbGl6ZShwYXJhbXMpIHtcbiAgICBjb25zdCB7XG4gICAgICBzdGFrZVB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWQsXG4gICAgICBsb2NrdXA6IG1heWJlTG9ja3VwXG4gICAgfSA9IHBhcmFtcztcbiAgICBjb25zdCBsb2NrdXAgPSBtYXliZUxvY2t1cCB8fCBMb2NrdXAuZGVmYXVsdDtcbiAgICBjb25zdCB0eXBlID0gU1RBS0VfSU5TVFJVQ1RJT05fTEFZT1VUUy5Jbml0aWFsaXplO1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVEYXRhKHR5cGUsIHtcbiAgICAgIGF1dGhvcml6ZWQ6IHtcbiAgICAgICAgc3Rha2VyOiB0b0J1ZmZlcihhdXRob3JpemVkLnN0YWtlci50b0J1ZmZlcigpKSxcbiAgICAgICAgd2l0aGRyYXdlcjogdG9CdWZmZXIoYXV0aG9yaXplZC53aXRoZHJhd2VyLnRvQnVmZmVyKCkpXG4gICAgICB9LFxuICAgICAgbG9ja3VwOiB7XG4gICAgICAgIHVuaXhUaW1lc3RhbXA6IGxvY2t1cC51bml4VGltZXN0YW1wLFxuICAgICAgICBlcG9jaDogbG9ja3VwLmVwb2NoLFxuICAgICAgICBjdXN0b2RpYW46IHRvQnVmZmVyKGxvY2t1cC5jdXN0b2RpYW4udG9CdWZmZXIoKSlcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBpbnN0cnVjdGlvbkRhdGEgPSB7XG4gICAgICBrZXlzOiBbe1xuICAgICAgICBwdWJrZXk6IHN0YWtlUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgcHVia2V5OiBTWVNWQVJfUkVOVF9QVUJLRVksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICAgIH1dLFxuICAgICAgcHJvZ3JhbUlkOiB0aGlzLnByb2dyYW1JZCxcbiAgICAgIGRhdGFcbiAgICB9O1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb25JbnN0cnVjdGlvbihpbnN0cnVjdGlvbkRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgVHJhbnNhY3Rpb24gdGhhdCBjcmVhdGVzIGEgbmV3IFN0YWtlIGFjY291bnQgYXRcbiAgICogICBhbiBhZGRyZXNzIGdlbmVyYXRlZCB3aXRoIGBmcm9tYCwgYSBzZWVkLCBhbmQgdGhlIFN0YWtlIHByb2dyYW1JZFxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUFjY291bnRXaXRoU2VlZChwYXJhbXMpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpO1xuICAgIHRyYW5zYWN0aW9uLmFkZChTeXN0ZW1Qcm9ncmFtLmNyZWF0ZUFjY291bnRXaXRoU2VlZCh7XG4gICAgICBmcm9tUHVia2V5OiBwYXJhbXMuZnJvbVB1YmtleSxcbiAgICAgIG5ld0FjY291bnRQdWJrZXk6IHBhcmFtcy5zdGFrZVB1YmtleSxcbiAgICAgIGJhc2VQdWJrZXk6IHBhcmFtcy5iYXNlUHVia2V5LFxuICAgICAgc2VlZDogcGFyYW1zLnNlZWQsXG4gICAgICBsYW1wb3J0czogcGFyYW1zLmxhbXBvcnRzLFxuICAgICAgc3BhY2U6IHRoaXMuc3BhY2UsXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkXG4gICAgfSkpO1xuICAgIGNvbnN0IHtcbiAgICAgIHN0YWtlUHVia2V5LFxuICAgICAgYXV0aG9yaXplZCxcbiAgICAgIGxvY2t1cFxuICAgIH0gPSBwYXJhbXM7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLmFkZCh0aGlzLmluaXRpYWxpemUoe1xuICAgICAgc3Rha2VQdWJrZXksXG4gICAgICBhdXRob3JpemVkLFxuICAgICAgbG9ja3VwXG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgVHJhbnNhY3Rpb24gdGhhdCBjcmVhdGVzIGEgbmV3IFN0YWtlIGFjY291bnRcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVBY2NvdW50KHBhcmFtcykge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKCk7XG4gICAgdHJhbnNhY3Rpb24uYWRkKFN5c3RlbVByb2dyYW0uY3JlYXRlQWNjb3VudCh7XG4gICAgICBmcm9tUHVia2V5OiBwYXJhbXMuZnJvbVB1YmtleSxcbiAgICAgIG5ld0FjY291bnRQdWJrZXk6IHBhcmFtcy5zdGFrZVB1YmtleSxcbiAgICAgIGxhbXBvcnRzOiBwYXJhbXMubGFtcG9ydHMsXG4gICAgICBzcGFjZTogdGhpcy5zcGFjZSxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWRcbiAgICB9KSk7XG4gICAgY29uc3Qge1xuICAgICAgc3Rha2VQdWJrZXksXG4gICAgICBhdXRob3JpemVkLFxuICAgICAgbG9ja3VwXG4gICAgfSA9IHBhcmFtcztcbiAgICByZXR1cm4gdHJhbnNhY3Rpb24uYWRkKHRoaXMuaW5pdGlhbGl6ZSh7XG4gICAgICBzdGFrZVB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWQsXG4gICAgICBsb2NrdXBcbiAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBUcmFuc2FjdGlvbiB0aGF0IGRlbGVnYXRlcyBTdGFrZSB0b2tlbnMgdG8gYSB2YWxpZGF0b3JcbiAgICogVm90ZSBQdWJsaWNLZXkuIFRoaXMgdHJhbnNhY3Rpb24gY2FuIGFsc28gYmUgdXNlZCB0byByZWRlbGVnYXRlIFN0YWtlXG4gICAqIHRvIGEgbmV3IHZhbGlkYXRvciBWb3RlIFB1YmxpY0tleS5cbiAgICovXG4gIHN0YXRpYyBkZWxlZ2F0ZShwYXJhbXMpIHtcbiAgICBjb25zdCB7XG4gICAgICBzdGFrZVB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRQdWJrZXksXG4gICAgICB2b3RlUHVia2V5XG4gICAgfSA9IHBhcmFtcztcbiAgICBjb25zdCB0eXBlID0gU1RBS0VfSU5TVFJVQ1RJT05fTEFZT1VUUy5EZWxlZ2F0ZTtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlKTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKCkuYWRkKHtcbiAgICAgIGtleXM6IFt7XG4gICAgICAgIHB1YmtleTogc3Rha2VQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IHZvdGVQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgcHVia2V5OiBTWVNWQVJfQ0xPQ0tfUFVCS0VZLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogU1lTVkFSX1NUQUtFX0hJU1RPUllfUFVCS0VZLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogU1RBS0VfQ09ORklHX0lELFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogYXV0aG9yaXplZFB1YmtleSxcbiAgICAgICAgaXNTaWduZXI6IHRydWUsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9XSxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBUcmFuc2FjdGlvbiB0aGF0IGF1dGhvcml6ZXMgYSBuZXcgUHVibGljS2V5IGFzIFN0YWtlclxuICAgKiBvciBXaXRoZHJhd2VyIG9uIHRoZSBTdGFrZSBhY2NvdW50LlxuICAgKi9cbiAgc3RhdGljIGF1dGhvcml6ZShwYXJhbXMpIHtcbiAgICBjb25zdCB7XG4gICAgICBzdGFrZVB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRQdWJrZXksXG4gICAgICBuZXdBdXRob3JpemVkUHVia2V5LFxuICAgICAgc3Rha2VBdXRob3JpemF0aW9uVHlwZSxcbiAgICAgIGN1c3RvZGlhblB1YmtleVxuICAgIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgdHlwZSA9IFNUQUtFX0lOU1RSVUNUSU9OX0xBWU9VVFMuQXV0aG9yaXplO1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVEYXRhKHR5cGUsIHtcbiAgICAgIG5ld0F1dGhvcml6ZWQ6IHRvQnVmZmVyKG5ld0F1dGhvcml6ZWRQdWJrZXkudG9CdWZmZXIoKSksXG4gICAgICBzdGFrZUF1dGhvcml6YXRpb25UeXBlOiBzdGFrZUF1dGhvcml6YXRpb25UeXBlLmluZGV4XG4gICAgfSk7XG4gICAgY29uc3Qga2V5cyA9IFt7XG4gICAgICBwdWJrZXk6IHN0YWtlUHVia2V5LFxuICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIHB1YmtleTogU1lTVkFSX0NMT0NLX1BVQktFWSxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICB9LCB7XG4gICAgICBwdWJrZXk6IGF1dGhvcml6ZWRQdWJrZXksXG4gICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgfV07XG4gICAgaWYgKGN1c3RvZGlhblB1YmtleSkge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgcHVia2V5OiBjdXN0b2RpYW5QdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24oKS5hZGQoe1xuICAgICAga2V5cyxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBUcmFuc2FjdGlvbiB0aGF0IGF1dGhvcml6ZXMgYSBuZXcgUHVibGljS2V5IGFzIFN0YWtlclxuICAgKiBvciBXaXRoZHJhd2VyIG9uIHRoZSBTdGFrZSBhY2NvdW50LlxuICAgKi9cbiAgc3RhdGljIGF1dGhvcml6ZVdpdGhTZWVkKHBhcmFtcykge1xuICAgIGNvbnN0IHtcbiAgICAgIHN0YWtlUHVia2V5LFxuICAgICAgYXV0aG9yaXR5QmFzZSxcbiAgICAgIGF1dGhvcml0eVNlZWQsXG4gICAgICBhdXRob3JpdHlPd25lcixcbiAgICAgIG5ld0F1dGhvcml6ZWRQdWJrZXksXG4gICAgICBzdGFrZUF1dGhvcml6YXRpb25UeXBlLFxuICAgICAgY3VzdG9kaWFuUHVia2V5XG4gICAgfSA9IHBhcmFtcztcbiAgICBjb25zdCB0eXBlID0gU1RBS0VfSU5TVFJVQ1RJT05fTEFZT1VUUy5BdXRob3JpemVXaXRoU2VlZDtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICBuZXdBdXRob3JpemVkOiB0b0J1ZmZlcihuZXdBdXRob3JpemVkUHVia2V5LnRvQnVmZmVyKCkpLFxuICAgICAgc3Rha2VBdXRob3JpemF0aW9uVHlwZTogc3Rha2VBdXRob3JpemF0aW9uVHlwZS5pbmRleCxcbiAgICAgIGF1dGhvcml0eVNlZWQ6IGF1dGhvcml0eVNlZWQsXG4gICAgICBhdXRob3JpdHlPd25lcjogdG9CdWZmZXIoYXV0aG9yaXR5T3duZXIudG9CdWZmZXIoKSlcbiAgICB9KTtcbiAgICBjb25zdCBrZXlzID0gW3tcbiAgICAgIHB1YmtleTogc3Rha2VQdWJrZXksXG4gICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgfSwge1xuICAgICAgcHVia2V5OiBhdXRob3JpdHlCYXNlLFxuICAgICAgaXNTaWduZXI6IHRydWUsXG4gICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgIH0sIHtcbiAgICAgIHB1YmtleTogU1lTVkFSX0NMT0NLX1BVQktFWSxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgfV07XG4gICAgaWYgKGN1c3RvZGlhblB1YmtleSkge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgcHVia2V5OiBjdXN0b2RpYW5QdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24oKS5hZGQoe1xuICAgICAga2V5cyxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzdGF0aWMgc3BsaXRJbnN0cnVjdGlvbihwYXJhbXMpIHtcbiAgICBjb25zdCB7XG4gICAgICBzdGFrZVB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRQdWJrZXksXG4gICAgICBzcGxpdFN0YWtlUHVia2V5LFxuICAgICAgbGFtcG9ydHNcbiAgICB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHR5cGUgPSBTVEFLRV9JTlNUUlVDVElPTl9MQVlPVVRTLlNwbGl0O1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVEYXRhKHR5cGUsIHtcbiAgICAgIGxhbXBvcnRzXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbkluc3RydWN0aW9uKHtcbiAgICAgIGtleXM6IFt7XG4gICAgICAgIHB1YmtleTogc3Rha2VQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IHNwbGl0U3Rha2VQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IGF1dGhvcml6ZWRQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgICAgfV0sXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgVHJhbnNhY3Rpb24gdGhhdCBzcGxpdHMgU3Rha2UgdG9rZW5zIGludG8gYW5vdGhlciBzdGFrZSBhY2NvdW50XG4gICAqL1xuICBzdGF0aWMgc3BsaXQocGFyYW1zLFxuICAvLyBDb21wdXRlIHRoZSBjb3N0IG9mIGFsbG9jYXRpbmcgdGhlIG5ldyBzdGFrZSBhY2NvdW50IGluIGxhbXBvcnRzXG4gIHJlbnRFeGVtcHRSZXNlcnZlKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oKTtcbiAgICB0cmFuc2FjdGlvbi5hZGQoU3lzdGVtUHJvZ3JhbS5jcmVhdGVBY2NvdW50KHtcbiAgICAgIGZyb21QdWJrZXk6IHBhcmFtcy5hdXRob3JpemVkUHVia2V5LFxuICAgICAgbmV3QWNjb3VudFB1YmtleTogcGFyYW1zLnNwbGl0U3Rha2VQdWJrZXksXG4gICAgICBsYW1wb3J0czogcmVudEV4ZW1wdFJlc2VydmUsXG4gICAgICBzcGFjZTogdGhpcy5zcGFjZSxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWRcbiAgICB9KSk7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLmFkZCh0aGlzLnNwbGl0SW5zdHJ1Y3Rpb24ocGFyYW1zKSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBUcmFuc2FjdGlvbiB0aGF0IHNwbGl0cyBTdGFrZSB0b2tlbnMgaW50byBhbm90aGVyIGFjY291bnRcbiAgICogZGVyaXZlZCBmcm9tIGEgYmFzZSBwdWJsaWMga2V5IGFuZCBzZWVkXG4gICAqL1xuICBzdGF0aWMgc3BsaXRXaXRoU2VlZChwYXJhbXMsXG4gIC8vIElmIHRoaXMgc3Rha2UgYWNjb3VudCBpcyBuZXcsIGNvbXB1dGUgdGhlIGNvc3Qgb2YgYWxsb2NhdGluZyBpdCBpbiBsYW1wb3J0c1xuICByZW50RXhlbXB0UmVzZXJ2ZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHN0YWtlUHVia2V5LFxuICAgICAgYXV0aG9yaXplZFB1YmtleSxcbiAgICAgIHNwbGl0U3Rha2VQdWJrZXksXG4gICAgICBiYXNlUHVia2V5LFxuICAgICAgc2VlZCxcbiAgICAgIGxhbXBvcnRzXG4gICAgfSA9IHBhcmFtcztcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpO1xuICAgIHRyYW5zYWN0aW9uLmFkZChTeXN0ZW1Qcm9ncmFtLmFsbG9jYXRlKHtcbiAgICAgIGFjY291bnRQdWJrZXk6IHNwbGl0U3Rha2VQdWJrZXksXG4gICAgICBiYXNlUHVia2V5LFxuICAgICAgc2VlZCxcbiAgICAgIHNwYWNlOiB0aGlzLnNwYWNlLFxuICAgICAgcHJvZ3JhbUlkOiB0aGlzLnByb2dyYW1JZFxuICAgIH0pKTtcbiAgICBpZiAocmVudEV4ZW1wdFJlc2VydmUgJiYgcmVudEV4ZW1wdFJlc2VydmUgPiAwKSB7XG4gICAgICB0cmFuc2FjdGlvbi5hZGQoU3lzdGVtUHJvZ3JhbS50cmFuc2Zlcih7XG4gICAgICAgIGZyb21QdWJrZXk6IHBhcmFtcy5hdXRob3JpemVkUHVia2V5LFxuICAgICAgICB0b1B1YmtleTogc3BsaXRTdGFrZVB1YmtleSxcbiAgICAgICAgbGFtcG9ydHM6IHJlbnRFeGVtcHRSZXNlcnZlXG4gICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2FjdGlvbi5hZGQodGhpcy5zcGxpdEluc3RydWN0aW9uKHtcbiAgICAgIHN0YWtlUHVia2V5LFxuICAgICAgYXV0aG9yaXplZFB1YmtleSxcbiAgICAgIHNwbGl0U3Rha2VQdWJrZXksXG4gICAgICBsYW1wb3J0c1xuICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIFRyYW5zYWN0aW9uIHRoYXQgbWVyZ2VzIFN0YWtlIGFjY291bnRzLlxuICAgKi9cbiAgc3RhdGljIG1lcmdlKHBhcmFtcykge1xuICAgIGNvbnN0IHtcbiAgICAgIHN0YWtlUHVia2V5LFxuICAgICAgc291cmNlU3Rha2VQdWJLZXksXG4gICAgICBhdXRob3JpemVkUHVia2V5XG4gICAgfSA9IHBhcmFtcztcbiAgICBjb25zdCB0eXBlID0gU1RBS0VfSU5TVFJVQ1RJT05fTEFZT1VUUy5NZXJnZTtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlKTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKCkuYWRkKHtcbiAgICAgIGtleXM6IFt7XG4gICAgICAgIHB1YmtleTogc3Rha2VQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IHNvdXJjZVN0YWtlUHViS2V5LFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgcHVia2V5OiBTWVNWQVJfQ0xPQ0tfUFVCS0VZLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogU1lTVkFSX1NUQUtFX0hJU1RPUllfUFVCS0VZLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogYXV0aG9yaXplZFB1YmtleSxcbiAgICAgICAgaXNTaWduZXI6IHRydWUsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9XSxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBUcmFuc2FjdGlvbiB0aGF0IHdpdGhkcmF3cyBkZWFjdGl2YXRlZCBTdGFrZSB0b2tlbnMuXG4gICAqL1xuICBzdGF0aWMgd2l0aGRyYXcocGFyYW1zKSB7XG4gICAgY29uc3Qge1xuICAgICAgc3Rha2VQdWJrZXksXG4gICAgICBhdXRob3JpemVkUHVia2V5LFxuICAgICAgdG9QdWJrZXksXG4gICAgICBsYW1wb3J0cyxcbiAgICAgIGN1c3RvZGlhblB1YmtleVxuICAgIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgdHlwZSA9IFNUQUtFX0lOU1RSVUNUSU9OX0xBWU9VVFMuV2l0aGRyYXc7XG4gICAgY29uc3QgZGF0YSA9IGVuY29kZURhdGEodHlwZSwge1xuICAgICAgbGFtcG9ydHNcbiAgICB9KTtcbiAgICBjb25zdCBrZXlzID0gW3tcbiAgICAgIHB1YmtleTogc3Rha2VQdWJrZXksXG4gICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgfSwge1xuICAgICAgcHVia2V5OiB0b1B1YmtleSxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICB9LCB7XG4gICAgICBwdWJrZXk6IFNZU1ZBUl9DTE9DS19QVUJLRVksXG4gICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgIH0sIHtcbiAgICAgIHB1YmtleTogU1lTVkFSX1NUQUtFX0hJU1RPUllfUFVCS0VZLFxuICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICB9LCB7XG4gICAgICBwdWJrZXk6IGF1dGhvcml6ZWRQdWJrZXksXG4gICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgfV07XG4gICAgaWYgKGN1c3RvZGlhblB1YmtleSkge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgcHVia2V5OiBjdXN0b2RpYW5QdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24oKS5hZGQoe1xuICAgICAga2V5cyxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBUcmFuc2FjdGlvbiB0aGF0IGRlYWN0aXZhdGVzIFN0YWtlIHRva2Vucy5cbiAgICovXG4gIHN0YXRpYyBkZWFjdGl2YXRlKHBhcmFtcykge1xuICAgIGNvbnN0IHtcbiAgICAgIHN0YWtlUHVia2V5LFxuICAgICAgYXV0aG9yaXplZFB1YmtleVxuICAgIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgdHlwZSA9IFNUQUtFX0lOU1RSVUNUSU9OX0xBWU9VVFMuRGVhY3RpdmF0ZTtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlKTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKCkuYWRkKHtcbiAgICAgIGtleXM6IFt7XG4gICAgICAgIHB1YmtleTogc3Rha2VQdWJrZXksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBwdWJrZXk6IFNZU1ZBUl9DTE9DS19QVUJLRVksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgcHVia2V5OiBhdXRob3JpemVkUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICAgIH1dLFxuICAgICAgcHJvZ3JhbUlkOiB0aGlzLnByb2dyYW1JZCxcbiAgICAgIGRhdGFcbiAgICB9KTtcbiAgfVxufVxuU3Rha2VQcm9ncmFtLnByb2dyYW1JZCA9IG5ldyBQdWJsaWNLZXkoJ1N0YWtlMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEnKTtcbi8qKlxuICogTWF4IHNwYWNlIG9mIGEgU3Rha2UgYWNjb3VudFxuICpcbiAqIFRoaXMgaXMgZ2VuZXJhdGVkIGZyb20gdGhlIHNvbGFuYS1zdGFrZS1wcm9ncmFtIFN0YWtlU3RhdGUgc3RydWN0IGFzXG4gKiBgU3Rha2VTdGF0ZVYyOjpzaXplX29mKClgOlxuICogaHR0cHM6Ly9kb2NzLnJzL3NvbGFuYS1zdGFrZS1wcm9ncmFtL2xhdGVzdC9zb2xhbmFfc3Rha2VfcHJvZ3JhbS9zdGFrZV9zdGF0ZS9lbnVtLlN0YWtlU3RhdGVWMi5odG1sXG4gKi9cblN0YWtlUHJvZ3JhbS5zcGFjZSA9IDIwMDtcblxuLyoqXG4gKiBWb3RlIGFjY291bnQgaW5mb1xuICovXG5jbGFzcyBWb3RlSW5pdCB7XG4gIC8qKiBbMCwgMTAwXSAqL1xuXG4gIGNvbnN0cnVjdG9yKG5vZGVQdWJrZXksIGF1dGhvcml6ZWRWb3RlciwgYXV0aG9yaXplZFdpdGhkcmF3ZXIsIGNvbW1pc3Npb24pIHtcbiAgICB0aGlzLm5vZGVQdWJrZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5hdXRob3JpemVkVm90ZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5hdXRob3JpemVkV2l0aGRyYXdlciA9IHZvaWQgMDtcbiAgICB0aGlzLmNvbW1pc3Npb24gPSB2b2lkIDA7XG4gICAgdGhpcy5ub2RlUHVia2V5ID0gbm9kZVB1YmtleTtcbiAgICB0aGlzLmF1dGhvcml6ZWRWb3RlciA9IGF1dGhvcml6ZWRWb3RlcjtcbiAgICB0aGlzLmF1dGhvcml6ZWRXaXRoZHJhd2VyID0gYXV0aG9yaXplZFdpdGhkcmF3ZXI7XG4gICAgdGhpcy5jb21taXNzaW9uID0gY29tbWlzc2lvbjtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSB2b3RlIGFjY291bnQgdHJhbnNhY3Rpb24gcGFyYW1zXG4gKi9cblxuLyoqXG4gKiBJbml0aWFsaXplQWNjb3VudCBpbnN0cnVjdGlvbiBwYXJhbXNcbiAqL1xuXG4vKipcbiAqIEF1dGhvcml6ZSBpbnN0cnVjdGlvbiBwYXJhbXNcbiAqL1xuXG4vKipcbiAqIEF1dGhvcml6ZVdpdGhTZWVkIGluc3RydWN0aW9uIHBhcmFtc1xuICovXG5cbi8qKlxuICogV2l0aGRyYXcgZnJvbSB2b3RlIGFjY291bnQgdHJhbnNhY3Rpb24gcGFyYW1zXG4gKi9cblxuLyoqXG4gKiBVcGRhdGUgdmFsaWRhdG9yIGlkZW50aXR5IChub2RlIHB1YmtleSkgdm90ZSBhY2NvdW50IGluc3RydWN0aW9uIHBhcmFtcy5cbiAqL1xuXG4vKipcbiAqIFZvdGUgSW5zdHJ1Y3Rpb24gY2xhc3NcbiAqL1xuY2xhc3MgVm90ZUluc3RydWN0aW9uIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgYSB2b3RlIGluc3RydWN0aW9uIGFuZCByZXRyaWV2ZSB0aGUgaW5zdHJ1Y3Rpb24gdHlwZS5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVJbnN0cnVjdGlvblR5cGUoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgY29uc3QgaW5zdHJ1Y3Rpb25UeXBlTGF5b3V0ID0gQnVmZmVyTGF5b3V0LnUzMignaW5zdHJ1Y3Rpb24nKTtcbiAgICBjb25zdCB0eXBlSW5kZXggPSBpbnN0cnVjdGlvblR5cGVMYXlvdXQuZGVjb2RlKGluc3RydWN0aW9uLmRhdGEpO1xuICAgIGxldCB0eXBlO1xuICAgIGZvciAoY29uc3QgW2l4VHlwZSwgbGF5b3V0XSBvZiBPYmplY3QuZW50cmllcyhWT1RFX0lOU1RSVUNUSU9OX0xBWU9VVFMpKSB7XG4gICAgICBpZiAobGF5b3V0LmluZGV4ID09IHR5cGVJbmRleCkge1xuICAgICAgICB0eXBlID0gaXhUeXBlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luc3RydWN0aW9uIHR5cGUgaW5jb3JyZWN0OyBub3QgYSBWb3RlSW5zdHJ1Y3Rpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGFuIGluaXRpYWxpemUgdm90ZSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVJbml0aWFsaXplQWNjb3VudChpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDQpO1xuICAgIGNvbnN0IHtcbiAgICAgIHZvdGVJbml0XG4gICAgfSA9IGRlY29kZURhdGEkMShWT1RFX0lOU1RSVUNUSU9OX0xBWU9VVFMuSW5pdGlhbGl6ZUFjY291bnQsIGluc3RydWN0aW9uLmRhdGEpO1xuICAgIHJldHVybiB7XG4gICAgICB2b3RlUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzBdLnB1YmtleSxcbiAgICAgIG5vZGVQdWJrZXk6IGluc3RydWN0aW9uLmtleXNbM10ucHVia2V5LFxuICAgICAgdm90ZUluaXQ6IG5ldyBWb3RlSW5pdChuZXcgUHVibGljS2V5KHZvdGVJbml0Lm5vZGVQdWJrZXkpLCBuZXcgUHVibGljS2V5KHZvdGVJbml0LmF1dGhvcml6ZWRWb3RlciksIG5ldyBQdWJsaWNLZXkodm90ZUluaXQuYXV0aG9yaXplZFdpdGhkcmF3ZXIpLCB2b3RlSW5pdC5jb21taXNzaW9uKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGFuIGF1dGhvcml6ZSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVBdXRob3JpemUoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgdGhpcy5jaGVja0tleUxlbmd0aChpbnN0cnVjdGlvbi5rZXlzLCAzKTtcbiAgICBjb25zdCB7XG4gICAgICBuZXdBdXRob3JpemVkLFxuICAgICAgdm90ZUF1dGhvcml6YXRpb25UeXBlXG4gICAgfSA9IGRlY29kZURhdGEkMShWT1RFX0lOU1RSVUNUSU9OX0xBWU9VVFMuQXV0aG9yaXplLCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgdm90ZVB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1swXS5wdWJrZXksXG4gICAgICBhdXRob3JpemVkUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzJdLnB1YmtleSxcbiAgICAgIG5ld0F1dGhvcml6ZWRQdWJrZXk6IG5ldyBQdWJsaWNLZXkobmV3QXV0aG9yaXplZCksXG4gICAgICB2b3RlQXV0aG9yaXphdGlvblR5cGU6IHtcbiAgICAgICAgaW5kZXg6IHZvdGVBdXRob3JpemF0aW9uVHlwZVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGFuIGF1dGhvcml6ZSBpbnN0cnVjdGlvbiBhbmQgcmV0cmlldmUgdGhlIGluc3RydWN0aW9uIHBhcmFtcy5cbiAgICovXG4gIHN0YXRpYyBkZWNvZGVBdXRob3JpemVXaXRoU2VlZChpbnN0cnVjdGlvbikge1xuICAgIHRoaXMuY2hlY2tQcm9ncmFtSWQoaW5zdHJ1Y3Rpb24ucHJvZ3JhbUlkKTtcbiAgICB0aGlzLmNoZWNrS2V5TGVuZ3RoKGluc3RydWN0aW9uLmtleXMsIDMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHZvdGVBdXRob3JpemVXaXRoU2VlZEFyZ3M6IHtcbiAgICAgICAgY3VycmVudEF1dGhvcml0eURlcml2ZWRLZXlPd25lclB1YmtleSxcbiAgICAgICAgY3VycmVudEF1dGhvcml0eURlcml2ZWRLZXlTZWVkLFxuICAgICAgICBuZXdBdXRob3JpemVkLFxuICAgICAgICB2b3RlQXV0aG9yaXphdGlvblR5cGVcbiAgICAgIH1cbiAgICB9ID0gZGVjb2RlRGF0YSQxKFZPVEVfSU5TVFJVQ1RJT05fTEFZT1VUUy5BdXRob3JpemVXaXRoU2VlZCwgaW5zdHJ1Y3Rpb24uZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnRBdXRob3JpdHlEZXJpdmVkS2V5QmFzZVB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1syXS5wdWJrZXksXG4gICAgICBjdXJyZW50QXV0aG9yaXR5RGVyaXZlZEtleU93bmVyUHVia2V5OiBuZXcgUHVibGljS2V5KGN1cnJlbnRBdXRob3JpdHlEZXJpdmVkS2V5T3duZXJQdWJrZXkpLFxuICAgICAgY3VycmVudEF1dGhvcml0eURlcml2ZWRLZXlTZWVkOiBjdXJyZW50QXV0aG9yaXR5RGVyaXZlZEtleVNlZWQsXG4gICAgICBuZXdBdXRob3JpemVkUHVia2V5OiBuZXcgUHVibGljS2V5KG5ld0F1dGhvcml6ZWQpLFxuICAgICAgdm90ZUF1dGhvcml6YXRpb25UeXBlOiB7XG4gICAgICAgIGluZGV4OiB2b3RlQXV0aG9yaXphdGlvblR5cGVcbiAgICAgIH0sXG4gICAgICB2b3RlUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzBdLnB1YmtleVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVjb2RlIGEgd2l0aGRyYXcgaW5zdHJ1Y3Rpb24gYW5kIHJldHJpZXZlIHRoZSBpbnN0cnVjdGlvbiBwYXJhbXMuXG4gICAqL1xuICBzdGF0aWMgZGVjb2RlV2l0aGRyYXcoaW5zdHJ1Y3Rpb24pIHtcbiAgICB0aGlzLmNoZWNrUHJvZ3JhbUlkKGluc3RydWN0aW9uLnByb2dyYW1JZCk7XG4gICAgdGhpcy5jaGVja0tleUxlbmd0aChpbnN0cnVjdGlvbi5rZXlzLCAzKTtcbiAgICBjb25zdCB7XG4gICAgICBsYW1wb3J0c1xuICAgIH0gPSBkZWNvZGVEYXRhJDEoVk9URV9JTlNUUlVDVElPTl9MQVlPVVRTLldpdGhkcmF3LCBpbnN0cnVjdGlvbi5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgdm90ZVB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1swXS5wdWJrZXksXG4gICAgICBhdXRob3JpemVkV2l0aGRyYXdlclB1YmtleTogaW5zdHJ1Y3Rpb24ua2V5c1syXS5wdWJrZXksXG4gICAgICBsYW1wb3J0cyxcbiAgICAgIHRvUHVia2V5OiBpbnN0cnVjdGlvbi5rZXlzWzFdLnB1YmtleVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzdGF0aWMgY2hlY2tQcm9ncmFtSWQocHJvZ3JhbUlkKSB7XG4gICAgaWYgKCFwcm9ncmFtSWQuZXF1YWxzKFZvdGVQcm9ncmFtLnByb2dyYW1JZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbnN0cnVjdGlvbjsgcHJvZ3JhbUlkIGlzIG5vdCBWb3RlUHJvZ3JhbScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHN0YXRpYyBjaGVja0tleUxlbmd0aChrZXlzLCBleHBlY3RlZExlbmd0aCkge1xuICAgIGlmIChrZXlzLmxlbmd0aCA8IGV4cGVjdGVkTGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgaW5zdHJ1Y3Rpb247IGZvdW5kICR7a2V5cy5sZW5ndGh9IGtleXMsIGV4cGVjdGVkIGF0IGxlYXN0ICR7ZXhwZWN0ZWRMZW5ndGh9YCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQW4gZW51bWVyYXRpb24gb2YgdmFsaWQgVm90ZUluc3RydWN0aW9uVHlwZSdzXG4gKi9cblxuLyoqIEBpbnRlcm5hbCAqL1xuXG5jb25zdCBWT1RFX0lOU1RSVUNUSU9OX0xBWU9VVFMgPSBPYmplY3QuZnJlZXplKHtcbiAgSW5pdGlhbGl6ZUFjY291bnQ6IHtcbiAgICBpbmRleDogMCxcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyksIHZvdGVJbml0KCldKVxuICB9LFxuICBBdXRob3JpemU6IHtcbiAgICBpbmRleDogMSxcbiAgICBsYXlvdXQ6IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC51MzIoJ2luc3RydWN0aW9uJyksIHB1YmxpY0tleSgnbmV3QXV0aG9yaXplZCcpLCBCdWZmZXJMYXlvdXQudTMyKCd2b3RlQXV0aG9yaXphdGlvblR5cGUnKV0pXG4gIH0sXG4gIFdpdGhkcmF3OiB7XG4gICAgaW5kZXg6IDMsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpLCBCdWZmZXJMYXlvdXQubnM2NCgnbGFtcG9ydHMnKV0pXG4gIH0sXG4gIFVwZGF0ZVZhbGlkYXRvcklkZW50aXR5OiB7XG4gICAgaW5kZXg6IDQsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpXSlcbiAgfSxcbiAgQXV0aG9yaXplV2l0aFNlZWQ6IHtcbiAgICBpbmRleDogMTAsXG4gICAgbGF5b3V0OiBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQudTMyKCdpbnN0cnVjdGlvbicpLCB2b3RlQXV0aG9yaXplV2l0aFNlZWRBcmdzKCldKVxuICB9XG59KTtcblxuLyoqXG4gKiBWb3RlQXV0aG9yaXplIHR5cGVcbiAqL1xuXG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHZhbGlkIFZvdGVBdXRob3JpemF0aW9uIGxheW91dHMuXG4gKi9cbmNvbnN0IFZvdGVBdXRob3JpemF0aW9uTGF5b3V0ID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFZvdGVyOiB7XG4gICAgaW5kZXg6IDBcbiAgfSxcbiAgV2l0aGRyYXdlcjoge1xuICAgIGluZGV4OiAxXG4gIH1cbn0pO1xuXG4vKipcbiAqIEZhY3RvcnkgY2xhc3MgZm9yIHRyYW5zYWN0aW9ucyB0byBpbnRlcmFjdCB3aXRoIHRoZSBWb3RlIHByb2dyYW1cbiAqL1xuY2xhc3MgVm90ZVByb2dyYW0ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBrZXkgdGhhdCBpZGVudGlmaWVzIHRoZSBWb3RlIHByb2dyYW1cbiAgICovXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGFuIEluaXRpYWxpemUgaW5zdHJ1Y3Rpb24uXG4gICAqL1xuICBzdGF0aWMgaW5pdGlhbGl6ZUFjY291bnQocGFyYW1zKSB7XG4gICAgY29uc3Qge1xuICAgICAgdm90ZVB1YmtleSxcbiAgICAgIG5vZGVQdWJrZXksXG4gICAgICB2b3RlSW5pdFxuICAgIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgdHlwZSA9IFZPVEVfSU5TVFJVQ1RJT05fTEFZT1VUUy5Jbml0aWFsaXplQWNjb3VudDtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICB2b3RlSW5pdDoge1xuICAgICAgICBub2RlUHVia2V5OiB0b0J1ZmZlcih2b3RlSW5pdC5ub2RlUHVia2V5LnRvQnVmZmVyKCkpLFxuICAgICAgICBhdXRob3JpemVkVm90ZXI6IHRvQnVmZmVyKHZvdGVJbml0LmF1dGhvcml6ZWRWb3Rlci50b0J1ZmZlcigpKSxcbiAgICAgICAgYXV0aG9yaXplZFdpdGhkcmF3ZXI6IHRvQnVmZmVyKHZvdGVJbml0LmF1dGhvcml6ZWRXaXRoZHJhd2VyLnRvQnVmZmVyKCkpLFxuICAgICAgICBjb21taXNzaW9uOiB2b3RlSW5pdC5jb21taXNzaW9uXG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgaW5zdHJ1Y3Rpb25EYXRhID0ge1xuICAgICAga2V5czogW3tcbiAgICAgICAgcHVia2V5OiB2b3RlUHVia2V5LFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgcHVia2V5OiBTWVNWQVJfUkVOVF9QVUJLRVksXG4gICAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgcHVia2V5OiBTWVNWQVJfQ0xPQ0tfUFVCS0VZLFxuICAgICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9LCB7XG4gICAgICAgIHB1YmtleTogbm9kZVB1YmtleSxcbiAgICAgICAgaXNTaWduZXI6IHRydWUsXG4gICAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgICB9XSxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWQsXG4gICAgICBkYXRhXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24oaW5zdHJ1Y3Rpb25EYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHRyYW5zYWN0aW9uIHRoYXQgY3JlYXRlcyBhIG5ldyBWb3RlIGFjY291bnQuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlQWNjb3VudChwYXJhbXMpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbigpO1xuICAgIHRyYW5zYWN0aW9uLmFkZChTeXN0ZW1Qcm9ncmFtLmNyZWF0ZUFjY291bnQoe1xuICAgICAgZnJvbVB1YmtleTogcGFyYW1zLmZyb21QdWJrZXksXG4gICAgICBuZXdBY2NvdW50UHVia2V5OiBwYXJhbXMudm90ZVB1YmtleSxcbiAgICAgIGxhbXBvcnRzOiBwYXJhbXMubGFtcG9ydHMsXG4gICAgICBzcGFjZTogdGhpcy5zcGFjZSxcbiAgICAgIHByb2dyYW1JZDogdGhpcy5wcm9ncmFtSWRcbiAgICB9KSk7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLmFkZCh0aGlzLmluaXRpYWxpemVBY2NvdW50KHtcbiAgICAgIHZvdGVQdWJrZXk6IHBhcmFtcy52b3RlUHVia2V5LFxuICAgICAgbm9kZVB1YmtleTogcGFyYW1zLnZvdGVJbml0Lm5vZGVQdWJrZXksXG4gICAgICB2b3RlSW5pdDogcGFyYW1zLnZvdGVJbml0XG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgdHJhbnNhY3Rpb24gdGhhdCBhdXRob3JpemVzIGEgbmV3IFZvdGVyIG9yIFdpdGhkcmF3ZXIgb24gdGhlIFZvdGUgYWNjb3VudC5cbiAgICovXG4gIHN0YXRpYyBhdXRob3JpemUocGFyYW1zKSB7XG4gICAgY29uc3Qge1xuICAgICAgdm90ZVB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRQdWJrZXksXG4gICAgICBuZXdBdXRob3JpemVkUHVia2V5LFxuICAgICAgdm90ZUF1dGhvcml6YXRpb25UeXBlXG4gICAgfSA9IHBhcmFtcztcbiAgICBjb25zdCB0eXBlID0gVk9URV9JTlNUUlVDVElPTl9MQVlPVVRTLkF1dGhvcml6ZTtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICBuZXdBdXRob3JpemVkOiB0b0J1ZmZlcihuZXdBdXRob3JpemVkUHVia2V5LnRvQnVmZmVyKCkpLFxuICAgICAgdm90ZUF1dGhvcml6YXRpb25UeXBlOiB2b3RlQXV0aG9yaXphdGlvblR5cGUuaW5kZXhcbiAgICB9KTtcbiAgICBjb25zdCBrZXlzID0gW3tcbiAgICAgIHB1YmtleTogdm90ZVB1YmtleSxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICB9LCB7XG4gICAgICBwdWJrZXk6IFNZU1ZBUl9DTE9DS19QVUJLRVksXG4gICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICBpc1dyaXRhYmxlOiBmYWxzZVxuICAgIH0sIHtcbiAgICAgIHB1YmtleTogYXV0aG9yaXplZFB1YmtleSxcbiAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICB9XTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKCkuYWRkKHtcbiAgICAgIGtleXMsXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgdHJhbnNhY3Rpb24gdGhhdCBhdXRob3JpemVzIGEgbmV3IFZvdGVyIG9yIFdpdGhkcmF3ZXIgb24gdGhlIFZvdGUgYWNjb3VudFxuICAgKiB3aGVyZSB0aGUgY3VycmVudCBWb3RlciBvciBXaXRoZHJhd2VyIGF1dGhvcml0eSBpcyBhIGRlcml2ZWQga2V5LlxuICAgKi9cbiAgc3RhdGljIGF1dGhvcml6ZVdpdGhTZWVkKHBhcmFtcykge1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnRBdXRob3JpdHlEZXJpdmVkS2V5QmFzZVB1YmtleSxcbiAgICAgIGN1cnJlbnRBdXRob3JpdHlEZXJpdmVkS2V5T3duZXJQdWJrZXksXG4gICAgICBjdXJyZW50QXV0aG9yaXR5RGVyaXZlZEtleVNlZWQsXG4gICAgICBuZXdBdXRob3JpemVkUHVia2V5LFxuICAgICAgdm90ZUF1dGhvcml6YXRpb25UeXBlLFxuICAgICAgdm90ZVB1YmtleVxuICAgIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgdHlwZSA9IFZPVEVfSU5TVFJVQ1RJT05fTEFZT1VUUy5BdXRob3JpemVXaXRoU2VlZDtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICB2b3RlQXV0aG9yaXplV2l0aFNlZWRBcmdzOiB7XG4gICAgICAgIGN1cnJlbnRBdXRob3JpdHlEZXJpdmVkS2V5T3duZXJQdWJrZXk6IHRvQnVmZmVyKGN1cnJlbnRBdXRob3JpdHlEZXJpdmVkS2V5T3duZXJQdWJrZXkudG9CdWZmZXIoKSksXG4gICAgICAgIGN1cnJlbnRBdXRob3JpdHlEZXJpdmVkS2V5U2VlZDogY3VycmVudEF1dGhvcml0eURlcml2ZWRLZXlTZWVkLFxuICAgICAgICBuZXdBdXRob3JpemVkOiB0b0J1ZmZlcihuZXdBdXRob3JpemVkUHVia2V5LnRvQnVmZmVyKCkpLFxuICAgICAgICB2b3RlQXV0aG9yaXphdGlvblR5cGU6IHZvdGVBdXRob3JpemF0aW9uVHlwZS5pbmRleFxuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGtleXMgPSBbe1xuICAgICAgcHVia2V5OiB2b3RlUHVia2V5LFxuICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIHB1YmtleTogU1lTVkFSX0NMT0NLX1BVQktFWSxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgfSwge1xuICAgICAgcHVia2V5OiBjdXJyZW50QXV0aG9yaXR5RGVyaXZlZEtleUJhc2VQdWJrZXksXG4gICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgfV07XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbigpLmFkZCh7XG4gICAgICBrZXlzLFxuICAgICAgcHJvZ3JhbUlkOiB0aGlzLnByb2dyYW1JZCxcbiAgICAgIGRhdGFcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHRyYW5zYWN0aW9uIHRvIHdpdGhkcmF3IGZyb20gYSBWb3RlIGFjY291bnQuXG4gICAqL1xuICBzdGF0aWMgd2l0aGRyYXcocGFyYW1zKSB7XG4gICAgY29uc3Qge1xuICAgICAgdm90ZVB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRXaXRoZHJhd2VyUHVia2V5LFxuICAgICAgbGFtcG9ydHMsXG4gICAgICB0b1B1YmtleVxuICAgIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgdHlwZSA9IFZPVEVfSU5TVFJVQ1RJT05fTEFZT1VUUy5XaXRoZHJhdztcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlLCB7XG4gICAgICBsYW1wb3J0c1xuICAgIH0pO1xuICAgIGNvbnN0IGtleXMgPSBbe1xuICAgICAgcHVia2V5OiB2b3RlUHVia2V5LFxuICAgICAgaXNTaWduZXI6IGZhbHNlLFxuICAgICAgaXNXcml0YWJsZTogdHJ1ZVxuICAgIH0sIHtcbiAgICAgIHB1YmtleTogdG9QdWJrZXksXG4gICAgICBpc1NpZ25lcjogZmFsc2UsXG4gICAgICBpc1dyaXRhYmxlOiB0cnVlXG4gICAgfSwge1xuICAgICAgcHVia2V5OiBhdXRob3JpemVkV2l0aGRyYXdlclB1YmtleSxcbiAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICB9XTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKCkuYWRkKHtcbiAgICAgIGtleXMsXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgdHJhbnNhY3Rpb24gdG8gd2l0aGRyYXcgc2FmZWx5IGZyb20gYSBWb3RlIGFjY291bnQuXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2FzIGNyZWF0ZWQgYXMgYSBzYWZlZ3VhcmQgZm9yIHZvdGUgYWNjb3VudHMgcnVubmluZyB2YWxpZGF0b3JzLCBgc2FmZVdpdGhkcmF3YFxuICAgKiBjaGVja3MgdGhhdCB0aGUgd2l0aGRyYXcgYW1vdW50IHdpbGwgbm90IGV4Y2VlZCB0aGUgc3BlY2lmaWVkIGJhbGFuY2Ugd2hpbGUgbGVhdmluZyBlbm91Z2ggbGVmdFxuICAgKiB0byBjb3ZlciByZW50LiBJZiB5b3Ugd2lzaCB0byBjbG9zZSB0aGUgdm90ZSBhY2NvdW50IGJ5IHdpdGhkcmF3aW5nIHRoZSBmdWxsIGFtb3VudCwgY2FsbCB0aGVcbiAgICogYHdpdGhkcmF3YCBtZXRob2QgZGlyZWN0bHkuXG4gICAqL1xuICBzdGF0aWMgc2FmZVdpdGhkcmF3KHBhcmFtcywgY3VycmVudFZvdGVBY2NvdW50QmFsYW5jZSwgcmVudEV4ZW1wdE1pbmltdW0pIHtcbiAgICBpZiAocGFyYW1zLmxhbXBvcnRzID4gY3VycmVudFZvdGVBY2NvdW50QmFsYW5jZSAtIHJlbnRFeGVtcHRNaW5pbXVtKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpdGhkcmF3IHdpbGwgbGVhdmUgdm90ZSBhY2NvdW50IHdpdGggaW5zdWZmaWNpZW50IGZ1bmRzLicpO1xuICAgIH1cbiAgICByZXR1cm4gVm90ZVByb2dyYW0ud2l0aGRyYXcocGFyYW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHRyYW5zYWN0aW9uIHRvIHVwZGF0ZSB0aGUgdmFsaWRhdG9yIGlkZW50aXR5IChub2RlIHB1YmtleSkgb2YgYSBWb3RlIGFjY291bnQuXG4gICAqL1xuICBzdGF0aWMgdXBkYXRlVmFsaWRhdG9ySWRlbnRpdHkocGFyYW1zKSB7XG4gICAgY29uc3Qge1xuICAgICAgdm90ZVB1YmtleSxcbiAgICAgIGF1dGhvcml6ZWRXaXRoZHJhd2VyUHVia2V5LFxuICAgICAgbm9kZVB1YmtleVxuICAgIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgdHlwZSA9IFZPVEVfSU5TVFJVQ1RJT05fTEFZT1VUUy5VcGRhdGVWYWxpZGF0b3JJZGVudGl0eTtcbiAgICBjb25zdCBkYXRhID0gZW5jb2RlRGF0YSh0eXBlKTtcbiAgICBjb25zdCBrZXlzID0gW3tcbiAgICAgIHB1YmtleTogdm90ZVB1YmtleSxcbiAgICAgIGlzU2lnbmVyOiBmYWxzZSxcbiAgICAgIGlzV3JpdGFibGU6IHRydWVcbiAgICB9LCB7XG4gICAgICBwdWJrZXk6IG5vZGVQdWJrZXksXG4gICAgICBpc1NpZ25lcjogdHJ1ZSxcbiAgICAgIGlzV3JpdGFibGU6IGZhbHNlXG4gICAgfSwge1xuICAgICAgcHVia2V5OiBhdXRob3JpemVkV2l0aGRyYXdlclB1YmtleSxcbiAgICAgIGlzU2lnbmVyOiB0cnVlLFxuICAgICAgaXNXcml0YWJsZTogZmFsc2VcbiAgICB9XTtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKCkuYWRkKHtcbiAgICAgIGtleXMsXG4gICAgICBwcm9ncmFtSWQ6IHRoaXMucHJvZ3JhbUlkLFxuICAgICAgZGF0YVxuICAgIH0pO1xuICB9XG59XG5Wb3RlUHJvZ3JhbS5wcm9ncmFtSWQgPSBuZXcgUHVibGljS2V5KCdWb3RlMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExJyk7XG4vKipcbiAqIE1heCBzcGFjZSBvZiBhIFZvdGUgYWNjb3VudFxuICpcbiAqIFRoaXMgaXMgZ2VuZXJhdGVkIGZyb20gdGhlIHNvbGFuYS12b3RlLXByb2dyYW0gVm90ZVN0YXRlIHN0cnVjdCBhc1xuICogYFZvdGVTdGF0ZTo6c2l6ZV9vZigpYDpcbiAqIGh0dHBzOi8vZG9jcy5ycy9zb2xhbmEtdm90ZS1wcm9ncmFtLzEuOS41L3NvbGFuYV92b3RlX3Byb2dyYW0vdm90ZV9zdGF0ZS9zdHJ1Y3QuVm90ZVN0YXRlLmh0bWwjbWV0aG9kLnNpemVfb2ZcbiAqXG4gKiBLRUVQIElOIFNZTkMgV0lUSCBgVm90ZVN0YXRlOjpzaXplX29mKClgIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2xhbmEtbGFicy9zb2xhbmEvYmxvYi9hNDc0Y2IyNGI5MjM4ZjVlZGNjOTgyZjY1YzBiMzdkNGExMDQ2ZjdlL3Nkay9wcm9ncmFtL3NyYy92b3RlL3N0YXRlL21vZC5ycyNMMzQwLUwzNDJcbiAqL1xuVm90ZVByb2dyYW0uc3BhY2UgPSAzNzYyO1xuXG5jb25zdCBWQUxJREFUT1JfSU5GT19LRVkgPSBuZXcgUHVibGljS2V5KCdWYTFpZGF0b3IxbmZvMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExJyk7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuLyoqXG4gKiBJbmZvIHVzZWQgdG8gaWRlbnRpdHkgdmFsaWRhdG9ycy5cbiAqL1xuXG5jb25zdCBJbmZvU3RyaW5nID0gdHlwZSh7XG4gIG5hbWU6IHN0cmluZygpLFxuICB3ZWJzaXRlOiBvcHRpb25hbChzdHJpbmcoKSksXG4gIGRldGFpbHM6IG9wdGlvbmFsKHN0cmluZygpKSxcbiAgaWNvblVybDogb3B0aW9uYWwoc3RyaW5nKCkpLFxuICBrZXliYXNlVXNlcm5hbWU6IG9wdGlvbmFsKHN0cmluZygpKVxufSk7XG5cbi8qKlxuICogVmFsaWRhdG9ySW5mbyBjbGFzc1xuICovXG5jbGFzcyBWYWxpZGF0b3JJbmZvIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIHZhbGlkIFZhbGlkYXRvckluZm9cbiAgICpcbiAgICogQHBhcmFtIGtleSB2YWxpZGF0b3IgcHVibGljIGtleVxuICAgKiBAcGFyYW0gaW5mbyB2YWxpZGF0b3IgaW5mb3JtYXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKGtleSwgaW5mbykge1xuICAgIC8qKlxuICAgICAqIHZhbGlkYXRvciBwdWJsaWMga2V5XG4gICAgICovXG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogdmFsaWRhdG9yIGluZm9ybWF0aW9uXG4gICAgICovXG4gICAgdGhpcy5pbmZvID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuaW5mbyA9IGluZm87XG4gIH1cblxuICAvKipcbiAgICogRGVzZXJpYWxpemUgVmFsaWRhdG9ySW5mbyBmcm9tIHRoZSBjb25maWcgYWNjb3VudCBkYXRhLiBFeGFjdGx5IHR3byBjb25maWdcbiAgICoga2V5cyBhcmUgcmVxdWlyZWQgaW4gdGhlIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgY29uZmlnIGFjY291bnQgZGF0YVxuICAgKiBAcmV0dXJuIG51bGwgaWYgaW5mbyB3YXMgbm90IGZvdW5kXG4gICAqL1xuICBzdGF0aWMgZnJvbUNvbmZpZ0RhdGEoYnVmZmVyKSB7XG4gICAgbGV0IGJ5dGVBcnJheSA9IFsuLi5idWZmZXJdO1xuICAgIGNvbnN0IGNvbmZpZ0tleUNvdW50ID0gZGVjb2RlTGVuZ3RoKGJ5dGVBcnJheSk7XG4gICAgaWYgKGNvbmZpZ0tleUNvdW50ICE9PSAyKSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBjb25maWdLZXlzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspIHtcbiAgICAgIGNvbnN0IHB1YmxpY0tleSA9IG5ldyBQdWJsaWNLZXkoZ3VhcmRlZFNwbGljZShieXRlQXJyYXksIDAsIFBVQkxJQ19LRVlfTEVOR1RIKSk7XG4gICAgICBjb25zdCBpc1NpZ25lciA9IGd1YXJkZWRTaGlmdChieXRlQXJyYXkpID09PSAxO1xuICAgICAgY29uZmlnS2V5cy5wdXNoKHtcbiAgICAgICAgcHVibGljS2V5LFxuICAgICAgICBpc1NpZ25lclxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChjb25maWdLZXlzWzBdLnB1YmxpY0tleS5lcXVhbHMoVkFMSURBVE9SX0lORk9fS0VZKSkge1xuICAgICAgaWYgKGNvbmZpZ0tleXNbMV0uaXNTaWduZXIpIHtcbiAgICAgICAgY29uc3QgcmF3SW5mbyA9IHJ1c3RTdHJpbmcoKS5kZWNvZGUoQnVmZmVyLmZyb20oYnl0ZUFycmF5KSk7XG4gICAgICAgIGNvbnN0IGluZm8gPSBKU09OLnBhcnNlKHJhd0luZm8pO1xuICAgICAgICBhc3NlcnQkMShpbmZvLCBJbmZvU3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIG5ldyBWYWxpZGF0b3JJbmZvKGNvbmZpZ0tleXNbMV0ucHVibGljS2V5LCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuY29uc3QgVk9URV9QUk9HUkFNX0lEID0gbmV3IFB1YmxpY0tleSgnVm90ZTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMScpO1xuXG4vKipcbiAqIEhpc3Rvcnkgb2YgaG93IG1hbnkgY3JlZGl0cyBlYXJuZWQgYnkgdGhlIGVuZCBvZiBlYWNoIGVwb2NoXG4gKi9cblxuLyoqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3NvbGFuYS1sYWJzL3NvbGFuYS9ibG9iLzhhMTJlZDAyOWNmYTM4ZDRhNDU0MDA5MTZjMjQ2M2ZiODJiYmVjOGMvcHJvZ3JhbXMvdm90ZV9hcGkvc3JjL3ZvdGVfc3RhdGUucnMjTDY4LUw4OFxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBWb3RlQWNjb3VudExheW91dCA9IEJ1ZmZlckxheW91dC5zdHJ1Y3QoW3B1YmxpY0tleSgnbm9kZVB1YmtleScpLCBwdWJsaWNLZXkoJ2F1dGhvcml6ZWRXaXRoZHJhd2VyJyksIEJ1ZmZlckxheW91dC51OCgnY29tbWlzc2lvbicpLCBCdWZmZXJMYXlvdXQubnU2NCgpLFxuLy8gdm90ZXMubGVuZ3RoXG5CdWZmZXJMYXlvdXQuc2VxKEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC5udTY0KCdzbG90JyksIEJ1ZmZlckxheW91dC51MzIoJ2NvbmZpcm1hdGlvbkNvdW50JyldKSwgQnVmZmVyTGF5b3V0Lm9mZnNldChCdWZmZXJMYXlvdXQudTMyKCksIC04KSwgJ3ZvdGVzJyksIEJ1ZmZlckxheW91dC51OCgncm9vdFNsb3RWYWxpZCcpLCBCdWZmZXJMYXlvdXQubnU2NCgncm9vdFNsb3QnKSwgQnVmZmVyTGF5b3V0Lm51NjQoKSxcbi8vIGF1dGhvcml6ZWRWb3RlcnMubGVuZ3RoXG5CdWZmZXJMYXlvdXQuc2VxKEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC5udTY0KCdlcG9jaCcpLCBwdWJsaWNLZXkoJ2F1dGhvcml6ZWRWb3RlcicpXSksIEJ1ZmZlckxheW91dC5vZmZzZXQoQnVmZmVyTGF5b3V0LnUzMigpLCAtOCksICdhdXRob3JpemVkVm90ZXJzJyksIEJ1ZmZlckxheW91dC5zdHJ1Y3QoW0J1ZmZlckxheW91dC5zZXEoQnVmZmVyTGF5b3V0LnN0cnVjdChbcHVibGljS2V5KCdhdXRob3JpemVkUHVia2V5JyksIEJ1ZmZlckxheW91dC5udTY0KCdlcG9jaE9mTGFzdEF1dGhvcml6ZWRTd2l0Y2gnKSwgQnVmZmVyTGF5b3V0Lm51NjQoJ3RhcmdldEVwb2NoJyldKSwgMzIsICdidWYnKSwgQnVmZmVyTGF5b3V0Lm51NjQoJ2lkeCcpLCBCdWZmZXJMYXlvdXQudTgoJ2lzRW1wdHknKV0sICdwcmlvclZvdGVycycpLCBCdWZmZXJMYXlvdXQubnU2NCgpLFxuLy8gZXBvY2hDcmVkaXRzLmxlbmd0aFxuQnVmZmVyTGF5b3V0LnNlcShCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQubnU2NCgnZXBvY2gnKSwgQnVmZmVyTGF5b3V0Lm51NjQoJ2NyZWRpdHMnKSwgQnVmZmVyTGF5b3V0Lm51NjQoJ3ByZXZDcmVkaXRzJyldKSwgQnVmZmVyTGF5b3V0Lm9mZnNldChCdWZmZXJMYXlvdXQudTMyKCksIC04KSwgJ2Vwb2NoQ3JlZGl0cycpLCBCdWZmZXJMYXlvdXQuc3RydWN0KFtCdWZmZXJMYXlvdXQubnU2NCgnc2xvdCcpLCBCdWZmZXJMYXlvdXQubnU2NCgndGltZXN0YW1wJyldLCAnbGFzdFRpbWVzdGFtcCcpXSk7XG4vKipcbiAqIFZvdGVBY2NvdW50IGNsYXNzXG4gKi9cbmNsYXNzIFZvdGVBY2NvdW50IHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoYXJncykge1xuICAgIHRoaXMubm9kZVB1YmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmF1dGhvcml6ZWRXaXRoZHJhd2VyID0gdm9pZCAwO1xuICAgIHRoaXMuY29tbWlzc2lvbiA9IHZvaWQgMDtcbiAgICB0aGlzLnJvb3RTbG90ID0gdm9pZCAwO1xuICAgIHRoaXMudm90ZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5hdXRob3JpemVkVm90ZXJzID0gdm9pZCAwO1xuICAgIHRoaXMucHJpb3JWb3RlcnMgPSB2b2lkIDA7XG4gICAgdGhpcy5lcG9jaENyZWRpdHMgPSB2b2lkIDA7XG4gICAgdGhpcy5sYXN0VGltZXN0YW1wID0gdm9pZCAwO1xuICAgIHRoaXMubm9kZVB1YmtleSA9IGFyZ3Mubm9kZVB1YmtleTtcbiAgICB0aGlzLmF1dGhvcml6ZWRXaXRoZHJhd2VyID0gYXJncy5hdXRob3JpemVkV2l0aGRyYXdlcjtcbiAgICB0aGlzLmNvbW1pc3Npb24gPSBhcmdzLmNvbW1pc3Npb247XG4gICAgdGhpcy5yb290U2xvdCA9IGFyZ3Mucm9vdFNsb3Q7XG4gICAgdGhpcy52b3RlcyA9IGFyZ3Mudm90ZXM7XG4gICAgdGhpcy5hdXRob3JpemVkVm90ZXJzID0gYXJncy5hdXRob3JpemVkVm90ZXJzO1xuICAgIHRoaXMucHJpb3JWb3RlcnMgPSBhcmdzLnByaW9yVm90ZXJzO1xuICAgIHRoaXMuZXBvY2hDcmVkaXRzID0gYXJncy5lcG9jaENyZWRpdHM7XG4gICAgdGhpcy5sYXN0VGltZXN0YW1wID0gYXJncy5sYXN0VGltZXN0YW1wO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplIFZvdGVBY2NvdW50IGZyb20gdGhlIGFjY291bnQgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciBhY2NvdW50IGRhdGFcbiAgICogQHJldHVybiBWb3RlQWNjb3VudFxuICAgKi9cbiAgc3RhdGljIGZyb21BY2NvdW50RGF0YShidWZmZXIpIHtcbiAgICBjb25zdCB2ZXJzaW9uT2Zmc2V0ID0gNDtcbiAgICBjb25zdCB2YSA9IFZvdGVBY2NvdW50TGF5b3V0LmRlY29kZSh0b0J1ZmZlcihidWZmZXIpLCB2ZXJzaW9uT2Zmc2V0KTtcbiAgICBsZXQgcm9vdFNsb3QgPSB2YS5yb290U2xvdDtcbiAgICBpZiAoIXZhLnJvb3RTbG90VmFsaWQpIHtcbiAgICAgIHJvb3RTbG90ID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBWb3RlQWNjb3VudCh7XG4gICAgICBub2RlUHVia2V5OiBuZXcgUHVibGljS2V5KHZhLm5vZGVQdWJrZXkpLFxuICAgICAgYXV0aG9yaXplZFdpdGhkcmF3ZXI6IG5ldyBQdWJsaWNLZXkodmEuYXV0aG9yaXplZFdpdGhkcmF3ZXIpLFxuICAgICAgY29tbWlzc2lvbjogdmEuY29tbWlzc2lvbixcbiAgICAgIHZvdGVzOiB2YS52b3RlcyxcbiAgICAgIHJvb3RTbG90LFxuICAgICAgYXV0aG9yaXplZFZvdGVyczogdmEuYXV0aG9yaXplZFZvdGVycy5tYXAocGFyc2VBdXRob3JpemVkVm90ZXIpLFxuICAgICAgcHJpb3JWb3RlcnM6IGdldFByaW9yVm90ZXJzKHZhLnByaW9yVm90ZXJzKSxcbiAgICAgIGVwb2NoQ3JlZGl0czogdmEuZXBvY2hDcmVkaXRzLFxuICAgICAgbGFzdFRpbWVzdGFtcDogdmEubGFzdFRpbWVzdGFtcFxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZUF1dGhvcml6ZWRWb3Rlcih7XG4gIGF1dGhvcml6ZWRWb3RlcixcbiAgZXBvY2hcbn0pIHtcbiAgcmV0dXJuIHtcbiAgICBlcG9jaCxcbiAgICBhdXRob3JpemVkVm90ZXI6IG5ldyBQdWJsaWNLZXkoYXV0aG9yaXplZFZvdGVyKVxuICB9O1xufVxuZnVuY3Rpb24gcGFyc2VQcmlvclZvdGVycyh7XG4gIGF1dGhvcml6ZWRQdWJrZXksXG4gIGVwb2NoT2ZMYXN0QXV0aG9yaXplZFN3aXRjaCxcbiAgdGFyZ2V0RXBvY2hcbn0pIHtcbiAgcmV0dXJuIHtcbiAgICBhdXRob3JpemVkUHVia2V5OiBuZXcgUHVibGljS2V5KGF1dGhvcml6ZWRQdWJrZXkpLFxuICAgIGVwb2NoT2ZMYXN0QXV0aG9yaXplZFN3aXRjaCxcbiAgICB0YXJnZXRFcG9jaFxuICB9O1xufVxuZnVuY3Rpb24gZ2V0UHJpb3JWb3RlcnMoe1xuICBidWYsXG4gIGlkeCxcbiAgaXNFbXB0eVxufSkge1xuICBpZiAoaXNFbXB0eSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gWy4uLmJ1Zi5zbGljZShpZHggKyAxKS5tYXAocGFyc2VQcmlvclZvdGVycyksIC4uLmJ1Zi5zbGljZSgwLCBpZHgpLm1hcChwYXJzZVByaW9yVm90ZXJzKV07XG59XG5cbmNvbnN0IGVuZHBvaW50ID0ge1xuICBodHRwOiB7XG4gICAgZGV2bmV0OiAnaHR0cDovL2FwaS5kZXZuZXQuc29sYW5hLmNvbScsXG4gICAgdGVzdG5ldDogJ2h0dHA6Ly9hcGkudGVzdG5ldC5zb2xhbmEuY29tJyxcbiAgICAnbWFpbm5ldC1iZXRhJzogJ2h0dHA6Ly9hcGkubWFpbm5ldC1iZXRhLnNvbGFuYS5jb20vJ1xuICB9LFxuICBodHRwczoge1xuICAgIGRldm5ldDogJ2h0dHBzOi8vYXBpLmRldm5ldC5zb2xhbmEuY29tJyxcbiAgICB0ZXN0bmV0OiAnaHR0cHM6Ly9hcGkudGVzdG5ldC5zb2xhbmEuY29tJyxcbiAgICAnbWFpbm5ldC1iZXRhJzogJ2h0dHBzOi8vYXBpLm1haW5uZXQtYmV0YS5zb2xhbmEuY29tLydcbiAgfVxufTtcbi8qKlxuICogUmV0cmlldmVzIHRoZSBSUEMgQVBJIFVSTCBmb3IgdGhlIHNwZWNpZmllZCBjbHVzdGVyXG4gKiBAcGFyYW0ge0NsdXN0ZXJ9IFtjbHVzdGVyPVwiZGV2bmV0XCJdIC0gVGhlIGNsdXN0ZXIgbmFtZSBvZiB0aGUgUlBDIEFQSSBVUkwgdG8gdXNlLiBQb3NzaWJsZSBvcHRpb25zOiAnZGV2bmV0JyB8ICd0ZXN0bmV0JyB8ICdtYWlubmV0LWJldGEnXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt0bHM9XCJodHRwXCJdIC0gVXNlIFRMUyB3aGVuIGNvbm5lY3RpbmcgdG8gY2x1c3Rlci5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBVUkwgc3RyaW5nIG9mIHRoZSBSUEMgZW5kcG9pbnRcbiAqL1xuZnVuY3Rpb24gY2x1c3RlckFwaVVybChjbHVzdGVyLCB0bHMpIHtcbiAgY29uc3Qga2V5ID0gdGxzID09PSBmYWxzZSA/ICdodHRwJyA6ICdodHRwcyc7XG4gIGlmICghY2x1c3Rlcikge1xuICAgIHJldHVybiBlbmRwb2ludFtrZXldWydkZXZuZXQnXTtcbiAgfVxuICBjb25zdCB1cmwgPSBlbmRwb2ludFtrZXldW2NsdXN0ZXJdO1xuICBpZiAoIXVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biAke2tleX0gY2x1c3RlcjogJHtjbHVzdGVyfWApO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5cbi8qKlxuICogU2VuZCBhbmQgY29uZmlybSBhIHJhdyB0cmFuc2FjdGlvblxuICpcbiAqIElmIGBjb21taXRtZW50YCBvcHRpb24gaXMgbm90IHNwZWNpZmllZCwgZGVmYXVsdHMgdG8gJ21heCcgY29tbWl0bWVudC5cbiAqXG4gKiBAcGFyYW0ge0Nvbm5lY3Rpb259IGNvbm5lY3Rpb25cbiAqIEBwYXJhbSB7QnVmZmVyfSByYXdUcmFuc2FjdGlvblxuICogQHBhcmFtIHtUcmFuc2FjdGlvbkNvbmZpcm1hdGlvblN0cmF0ZWd5fSBjb25maXJtYXRpb25TdHJhdGVneVxuICogQHBhcmFtIHtDb25maXJtT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxUcmFuc2FjdGlvblNpZ25hdHVyZT59XG4gKi9cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBDYWxsaW5nIGBzZW5kQW5kQ29uZmlybVJhd1RyYW5zYWN0aW9uKClgIHdpdGhvdXQgYSBgY29uZmlybWF0aW9uU3RyYXRlZ3lgXG4gKiBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5hc3luYyBmdW5jdGlvbiBzZW5kQW5kQ29uZmlybVJhd1RyYW5zYWN0aW9uKGNvbm5lY3Rpb24sIHJhd1RyYW5zYWN0aW9uLCBjb25maXJtYXRpb25TdHJhdGVneU9yQ29uZmlybU9wdGlvbnMsIG1heWJlQ29uZmlybU9wdGlvbnMpIHtcbiAgbGV0IGNvbmZpcm1hdGlvblN0cmF0ZWd5O1xuICBsZXQgb3B0aW9ucztcbiAgaWYgKGNvbmZpcm1hdGlvblN0cmF0ZWd5T3JDb25maXJtT3B0aW9ucyAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29uZmlybWF0aW9uU3RyYXRlZ3lPckNvbmZpcm1PcHRpb25zLCAnbGFzdFZhbGlkQmxvY2tIZWlnaHQnKSkge1xuICAgIGNvbmZpcm1hdGlvblN0cmF0ZWd5ID0gY29uZmlybWF0aW9uU3RyYXRlZ3lPckNvbmZpcm1PcHRpb25zO1xuICAgIG9wdGlvbnMgPSBtYXliZUNvbmZpcm1PcHRpb25zO1xuICB9IGVsc2UgaWYgKGNvbmZpcm1hdGlvblN0cmF0ZWd5T3JDb25maXJtT3B0aW9ucyAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29uZmlybWF0aW9uU3RyYXRlZ3lPckNvbmZpcm1PcHRpb25zLCAnbm9uY2VWYWx1ZScpKSB7XG4gICAgY29uZmlybWF0aW9uU3RyYXRlZ3kgPSBjb25maXJtYXRpb25TdHJhdGVneU9yQ29uZmlybU9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IG1heWJlQ29uZmlybU9wdGlvbnM7XG4gIH0gZWxzZSB7XG4gICAgb3B0aW9ucyA9IGNvbmZpcm1hdGlvblN0cmF0ZWd5T3JDb25maXJtT3B0aW9ucztcbiAgfVxuICBjb25zdCBzZW5kT3B0aW9ucyA9IG9wdGlvbnMgJiYge1xuICAgIHNraXBQcmVmbGlnaHQ6IG9wdGlvbnMuc2tpcFByZWZsaWdodCxcbiAgICBwcmVmbGlnaHRDb21taXRtZW50OiBvcHRpb25zLnByZWZsaWdodENvbW1pdG1lbnQgfHwgb3B0aW9ucy5jb21taXRtZW50LFxuICAgIG1pbkNvbnRleHRTbG90OiBvcHRpb25zLm1pbkNvbnRleHRTbG90XG4gIH07XG4gIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IGNvbm5lY3Rpb24uc2VuZFJhd1RyYW5zYWN0aW9uKHJhd1RyYW5zYWN0aW9uLCBzZW5kT3B0aW9ucyk7XG4gIGNvbnN0IGNvbW1pdG1lbnQgPSBvcHRpb25zICYmIG9wdGlvbnMuY29tbWl0bWVudDtcbiAgY29uc3QgY29uZmlybWF0aW9uUHJvbWlzZSA9IGNvbmZpcm1hdGlvblN0cmF0ZWd5ID8gY29ubmVjdGlvbi5jb25maXJtVHJhbnNhY3Rpb24oY29uZmlybWF0aW9uU3RyYXRlZ3ksIGNvbW1pdG1lbnQpIDogY29ubmVjdGlvbi5jb25maXJtVHJhbnNhY3Rpb24oc2lnbmF0dXJlLCBjb21taXRtZW50KTtcbiAgY29uc3Qgc3RhdHVzID0gKGF3YWl0IGNvbmZpcm1hdGlvblByb21pc2UpLnZhbHVlO1xuICBpZiAoc3RhdHVzLmVycikge1xuICAgIGlmIChzaWduYXR1cmUgIT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFNlbmRUcmFuc2FjdGlvbkVycm9yKHtcbiAgICAgICAgYWN0aW9uOiBzZW5kT3B0aW9ucz8uc2tpcFByZWZsaWdodCA/ICdzZW5kJyA6ICdzaW11bGF0ZScsXG4gICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlLFxuICAgICAgICB0cmFuc2FjdGlvbk1lc3NhZ2U6IGBTdGF0dXM6ICgke0pTT04uc3RyaW5naWZ5KHN0YXR1cyl9KWBcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFJhdyB0cmFuc2FjdGlvbiAke3NpZ25hdHVyZX0gZmFpbGVkICgke0pTT04uc3RyaW5naWZ5KHN0YXR1cyl9KWApO1xuICB9XG4gIHJldHVybiBzaWduYXR1cmU7XG59XG5cbi8qKlxuICogVGhlcmUgYXJlIDEtYmlsbGlvbiBsYW1wb3J0cyBpbiBvbmUgU09MXG4gKi9cbmNvbnN0IExBTVBPUlRTX1BFUl9TT0wgPSAxMDAwMDAwMDAwO1xuXG5leHBvcnQgeyBBY2NvdW50LCBBZGRyZXNzTG9va3VwVGFibGVBY2NvdW50LCBBZGRyZXNzTG9va3VwVGFibGVJbnN0cnVjdGlvbiwgQWRkcmVzc0xvb2t1cFRhYmxlUHJvZ3JhbSwgQXV0aG9yaXplZCwgQkxPQ0tIQVNIX0NBQ0hFX1RJTUVPVVRfTVMsIEJQRl9MT0FERVJfREVQUkVDQVRFRF9QUk9HUkFNX0lELCBCUEZfTE9BREVSX1BST0dSQU1fSUQsIEJwZkxvYWRlciwgQ09NUFVURV9CVURHRVRfSU5TVFJVQ1RJT05fTEFZT1VUUywgQ29tcHV0ZUJ1ZGdldEluc3RydWN0aW9uLCBDb21wdXRlQnVkZ2V0UHJvZ3JhbSwgQ29ubmVjdGlvbiwgRWQyNTUxOVByb2dyYW0sIEVudW0sIEVwb2NoU2NoZWR1bGUsIEZlZUNhbGN1bGF0b3JMYXlvdXQsIEtleXBhaXIsIExBTVBPUlRTX1BFUl9TT0wsIExPT0tVUF9UQUJMRV9JTlNUUlVDVElPTl9MQVlPVVRTLCBMb2FkZXIsIExvY2t1cCwgTUFYX1NFRURfTEVOR1RILCBNZXNzYWdlLCBNZXNzYWdlQWNjb3VudEtleXMsIE1lc3NhZ2VWMCwgTk9OQ0VfQUNDT1VOVF9MRU5HVEgsIE5vbmNlQWNjb3VudCwgUEFDS0VUX0RBVEFfU0laRSwgUFVCTElDX0tFWV9MRU5HVEgsIFB1YmxpY0tleSwgU0lHTkFUVVJFX0xFTkdUSF9JTl9CWVRFUywgU09MQU5BX1NDSEVNQSwgU1RBS0VfQ09ORklHX0lELCBTVEFLRV9JTlNUUlVDVElPTl9MQVlPVVRTLCBTWVNURU1fSU5TVFJVQ1RJT05fTEFZT1VUUywgU1lTVkFSX0NMT0NLX1BVQktFWSwgU1lTVkFSX0VQT0NIX1NDSEVEVUxFX1BVQktFWSwgU1lTVkFSX0lOU1RSVUNUSU9OU19QVUJLRVksIFNZU1ZBUl9SRUNFTlRfQkxPQ0tIQVNIRVNfUFVCS0VZLCBTWVNWQVJfUkVOVF9QVUJLRVksIFNZU1ZBUl9SRVdBUkRTX1BVQktFWSwgU1lTVkFSX1NMT1RfSEFTSEVTX1BVQktFWSwgU1lTVkFSX1NMT1RfSElTVE9SWV9QVUJLRVksIFNZU1ZBUl9TVEFLRV9ISVNUT1JZX1BVQktFWSwgU2VjcDI1NmsxUHJvZ3JhbSwgU2VuZFRyYW5zYWN0aW9uRXJyb3IsIFNvbGFuYUpTT05SUENFcnJvciwgU29sYW5hSlNPTlJQQ0Vycm9yQ29kZSwgU3Rha2VBdXRob3JpemF0aW9uTGF5b3V0LCBTdGFrZUluc3RydWN0aW9uLCBTdGFrZVByb2dyYW0sIFN0cnVjdCwgU3lzdGVtSW5zdHJ1Y3Rpb24sIFN5c3RlbVByb2dyYW0sIFRyYW5zYWN0aW9uLCBUcmFuc2FjdGlvbkV4cGlyZWRCbG9ja2hlaWdodEV4Y2VlZGVkRXJyb3IsIFRyYW5zYWN0aW9uRXhwaXJlZE5vbmNlSW52YWxpZEVycm9yLCBUcmFuc2FjdGlvbkV4cGlyZWRUaW1lb3V0RXJyb3IsIFRyYW5zYWN0aW9uSW5zdHJ1Y3Rpb24sIFRyYW5zYWN0aW9uTWVzc2FnZSwgVHJhbnNhY3Rpb25TdGF0dXMsIFZBTElEQVRPUl9JTkZPX0tFWSwgVkVSU0lPTl9QUkVGSVhfTUFTSywgVk9URV9QUk9HUkFNX0lELCBWYWxpZGF0b3JJbmZvLCBWZXJzaW9uZWRNZXNzYWdlLCBWZXJzaW9uZWRUcmFuc2FjdGlvbiwgVm90ZUFjY291bnQsIFZvdGVBdXRob3JpemF0aW9uTGF5b3V0LCBWb3RlSW5pdCwgVm90ZUluc3RydWN0aW9uLCBWb3RlUHJvZ3JhbSwgY2x1c3RlckFwaVVybCwgc2VuZEFuZENvbmZpcm1SYXdUcmFuc2FjdGlvbiwgc2VuZEFuZENvbmZpcm1UcmFuc2FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguYnJvd3Nlci5lc20uanMubWFwXG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIEJ1ZmZlciA9IHdpbmRvdy5CdWZmZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPCBudW1iZXIubGVuZ3RoKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCwgZW5kaWFuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3BhcnNlQmFzZShudW1iZXIsIGJhc2UsIHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXROdW1iZXIgPSBmdW5jdGlvbiBfaW5pdE51bWJlciAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICBudW1iZXIgPSAtbnVtYmVyO1xuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMHg0MDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW251bWJlciAmIDB4M2ZmZmZmZl07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWzBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4NEJpdHMgKHN0cmluZywgaW5kZXgpIHtcbiAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAvLyAnMCcgLSAnOSdcbiAgICBpZiAoYyA+PSA0OCAmJiBjIDw9IDU3KSB7XG4gICAgICByZXR1cm4gYyAtIDQ4O1xuICAgIC8vICdBJyAtICdGJ1xuICAgIH0gZWxzZSBpZiAoYyA+PSA2NSAmJiBjIDw9IDcwKSB7XG4gICAgICByZXR1cm4gYyAtIDU1O1xuICAgIC8vICdhJyAtICdmJ1xuICAgIH0gZWxzZSBpZiAoYyA+PSA5NyAmJiBjIDw9IDEwMikge1xuICAgICAgcmV0dXJuIGMgLSA4NztcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnSW52YWxpZCBjaGFyYWN0ZXIgaW4gJyArIHN0cmluZyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXhCeXRlIChzdHJpbmcsIGxvd2VyQm91bmQsIGluZGV4KSB7XG4gICAgdmFyIHIgPSBwYXJzZUhleDRCaXRzKHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChpbmRleCAtIDEgPj0gbG93ZXJCb3VuZCkge1xuICAgICAgciB8PSBwYXJzZUhleDRCaXRzKHN0cmluZywgaW5kZXggLSAxKSA8PCA0O1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQsIGVuZGlhbikge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIC8vIDI0LWJpdHMgY2h1bmtzXG4gICAgdmFyIG9mZiA9IDA7XG4gICAgdmFyIGogPSAwO1xuXG4gICAgdmFyIHc7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IGkgLT0gMikge1xuICAgICAgICB3ID0gcGFyc2VIZXhCeXRlKG51bWJlciwgc3RhcnQsIGkpIDw8IG9mZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ICYgMHgzZmZmZmZmO1xuICAgICAgICBpZiAob2ZmID49IDE4KSB7XG4gICAgICAgICAgb2ZmIC09IDE4O1xuICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgPj4+IDI2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZiArPSA4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJzZUxlbmd0aCA9IG51bWJlci5sZW5ndGggLSBzdGFydDtcbiAgICAgIGZvciAoaSA9IHBhcnNlTGVuZ3RoICUgMiA9PT0gMCA/IHN0YXJ0ICsgMSA6IHN0YXJ0OyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHcgPSBwYXJzZUhleEJ5dGUobnVtYmVyLCBzdGFydCwgaSkgPDwgb2ZmO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgJiAweDNmZmZmZmY7XG4gICAgICAgIGlmIChvZmYgPj0gMTgpIHtcbiAgICAgICAgICBvZmYgLT0gMTg7XG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIHRoaXMud29yZHNbal0gfD0gdyA+Pj4gMjY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmICs9IDg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIGIgPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIGIgPSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYiA9IGM7XG4gICAgICB9XG4gICAgICBhc3NlcnQoYyA+PSAwICYmIGIgPCBtdWwsICdJbnZhbGlkIGNoYXJhY3RlcicpO1xuICAgICAgciArPSBiO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VCYXNlID0gZnVuY3Rpb24gX3BhcnNlQmFzZSAobnVtYmVyLCBiYXNlLCBzdGFydCkge1xuICAgIC8vIEluaXRpYWxpemUgYXMgemVyb1xuICAgIHRoaXMud29yZHMgPSBbMF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBmdW5jdGlvbiBtb3ZlIChkZXN0LCBzcmMpIHtcbiAgICBkZXN0LndvcmRzID0gc3JjLndvcmRzO1xuICAgIGRlc3QubGVuZ3RoID0gc3JjLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gc3JjLm5lZ2F0aXZlO1xuICAgIGRlc3QucmVkID0gc3JjLnJlZDtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fbW92ZSA9IGZ1bmN0aW9uIF9tb3ZlIChkZXN0KSB7XG4gICAgbW92ZShkZXN0LCB0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLl9zdHJpcCA9IGZ1bmN0aW9uIHN0cmlwICgpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPiAxICYmIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9ub3JtU2lnbiA9IGZ1bmN0aW9uIF9ub3JtU2lnbiAoKSB7XG4gICAgLy8gLTAgPSAwXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBDaGVjayBTeW1ib2wuZm9yIGJlY2F1c2Ugbm90IGV2ZXJ5d2hlcmUgd2hlcmUgU3ltYm9sIGRlZmluZWRcbiAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N5bWJvbCNCcm93c2VyX2NvbXBhdGliaWxpdHlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBTeW1ib2wuZm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIEJOLnByb3RvdHlwZVtTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IGluc3BlY3Q7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBpbnNwZWN0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuaW5zcGVjdCA9IGluc3BlY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfVxuXG4gIC8qXG5cbiAgdmFyIHplcm9zID0gW107XG4gIHZhciBncm91cFNpemVzID0gW107XG4gIHZhciBncm91cEJhc2VzID0gW107XG5cbiAgdmFyIHMgPSAnJztcbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IEJOLndvcmRTaXplKSB7XG4gICAgemVyb3NbaV0gPSBzO1xuICAgIHMgKz0gJzAnO1xuICB9XG4gIGdyb3VwU2l6ZXNbMF0gPSAwO1xuICBncm91cFNpemVzWzFdID0gMDtcbiAgZ3JvdXBCYXNlc1swXSA9IDA7XG4gIGdyb3VwQmFzZXNbMV0gPSAwO1xuICB2YXIgYmFzZSA9IDIgLSAxO1xuICB3aGlsZSAoKytiYXNlIDwgMzYgKyAxKSB7XG4gICAgdmFyIGdyb3VwU2l6ZSA9IDA7XG4gICAgdmFyIGdyb3VwQmFzZSA9IDE7XG4gICAgd2hpbGUgKGdyb3VwQmFzZSA8ICgxIDw8IEJOLndvcmRTaXplKSAvIGJhc2UpIHtcbiAgICAgIGdyb3VwQmFzZSAqPSBiYXNlO1xuICAgICAgZ3JvdXBTaXplICs9IDE7XG4gICAgfVxuICAgIGdyb3VwU2l6ZXNbYmFzZV0gPSBncm91cFNpemU7XG4gICAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTtcbiAgfVxuXG4gICovXG5cbiAgdmFyIHplcm9zID0gW1xuICAgICcnLFxuICAgICcwJyxcbiAgICAnMDAnLFxuICAgICcwMDAnLFxuICAgICcwMDAwJyxcbiAgICAnMDAwMDAnLFxuICAgICcwMDAwMDAnLFxuICAgICcwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ1xuICBdO1xuXG4gIHZhciBncm91cFNpemVzID0gW1xuICAgIDAsIDAsXG4gICAgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LFxuICAgIDgsIDcsIDcsIDcsIDcsIDYsIDYsXG4gICAgNiwgNiwgNiwgNiwgNiwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDVcbiAgXTtcblxuICB2YXIgZ3JvdXBCYXNlcyA9IFtcbiAgICAwLCAwLFxuICAgIDMzNTU0NDMyLCA0MzA0NjcyMSwgMTY3NzcyMTYsIDQ4ODI4MTI1LCA2MDQ2NjE3NiwgNDAzNTM2MDcsIDE2Nzc3MjE2LFxuICAgIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsXG4gICAgMTY3NzcyMTYsIDI0MTM3NTY5LCAzNDAxMjIyNCwgNDcwNDU4ODEsIDY0MDAwMDAwLCA0MDg0MTAxLCA1MTUzNjMyLFxuICAgIDY0MzYzNDMsIDc5NjI2MjQsIDk3NjU2MjUsIDExODgxMzc2LCAxNDM0ODkwNywgMTcyMTAzNjgsIDIwNTExMTQ5LFxuICAgIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XG4gIF07XG5cbiAgQk4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKGJhc2UsIHBhZGRpbmcpIHtcbiAgICBiYXNlID0gYmFzZSB8fCAxMDtcbiAgICBwYWRkaW5nID0gcGFkZGluZyB8IDAgfHwgMTtcblxuICAgIHZhciBvdXQ7XG4gICAgaWYgKGJhc2UgPT09IDE2IHx8IGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBvZmYgPSAwO1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgICAgIHZhciB3b3JkID0gKCgodyA8PCBvZmYpIHwgY2FycnkpICYgMHhmZmZmZmYpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY2FycnkgPSAodyA+Pj4gKDI0IC0gb2ZmKSkgJiAweGZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgb3V0ID0gY2FycnkudG9TdHJpbmcoMTYpICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHtcbiAgICAgIC8vIHZhciBncm91cFNpemUgPSBNYXRoLmZsb29yKEJOLndvcmRTaXplICogTWF0aC5MTjIgLyBNYXRoLmxvZyhiYXNlKSk7XG4gICAgICB2YXIgZ3JvdXBTaXplID0gZ3JvdXBTaXplc1tiYXNlXTtcbiAgICAgIC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpO1xuICAgICAgdmFyIGdyb3VwQmFzZSA9IGdyb3VwQmFzZXNbYmFzZV07XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBjID0gdGhpcy5jbG9uZSgpO1xuICAgICAgYy5uZWdhdGl2ZSA9IDA7XG4gICAgICB3aGlsZSAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgdmFyIHIgPSBjLm1vZHJuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2LCAyKTtcbiAgfTtcblxuICBpZiAoQnVmZmVyKSB7XG4gICAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5IChlbmRpYW4sIGxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEFycmF5LCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gYWxsb2NhdGUgKEFycmF5VHlwZSwgc2l6ZSkge1xuICAgIGlmIChBcnJheVR5cGUuYWxsb2NVbnNhZmUpIHtcbiAgICAgIHJldHVybiBBcnJheVR5cGUuYWxsb2NVbnNhZmUoc2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXJyYXlUeXBlKHNpemUpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdGhpcy5fc3RyaXAoKTtcblxuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHZhciByZXMgPSBhbGxvY2F0ZShBcnJheVR5cGUsIHJlcUxlbmd0aCk7XG4gICAgdmFyIHBvc3RmaXggPSBlbmRpYW4gPT09ICdsZScgPyAnTEUnIDogJ0JFJztcbiAgICB0aGlzWydfdG9BcnJheUxpa2UnICsgcG9zdGZpeF0ocmVzLCBieXRlTGVuZ3RoKTtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fdG9BcnJheUxpa2VMRSA9IGZ1bmN0aW9uIF90b0FycmF5TGlrZUxFIChyZXMsIGJ5dGVMZW5ndGgpIHtcbiAgICB2YXIgcG9zaXRpb24gPSAwO1xuICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgc2hpZnQgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHdvcmQgPSAodGhpcy53b3Jkc1tpXSA8PCBzaGlmdCkgfCBjYXJyeTtcblxuICAgICAgcmVzW3Bvc2l0aW9uKytdID0gd29yZCAmIDB4ZmY7XG4gICAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbisrXSA9ICh3b3JkID4+IDgpICYgMHhmZjtcbiAgICAgIH1cbiAgICAgIGlmIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uKytdID0gKHdvcmQgPj4gMTYpICYgMHhmZjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoaWZ0ID09PSA2KSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXNbcG9zaXRpb24rK10gPSAod29yZCA+PiAyNCkgJiAweGZmO1xuICAgICAgICB9XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgICAgc2hpZnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3b3JkID4+PiAyNDtcbiAgICAgICAgc2hpZnQgKz0gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICByZXNbcG9zaXRpb24rK10gPSBjYXJyeTtcblxuICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgcmVzLmxlbmd0aCkge1xuICAgICAgICByZXNbcG9zaXRpb24rK10gPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3RvQXJyYXlMaWtlQkUgPSBmdW5jdGlvbiBfdG9BcnJheUxpa2VCRSAocmVzLCBieXRlTGVuZ3RoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBzaGlmdCA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd29yZCA9ICh0aGlzLndvcmRzW2ldIDw8IHNoaWZ0KSB8IGNhcnJ5O1xuXG4gICAgICByZXNbcG9zaXRpb24tLV0gPSB3b3JkICYgMHhmZjtcbiAgICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbi0tXSA9ICh3b3JkID4+IDgpICYgMHhmZjtcbiAgICAgIH1cbiAgICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbi0tXSA9ICh3b3JkID4+IDE2KSAmIDB4ZmY7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGlmdCA9PT0gNikge1xuICAgICAgICBpZiAocG9zaXRpb24gPj0gMCkge1xuICAgICAgICAgIHJlc1twb3NpdGlvbi0tXSA9ICh3b3JkID4+IDI0KSAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgICBzaGlmdCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHdvcmQgPj4+IDI0O1xuICAgICAgICBzaGlmdCArPSAyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICByZXNbcG9zaXRpb24tLV0gPSBjYXJyeTtcblxuICAgICAgd2hpbGUgKHBvc2l0aW9uID49IDApIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdID4+PiB3Yml0KSAmIDB4MDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHc7XG4gIH1cblxuICAvLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzXG4gIEJOLnByb3RvdHlwZS56ZXJvQml0cyA9IGZ1bmN0aW9uIHplcm9CaXRzICgpIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgciA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYiA9IHRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbaV0pO1xuICAgICAgciArPSBiO1xuICAgICAgaWYgKGIgIT09IDI2KSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiBieXRlTGVuZ3RoICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9Ud29zID0gZnVuY3Rpb24gdG9Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5hYnMoKS5pbm90bih3aWR0aCkuaWFkZG4oMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21Ud29zID0gZnVuY3Rpb24gZnJvbVR3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMudGVzdG4od2lkdGggLSAxKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90bih3aWR0aCkuaWFkZG4oMSkuaW5lZygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc05lZyA9IGZ1bmN0aW9uIGlzTmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSAhPT0gMDtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5lZygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbmVnID0gZnVuY3Rpb24gaW5lZyAoKSB7XG4gICAgaWYgKCF0aGlzLmlzWmVybygpKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1b3IgPSBmdW5jdGlvbiBpdW9yIChudW0pIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gfCBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXhvcihudW0pO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXhvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXhvciA9IGZ1bmN0aW9uIHV4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXV4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXV4b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gTm90IGBgdGhpc2BgIHdpdGggYGB3aWR0aGBgIGJpdHdpZHRoXG4gIEJOLnByb3RvdHlwZS5pbm90biA9IGZ1bmN0aW9uIGlub3RuICh3aWR0aCkge1xuICAgIGFzc2VydCh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInICYmIHdpZHRoID49IDApO1xuXG4gICAgdmFyIGJ5dGVzTmVlZGVkID0gTWF0aC5jZWlsKHdpZHRoIC8gMjYpIHwgMDtcbiAgICB2YXIgYml0c0xlZnQgPSB3aWR0aCAlIDI2O1xuXG4gICAgLy8gRXh0ZW5kIHRoZSBidWZmZXIgd2l0aCBsZWFkaW5nIHplcm9lc1xuICAgIHRoaXMuX2V4cGFuZChieXRlc05lZWRlZCk7XG5cbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICBieXRlc05lZWRlZC0tO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjb21wbGV0ZSB3b3Jkc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXNOZWVkZWQ7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0aGUgcmVzaWR1ZVxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmICgweDNmZmZmZmYgPj4gKDI2IC0gYml0c0xlZnQpKTtcbiAgICB9XG5cbiAgICAvLyBBbmQgcmVtb3ZlIGxlYWRpbmcgemVyb2VzXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1YihudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNtYWxsTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICB2YXIgbGVuID0gKHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aCkgfCAwO1xuICAgIG91dC5sZW5ndGggPSBsZW47XG4gICAgbGVuID0gKGxlbiAtIDEpIHwgMDtcblxuICAgIC8vIFBlZWwgb25lIGl0ZXJhdGlvbiAoY29tcGlsZXIgY2FuJ3QgZG8gaXQsIGJlY2F1c2Ugb2YgY29kZSBjb21wbGV4aXR5KVxuICAgIHZhciBhID0gc2VsZi53b3Jkc1swXSB8IDA7XG4gICAgdmFyIGIgPSBudW0ud29yZHNbMF0gfCAwO1xuICAgIHZhciByID0gYSAqIGI7XG5cbiAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgIHZhciBjYXJyeSA9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgb3V0LndvcmRzWzBdID0gbG87XG5cbiAgICBmb3IgKHZhciBrID0gMTsgayA8IGxlbjsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGNhcnJ5ID4+PiAyNjtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gKGsgLSBqKSB8IDA7XG4gICAgICAgIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHIgPSBhICogYiArIHJ3b3JkO1xuICAgICAgICBuY2FycnkgKz0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgICAgcndvcmQgPSByICYgMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQgfCAwO1xuICAgICAgY2FycnkgPSBuY2FycnkgfCAwO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5IHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuX3N0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5fc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgLy8gVGVtcG9yYXJ5IGRpc2FibGUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy9pc3N1ZXMvMjExXG4gICAgLy8gdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIC8vIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICAgIHJldHVybiBiaWdNdWxUbyhzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5fc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICB2YXIgaXNOZWdOdW0gPSBudW0gPCAwO1xuICAgIGlmIChpc05lZ051bSkgbnVtID0gLW51bTtcblxuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzTmVnTnVtID8gdGhpcy5pbmVnKCkgOiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaGxuID0gZnVuY3Rpb24gaXNobG4gKGJpdHMpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0IGluLXBsYWNlXG4gIC8vIE5PVEU6IGBoaW50YCBpcyBhIGxvd2VzdCBiaXQgYmVmb3JlIHRyYWlsaW5nIHplcm9lc1xuICAvLyBOT1RFOiBpZiBgZXh0ZW5kZWRgIGlzIHByZXNlbnQgLSBpdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGRlc3Ryb3llZCBiaXRzXG4gIEJOLnByb3RvdHlwZS5pdXNocm4gPSBmdW5jdGlvbiBpdXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciBoO1xuICAgIGlmIChoaW50KSB7XG4gICAgICBoID0gKGhpbnQgLSAoaGludCAlIDI2KSkgLyAyNjtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSBNYXRoLm1pbigoYml0cyAtIHIpIC8gMjYsIHRoaXMubGVuZ3RoKTtcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDtcblxuICAgIGggLT0gcztcbiAgICBoID0gTWF0aC5tYXgoMCwgaCk7XG5cbiAgICAvLyBFeHRlbmRlZCBtb2RlLCBjb3B5IG1hc2tlZCBwYXJ0XG4gICAgaWYgKG1hc2tlZFdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICBtYXNrZWRXb3Jkcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG4gICAgICBtYXNrZWRXb3Jkcy5sZW5ndGggPSBzO1xuICAgIH1cblxuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAvLyBOby1vcCwgd2Ugc2hvdWxkIG5vdCBtb3ZlIGFueXRoaW5nIGF0IGFsbFxuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiBzKSB7XG4gICAgICB0aGlzLmxlbmd0aCAtPSBzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaSArIHNdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIChjYXJyeSAhPT0gMCB8fCBpID49IGgpOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKGNhcnJ5IDw8ICgyNiAtIHIpKSB8ICh3b3JkID4+PiByKTtcbiAgICAgIGNhcnJ5ID0gd29yZCAmIG1hc2s7XG4gICAgfVxuXG4gICAgLy8gUHVzaCBjYXJyaWVkIGJpdHMgYXMgYSBtYXNrXG4gICAgaWYgKG1hc2tlZFdvcmRzICYmIGNhcnJ5ICE9PSAwKSB7XG4gICAgICBtYXNrZWRXb3Jkcy53b3Jkc1ttYXNrZWRXb3Jkcy5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8PSBudW0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtICh0aGlzLndvcmRzWzBdIHwgMCk7XG4gICAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlzdWJuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRob3V0IGNoZWNrc1xuICAgIHJldHVybiB0aGlzLl9pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faWFkZG4gPSBmdW5jdGlvbiBfaWFkZG4gKG51bSkge1xuICAgIHRoaXMud29yZHNbMF0gKz0gbnVtO1xuXG4gICAgLy8gQ2FycnlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPj0gMHg0MDAwMDAwOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gLT0gMHg0MDAwMDAwO1xuICAgICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSsrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpICsgMSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBwbGFpbiBudW1iZXIgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlzdWJuID0gZnVuY3Rpb24gaXN1Ym4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlhZGRuKC1udW0pO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkbihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLndvcmRzWzBdIC09IG51bTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdIDwgMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IC10aGlzLndvcmRzWzBdO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhcnJ5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPCAwOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSArPSAweDQwMDAwMDA7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3dvcmREaXYgPSBmdW5jdGlvbiBfd29yZERpdiAobnVtLCBtb2RlKSB7XG4gICAgdmFyIHNoaWZ0ID0gdGhpcy5sZW5ndGggLSBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW07XG5cbiAgICAvLyBOb3JtYWxpemVcbiAgICB2YXIgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB2YXIgYmhpQml0cyA9IHRoaXMuX2NvdW50Qml0cyhiaGkpO1xuICAgIHNoaWZ0ID0gMjYgLSBiaGlCaXRzO1xuICAgIGlmIChzaGlmdCAhPT0gMCkge1xuICAgICAgYiA9IGIudXNobG4oc2hpZnQpO1xuICAgICAgYS5pdXNobG4oc2hpZnQpO1xuICAgICAgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHF1b3RpZW50XG4gICAgdmFyIG0gPSBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICAgIHZhciBxO1xuXG4gICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICBxID0gbmV3IEJOKG51bGwpO1xuICAgICAgcS5sZW5ndGggPSBtICsgMTtcbiAgICAgIHEud29yZHMgPSBuZXcgQXJyYXkocS5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHEud29yZHNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkaWZmID0gYS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLCAxLCBtKTtcbiAgICBpZiAoZGlmZi5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgYSA9IGRpZmY7XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW21dID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gbSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICB2YXIgcWogPSAoYS53b3Jkc1tiLmxlbmd0aCArIGpdIHwgMCkgKiAweDQwMDAwMDAgK1xuICAgICAgICAoYS53b3Jkc1tiLmxlbmd0aCArIGogLSAxXSB8IDApO1xuXG4gICAgICAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heFxuICAgICAgLy8gKDB4N2ZmZmZmZilcbiAgICAgIHFqID0gTWF0aC5taW4oKHFqIC8gYmhpKSB8IDAsIDB4M2ZmZmZmZik7XG5cbiAgICAgIGEuX2lzaGxuc3VibXVsKGIsIHFqLCBqKTtcbiAgICAgIHdoaWxlIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIHFqLS07XG4gICAgICAgIGEubmVnYXRpdmUgPSAwO1xuICAgICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTtcbiAgICAgICAgaWYgKCFhLmlzWmVybygpKSB7XG4gICAgICAgICAgYS5uZWdhdGl2ZSBePSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW2pdID0gcWo7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxKSB7XG4gICAgICBxLl9zdHJpcCgpO1xuICAgIH1cbiAgICBhLl9zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kcm4obnVtLndvcmRzWzBdKSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RybihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCAocjIgPT09IDEgJiYgY21wID09PSAwKSkgcmV0dXJuIGRtLmRpdjtcblxuICAgIC8vIFJvdW5kIHVwXG4gICAgcmV0dXJuIGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLmRpdi5pc3VibigxKSA6IGRtLmRpdi5pYWRkbigxKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubW9kcm4gPSBmdW5jdGlvbiBtb2RybiAobnVtKSB7XG4gICAgdmFyIGlzTmVnTnVtID0gbnVtIDwgMDtcbiAgICBpZiAoaXNOZWdOdW0pIG51bSA9IC1udW07XG5cbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNOZWdOdW0gPyAtYWNjIDogYWNjO1xuICB9O1xuXG4gIC8vIFdBUk5JTkc6IERFUFJFQ0FURURcbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5tb2RybihudW0pO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgdmFyIGlzTmVnTnVtID0gbnVtIDwgMDtcbiAgICBpZiAoaXNOZWdOdW0pIG51bSA9IC1udW07XG5cbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeSAqIDB4NDAwMDAwMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAodyAvIG51bSkgfCAwO1xuICAgICAgY2FycnkgPSB3ICUgbnVtO1xuICAgIH1cblxuICAgIHRoaXMuX3N0cmlwKCk7XG4gICAgcmV0dXJuIGlzTmVnTnVtID8gdGhpcy5pbmVnKCkgOiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuX3N0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyLnN0cmlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gciBpcyBhIEJOIHY0IGluc3RhbmNlXG4gICAgICAgIHIuc3RyaXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHIgaXMgYSBCTiB2NSBpbnN0YW5jZVxuICAgICAgICByLl9zdHJpcCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgbW92ZShhLCBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcykpO1xuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwiJ3VzZSBzdHJpY3QnXG4vLyBiYXNlLXggZW5jb2RpbmcgLyBkZWNvZGluZ1xuLy8gQ29weXJpZ2h0IChjKSAyMDE4IGJhc2UteCBjb250cmlidXRvcnNcbi8vIENvcHlyaWdodCAoYykgMjAxNC0yMDE4IFRoZSBCaXRjb2luIENvcmUgZGV2ZWxvcGVycyAoYmFzZTU4LmNwcClcbi8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgc29mdHdhcmUgbGljZW5zZSwgc2VlIHRoZSBhY2NvbXBhbnlpbmdcbi8vIGZpbGUgTElDRU5TRSBvciBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocC5cbi8vIEB0cy1pZ25vcmVcbnZhciBfQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbmZ1bmN0aW9uIGJhc2UgKEFMUEhBQkVUKSB7XG4gIGlmIChBTFBIQUJFVC5sZW5ndGggPj0gMjU1KSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscGhhYmV0IHRvbyBsb25nJykgfVxuICB2YXIgQkFTRV9NQVAgPSBuZXcgVWludDhBcnJheSgyNTYpXG4gIGZvciAodmFyIGogPSAwOyBqIDwgQkFTRV9NQVAubGVuZ3RoOyBqKyspIHtcbiAgICBCQVNFX01BUFtqXSA9IDI1NVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQUxQSEFCRVQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgeCA9IEFMUEhBQkVULmNoYXJBdChpKVxuICAgIHZhciB4YyA9IHguY2hhckNvZGVBdCgwKVxuICAgIGlmIChCQVNFX01BUFt4Y10gIT09IDI1NSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKHggKyAnIGlzIGFtYmlndW91cycpIH1cbiAgICBCQVNFX01BUFt4Y10gPSBpXG4gIH1cbiAgdmFyIEJBU0UgPSBBTFBIQUJFVC5sZW5ndGhcbiAgdmFyIExFQURFUiA9IEFMUEhBQkVULmNoYXJBdCgwKVxuICB2YXIgRkFDVE9SID0gTWF0aC5sb2coQkFTRSkgLyBNYXRoLmxvZygyNTYpIC8vIGxvZyhCQVNFKSAvIGxvZygyNTYpLCByb3VuZGVkIHVwXG4gIHZhciBpRkFDVE9SID0gTWF0aC5sb2coMjU2KSAvIE1hdGgubG9nKEJBU0UpIC8vIGxvZygyNTYpIC8gbG9nKEJBU0UpLCByb3VuZGVkIHVwXG4gIGZ1bmN0aW9uIGVuY29kZSAoc291cmNlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSB8fCBzb3VyY2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7IHNvdXJjZSA9IF9CdWZmZXIuZnJvbShzb3VyY2UpIH1cbiAgICBpZiAoIV9CdWZmZXIuaXNCdWZmZXIoc291cmNlKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBCdWZmZXInKSB9XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHsgcmV0dXJuICcnIH1cbiAgICAgICAgLy8gU2tpcCAmIGNvdW50IGxlYWRpbmcgemVyb2VzLlxuICAgIHZhciB6ZXJvZXMgPSAwXG4gICAgdmFyIGxlbmd0aCA9IDBcbiAgICB2YXIgcGJlZ2luID0gMFxuICAgIHZhciBwZW5kID0gc291cmNlLmxlbmd0aFxuICAgIHdoaWxlIChwYmVnaW4gIT09IHBlbmQgJiYgc291cmNlW3BiZWdpbl0gPT09IDApIHtcbiAgICAgIHBiZWdpbisrXG4gICAgICB6ZXJvZXMrK1xuICAgIH1cbiAgICAgICAgLy8gQWxsb2NhdGUgZW5vdWdoIHNwYWNlIGluIGJpZy1lbmRpYW4gYmFzZTU4IHJlcHJlc2VudGF0aW9uLlxuICAgIHZhciBzaXplID0gKChwZW5kIC0gcGJlZ2luKSAqIGlGQUNUT1IgKyAxKSA+Pj4gMFxuICAgIHZhciBiNTggPSBuZXcgVWludDhBcnJheShzaXplKVxuICAgICAgICAvLyBQcm9jZXNzIHRoZSBieXRlcy5cbiAgICB3aGlsZSAocGJlZ2luICE9PSBwZW5kKSB7XG4gICAgICB2YXIgY2FycnkgPSBzb3VyY2VbcGJlZ2luXVxuICAgICAgICAgICAgLy8gQXBwbHkgXCJiNTggPSBiNTggKiAyNTYgKyBjaFwiLlxuICAgICAgdmFyIGkgPSAwXG4gICAgICBmb3IgKHZhciBpdDEgPSBzaXplIC0gMTsgKGNhcnJ5ICE9PSAwIHx8IGkgPCBsZW5ndGgpICYmIChpdDEgIT09IC0xKTsgaXQxLS0sIGkrKykge1xuICAgICAgICBjYXJyeSArPSAoMjU2ICogYjU4W2l0MV0pID4+PiAwXG4gICAgICAgIGI1OFtpdDFdID0gKGNhcnJ5ICUgQkFTRSkgPj4+IDBcbiAgICAgICAgY2FycnkgPSAoY2FycnkgLyBCQVNFKSA+Pj4gMFxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7IHRocm93IG5ldyBFcnJvcignTm9uLXplcm8gY2FycnknKSB9XG4gICAgICBsZW5ndGggPSBpXG4gICAgICBwYmVnaW4rK1xuICAgIH1cbiAgICAgICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lcyBpbiBiYXNlNTggcmVzdWx0LlxuICAgIHZhciBpdDIgPSBzaXplIC0gbGVuZ3RoXG4gICAgd2hpbGUgKGl0MiAhPT0gc2l6ZSAmJiBiNThbaXQyXSA9PT0gMCkge1xuICAgICAgaXQyKytcbiAgICB9XG4gICAgICAgIC8vIFRyYW5zbGF0ZSB0aGUgcmVzdWx0IGludG8gYSBzdHJpbmcuXG4gICAgdmFyIHN0ciA9IExFQURFUi5yZXBlYXQoemVyb2VzKVxuICAgIGZvciAoOyBpdDIgPCBzaXplOyArK2l0MikgeyBzdHIgKz0gQUxQSEFCRVQuY2hhckF0KGI1OFtpdDJdKSB9XG4gICAgcmV0dXJuIHN0clxuICB9XG4gIGZ1bmN0aW9uIGRlY29kZVVuc2FmZSAoc291cmNlKSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdzdHJpbmcnKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFN0cmluZycpIH1cbiAgICBpZiAoc291cmNlLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gX0J1ZmZlci5hbGxvYygwKSB9XG4gICAgdmFyIHBzeiA9IDBcbiAgICAgICAgLy8gU2tpcCBhbmQgY291bnQgbGVhZGluZyAnMSdzLlxuICAgIHZhciB6ZXJvZXMgPSAwXG4gICAgdmFyIGxlbmd0aCA9IDBcbiAgICB3aGlsZSAoc291cmNlW3Bzel0gPT09IExFQURFUikge1xuICAgICAgemVyb2VzKytcbiAgICAgIHBzeisrXG4gICAgfVxuICAgICAgICAvLyBBbGxvY2F0ZSBlbm91Z2ggc3BhY2UgaW4gYmlnLWVuZGlhbiBiYXNlMjU2IHJlcHJlc2VudGF0aW9uLlxuICAgIHZhciBzaXplID0gKCgoc291cmNlLmxlbmd0aCAtIHBzeikgKiBGQUNUT1IpICsgMSkgPj4+IDAgLy8gbG9nKDU4KSAvIGxvZygyNTYpLCByb3VuZGVkIHVwLlxuICAgIHZhciBiMjU2ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgICAgLy8gUHJvY2VzcyB0aGUgY2hhcmFjdGVycy5cbiAgICB3aGlsZSAocHN6IDwgc291cmNlLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gRmluZCBjb2RlIG9mIG5leHQgY2hhcmFjdGVyXG4gICAgICB2YXIgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwc3opXG4gICAgICAgICAgICAvLyBCYXNlIG1hcCBjYW4gbm90IGJlIGluZGV4ZWQgdXNpbmcgY2hhciBjb2RlXG4gICAgICBpZiAoY2hhckNvZGUgPiAyNTUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIC8vIERlY29kZSBjaGFyYWN0ZXJcbiAgICAgIHZhciBjYXJyeSA9IEJBU0VfTUFQW2NoYXJDb2RlXVxuICAgICAgICAgICAgLy8gSW52YWxpZCBjaGFyYWN0ZXJcbiAgICAgIGlmIChjYXJyeSA9PT0gMjU1KSB7IHJldHVybiB9XG4gICAgICB2YXIgaSA9IDBcbiAgICAgIGZvciAodmFyIGl0MyA9IHNpemUgLSAxOyAoY2FycnkgIT09IDAgfHwgaSA8IGxlbmd0aCkgJiYgKGl0MyAhPT0gLTEpOyBpdDMtLSwgaSsrKSB7XG4gICAgICAgIGNhcnJ5ICs9IChCQVNFICogYjI1NltpdDNdKSA+Pj4gMFxuICAgICAgICBiMjU2W2l0M10gPSAoY2FycnkgJSAyNTYpID4+PiAwXG4gICAgICAgIGNhcnJ5ID0gKGNhcnJ5IC8gMjU2KSA+Pj4gMFxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7IHRocm93IG5ldyBFcnJvcignTm9uLXplcm8gY2FycnknKSB9XG4gICAgICBsZW5ndGggPSBpXG4gICAgICBwc3orK1xuICAgIH1cbiAgICAgICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lcyBpbiBiMjU2LlxuICAgIHZhciBpdDQgPSBzaXplIC0gbGVuZ3RoXG4gICAgd2hpbGUgKGl0NCAhPT0gc2l6ZSAmJiBiMjU2W2l0NF0gPT09IDApIHtcbiAgICAgIGl0NCsrXG4gICAgfVxuICAgIHZhciB2Y2ggPSBfQnVmZmVyLmFsbG9jVW5zYWZlKHplcm9lcyArIChzaXplIC0gaXQ0KSlcbiAgICB2Y2guZmlsbCgweDAwLCAwLCB6ZXJvZXMpXG4gICAgdmFyIGogPSB6ZXJvZXNcbiAgICB3aGlsZSAoaXQ0ICE9PSBzaXplKSB7XG4gICAgICB2Y2hbaisrXSA9IGIyNTZbaXQ0KytdXG4gICAgfVxuICAgIHJldHVybiB2Y2hcbiAgfVxuICBmdW5jdGlvbiBkZWNvZGUgKHN0cmluZykge1xuICAgIHZhciBidWZmZXIgPSBkZWNvZGVVbnNhZmUoc3RyaW5nKVxuICAgIGlmIChidWZmZXIpIHsgcmV0dXJuIGJ1ZmZlciB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb24tYmFzZScgKyBCQVNFICsgJyBjaGFyYWN0ZXInKVxuICB9XG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgZGVjb2RlVW5zYWZlOiBkZWNvZGVVbnNhZmUsXG4gICAgZGVjb2RlOiBkZWNvZGVcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBiYXNlXG4iLCJ2YXIgYmFzZXggPSByZXF1aXJlKCdiYXNlLXgnKVxudmFyIEFMUEhBQkVUID0gJzEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXonXG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZXgoQUxQSEFCRVQpXG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIi8qIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICpcbiAqIENvcHlyaWdodCAyMDE1LTIwMTggUGV0ZXIgQS4gQmlnb3RcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG4vKipcbiAqIFN1cHBvcnQgZm9yIHRyYW5zbGF0aW5nIGJldHdlZW4gVWludDhBcnJheSBpbnN0YW5jZXMgYW5kIEphdmFTY3JpcHRcbiAqIG5hdGl2ZSB0eXBlcy5cbiAqXG4gKiB7QGxpbmsgbW9kdWxlOkxheW91dH5MYXlvdXR8TGF5b3V0fSBpcyB0aGUgYmFzaXMgb2YgYSBjbGFzc1xuICogaGllcmFyY2h5IHRoYXQgYXNzb2NpYXRlcyBwcm9wZXJ0eSBuYW1lcyB3aXRoIHNlcXVlbmNlcyBvZiBlbmNvZGVkXG4gKiBieXRlcy5cbiAqXG4gKiBMYXlvdXRzIGFyZSBzdXBwb3J0ZWQgZm9yIHRoZXNlIHNjYWxhciAobnVtZXJpYykgdHlwZXM6XG4gKiAqIHtAbGluayBtb2R1bGU6TGF5b3V0flVJbnR8VW5zaWduZWQgaW50ZWdlcnMgaW4gbGl0dGxlLWVuZGlhblxuICogICBmb3JtYXR9IHdpdGgge0BsaW5rIG1vZHVsZTpMYXlvdXQudTh8OC1iaXR9LCB7QGxpbmtcbiAqICAgbW9kdWxlOkxheW91dC51MTZ8MTYtYml0fSwge0BsaW5rIG1vZHVsZTpMYXlvdXQudTI0fDI0LWJpdH0sXG4gKiAgIHtAbGluayBtb2R1bGU6TGF5b3V0LnUzMnwzMi1iaXR9LCB7QGxpbmtcbiAqICAgbW9kdWxlOkxheW91dC51NDB8NDAtYml0fSwgYW5kIHtAbGluayBtb2R1bGU6TGF5b3V0LnU0OHw0OC1iaXR9XG4gKiAgIHJlcHJlc2VudGF0aW9uIHJhbmdlcztcbiAqICoge0BsaW5rIG1vZHVsZTpMYXlvdXR+VUludEJFfFVuc2lnbmVkIGludGVnZXJzIGluIGJpZy1lbmRpYW5cbiAqICAgZm9ybWF0fSB3aXRoIHtAbGluayBtb2R1bGU6TGF5b3V0LnUxNmJlfDE2LWJpdH0sIHtAbGlua1xuICogICBtb2R1bGU6TGF5b3V0LnUyNGJlfDI0LWJpdH0sIHtAbGluayBtb2R1bGU6TGF5b3V0LnUzMmJlfDMyLWJpdH0sXG4gKiAgIHtAbGluayBtb2R1bGU6TGF5b3V0LnU0MGJlfDQwLWJpdH0sIGFuZCB7QGxpbmtcbiAqICAgbW9kdWxlOkxheW91dC51NDhiZXw0OC1iaXR9IHJlcHJlc2VudGF0aW9uIHJhbmdlcztcbiAqICoge0BsaW5rIG1vZHVsZTpMYXlvdXR+SW50fFNpZ25lZCBpbnRlZ2VycyBpbiBsaXR0bGUtZW5kaWFuXG4gKiAgIGZvcm1hdH0gd2l0aCB7QGxpbmsgbW9kdWxlOkxheW91dC5zOHw4LWJpdH0sIHtAbGlua1xuICogICBtb2R1bGU6TGF5b3V0LnMxNnwxNi1iaXR9LCB7QGxpbmsgbW9kdWxlOkxheW91dC5zMjR8MjQtYml0fSxcbiAqICAge0BsaW5rIG1vZHVsZTpMYXlvdXQuczMyfDMyLWJpdH0sIHtAbGlua1xuICogICBtb2R1bGU6TGF5b3V0LnM0MHw0MC1iaXR9LCBhbmQge0BsaW5rIG1vZHVsZTpMYXlvdXQuczQ4fDQ4LWJpdH1cbiAqICAgcmVwcmVzZW50YXRpb24gcmFuZ2VzO1xuICogKiB7QGxpbmsgbW9kdWxlOkxheW91dH5JbnRCRXxTaWduZWQgaW50ZWdlcnMgaW4gYmlnLWVuZGlhbiBmb3JtYXR9XG4gKiAgIHdpdGgge0BsaW5rIG1vZHVsZTpMYXlvdXQuczE2YmV8MTYtYml0fSwge0BsaW5rXG4gKiAgIG1vZHVsZTpMYXlvdXQuczI0YmV8MjQtYml0fSwge0BsaW5rIG1vZHVsZTpMYXlvdXQuczMyYmV8MzItYml0fSxcbiAqICAge0BsaW5rIG1vZHVsZTpMYXlvdXQuczQwYmV8NDAtYml0fSwgYW5kIHtAbGlua1xuICogICBtb2R1bGU6TGF5b3V0LnM0OGJlfDQ4LWJpdH0gcmVwcmVzZW50YXRpb24gcmFuZ2VzO1xuICogKiA2NC1iaXQgaW50ZWdyYWwgdmFsdWVzIHRoYXQgZGVjb2RlIHRvIGFuIGV4YWN0IChpZiBtYWduaXR1ZGUgaXNcbiAqICAgbGVzcyB0aGFuIDJeNTMpIG9yIG5lYXJieSBpbnRlZ3JhbCBOdW1iZXIgaW4ge0BsaW5rXG4gKiAgIG1vZHVsZTpMYXlvdXQubnU2NHx1bnNpZ25lZCBsaXR0bGUtZW5kaWFufSwge0BsaW5rXG4gKiAgIG1vZHVsZTpMYXlvdXQubnU2NGJlfHVuc2lnbmVkIGJpZy1lbmRpYW59LCB7QGxpbmtcbiAqICAgbW9kdWxlOkxheW91dC5uczY0fHNpZ25lZCBsaXR0bGUtZW5kaWFufSwgYW5kIHtAbGlua1xuICogICBtb2R1bGU6TGF5b3V0Lm5zNjRiZXx1bnNpZ25lZCBiaWctZW5kaWFufSBlbmNvZGluZ3M7XG4gKiAqIDMyLWJpdCBmbG9hdGluZyBwb2ludCB2YWx1ZXMgd2l0aCB7QGxpbmtcbiAqICAgbW9kdWxlOkxheW91dC5mMzJ8bGl0dGxlLWVuZGlhbn0gYW5kIHtAbGlua1xuICogICBtb2R1bGU6TGF5b3V0LmYzMmJlfGJpZy1lbmRpYW59IHJlcHJlc2VudGF0aW9ucztcbiAqICogNjQtYml0IGZsb2F0aW5nIHBvaW50IHZhbHVlcyB3aXRoIHtAbGlua1xuICogICBtb2R1bGU6TGF5b3V0LmY2NHxsaXR0bGUtZW5kaWFufSBhbmQge0BsaW5rXG4gKiAgIG1vZHVsZTpMYXlvdXQuZjY0YmV8YmlnLWVuZGlhbn0gcmVwcmVzZW50YXRpb25zO1xuICogKiB7QGxpbmsgbW9kdWxlOkxheW91dC5jb25zdHxDb25zdGFudHN9IHRoYXQgdGFrZSBubyBzcGFjZSBpbiB0aGVcbiAqICAgZW5jb2RlZCBleHByZXNzaW9uLlxuICpcbiAqIGFuZCBmb3IgdGhlc2UgYWdncmVnYXRlIHR5cGVzOlxuICogKiB7QGxpbmsgbW9kdWxlOkxheW91dC5zZXF8U2VxdWVuY2V9cyBvZiBpbnN0YW5jZXMgb2YgYSB7QGxpbmtcbiAqICAgbW9kdWxlOkxheW91dH5MYXlvdXR8TGF5b3V0fSwgd2l0aCBKYXZhU2NyaXB0IHJlcHJlc2VudGF0aW9uIGFzXG4gKiAgIGFuIEFycmF5IGFuZCBjb25zdGFudCBvciBkYXRhLWRlcGVuZGVudCB7QGxpbmtcbiAqICAgbW9kdWxlOkxheW91dH5TZXF1ZW5jZSNjb3VudHxsZW5ndGh9O1xuICogKiB7QGxpbmsgbW9kdWxlOkxheW91dC5zdHJ1Y3R8U3RydWN0dXJlfXMgdGhhdCBhZ2dyZWdhdGUgYVxuICogICBoZXRlcm9nZW5lb3VzIHNlcXVlbmNlIG9mIHtAbGluayBtb2R1bGU6TGF5b3V0fkxheW91dHxMYXlvdXR9XG4gKiAgIGluc3RhbmNlcywgd2l0aCBKYXZhU2NyaXB0IHJlcHJlc2VudGF0aW9uIGFzIGFuIE9iamVjdDtcbiAqICoge0BsaW5rIG1vZHVsZTpMYXlvdXQudW5pb258VW5pb259cyB0aGF0IHN1cHBvcnQgbXVsdGlwbGUge0BsaW5rXG4gKiAgIG1vZHVsZTpMYXlvdXR+VmFyaWFudExheW91dHx2YXJpYW50IGxheW91dHN9IG92ZXIgYSBmaXhlZFxuICogICAocGFkZGVkKSBvciB2YXJpYWJsZSAobm90IHBhZGRlZCkgc3BhbiBvZiBieXRlcywgdXNpbmcgYW5cbiAqICAgdW5zaWduZWQgaW50ZWdlciBhdCB0aGUgc3RhcnQgb2YgdGhlIGRhdGEgb3IgYSBzZXBhcmF0ZSB7QGxpbmtcbiAqICAgbW9kdWxlOkxheW91dC51bmlvbkxheW91dERpc2NyaW1pbmF0b3J8bGF5b3V0IGVsZW1lbnR9IHRvXG4gKiAgIGRldGVybWluZSB3aGljaCBsYXlvdXQgdG8gdXNlIHdoZW4gaW50ZXJwcmV0aW5nIHRoZSBidWZmZXJcbiAqICAgY29udGVudHM7XG4gKiAqIHtAbGluayBtb2R1bGU6TGF5b3V0LmJpdHN8Qml0U3RydWN0dXJlfXMgdGhhdCBjb250YWluIGEgc2VxdWVuY2VcbiAqICAgb2YgaW5kaXZpZHVhbCB7QGxpbmtcbiAqICAgbW9kdWxlOkxheW91dH5CaXRTdHJ1Y3R1cmUjYWRkRmllbGR8Qml0RmllbGR9cyBwYWNrZWQgaW50byBhbiA4LFxuICogICAxNiwgMjQsIG9yIDMyLWJpdCB1bnNpZ25lZCBpbnRlZ2VyIHN0YXJ0aW5nIGF0IHRoZSBsZWFzdC0gb3JcbiAqICAgbW9zdC1zaWduaWZpY2FudCBiaXQ7XG4gKiAqIHtAbGluayBtb2R1bGU6TGF5b3V0LmNzdHJ8QyBzdHJpbmdzfSBvZiB2YXJ5aW5nIGxlbmd0aDtcbiAqICoge0BsaW5rIG1vZHVsZTpMYXlvdXQuYmxvYnxCbG9ic30gb2YgZml4ZWQtIG9yIHZhcmlhYmxlLXtAbGlua1xuICogICBtb2R1bGU6TGF5b3V0fkJsb2IjbGVuZ3RofGxlbmd0aH0gcmF3IGRhdGEuXG4gKlxuICogQWxsIHtAbGluayBtb2R1bGU6TGF5b3V0fkxheW91dHxMYXlvdXR9IGluc3RhbmNlcyBhcmUgaW1tdXRhYmxlXG4gKiBhZnRlciBjb25zdHJ1Y3Rpb24sIHRvIHByZXZlbnQgaW50ZXJuYWwgc3RhdGUgZnJvbSBiZWNvbWluZ1xuICogaW5jb25zaXN0ZW50LlxuICpcbiAqIEBsb2NhbCBMYXlvdXRcbiAqIEBsb2NhbCBFeHRlcm5hbExheW91dFxuICogQGxvY2FsIEdyZWVkeUNvdW50XG4gKiBAbG9jYWwgT2Zmc2V0TGF5b3V0XG4gKiBAbG9jYWwgVUludFxuICogQGxvY2FsIFVJbnRCRVxuICogQGxvY2FsIEludFxuICogQGxvY2FsIEludEJFXG4gKiBAbG9jYWwgTmVhclVJbnQ2NFxuICogQGxvY2FsIE5lYXJVSW50NjRCRVxuICogQGxvY2FsIE5lYXJJbnQ2NFxuICogQGxvY2FsIE5lYXJJbnQ2NEJFXG4gKiBAbG9jYWwgRmxvYXRcbiAqIEBsb2NhbCBGbG9hdEJFXG4gKiBAbG9jYWwgRG91YmxlXG4gKiBAbG9jYWwgRG91YmxlQkVcbiAqIEBsb2NhbCBTZXF1ZW5jZVxuICogQGxvY2FsIFN0cnVjdHVyZVxuICogQGxvY2FsIFVuaW9uRGlzY3JpbWluYXRvclxuICogQGxvY2FsIFVuaW9uTGF5b3V0RGlzY3JpbWluYXRvclxuICogQGxvY2FsIFVuaW9uXG4gKiBAbG9jYWwgVmFyaWFudExheW91dFxuICogQGxvY2FsIEJpdFN0cnVjdHVyZVxuICogQGxvY2FsIEJpdEZpZWxkXG4gKiBAbG9jYWwgQm9vbGVhblxuICogQGxvY2FsIEJsb2JcbiAqIEBsb2NhbCBDU3RyaW5nXG4gKiBAbG9jYWwgQ29uc3RhbnRcbiAqIEBsb2NhbCBiaW5kQ29uc3RydWN0b3JMYXlvdXRcbiAqIEBtb2R1bGUgTGF5b3V0XG4gKiBAbGljZW5zZSBNSVRcbiAqIEBhdXRob3IgUGV0ZXIgQS4gQmlnb3RcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWJpZ290L2J1ZmZlci1sYXlvdXR8YnVmZmVyLWxheW91dCBvbiBHaXRIdWJ9XG4gKi9cbid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuczE2ID0gZXhwb3J0cy5zOCA9IGV4cG9ydHMubnU2NGJlID0gZXhwb3J0cy51NDhiZSA9IGV4cG9ydHMudTQwYmUgPSBleHBvcnRzLnUzMmJlID0gZXhwb3J0cy51MjRiZSA9IGV4cG9ydHMudTE2YmUgPSBleHBvcnRzLm51NjQgPSBleHBvcnRzLnU0OCA9IGV4cG9ydHMudTQwID0gZXhwb3J0cy51MzIgPSBleHBvcnRzLnUyNCA9IGV4cG9ydHMudTE2ID0gZXhwb3J0cy51OCA9IGV4cG9ydHMub2Zmc2V0ID0gZXhwb3J0cy5ncmVlZHkgPSBleHBvcnRzLkNvbnN0YW50ID0gZXhwb3J0cy5VVEY4ID0gZXhwb3J0cy5DU3RyaW5nID0gZXhwb3J0cy5CbG9iID0gZXhwb3J0cy5Cb29sZWFuID0gZXhwb3J0cy5CaXRGaWVsZCA9IGV4cG9ydHMuQml0U3RydWN0dXJlID0gZXhwb3J0cy5WYXJpYW50TGF5b3V0ID0gZXhwb3J0cy5VbmlvbiA9IGV4cG9ydHMuVW5pb25MYXlvdXREaXNjcmltaW5hdG9yID0gZXhwb3J0cy5VbmlvbkRpc2NyaW1pbmF0b3IgPSBleHBvcnRzLlN0cnVjdHVyZSA9IGV4cG9ydHMuU2VxdWVuY2UgPSBleHBvcnRzLkRvdWJsZUJFID0gZXhwb3J0cy5Eb3VibGUgPSBleHBvcnRzLkZsb2F0QkUgPSBleHBvcnRzLkZsb2F0ID0gZXhwb3J0cy5OZWFySW50NjRCRSA9IGV4cG9ydHMuTmVhckludDY0ID0gZXhwb3J0cy5OZWFyVUludDY0QkUgPSBleHBvcnRzLk5lYXJVSW50NjQgPSBleHBvcnRzLkludEJFID0gZXhwb3J0cy5JbnQgPSBleHBvcnRzLlVJbnRCRSA9IGV4cG9ydHMuVUludCA9IGV4cG9ydHMuT2Zmc2V0TGF5b3V0ID0gZXhwb3J0cy5HcmVlZHlDb3VudCA9IGV4cG9ydHMuRXh0ZXJuYWxMYXlvdXQgPSBleHBvcnRzLmJpbmRDb25zdHJ1Y3RvckxheW91dCA9IGV4cG9ydHMubmFtZVdpdGhQcm9wZXJ0eSA9IGV4cG9ydHMuTGF5b3V0ID0gZXhwb3J0cy51aW50OEFycmF5VG9CdWZmZXIgPSBleHBvcnRzLmNoZWNrVWludDhBcnJheSA9IHZvaWQgMDtcbmV4cG9ydHMuY29uc3RhbnQgPSBleHBvcnRzLnV0ZjggPSBleHBvcnRzLmNzdHIgPSBleHBvcnRzLmJsb2IgPSBleHBvcnRzLnVuaW9uTGF5b3V0RGlzY3JpbWluYXRvciA9IGV4cG9ydHMudW5pb24gPSBleHBvcnRzLnNlcSA9IGV4cG9ydHMuYml0cyA9IGV4cG9ydHMuc3RydWN0ID0gZXhwb3J0cy5mNjRiZSA9IGV4cG9ydHMuZjY0ID0gZXhwb3J0cy5mMzJiZSA9IGV4cG9ydHMuZjMyID0gZXhwb3J0cy5uczY0YmUgPSBleHBvcnRzLnM0OGJlID0gZXhwb3J0cy5zNDBiZSA9IGV4cG9ydHMuczMyYmUgPSBleHBvcnRzLnMyNGJlID0gZXhwb3J0cy5zMTZiZSA9IGV4cG9ydHMubnM2NCA9IGV4cG9ydHMuczQ4ID0gZXhwb3J0cy5zNDAgPSBleHBvcnRzLnMzMiA9IGV4cG9ydHMuczI0ID0gdm9pZCAwO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xuLyogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhIFVpbnQ4QXJyYXkuXG4gKlxuICogQGlnbm9yZSAqL1xuZnVuY3Rpb24gY2hlY2tVaW50OEFycmF5KGIpIHtcbiAgICBpZiAoIShiIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYiBtdXN0IGJlIGEgVWludDhBcnJheScpO1xuICAgIH1cbn1cbmV4cG9ydHMuY2hlY2tVaW50OEFycmF5ID0gY2hlY2tVaW50OEFycmF5O1xuLyogQ3JlYXRlIGEgQnVmZmVyIGluc3RhbmNlIGZyb20gYSBVaW50OEFycmF5LlxuICpcbiAqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIHVpbnQ4QXJyYXlUb0J1ZmZlcihiKSB7XG4gICAgY2hlY2tVaW50OEFycmF5KGIpO1xuICAgIHJldHVybiBidWZmZXJfMS5CdWZmZXIuZnJvbShiLmJ1ZmZlciwgYi5ieXRlT2Zmc2V0LCBiLmxlbmd0aCk7XG59XG5leHBvcnRzLnVpbnQ4QXJyYXlUb0J1ZmZlciA9IHVpbnQ4QXJyYXlUb0J1ZmZlcjtcbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgbGF5b3V0IG9iamVjdHMuXG4gKlxuICogKipOT1RFKiogVGhpcyBpcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzOyB5b3UgY2FuIGNyZWF0ZSBpbnN0YW5jZXNcbiAqIGlmIGl0IGFtdXNlcyB5b3UsIGJ1dCB0aGV5IHdvbid0IHN1cHBvcnQgdGhlIHtAbGlua1xuICogTGF5b3V0I2VuY29kZXxlbmNvZGV9IG9yIHtAbGluayBMYXlvdXQjZGVjb2RlfGRlY29kZX0gZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBzcGFuIC0gSW5pdGlhbGl6ZXIgZm9yIHtAbGluayBMYXlvdXQjc3BhbnxzcGFufS4gIFRoZVxuICogcGFyYW1ldGVyIG11c3QgYmUgYW4gaW50ZWdlcjsgYSBuZWdhdGl2ZSB2YWx1ZSBzaWduaWZpZXMgdGhhdCB0aGVcbiAqIHNwYW4gaXMge0BsaW5rIExheW91dCNnZXRTcGFufHZhbHVlLXNwZWNpZmljfS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Byb3BlcnR5XSAtIEluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0uXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIExheW91dCB7XG4gICAgY29uc3RydWN0b3Ioc3BhbiwgcHJvcGVydHkpIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHNwYW4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzcGFuIG11c3QgYmUgYW4gaW50ZWdlcicpO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBUaGUgc3BhbiBvZiB0aGUgbGF5b3V0IGluIGJ5dGVzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBQb3NpdGl2ZSB2YWx1ZXMgYXJlIGdlbmVyYWxseSBleHBlY3RlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogWmVybyB3aWxsIG9ubHkgYXBwZWFyIGluIHtAbGluayBDb25zdGFudH1zIGFuZCBpbiB7QGxpbmtcbiAgICAgICAgICogU2VxdWVuY2V9cyB3aGVyZSB0aGUge0BsaW5rIFNlcXVlbmNlI2NvdW50fGNvdW50fSBpcyB6ZXJvLlxuICAgICAgICAgKlxuICAgICAgICAgKiBBIG5lZ2F0aXZlIHZhbHVlIGluZGljYXRlcyB0aGF0IHRoZSBzcGFuIGlzIHZhbHVlLXNwZWNpZmljLCBhbmRcbiAgICAgICAgICogbXVzdCBiZSBvYnRhaW5lZCB1c2luZyB7QGxpbmsgTGF5b3V0I2dldFNwYW58Z2V0U3Bhbn0uICovXG4gICAgICAgIHRoaXMuc3BhbiA9IHNwYW47XG4gICAgICAgIC8qKiBUaGUgcHJvcGVydHkgbmFtZSB1c2VkIHdoZW4gdGhpcyBsYXlvdXQgaXMgcmVwcmVzZW50ZWQgaW4gYW5cbiAgICAgICAgICogT2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBVc2VkIG9ubHkgZm9yIGxheW91dHMgdGhhdCB7QGxpbmsgTGF5b3V0I2RlY29kZXxkZWNvZGV9IHRvIE9iamVjdFxuICAgICAgICAgKiBpbnN0YW5jZXMuICBJZiBsZWZ0IHVuZGVmaW5lZCB0aGUgc3BhbiBvZiB0aGUgdW5uYW1lZCBsYXlvdXQgd2lsbFxuICAgICAgICAgKiBiZSB0cmVhdGVkIGFzIHBhZGRpbmc6IGl0IHdpbGwgbm90IGJlIG11dGF0ZWQgYnkge0BsaW5rXG4gICAgICAgICAqIExheW91dCNlbmNvZGV8ZW5jb2RlfSBub3IgcmVwcmVzZW50ZWQgYXMgYSBwcm9wZXJ0eSBpbiB0aGVcbiAgICAgICAgICogZGVjb2RlZCBPYmplY3QuICovXG4gICAgICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICB9XG4gICAgLyoqIEZ1bmN0aW9uIHRvIGNyZWF0ZSBhbiBPYmplY3QgaW50byB3aGljaCBkZWNvZGVkIHByb3BlcnRpZXMgd2lsbFxuICAgICAqIGJlIHdyaXR0ZW4uXG4gICAgICpcbiAgICAgKiBVc2VkIG9ubHkgZm9yIGxheW91dHMgdGhhdCB7QGxpbmsgTGF5b3V0I2RlY29kZXxkZWNvZGV9IHRvIE9iamVjdFxuICAgICAqIGluc3RhbmNlcywgd2hpY2ggbWVhbnM6XG4gICAgICogKiB7QGxpbmsgU3RydWN0dXJlfVxuICAgICAqICoge0BsaW5rIFVuaW9ufVxuICAgICAqICoge0BsaW5rIFZhcmlhbnRMYXlvdXR9XG4gICAgICogKiB7QGxpbmsgQml0U3RydWN0dXJlfVxuICAgICAqXG4gICAgICogSWYgbGVmdCB1bmRlZmluZWQgdGhlIEphdmFTY3JpcHQgcmVwcmVzZW50YXRpb24gb2YgdGhlc2UgbGF5b3V0c1xuICAgICAqIHdpbGwgYmUgT2JqZWN0IGluc3RhbmNlcy5cbiAgICAgKlxuICAgICAqIFNlZSB7QGxpbmsgYmluZENvbnN0cnVjdG9yTGF5b3V0fS5cbiAgICAgKi9cbiAgICBtYWtlRGVzdGluYXRpb25PYmplY3QoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBzcGFuIG9mIGEgc3BlY2lmaWMgaW5zdGFuY2Ugb2YgYSBsYXlvdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGIgLSB0aGUgYnVmZmVyIHRoYXQgY29udGFpbnMgYW4gZW5jb2RlZCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb2Zmc2V0XSAtIHRoZSBvZmZzZXQgYXQgd2hpY2ggdGhlIGVuY29kZWQgaW5zdGFuY2VcbiAgICAgKiBzdGFydHMuICBJZiBhYnNlbnQgYSB6ZXJvIG9mZnNldCBpcyBpbmZlcnJlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge051bWJlcn0gLSB0aGUgbnVtYmVyIG9mIGJ5dGVzIGNvdmVyZWQgYnkgdGhlIGxheW91dFxuICAgICAqIGluc3RhbmNlLiAgSWYgdGhpcyBtZXRob2QgaXMgbm90IG92ZXJyaWRkZW4gaW4gYSBzdWJjbGFzcyB0aGVcbiAgICAgKiBkZWZpbml0aW9uLXRpbWUgY29uc3RhbnQge0BsaW5rIExheW91dCNzcGFufHNwYW59IHdpbGwgYmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IC0gaWYgdGhlIGxlbmd0aCBvZiB0aGUgdmFsdWUgY2Fubm90IGJlXG4gICAgICogZGV0ZXJtaW5lZC5cbiAgICAgKi9cbiAgICBnZXRTcGFuKGIsIG9mZnNldCkge1xuICAgICAgICBpZiAoMCA+IHRoaXMuc3Bhbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2luZGV0ZXJtaW5hdGUgc3BhbicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNwYW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcGxpY2F0ZSB0aGUgbGF5b3V0IHVzaW5nIGEgbmV3IHByb3BlcnR5LlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBtdXN0IGJlIHVzZWQgdG8gZ2V0IGEgc3RydWN0dXJhbGx5LWVxdWl2YWxlbnQgbGF5b3V0XG4gICAgICogd2l0aCBhIGRpZmZlcmVudCBuYW1lIHNpbmNlIGFsbCB7QGxpbmsgTGF5b3V0fSBpbnN0YW5jZXMgYXJlXG4gICAgICogaW1tdXRhYmxlLlxuICAgICAqXG4gICAgICogKipOT1RFKiogVGhpcyBpcyBhIHNoYWxsb3cgY29weS4gIEFsbCBmaWVsZHMgZXhjZXB0IHtAbGlua1xuICAgICAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0gYXJlIHN0cmljdGx5IGVxdWFsIHRvIHRoZSBvcmlnaW4gbGF5b3V0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IC0gdGhlIHZhbHVlIGZvciB7QGxpbmtcbiAgICAgKiBMYXlvdXQjcHJvcGVydHl8cHJvcGVydHl9IGluIHRoZSByZXBsaWNhLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0xheW91dH0gLSB0aGUgY29weSB3aXRoIHtAbGluayBMYXlvdXQjcHJvcGVydHl8cHJvcGVydHl9XG4gICAgICogc2V0IHRvIGBwcm9wZXJ0eWAuXG4gICAgICovXG4gICAgcmVwbGljYXRlKHByb3BlcnR5KSB7XG4gICAgICAgIGNvbnN0IHJ2ID0gT2JqZWN0LmNyZWF0ZSh0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ocnYsIHRoaXMpO1xuICAgICAgICBydi5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgICAgICByZXR1cm4gcnY7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBvYmplY3QgZnJvbSBsYXlvdXQgcHJvcGVydGllcyBhbmQgYW4gYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOT1RFKiogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGB1bmRlZmluZWRgIGlmIGludm9rZWQgb24gYSBsYXlvdXRcbiAgICAgKiB0aGF0IGRvZXMgbm90IHJldHVybiBpdHMgdmFsdWUgYXMgYW4gT2JqZWN0LiAgT2JqZWN0cyBhcmVcbiAgICAgKiByZXR1cm5lZCBmb3IgdGhpbmdzIHRoYXQgYXJlIGEge0BsaW5rIFN0cnVjdHVyZX0sIHdoaWNoIGluY2x1ZGVzXG4gICAgICoge0BsaW5rIFZhcmlhbnRMYXlvdXR8dmFyaWFudCBsYXlvdXRzfSBpZiB0aGV5IGFyZSBzdHJ1Y3R1cmVzLCBhbmRcbiAgICAgKiBleGNsdWRlcyB7QGxpbmsgVW5pb259cy4gIElmIHlvdSB3YW50IHRoaXMgZmVhdHVyZSBmb3IgYSB1bmlvblxuICAgICAqIHlvdSBtdXN0IHVzZSB7QGxpbmsgVW5pb24uZ2V0VmFyaWFudHxnZXRWYXJpYW50fSB0byBzZWxlY3QgdGhlXG4gICAgICogZGVzaXJlZCBsYXlvdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgLSBhbiBhcnJheSBvZiB2YWx1ZXMgdGhhdCBjb3JyZXNwb25kIHRvIHRoZVxuICAgICAqIGRlZmF1bHQgb3JkZXIgZm9yIHByb3BlcnRpZXMuICBBcyB3aXRoIHtAbGluayBMYXlvdXQjZGVjb2RlfGRlY29kZX1cbiAgICAgKiBsYXlvdXQgZWxlbWVudHMgdGhhdCBoYXZlIG5vIHByb3BlcnR5IG5hbWUgYXJlIHNraXBwZWQgd2hlblxuICAgICAqIGl0ZXJhdGluZyBvdmVyIHRoZSBhcnJheSB2YWx1ZXMuICBPbmx5IHRoZSB0b3AtbGV2ZWwgcHJvcGVydGllcyBhcmVcbiAgICAgKiBhc3NpZ25lZDsgYXJndW1lbnRzIGFyZSBub3QgYXNzaWduZWQgdG8gcHJvcGVydGllcyBvZiBjb250YWluZWRcbiAgICAgKiBsYXlvdXRzLiAgQW55IHVudXNlZCB2YWx1ZXMgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHsoT2JqZWN0fHVuZGVmaW5lZCl9XG4gICAgICovXG4gICAgZnJvbUFycmF5KHZhbHVlcykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuTGF5b3V0ID0gTGF5b3V0O1xuLyogUHJvdmlkZSB0ZXh0IHRoYXQgY2FycmllcyBhIG5hbWUgKHN1Y2ggYXMgZm9yIGEgZnVuY3Rpb24gdGhhdCB3aWxsXG4gKiBiZSB0aHJvd2luZyBhbiBlcnJvcikgYW5ub3RhdGVkIHdpdGggdGhlIHByb3BlcnR5IG9mIGEgZ2l2ZW4gbGF5b3V0XG4gKiAoc3VjaCBhcyBvbmUgZm9yIHdoaWNoIHRoZSB2YWx1ZSB3YXMgdW5hY2NlcHRhYmxlKS5cbiAqXG4gKiBAaWdub3JlICovXG5mdW5jdGlvbiBuYW1lV2l0aFByb3BlcnR5KG5hbWUsIGxvKSB7XG4gICAgaWYgKGxvLnByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBuYW1lICsgJ1snICsgbG8ucHJvcGVydHkgKyAnXSc7XG4gICAgfVxuICAgIHJldHVybiBuYW1lO1xufVxuZXhwb3J0cy5uYW1lV2l0aFByb3BlcnR5ID0gbmFtZVdpdGhQcm9wZXJ0eTtcbi8qKlxuICogQXVnbWVudCBhIGNsYXNzIHNvIHRoYXQgaW5zdGFuY2VzIGNhbiBiZSBlbmNvZGVkL2RlY29kZWQgdXNpbmcgYVxuICogZ2l2ZW4gbGF5b3V0LlxuICpcbiAqIENhbGxpbmcgdGhpcyBmdW5jdGlvbiBjb3VwbGVzIGBDbGFzc2Agd2l0aCBgbGF5b3V0YCBpbiBzZXZlcmFsIHdheXM6XG4gKlxuICogKiBgQ2xhc3MubGF5b3V0X2AgYmVjb21lcyBhIHN0YXRpYyBtZW1iZXIgcHJvcGVydHkgZXF1YWwgdG8gYGxheW91dGA7XG4gKiAqIGBsYXlvdXQuYm91bmRDb25zdHJ1Y3Rvcl9gIGJlY29tZXMgYSBzdGF0aWMgbWVtYmVyIHByb3BlcnR5IGVxdWFsXG4gKiAgICB0byBgQ2xhc3NgO1xuICogKiBUaGUge0BsaW5rIExheW91dCNtYWtlRGVzdGluYXRpb25PYmplY3R8bWFrZURlc3RpbmF0aW9uT2JqZWN0KCl9XG4gKiAgIHByb3BlcnR5IG9mIGBsYXlvdXRgIGlzIHNldCB0byBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGBuZXdcbiAqICAgQ2xhc3MoKWA7XG4gKiAqIGBDbGFzcy5kZWNvZGUoYiwgb2Zmc2V0KWAgYmVjb21lcyBhIHN0YXRpYyBtZW1iZXIgZnVuY3Rpb24gdGhhdFxuICogICBkZWxlZ2F0ZXMgdG8ge0BsaW5rIExheW91dCNkZWNvZGV8bGF5b3V0LmRlY29kZX0uICBUaGVcbiAqICAgc3ludGhlc2l6ZWQgZnVuY3Rpb24gbWF5IGJlIGNhcHR1cmVkIGFuZCBleHRlbmRlZC5cbiAqICogYENsYXNzLnByb3RvdHlwZS5lbmNvZGUoYiwgb2Zmc2V0KWAgcHJvdmlkZXMgYW4gaW5zdGFuY2UgbWVtYmVyXG4gKiAgIGZ1bmN0aW9uIHRoYXQgZGVsZWdhdGVzIHRvIHtAbGluayBMYXlvdXQjZW5jb2RlfGxheW91dC5lbmNvZGV9XG4gKiAgIHdpdGggYHNyY2Agc2V0IHRvIGB0aGlzYC4gIFRoZSBzeW50aGVzaXplZCBmdW5jdGlvbiBtYXkgYmVcbiAqICAgY2FwdHVyZWQgYW5kIGV4dGVuZGVkLCBidXQgd2hlbiB0aGUgZXh0ZW5zaW9uIGlzIGludm9rZWQgYHRoaXNgXG4gKiAgIG11c3QgYmUgZXhwbGljaXRseSBib3VuZCB0byB0aGUgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHtjbGFzc30gQ2xhc3MgLSBhIEphdmFTY3JpcHQgY2xhc3Mgd2l0aCBhIG51bGxhcnlcbiAqIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7TGF5b3V0fSBsYXlvdXQgLSB0aGUge0BsaW5rIExheW91dH0gaW5zdGFuY2UgdXNlZCB0byBlbmNvZGVcbiAqIGluc3RhbmNlcyBvZiBgQ2xhc3NgLlxuICovXG4vLyBgQ2xhc3NgIG11c3QgYmUgYSBjb25zdHJ1Y3RvciBGdW5jdGlvbiwgYnV0IHRoZSBhc3NpZ25tZW50IG9mIGEgYGxheW91dF9gIHByb3BlcnR5IHRvIGl0IG1ha2VzIGl0IGRpZmZpY3VsdCB0byB0eXBlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuZnVuY3Rpb24gYmluZENvbnN0cnVjdG9yTGF5b3V0KENsYXNzLCBsYXlvdXQpIHtcbiAgICBpZiAoJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIENsYXNzKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NsYXNzIG11c3QgYmUgY29uc3RydWN0b3InKTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChDbGFzcywgJ2xheW91dF8nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsYXNzIGlzIGFscmVhZHkgYm91bmQgdG8gYSBsYXlvdXQnKTtcbiAgICB9XG4gICAgaWYgKCEobGF5b3V0ICYmIChsYXlvdXQgaW5zdGFuY2VvZiBMYXlvdXQpKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdsYXlvdXQgbXVzdCBiZSBhIExheW91dCcpO1xuICAgIH1cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGxheW91dCwgJ2JvdW5kQ29uc3RydWN0b3JfJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdsYXlvdXQgaXMgYWxyZWFkeSBib3VuZCB0byBhIGNvbnN0cnVjdG9yJyk7XG4gICAgfVxuICAgIENsYXNzLmxheW91dF8gPSBsYXlvdXQ7XG4gICAgbGF5b3V0LmJvdW5kQ29uc3RydWN0b3JfID0gQ2xhc3M7XG4gICAgbGF5b3V0Lm1ha2VEZXN0aW5hdGlvbk9iamVjdCA9ICgoKSA9PiBuZXcgQ2xhc3MoKSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENsYXNzLnByb3RvdHlwZSwgJ2VuY29kZScsIHtcbiAgICAgICAgdmFsdWUoYiwgb2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gbGF5b3V0LmVuY29kZSh0aGlzLCBiLCBvZmZzZXQpO1xuICAgICAgICB9LFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2xhc3MsICdkZWNvZGUnLCB7XG4gICAgICAgIHZhbHVlKGIsIG9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIGxheW91dC5kZWNvZGUoYiwgb2Zmc2V0KTtcbiAgICAgICAgfSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgfSk7XG59XG5leHBvcnRzLmJpbmRDb25zdHJ1Y3RvckxheW91dCA9IGJpbmRDb25zdHJ1Y3RvckxheW91dDtcbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgYmVoYXZlcyBsaWtlIGEgbGF5b3V0IGJ1dCBkb2VzIG5vdCBjb25zdW1lIHNwYWNlXG4gKiB3aXRoaW4gaXRzIGNvbnRhaW5pbmcgbGF5b3V0LlxuICpcbiAqIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gb2J0YWluIG1ldGFkYXRhIGFib3V0IGEgbWVtYmVyLCBzdWNoIGFzIGFcbiAqIHtAbGluayBPZmZzZXRMYXlvdXR9IHRoYXQgY2FuIHByb3ZpZGUgZGF0YSBhYm91dCBhIHtAbGlua1xuICogTGF5b3V0I2dldFNwYW58dmFsdWUtc3BlY2lmaWMgc3Bhbn0uXG4gKlxuICogKipOT1RFKiogVGhpcyBpcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzOyB5b3UgY2FuIGNyZWF0ZSBpbnN0YW5jZXNcbiAqIGlmIGl0IGFtdXNlcyB5b3UsIGJ1dCB0aGV5IHdvbid0IHN1cHBvcnQge0BsaW5rXG4gKiBFeHRlcm5hbExheW91dCNpc0NvdW50fGlzQ291bnR9IG9yIG90aGVyIHtAbGluayBMYXlvdXR9IGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc3BhbiAtIGluaXRpYWxpemVyIGZvciB7QGxpbmsgTGF5b3V0I3NwYW58c3Bhbn0uXG4gKiBUaGUgcGFyYW1ldGVyIGNhbiByYW5nZSBmcm9tIDEgdGhyb3VnaCA2LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcGVydHldIC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGlua1xuICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqIEBhdWdtZW50cyB7TGF5b3V0fVxuICovXG5jbGFzcyBFeHRlcm5hbExheW91dCBleHRlbmRzIExheW91dCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGB0cnVlYCBpZmYgdGhlIGV4dGVybmFsIGxheW91dCBkZWNvZGVzIHRvIGFuIHVuc2lnbmVkXG4gICAgICogaW50ZWdlciBsYXlvdXQuXG4gICAgICpcbiAgICAgKiBJbiB0aGF0IGNhc2UgaXQgY2FuIGJlIHVzZWQgYXMgdGhlIHNvdXJjZSBvZiB7QGxpbmtcbiAgICAgKiBTZXF1ZW5jZSNjb3VudHxTZXF1ZW5jZSBjb3VudHN9LCB7QGxpbmsgQmxvYiNsZW5ndGh8QmxvYiBsZW5ndGhzfSxcbiAgICAgKiBvciBhcyB7QGxpbmsgVW5pb25MYXlvdXREaXNjcmltaW5hdG9yI2xheW91dHxleHRlcm5hbCB1bmlvblxuICAgICAqIGRpc2NyaW1pbmF0b3JzfS5cbiAgICAgKlxuICAgICAqIEBhYnN0cmFjdFxuICAgICAqL1xuICAgIGlzQ291bnQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXh0ZXJuYWxMYXlvdXQgaXMgYWJzdHJhY3QnKTtcbiAgICB9XG59XG5leHBvcnRzLkV4dGVybmFsTGF5b3V0ID0gRXh0ZXJuYWxMYXlvdXQ7XG4vKipcbiAqIEFuIHtAbGluayBFeHRlcm5hbExheW91dH0gdGhhdCBkZXRlcm1pbmVzIGl0cyB7QGxpbmtcbiAqIExheW91dCNkZWNvZGV8dmFsdWV9IGJhc2VkIG9uIG9mZnNldCBpbnRvIGFuZCBsZW5ndGggb2YgdGhlIGJ1ZmZlclxuICogb24gd2hpY2ggaXQgaXMgaW52b2tlZC5cbiAqXG4gKiAqRmFjdG9yeSo6IHtAbGluayBtb2R1bGU6TGF5b3V0LmdyZWVkeXxncmVlZHl9XG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IFtlbGVtZW50U3Bhbl0gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBHcmVlZHlDb3VudCNlbGVtZW50U3BhbnxlbGVtZW50U3Bhbn0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtwcm9wZXJ0eV0gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBMYXlvdXQjcHJvcGVydHl8cHJvcGVydHl9LlxuICpcbiAqIEBhdWdtZW50cyB7RXh0ZXJuYWxMYXlvdXR9XG4gKi9cbmNsYXNzIEdyZWVkeUNvdW50IGV4dGVuZHMgRXh0ZXJuYWxMYXlvdXQge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRTcGFuID0gMSwgcHJvcGVydHkpIHtcbiAgICAgICAgaWYgKCghTnVtYmVyLmlzSW50ZWdlcihlbGVtZW50U3BhbikpIHx8ICgwID49IGVsZW1lbnRTcGFuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZWxlbWVudFNwYW4gbXVzdCBiZSBhIChwb3NpdGl2ZSkgaW50ZWdlcicpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKC0xLCBwcm9wZXJ0eSk7XG4gICAgICAgIC8qKiBUaGUgbGF5b3V0IGZvciBpbmRpdmlkdWFsIGVsZW1lbnRzIG9mIHRoZSBzZXF1ZW5jZS4gIFRoZSB2YWx1ZVxuICAgICAgICAgKiBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlci4gIElmIG5vdCBwcm92aWRlZCwgdGhlIHZhbHVlIHdpbGwgYmVcbiAgICAgICAgICogMS4gKi9cbiAgICAgICAgdGhpcy5lbGVtZW50U3BhbiA9IGVsZW1lbnRTcGFuO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgaXNDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBkZWNvZGUoYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjaGVja1VpbnQ4QXJyYXkoYik7XG4gICAgICAgIGNvbnN0IHJlbSA9IGIubGVuZ3RoIC0gb2Zmc2V0O1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihyZW0gLyB0aGlzLmVsZW1lbnRTcGFuKTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGVuY29kZShzcmMsIGIsIG9mZnNldCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG5leHBvcnRzLkdyZWVkeUNvdW50ID0gR3JlZWR5Q291bnQ7XG4vKipcbiAqIEFuIHtAbGluayBFeHRlcm5hbExheW91dH0gdGhhdCBzdXBwb3J0cyBhY2Nlc3NpbmcgYSB7QGxpbmsgTGF5b3V0fVxuICogYXQgYSBmaXhlZCBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgYW5vdGhlciBMYXlvdXQuICBUaGUgb2Zmc2V0IG1heVxuICogYmUgYmVmb3JlLCB3aXRoaW4sIG9yIGFmdGVyIHRoZSBiYXNlIGxheW91dC5cbiAqXG4gKiAqRmFjdG9yeSo6IHtAbGluayBtb2R1bGU6TGF5b3V0Lm9mZnNldHxvZmZzZXR9XG4gKlxuICogQHBhcmFtIHtMYXlvdXR9IGxheW91dCAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIE9mZnNldExheW91dCNsYXlvdXR8bGF5b3V0fSwgbW9kdWxvIGBwcm9wZXJ0eWAuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvZmZzZXRdIC0gSW5pdGlhbGl6ZXMge0BsaW5rXG4gKiBPZmZzZXRMYXlvdXQjb2Zmc2V0fG9mZnNldH0uICBEZWZhdWx0cyB0byB6ZXJvLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcGVydHldIC0gT3B0aW9uYWwgbmV3IHByb3BlcnR5IG5hbWUgZm9yIGFcbiAqIHtAbGluayBMYXlvdXQjcmVwbGljYXRlfCByZXBsaWNhfSBvZiBgbGF5b3V0YCB0byBiZSB1c2VkIGFzIHtAbGlua1xuICogT2Zmc2V0TGF5b3V0I2xheW91dHxsYXlvdXR9LiAgSWYgbm90IHByb3ZpZGVkIHRoZSBgbGF5b3V0YCBpcyB1c2VkXG4gKiB1bmNoYW5nZWQuXG4gKlxuICogQGF1Z21lbnRzIHtMYXlvdXR9XG4gKi9cbmNsYXNzIE9mZnNldExheW91dCBleHRlbmRzIEV4dGVybmFsTGF5b3V0IHtcbiAgICBjb25zdHJ1Y3RvcihsYXlvdXQsIG9mZnNldCA9IDAsIHByb3BlcnR5KSB7XG4gICAgICAgIGlmICghKGxheW91dCBpbnN0YW5jZW9mIExheW91dCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2xheW91dCBtdXN0IGJlIGEgTGF5b3V0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG9mZnNldCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29mZnNldCBtdXN0IGJlIGludGVnZXIgb3IgdW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIobGF5b3V0LnNwYW4sIHByb3BlcnR5IHx8IGxheW91dC5wcm9wZXJ0eSk7XG4gICAgICAgIC8qKiBUaGUgc3Vib3JkaW5hdGVkIGxheW91dC4gKi9cbiAgICAgICAgdGhpcy5sYXlvdXQgPSBsYXlvdXQ7XG4gICAgICAgIC8qKiBUaGUgbG9jYXRpb24gb2Yge0BsaW5rIE9mZnNldExheW91dCNsYXlvdXR9IHJlbGF0aXZlIHRvIHRoZVxuICAgICAgICAgKiBzdGFydCBvZiBhbm90aGVyIGxheW91dC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhlIHZhbHVlIG1heSBiZSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSwgYnV0IGFuIGVycm9yIHdpbGwgdGhyb3duXG4gICAgICAgICAqIGlmIGF0IHRoZSBwb2ludCBvZiB1c2UgaXQgZ29lcyBvdXRzaWRlIHRoZSBzcGFuIG9mIHRoZSBVaW50OEFycmF5XG4gICAgICAgICAqIGJlaW5nIGFjY2Vzc2VkLiAgKi9cbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBpc0NvdW50KCkge1xuICAgICAgICByZXR1cm4gKCh0aGlzLmxheW91dCBpbnN0YW5jZW9mIFVJbnQpXG4gICAgICAgICAgICB8fCAodGhpcy5sYXlvdXQgaW5zdGFuY2VvZiBVSW50QkUpKTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGRlY29kZShiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dC5kZWNvZGUoYiwgb2Zmc2V0ICsgdGhpcy5vZmZzZXQpO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXQuZW5jb2RlKHNyYywgYiwgb2Zmc2V0ICsgdGhpcy5vZmZzZXQpO1xuICAgIH1cbn1cbmV4cG9ydHMuT2Zmc2V0TGF5b3V0ID0gT2Zmc2V0TGF5b3V0O1xuLyoqXG4gKiBSZXByZXNlbnQgYW4gdW5zaWduZWQgaW50ZWdlciBpbiBsaXR0bGUtZW5kaWFuIGZvcm1hdC5cbiAqXG4gKiAqRmFjdG9yeSo6IHtAbGluayBtb2R1bGU6TGF5b3V0LnU4fHU4fSwge0BsaW5rXG4gKiAgbW9kdWxlOkxheW91dC51MTZ8dTE2fSwge0BsaW5rIG1vZHVsZTpMYXlvdXQudTI0fHUyNH0sIHtAbGlua1xuICogIG1vZHVsZTpMYXlvdXQudTMyfHUzMn0sIHtAbGluayBtb2R1bGU6TGF5b3V0LnU0MHx1NDB9LCB7QGxpbmtcbiAqICBtb2R1bGU6TGF5b3V0LnU0OHx1NDh9XG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHNwYW4gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rIExheW91dCNzcGFufHNwYW59LlxuICogVGhlIHBhcmFtZXRlciBjYW4gcmFuZ2UgZnJvbSAxIHRocm91Z2ggNi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Byb3BlcnR5XSAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0uXG4gKlxuICogQGF1Z21lbnRzIHtMYXlvdXR9XG4gKi9cbmNsYXNzIFVJbnQgZXh0ZW5kcyBMYXlvdXQge1xuICAgIGNvbnN0cnVjdG9yKHNwYW4sIHByb3BlcnR5KSB7XG4gICAgICAgIHN1cGVyKHNwYW4sIHByb3BlcnR5KTtcbiAgICAgICAgaWYgKDYgPCB0aGlzLnNwYW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdzcGFuIG11c3Qgbm90IGV4Y2VlZCA2IGJ5dGVzJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGRlY29kZShiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiB1aW50OEFycmF5VG9CdWZmZXIoYikucmVhZFVJbnRMRShvZmZzZXQsIHRoaXMuc3Bhbik7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBlbmNvZGUoc3JjLCBiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHVpbnQ4QXJyYXlUb0J1ZmZlcihiKS53cml0ZVVJbnRMRShzcmMsIG9mZnNldCwgdGhpcy5zcGFuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BhbjtcbiAgICB9XG59XG5leHBvcnRzLlVJbnQgPSBVSW50O1xuLyoqXG4gKiBSZXByZXNlbnQgYW4gdW5zaWduZWQgaW50ZWdlciBpbiBiaWctZW5kaWFuIGZvcm1hdC5cbiAqXG4gKiAqRmFjdG9yeSo6IHtAbGluayBtb2R1bGU6TGF5b3V0LnU4YmV8dThiZX0sIHtAbGlua1xuICogbW9kdWxlOkxheW91dC51MTZiZXx1MTZiZX0sIHtAbGluayBtb2R1bGU6TGF5b3V0LnUyNGJlfHUyNGJlfSxcbiAqIHtAbGluayBtb2R1bGU6TGF5b3V0LnUzMmJlfHUzMmJlfSwge0BsaW5rXG4gKiBtb2R1bGU6TGF5b3V0LnU0MGJlfHU0MGJlfSwge0BsaW5rIG1vZHVsZTpMYXlvdXQudTQ4YmV8dTQ4YmV9XG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHNwYW4gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rIExheW91dCNzcGFufHNwYW59LlxuICogVGhlIHBhcmFtZXRlciBjYW4gcmFuZ2UgZnJvbSAxIHRocm91Z2ggNi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Byb3BlcnR5XSAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0uXG4gKlxuICogQGF1Z21lbnRzIHtMYXlvdXR9XG4gKi9cbmNsYXNzIFVJbnRCRSBleHRlbmRzIExheW91dCB7XG4gICAgY29uc3RydWN0b3Ioc3BhbiwgcHJvcGVydHkpIHtcbiAgICAgICAgc3VwZXIoc3BhbiwgcHJvcGVydHkpO1xuICAgICAgICBpZiAoNiA8IHRoaXMuc3Bhbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NwYW4gbXVzdCBub3QgZXhjZWVkIDYgYnl0ZXMnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZGVjb2RlKGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgcmV0dXJuIHVpbnQ4QXJyYXlUb0J1ZmZlcihiKS5yZWFkVUludEJFKG9mZnNldCwgdGhpcy5zcGFuKTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGVuY29kZShzcmMsIGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgdWludDhBcnJheVRvQnVmZmVyKGIpLndyaXRlVUludEJFKHNyYywgb2Zmc2V0LCB0aGlzLnNwYW4pO1xuICAgICAgICByZXR1cm4gdGhpcy5zcGFuO1xuICAgIH1cbn1cbmV4cG9ydHMuVUludEJFID0gVUludEJFO1xuLyoqXG4gKiBSZXByZXNlbnQgYSBzaWduZWQgaW50ZWdlciBpbiBsaXR0bGUtZW5kaWFuIGZvcm1hdC5cbiAqXG4gKiAqRmFjdG9yeSo6IHtAbGluayBtb2R1bGU6TGF5b3V0LnM4fHM4fSwge0BsaW5rXG4gKiAgbW9kdWxlOkxheW91dC5zMTZ8czE2fSwge0BsaW5rIG1vZHVsZTpMYXlvdXQuczI0fHMyNH0sIHtAbGlua1xuICogIG1vZHVsZTpMYXlvdXQuczMyfHMzMn0sIHtAbGluayBtb2R1bGU6TGF5b3V0LnM0MHxzNDB9LCB7QGxpbmtcbiAqICBtb2R1bGU6TGF5b3V0LnM0OHxzNDh9XG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHNwYW4gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rIExheW91dCNzcGFufHNwYW59LlxuICogVGhlIHBhcmFtZXRlciBjYW4gcmFuZ2UgZnJvbSAxIHRocm91Z2ggNi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Byb3BlcnR5XSAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0uXG4gKlxuICogQGF1Z21lbnRzIHtMYXlvdXR9XG4gKi9cbmNsYXNzIEludCBleHRlbmRzIExheW91dCB7XG4gICAgY29uc3RydWN0b3Ioc3BhbiwgcHJvcGVydHkpIHtcbiAgICAgICAgc3VwZXIoc3BhbiwgcHJvcGVydHkpO1xuICAgICAgICBpZiAoNiA8IHRoaXMuc3Bhbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NwYW4gbXVzdCBub3QgZXhjZWVkIDYgYnl0ZXMnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZGVjb2RlKGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgcmV0dXJuIHVpbnQ4QXJyYXlUb0J1ZmZlcihiKS5yZWFkSW50TEUob2Zmc2V0LCB0aGlzLnNwYW4pO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICB1aW50OEFycmF5VG9CdWZmZXIoYikud3JpdGVJbnRMRShzcmMsIG9mZnNldCwgdGhpcy5zcGFuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BhbjtcbiAgICB9XG59XG5leHBvcnRzLkludCA9IEludDtcbi8qKlxuICogUmVwcmVzZW50IGEgc2lnbmVkIGludGVnZXIgaW4gYmlnLWVuZGlhbiBmb3JtYXQuXG4gKlxuICogKkZhY3RvcnkqOiB7QGxpbmsgbW9kdWxlOkxheW91dC5zOGJlfHM4YmV9LCB7QGxpbmtcbiAqIG1vZHVsZTpMYXlvdXQuczE2YmV8czE2YmV9LCB7QGxpbmsgbW9kdWxlOkxheW91dC5zMjRiZXxzMjRiZX0sXG4gKiB7QGxpbmsgbW9kdWxlOkxheW91dC5zMzJiZXxzMzJiZX0sIHtAbGlua1xuICogbW9kdWxlOkxheW91dC5zNDBiZXxzNDBiZX0sIHtAbGluayBtb2R1bGU6TGF5b3V0LnM0OGJlfHM0OGJlfVxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBzcGFuIC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGluayBMYXlvdXQjc3BhbnxzcGFufS5cbiAqIFRoZSBwYXJhbWV0ZXIgY2FuIHJhbmdlIGZyb20gMSB0aHJvdWdoIDYuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtwcm9wZXJ0eV0gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBMYXlvdXQjcHJvcGVydHl8cHJvcGVydHl9LlxuICpcbiAqIEBhdWdtZW50cyB7TGF5b3V0fVxuICovXG5jbGFzcyBJbnRCRSBleHRlbmRzIExheW91dCB7XG4gICAgY29uc3RydWN0b3Ioc3BhbiwgcHJvcGVydHkpIHtcbiAgICAgICAgc3VwZXIoc3BhbiwgcHJvcGVydHkpO1xuICAgICAgICBpZiAoNiA8IHRoaXMuc3Bhbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NwYW4gbXVzdCBub3QgZXhjZWVkIDYgYnl0ZXMnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZGVjb2RlKGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgcmV0dXJuIHVpbnQ4QXJyYXlUb0J1ZmZlcihiKS5yZWFkSW50QkUob2Zmc2V0LCB0aGlzLnNwYW4pO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICB1aW50OEFycmF5VG9CdWZmZXIoYikud3JpdGVJbnRCRShzcmMsIG9mZnNldCwgdGhpcy5zcGFuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BhbjtcbiAgICB9XG59XG5leHBvcnRzLkludEJFID0gSW50QkU7XG5jb25zdCBWMkUzMiA9IE1hdGgucG93KDIsIDMyKTtcbi8qIFRydWUgbW9kdWx1cyBoaWdoIGFuZCBsb3cgMzItYml0IHdvcmRzLCB3aGVyZSBsb3cgd29yZCBpcyBhbHdheXNcbiAqIG5vbi1uZWdhdGl2ZS4gKi9cbmZ1bmN0aW9uIGRpdm1vZEludDY0KHNyYykge1xuICAgIGNvbnN0IGhpMzIgPSBNYXRoLmZsb29yKHNyYyAvIFYyRTMyKTtcbiAgICBjb25zdCBsbzMyID0gc3JjIC0gKGhpMzIgKiBWMkUzMik7XG4gICAgcmV0dXJuIHsgaGkzMiwgbG8zMiB9O1xufVxuLyogUmVjb25zdHJ1Y3QgTnVtYmVyIGZyb20gcXVvdGllbnQgYW5kIG5vbi1uZWdhdGl2ZSByZW1haW5kZXIgKi9cbmZ1bmN0aW9uIHJvdW5kZWRJbnQ2NChoaTMyLCBsbzMyKSB7XG4gICAgcmV0dXJuIGhpMzIgKiBWMkUzMiArIGxvMzI7XG59XG4vKipcbiAqIFJlcHJlc2VudCBhbiB1bnNpZ25lZCA2NC1iaXQgaW50ZWdlciBpbiBsaXR0bGUtZW5kaWFuIGZvcm1hdCB3aGVuXG4gKiBlbmNvZGVkIGFuZCBhcyBhIG5lYXIgaW50ZWdyYWwgSmF2YVNjcmlwdCBOdW1iZXIgd2hlbiBkZWNvZGVkLlxuICpcbiAqICpGYWN0b3J5Kjoge0BsaW5rIG1vZHVsZTpMYXlvdXQubnU2NHxudTY0fVxuICpcbiAqICoqTk9URSoqIFZhbHVlcyB3aXRoIG1hZ25pdHVkZSBncmVhdGVyIHRoYW4gMl41MiBtYXkgbm90IGRlY29kZSB0b1xuICogdGhlIGV4YWN0IHZhbHVlIG9mIHRoZSBlbmNvZGVkIHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIEBhdWdtZW50cyB7TGF5b3V0fVxuICovXG5jbGFzcyBOZWFyVUludDY0IGV4dGVuZHMgTGF5b3V0IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0eSkge1xuICAgICAgICBzdXBlcig4LCBwcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBkZWNvZGUoYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSB1aW50OEFycmF5VG9CdWZmZXIoYik7XG4gICAgICAgIGNvbnN0IGxvMzIgPSBidWZmZXIucmVhZFVJbnQzMkxFKG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGhpMzIgPSBidWZmZXIucmVhZFVJbnQzMkxFKG9mZnNldCArIDQpO1xuICAgICAgICByZXR1cm4gcm91bmRlZEludDY0KGhpMzIsIGxvMzIpO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCBzcGxpdCA9IGRpdm1vZEludDY0KHNyYyk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHVpbnQ4QXJyYXlUb0J1ZmZlcihiKTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDMyTEUoc3BsaXQubG8zMiwgb2Zmc2V0KTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDMyTEUoc3BsaXQuaGkzMiwgb2Zmc2V0ICsgNCk7XG4gICAgICAgIHJldHVybiA4O1xuICAgIH1cbn1cbmV4cG9ydHMuTmVhclVJbnQ2NCA9IE5lYXJVSW50NjQ7XG4vKipcbiAqIFJlcHJlc2VudCBhbiB1bnNpZ25lZCA2NC1iaXQgaW50ZWdlciBpbiBiaWctZW5kaWFuIGZvcm1hdCB3aGVuXG4gKiBlbmNvZGVkIGFuZCBhcyBhIG5lYXIgaW50ZWdyYWwgSmF2YVNjcmlwdCBOdW1iZXIgd2hlbiBkZWNvZGVkLlxuICpcbiAqICpGYWN0b3J5Kjoge0BsaW5rIG1vZHVsZTpMYXlvdXQubnU2NGJlfG51NjRiZX1cbiAqXG4gKiAqKk5PVEUqKiBWYWx1ZXMgd2l0aCBtYWduaXR1ZGUgZ3JlYXRlciB0aGFuIDJeNTIgbWF5IG5vdCBkZWNvZGUgdG9cbiAqIHRoZSBleGFjdCB2YWx1ZSBvZiB0aGUgZW5jb2RlZCByZXByZXNlbnRhdGlvbi5cbiAqXG4gKiBAYXVnbWVudHMge0xheW91dH1cbiAqL1xuY2xhc3MgTmVhclVJbnQ2NEJFIGV4dGVuZHMgTGF5b3V0IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0eSkge1xuICAgICAgICBzdXBlcig4LCBwcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBkZWNvZGUoYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSB1aW50OEFycmF5VG9CdWZmZXIoYik7XG4gICAgICAgIGNvbnN0IGhpMzIgPSBidWZmZXIucmVhZFVJbnQzMkJFKG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGxvMzIgPSBidWZmZXIucmVhZFVJbnQzMkJFKG9mZnNldCArIDQpO1xuICAgICAgICByZXR1cm4gcm91bmRlZEludDY0KGhpMzIsIGxvMzIpO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCBzcGxpdCA9IGRpdm1vZEludDY0KHNyYyk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHVpbnQ4QXJyYXlUb0J1ZmZlcihiKTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDMyQkUoc3BsaXQuaGkzMiwgb2Zmc2V0KTtcbiAgICAgICAgYnVmZmVyLndyaXRlVUludDMyQkUoc3BsaXQubG8zMiwgb2Zmc2V0ICsgNCk7XG4gICAgICAgIHJldHVybiA4O1xuICAgIH1cbn1cbmV4cG9ydHMuTmVhclVJbnQ2NEJFID0gTmVhclVJbnQ2NEJFO1xuLyoqXG4gKiBSZXByZXNlbnQgYSBzaWduZWQgNjQtYml0IGludGVnZXIgaW4gbGl0dGxlLWVuZGlhbiBmb3JtYXQgd2hlblxuICogZW5jb2RlZCBhbmQgYXMgYSBuZWFyIGludGVncmFsIEphdmFTY3JpcHQgTnVtYmVyIHdoZW4gZGVjb2RlZC5cbiAqXG4gKiAqRmFjdG9yeSo6IHtAbGluayBtb2R1bGU6TGF5b3V0Lm5zNjR8bnM2NH1cbiAqXG4gKiAqKk5PVEUqKiBWYWx1ZXMgd2l0aCBtYWduaXR1ZGUgZ3JlYXRlciB0aGFuIDJeNTIgbWF5IG5vdCBkZWNvZGUgdG9cbiAqIHRoZSBleGFjdCB2YWx1ZSBvZiB0aGUgZW5jb2RlZCByZXByZXNlbnRhdGlvbi5cbiAqXG4gKiBAYXVnbWVudHMge0xheW91dH1cbiAqL1xuY2xhc3MgTmVhckludDY0IGV4dGVuZHMgTGF5b3V0IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0eSkge1xuICAgICAgICBzdXBlcig4LCBwcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBkZWNvZGUoYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSB1aW50OEFycmF5VG9CdWZmZXIoYik7XG4gICAgICAgIGNvbnN0IGxvMzIgPSBidWZmZXIucmVhZFVJbnQzMkxFKG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGhpMzIgPSBidWZmZXIucmVhZEludDMyTEUob2Zmc2V0ICsgNCk7XG4gICAgICAgIHJldHVybiByb3VuZGVkSW50NjQoaGkzMiwgbG8zMik7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBlbmNvZGUoc3JjLCBiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGNvbnN0IHNwbGl0ID0gZGl2bW9kSW50NjQoc3JjKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gdWludDhBcnJheVRvQnVmZmVyKGIpO1xuICAgICAgICBidWZmZXIud3JpdGVVSW50MzJMRShzcGxpdC5sbzMyLCBvZmZzZXQpO1xuICAgICAgICBidWZmZXIud3JpdGVJbnQzMkxFKHNwbGl0LmhpMzIsIG9mZnNldCArIDQpO1xuICAgICAgICByZXR1cm4gODtcbiAgICB9XG59XG5leHBvcnRzLk5lYXJJbnQ2NCA9IE5lYXJJbnQ2NDtcbi8qKlxuICogUmVwcmVzZW50IGEgc2lnbmVkIDY0LWJpdCBpbnRlZ2VyIGluIGJpZy1lbmRpYW4gZm9ybWF0IHdoZW5cbiAqIGVuY29kZWQgYW5kIGFzIGEgbmVhciBpbnRlZ3JhbCBKYXZhU2NyaXB0IE51bWJlciB3aGVuIGRlY29kZWQuXG4gKlxuICogKkZhY3RvcnkqOiB7QGxpbmsgbW9kdWxlOkxheW91dC5uczY0YmV8bnM2NGJlfVxuICpcbiAqICoqTk9URSoqIFZhbHVlcyB3aXRoIG1hZ25pdHVkZSBncmVhdGVyIHRoYW4gMl41MiBtYXkgbm90IGRlY29kZSB0b1xuICogdGhlIGV4YWN0IHZhbHVlIG9mIHRoZSBlbmNvZGVkIHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIEBhdWdtZW50cyB7TGF5b3V0fVxuICovXG5jbGFzcyBOZWFySW50NjRCRSBleHRlbmRzIExheW91dCB7XG4gICAgY29uc3RydWN0b3IocHJvcGVydHkpIHtcbiAgICAgICAgc3VwZXIoOCwgcHJvcGVydHkpO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZGVjb2RlKGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gdWludDhBcnJheVRvQnVmZmVyKGIpO1xuICAgICAgICBjb25zdCBoaTMyID0gYnVmZmVyLnJlYWRJbnQzMkJFKG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGxvMzIgPSBidWZmZXIucmVhZFVJbnQzMkJFKG9mZnNldCArIDQpO1xuICAgICAgICByZXR1cm4gcm91bmRlZEludDY0KGhpMzIsIGxvMzIpO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCBzcGxpdCA9IGRpdm1vZEludDY0KHNyYyk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHVpbnQ4QXJyYXlUb0J1ZmZlcihiKTtcbiAgICAgICAgYnVmZmVyLndyaXRlSW50MzJCRShzcGxpdC5oaTMyLCBvZmZzZXQpO1xuICAgICAgICBidWZmZXIud3JpdGVVSW50MzJCRShzcGxpdC5sbzMyLCBvZmZzZXQgKyA0KTtcbiAgICAgICAgcmV0dXJuIDg7XG4gICAgfVxufVxuZXhwb3J0cy5OZWFySW50NjRCRSA9IE5lYXJJbnQ2NEJFO1xuLyoqXG4gKiBSZXByZXNlbnQgYSAzMi1iaXQgZmxvYXRpbmcgcG9pbnQgbnVtYmVyIGluIGxpdHRsZS1lbmRpYW4gZm9ybWF0LlxuICpcbiAqICpGYWN0b3J5Kjoge0BsaW5rIG1vZHVsZTpMYXlvdXQuZjMyfGYzMn1cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Byb3BlcnR5XSAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0uXG4gKlxuICogQGF1Z21lbnRzIHtMYXlvdXR9XG4gKi9cbmNsYXNzIEZsb2F0IGV4dGVuZHMgTGF5b3V0IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0eSkge1xuICAgICAgICBzdXBlcig0LCBwcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBkZWNvZGUoYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gdWludDhBcnJheVRvQnVmZmVyKGIpLnJlYWRGbG9hdExFKG9mZnNldCk7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBlbmNvZGUoc3JjLCBiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHVpbnQ4QXJyYXlUb0J1ZmZlcihiKS53cml0ZUZsb2F0TEUoc3JjLCBvZmZzZXQpO1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG59XG5leHBvcnRzLkZsb2F0ID0gRmxvYXQ7XG4vKipcbiAqIFJlcHJlc2VudCBhIDMyLWJpdCBmbG9hdGluZyBwb2ludCBudW1iZXIgaW4gYmlnLWVuZGlhbiBmb3JtYXQuXG4gKlxuICogKkZhY3RvcnkqOiB7QGxpbmsgbW9kdWxlOkxheW91dC5mMzJiZXxmMzJiZX1cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Byb3BlcnR5XSAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0uXG4gKlxuICogQGF1Z21lbnRzIHtMYXlvdXR9XG4gKi9cbmNsYXNzIEZsb2F0QkUgZXh0ZW5kcyBMYXlvdXQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BlcnR5KSB7XG4gICAgICAgIHN1cGVyKDQsIHByb3BlcnR5KTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGRlY29kZShiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiB1aW50OEFycmF5VG9CdWZmZXIoYikucmVhZEZsb2F0QkUob2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGVuY29kZShzcmMsIGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgdWludDhBcnJheVRvQnVmZmVyKGIpLndyaXRlRmxvYXRCRShzcmMsIG9mZnNldCk7XG4gICAgICAgIHJldHVybiA0O1xuICAgIH1cbn1cbmV4cG9ydHMuRmxvYXRCRSA9IEZsb2F0QkU7XG4vKipcbiAqIFJlcHJlc2VudCBhIDY0LWJpdCBmbG9hdGluZyBwb2ludCBudW1iZXIgaW4gbGl0dGxlLWVuZGlhbiBmb3JtYXQuXG4gKlxuICogKkZhY3RvcnkqOiB7QGxpbmsgbW9kdWxlOkxheW91dC5mNjR8ZjY0fVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcGVydHldIC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGlua1xuICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS5cbiAqXG4gKiBAYXVnbWVudHMge0xheW91dH1cbiAqL1xuY2xhc3MgRG91YmxlIGV4dGVuZHMgTGF5b3V0IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0eSkge1xuICAgICAgICBzdXBlcig4LCBwcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBkZWNvZGUoYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gdWludDhBcnJheVRvQnVmZmVyKGIpLnJlYWREb3VibGVMRShvZmZzZXQpO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICB1aW50OEFycmF5VG9CdWZmZXIoYikud3JpdGVEb3VibGVMRShzcmMsIG9mZnNldCk7XG4gICAgICAgIHJldHVybiA4O1xuICAgIH1cbn1cbmV4cG9ydHMuRG91YmxlID0gRG91YmxlO1xuLyoqXG4gKiBSZXByZXNlbnQgYSA2NC1iaXQgZmxvYXRpbmcgcG9pbnQgbnVtYmVyIGluIGJpZy1lbmRpYW4gZm9ybWF0LlxuICpcbiAqICpGYWN0b3J5Kjoge0BsaW5rIG1vZHVsZTpMYXlvdXQuZjY0YmV8ZjY0YmV9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtwcm9wZXJ0eV0gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBMYXlvdXQjcHJvcGVydHl8cHJvcGVydHl9LlxuICpcbiAqIEBhdWdtZW50cyB7TGF5b3V0fVxuICovXG5jbGFzcyBEb3VibGVCRSBleHRlbmRzIExheW91dCB7XG4gICAgY29uc3RydWN0b3IocHJvcGVydHkpIHtcbiAgICAgICAgc3VwZXIoOCwgcHJvcGVydHkpO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZGVjb2RlKGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgcmV0dXJuIHVpbnQ4QXJyYXlUb0J1ZmZlcihiKS5yZWFkRG91YmxlQkUob2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGVuY29kZShzcmMsIGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgdWludDhBcnJheVRvQnVmZmVyKGIpLndyaXRlRG91YmxlQkUoc3JjLCBvZmZzZXQpO1xuICAgICAgICByZXR1cm4gODtcbiAgICB9XG59XG5leHBvcnRzLkRvdWJsZUJFID0gRG91YmxlQkU7XG4vKipcbiAqIFJlcHJlc2VudCBhIGNvbnRpZ3VvdXMgc2VxdWVuY2Ugb2YgYSBzcGVjaWZpYyBsYXlvdXQgYXMgYW4gQXJyYXkuXG4gKlxuICogKkZhY3RvcnkqOiB7QGxpbmsgbW9kdWxlOkxheW91dC5zZXF8c2VxfVxuICpcbiAqIEBwYXJhbSB7TGF5b3V0fSBlbGVtZW50TGF5b3V0IC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGlua1xuICogU2VxdWVuY2UjZWxlbWVudExheW91dHxlbGVtZW50TGF5b3V0fS5cbiAqXG4gKiBAcGFyYW0geyhOdW1iZXJ8RXh0ZXJuYWxMYXlvdXQpfSBjb3VudCAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIFNlcXVlbmNlI2NvdW50fGNvdW50fS4gIFRoZSBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYSBwb3NpdGl2ZVxuICogaW50ZWdlciBvciBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgRXh0ZXJuYWxMYXlvdXR9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcGVydHldIC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGlua1xuICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS5cbiAqXG4gKiBAYXVnbWVudHMge0xheW91dH1cbiAqL1xuY2xhc3MgU2VxdWVuY2UgZXh0ZW5kcyBMYXlvdXQge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRMYXlvdXQsIGNvdW50LCBwcm9wZXJ0eSkge1xuICAgICAgICBpZiAoIShlbGVtZW50TGF5b3V0IGluc3RhbmNlb2YgTGF5b3V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZWxlbWVudExheW91dCBtdXN0IGJlIGEgTGF5b3V0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoKChjb3VudCBpbnN0YW5jZW9mIEV4dGVybmFsTGF5b3V0KSAmJiBjb3VudC5pc0NvdW50KCkpXG4gICAgICAgICAgICB8fCAoTnVtYmVyLmlzSW50ZWdlcihjb3VudCkgJiYgKDAgPD0gY291bnQpKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NvdW50IG11c3QgYmUgbm9uLW5lZ2F0aXZlIGludGVnZXIgJ1xuICAgICAgICAgICAgICAgICsgJ29yIGFuIHVuc2lnbmVkIGludGVnZXIgRXh0ZXJuYWxMYXlvdXQnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3BhbiA9IC0xO1xuICAgICAgICBpZiAoKCEoY291bnQgaW5zdGFuY2VvZiBFeHRlcm5hbExheW91dCkpXG4gICAgICAgICAgICAmJiAoMCA8IGVsZW1lbnRMYXlvdXQuc3BhbikpIHtcbiAgICAgICAgICAgIHNwYW4gPSBjb3VudCAqIGVsZW1lbnRMYXlvdXQuc3BhbjtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihzcGFuLCBwcm9wZXJ0eSk7XG4gICAgICAgIC8qKiBUaGUgbGF5b3V0IGZvciBpbmRpdmlkdWFsIGVsZW1lbnRzIG9mIHRoZSBzZXF1ZW5jZS4gKi9cbiAgICAgICAgdGhpcy5lbGVtZW50TGF5b3V0ID0gZWxlbWVudExheW91dDtcbiAgICAgICAgLyoqIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIHNlcXVlbmNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIHdpbGwgYmUgZWl0aGVyIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIgb3IgYW4gaW5zdGFuY2Ugb2ZcbiAgICAgICAgICoge0BsaW5rIEV4dGVybmFsTGF5b3V0fSBmb3Igd2hpY2gge0BsaW5rXG4gICAgICAgICAqIEV4dGVybmFsTGF5b3V0I2lzQ291bnR8aXNDb3VudCgpfSBpcyBgdHJ1ZWAuICovXG4gICAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGdldFNwYW4oYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBpZiAoMCA8PSB0aGlzLnNwYW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNwYW47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNwYW4gPSAwO1xuICAgICAgICBsZXQgY291bnQgPSB0aGlzLmNvdW50O1xuICAgICAgICBpZiAoY291bnQgaW5zdGFuY2VvZiBFeHRlcm5hbExheW91dCkge1xuICAgICAgICAgICAgY291bnQgPSBjb3VudC5kZWNvZGUoYiwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoMCA8IHRoaXMuZWxlbWVudExheW91dC5zcGFuKSB7XG4gICAgICAgICAgICBzcGFuID0gY291bnQgKiB0aGlzLmVsZW1lbnRMYXlvdXQuc3BhbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBpZHggPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGlkeCA8IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgc3BhbiArPSB0aGlzLmVsZW1lbnRMYXlvdXQuZ2V0U3BhbihiLCBvZmZzZXQgKyBzcGFuKTtcbiAgICAgICAgICAgICAgICArK2lkeDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BhbjtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGRlY29kZShiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGNvbnN0IHJ2ID0gW107XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IGNvdW50ID0gdGhpcy5jb3VudDtcbiAgICAgICAgaWYgKGNvdW50IGluc3RhbmNlb2YgRXh0ZXJuYWxMYXlvdXQpIHtcbiAgICAgICAgICAgIGNvdW50ID0gY291bnQuZGVjb2RlKGIsIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGkgPCBjb3VudCkge1xuICAgICAgICAgICAgcnYucHVzaCh0aGlzLmVsZW1lbnRMYXlvdXQuZGVjb2RlKGIsIG9mZnNldCkpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHRoaXMuZWxlbWVudExheW91dC5nZXRTcGFuKGIsIG9mZnNldCk7XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgIH1cbiAgICAvKiogSW1wbGVtZW50IHtAbGluayBMYXlvdXQjZW5jb2RlfGVuY29kZX0gZm9yIHtAbGluayBTZXF1ZW5jZX0uXG4gICAgICpcbiAgICAgKiAqKk5PVEUqKiBJZiBgc3JjYCBpcyBzaG9ydGVyIHRoYW4ge0BsaW5rIFNlcXVlbmNlI2NvdW50fGNvdW50fSB0aGVuXG4gICAgICogdGhlIHVudXNlZCBzcGFjZSBpbiB0aGUgYnVmZmVyIGlzIGxlZnQgdW5jaGFuZ2VkLiAgSWYgYHNyY2AgaXNcbiAgICAgKiBsb25nZXIgdGhhbiB7QGxpbmsgU2VxdWVuY2UjY291bnR8Y291bnR9IHRoZSB1bm5lZWRlZCBlbGVtZW50cyBhcmVcbiAgICAgKiBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOT1RFKiogSWYge0BsaW5rIExheW91dCNjb3VudHxjb3VudH0gaXMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rXG4gICAgICogRXh0ZXJuYWxMYXlvdXR9IHRoZW4gdGhlIGxlbmd0aCBvZiBgc3JjYCB3aWxsIGJlIGVuY29kZWQgYXMgdGhlXG4gICAgICogY291bnQgYWZ0ZXIgYHNyY2AgaXMgZW5jb2RlZC4gKi9cbiAgICBlbmNvZGUoc3JjLCBiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGNvbnN0IGVsbyA9IHRoaXMuZWxlbWVudExheW91dDtcbiAgICAgICAgY29uc3Qgc3BhbiA9IHNyYy5yZWR1Y2UoKHNwYW4sIHYpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzcGFuICsgZWxvLmVuY29kZSh2LCBiLCBvZmZzZXQgKyBzcGFuKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICAgIGlmICh0aGlzLmNvdW50IGluc3RhbmNlb2YgRXh0ZXJuYWxMYXlvdXQpIHtcbiAgICAgICAgICAgIHRoaXMuY291bnQuZW5jb2RlKHNyYy5sZW5ndGgsIGIsIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfVxufVxuZXhwb3J0cy5TZXF1ZW5jZSA9IFNlcXVlbmNlO1xuLyoqXG4gKiBSZXByZXNlbnQgYSBjb250aWd1b3VzIHNlcXVlbmNlIG9mIGFyYml0cmFyeSBsYXlvdXQgZWxlbWVudHMgYXMgYW5cbiAqIE9iamVjdC5cbiAqXG4gKiAqRmFjdG9yeSo6IHtAbGluayBtb2R1bGU6TGF5b3V0LnN0cnVjdHxzdHJ1Y3R9XG4gKlxuICogKipOT1RFKiogVGhlIHtAbGluayBMYXlvdXQjc3BhbnxzcGFufSBvZiB0aGUgc3RydWN0dXJlIGlzIHZhcmlhYmxlXG4gKiBpZiBhbnkgbGF5b3V0IGluIHtAbGluayBTdHJ1Y3R1cmUjZmllbGRzfGZpZWxkc30gaGFzIGEgdmFyaWFibGVcbiAqIHNwYW4uICBXaGVuIHtAbGluayBMYXlvdXQjZW5jb2RlfGVuY29kaW5nfSB3ZSBtdXN0IGhhdmUgYSB2YWx1ZSBmb3JcbiAqIGFsbCB2YXJpYWJsZS1sZW5ndGggZmllbGRzLCBvciB3ZSB3b3VsZG4ndCBiZSBhYmxlIHRvIGZpZ3VyZSBvdXRcbiAqIGhvdyBtdWNoIHNwYWNlIHRvIHVzZSBmb3Igc3RvcmFnZS4gIFdlIGNhbiBvbmx5IGlkZW50aWZ5IHRoZSB2YWx1ZVxuICogZm9yIGEgZmllbGQgd2hlbiBpdCBoYXMgYSB7QGxpbmsgTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS4gIEFzXG4gKiBzdWNoLCBhbHRob3VnaCBhIHN0cnVjdHVyZSBtYXkgY29udGFpbiBib3RoIHVubmFtZWQgZmllbGRzIGFuZFxuICogdmFyaWFibGUtbGVuZ3RoIGZpZWxkcywgaXQgY2Fubm90IGNvbnRhaW4gYW4gdW5uYW1lZFxuICogdmFyaWFibGUtbGVuZ3RoIGZpZWxkLlxuICpcbiAqIEBwYXJhbSB7TGF5b3V0W119IGZpZWxkcyAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIFN0cnVjdHVyZSNmaWVsZHN8ZmllbGRzfS4gIEFuIGVycm9yIGlzIHJhaXNlZCBpZiB0aGlzIGNvbnRhaW5zIGFcbiAqIHZhcmlhYmxlLWxlbmd0aCBmaWVsZCBmb3Igd2hpY2ggYSB7QGxpbmsgTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fVxuICogaXMgbm90IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtwcm9wZXJ0eV0gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBMYXlvdXQjcHJvcGVydHl8cHJvcGVydHl9LlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2RlY29kZVByZWZpeGVzXSAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIFN0cnVjdHVyZSNkZWNvZGVQcmVmaXhlc3xwcm9wZXJ0eX0uXG4gKlxuICogQHRocm93cyB7RXJyb3J9IC0gaWYgYGZpZWxkc2AgY29udGFpbnMgYW4gdW5uYW1lZCB2YXJpYWJsZS1sZW5ndGhcbiAqIGxheW91dC5cbiAqXG4gKiBAYXVnbWVudHMge0xheW91dH1cbiAqL1xuY2xhc3MgU3RydWN0dXJlIGV4dGVuZHMgTGF5b3V0IHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIHByb3BlcnR5LCBkZWNvZGVQcmVmaXhlcykge1xuICAgICAgICBpZiAoIShBcnJheS5pc0FycmF5KGZpZWxkcylcbiAgICAgICAgICAgICYmIGZpZWxkcy5yZWR1Y2UoKGFjYywgdikgPT4gYWNjICYmICh2IGluc3RhbmNlb2YgTGF5b3V0KSwgdHJ1ZSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdmaWVsZHMgbXVzdCBiZSBhcnJheSBvZiBMYXlvdXQgaW5zdGFuY2VzJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgnYm9vbGVhbicgPT09IHR5cGVvZiBwcm9wZXJ0eSlcbiAgICAgICAgICAgICYmICh1bmRlZmluZWQgPT09IGRlY29kZVByZWZpeGVzKSkge1xuICAgICAgICAgICAgZGVjb2RlUHJlZml4ZXMgPSBwcm9wZXJ0eTtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8qIFZlcmlmeSBhYnNlbmNlIG9mIHVubmFtZWQgdmFyaWFibGUtbGVuZ3RoIGZpZWxkcy4gKi9cbiAgICAgICAgZm9yIChjb25zdCBmZCBvZiBmaWVsZHMpIHtcbiAgICAgICAgICAgIGlmICgoMCA+IGZkLnNwYW4pXG4gICAgICAgICAgICAgICAgJiYgKHVuZGVmaW5lZCA9PT0gZmQucHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmaWVsZHMgY2Fubm90IGNvbnRhaW4gdW5uYW1lZCB2YXJpYWJsZS1sZW5ndGggbGF5b3V0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNwYW4gPSAtMTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNwYW4gPSBmaWVsZHMucmVkdWNlKChzcGFuLCBmZCkgPT4gc3BhbiArIGZkLmdldFNwYW4oKSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSBlcnJvclxuICAgICAgICB9XG4gICAgICAgIHN1cGVyKHNwYW4sIHByb3BlcnR5KTtcbiAgICAgICAgLyoqIFRoZSBzZXF1ZW5jZSBvZiB7QGxpbmsgTGF5b3V0fSB2YWx1ZXMgdGhhdCBjb21wcmlzZSB0aGVcbiAgICAgICAgICogc3RydWN0dXJlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgaW5kaXZpZHVhbCBlbGVtZW50cyBuZWVkIG5vdCBiZSB0aGUgc2FtZSB0eXBlLCBhbmQgbWF5IGJlXG4gICAgICAgICAqIGVpdGhlciBzY2FsYXIgb3IgYWdncmVnYXRlIGxheW91dHMuICBJZiBhIG1lbWJlciBsYXlvdXQgbGVhdmVzXG4gICAgICAgICAqIGl0cyB7QGxpbmsgTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fSB1bmRlZmluZWQgdGhlXG4gICAgICAgICAqIGNvcnJlc3BvbmRpbmcgcmVnaW9uIG9mIHRoZSBidWZmZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gICAgICAgICAqIHdpbGwgbm90IGJlIG11dGF0ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtMYXlvdXRbXX0gKi9cbiAgICAgICAgdGhpcy5maWVsZHMgPSBmaWVsZHM7XG4gICAgICAgIC8qKiBDb250cm9sIGJlaGF2aW9yIG9mIHtAbGluayBMYXlvdXQjZGVjb2RlfGRlY29kZSgpfSBnaXZlbiBzaG9ydFxuICAgICAgICAgKiBidWZmZXJzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJbiBzb21lIHNpdHVhdGlvbnMgYSBzdHJ1Y3R1cmUgbWFueSBiZSBleHRlbmRlZCB3aXRoIGFkZGl0aW9uYWxcbiAgICAgICAgICogZmllbGRzIG92ZXIgdGltZSwgd2l0aCBvbGRlciBpbnN0YWxsYXRpb25zIHByb3ZpZGluZyBvbmx5IGFcbiAgICAgICAgICogcHJlZml4IG9mIHRoZSBmdWxsIHN0cnVjdHVyZS4gIElmIHRoaXMgcHJvcGVydHkgaXMgYHRydWVgXG4gICAgICAgICAqIGRlY29kaW5nIHdpbGwgYWNjZXB0IHRob3NlIGJ1ZmZlcnMgYW5kIGxlYXZlIHN1YnNlcXVlbnQgZmllbGRzXG4gICAgICAgICAqIHVuZGVmaW5lZCwgYXMgbG9uZyBhcyB0aGUgYnVmZmVyIGVuZHMgYXQgYSBmaWVsZCBib3VuZGFyeS5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC4gKi9cbiAgICAgICAgdGhpcy5kZWNvZGVQcmVmaXhlcyA9ICEhZGVjb2RlUHJlZml4ZXM7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBnZXRTcGFuKGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgaWYgKDAgPD0gdGhpcy5zcGFuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zcGFuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzcGFuID0gMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNwYW4gPSB0aGlzLmZpZWxkcy5yZWR1Y2UoKHNwYW4sIGZkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnNwID0gZmQuZ2V0U3BhbihiLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSBmc3A7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNwYW4gKyBmc3A7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2luZGV0ZXJtaW5hdGUgc3BhbicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGFuO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZGVjb2RlKGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgY2hlY2tVaW50OEFycmF5KGIpO1xuICAgICAgICBjb25zdCBkZXN0ID0gdGhpcy5tYWtlRGVzdGluYXRpb25PYmplY3QoKTtcbiAgICAgICAgZm9yIChjb25zdCBmZCBvZiB0aGlzLmZpZWxkcykge1xuICAgICAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gZmQucHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBkZXN0W2ZkLnByb3BlcnR5XSA9IGZkLmRlY29kZShiLCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0ICs9IGZkLmdldFNwYW4oYiwgb2Zmc2V0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlY29kZVByZWZpeGVzXG4gICAgICAgICAgICAgICAgJiYgKGIubGVuZ3RoID09PSBvZmZzZXQpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfVxuICAgIC8qKiBJbXBsZW1lbnQge0BsaW5rIExheW91dCNlbmNvZGV8ZW5jb2RlfSBmb3Ige0BsaW5rIFN0cnVjdHVyZX0uXG4gICAgICpcbiAgICAgKiBJZiBgc3JjYCBpcyBtaXNzaW5nIGEgcHJvcGVydHkgZm9yIGEgbWVtYmVyIHdpdGggYSBkZWZpbmVkIHtAbGlua1xuICAgICAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0gdGhlIGNvcnJlc3BvbmRpbmcgcmVnaW9uIG9mIHRoZSBidWZmZXIgaXNcbiAgICAgKiBsZWZ0IHVubW9kaWZpZWQuICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCBmaXJzdE9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgbGV0IGxhc3RPZmZzZXQgPSAwO1xuICAgICAgICBsZXQgbGFzdFdyb3RlID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBmZCBvZiB0aGlzLmZpZWxkcykge1xuICAgICAgICAgICAgbGV0IHNwYW4gPSBmZC5zcGFuO1xuICAgICAgICAgICAgbGFzdFdyb3RlID0gKDAgPCBzcGFuKSA/IHNwYW4gOiAwO1xuICAgICAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gZmQucHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmdiA9IHNyY1tmZC5wcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gZnYpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFdyb3RlID0gZmQuZW5jb2RlKGZ2LCBiLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoMCA+IHNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJlYWQgdGhlIGFzLWVuY29kZWQgc3Bhbiwgd2hpY2ggaXMgbm90IG5lY2Vzc2FyaWx5IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICogc2FtZSBhcyB3aGF0IHdlIHdyb3RlLiAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BhbiA9IGZkLmdldFNwYW4oYiwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICBvZmZzZXQgKz0gc3BhbjtcbiAgICAgICAgfVxuICAgICAgICAvKiBVc2UgKGxhc3RPZmZzZXQgKyBsYXN0V3JvdGUpIGluc3RlYWQgb2Ygb2Zmc2V0IGJlY2F1c2UgdGhlIGxhc3RcbiAgICAgICAgICogaXRlbSBtYXkgaGF2ZSBoYWQgYSBkeW5hbWljIGxlbmd0aCBhbmQgd2UgZG9uJ3Qgd2FudCB0byBpbmNsdWRlXG4gICAgICAgICAqIHRoZSBwYWRkaW5nIGJldHdlZW4gaXQgYW5kIHRoZSBlbmQgb2YgdGhlIHNwYWNlIHJlc2VydmVkIGZvclxuICAgICAgICAgKiBpdC4gKi9cbiAgICAgICAgcmV0dXJuIChsYXN0T2Zmc2V0ICsgbGFzdFdyb3RlKSAtIGZpcnN0T2Zmc2V0O1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZnJvbUFycmF5KHZhbHVlcykge1xuICAgICAgICBjb25zdCBkZXN0ID0gdGhpcy5tYWtlRGVzdGluYXRpb25PYmplY3QoKTtcbiAgICAgICAgZm9yIChjb25zdCBmZCBvZiB0aGlzLmZpZWxkcykge1xuICAgICAgICAgICAgaWYgKCh1bmRlZmluZWQgIT09IGZkLnByb3BlcnR5KVxuICAgICAgICAgICAgICAgICYmICgwIDwgdmFsdWVzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBkZXN0W2ZkLnByb3BlcnR5XSA9IHZhbHVlcy5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYWNjZXNzIHRvIHRoZSBsYXlvdXQgb2YgYSBnaXZlbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSAtIHRoZSBzdHJ1Y3R1cmUgbWVtYmVyIG9mIGludGVyZXN0LlxuICAgICAqXG4gICAgICogQHJldHVybiB7TGF5b3V0fSAtIHRoZSBsYXlvdXQgYXNzb2NpYXRlZCB3aXRoIGBwcm9wZXJ0eWAsIG9yXG4gICAgICogdW5kZWZpbmVkIGlmIHRoZXJlIGlzIG5vIHN1Y2ggcHJvcGVydHkuXG4gICAgICovXG4gICAgbGF5b3V0Rm9yKHByb3BlcnR5KSB7XG4gICAgICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHByb3BlcnR5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcm9wZXJ0eSBtdXN0IGJlIHN0cmluZycpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZmQgb2YgdGhpcy5maWVsZHMpIHtcbiAgICAgICAgICAgIGlmIChmZC5wcm9wZXJ0eSA9PT0gcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBvZmZzZXQgb2YgYSBzdHJ1Y3R1cmUgbWVtYmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IC0gdGhlIHN0cnVjdHVyZSBtZW1iZXIgb2YgaW50ZXJlc3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gdGhlIG9mZnNldCBpbiBieXRlcyB0byB0aGUgc3RhcnQgb2YgYHByb3BlcnR5YFxuICAgICAqIHdpdGhpbiB0aGUgc3RydWN0dXJlLCBvciB1bmRlZmluZWQgaWYgYHByb3BlcnR5YCBpcyBub3QgYSBmaWVsZFxuICAgICAqIHdpdGhpbiB0aGUgc3RydWN0dXJlLiAgSWYgdGhlIHByb3BlcnR5IGlzIGEgbWVtYmVyIGJ1dCBmb2xsb3dzIGFcbiAgICAgKiB2YXJpYWJsZS1sZW5ndGggc3RydWN0dXJlIG1lbWJlciBhIG5lZ2F0aXZlIG51bWJlciB3aWxsIGJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICovXG4gICAgb2Zmc2V0T2YocHJvcGVydHkpIHtcbiAgICAgICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgcHJvcGVydHkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Byb3BlcnR5IG11c3QgYmUgc3RyaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9mZnNldCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgZmQgb2YgdGhpcy5maWVsZHMpIHtcbiAgICAgICAgICAgIGlmIChmZC5wcm9wZXJ0eSA9PT0gcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKDAgPiBmZC5zcGFuKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgwIDw9IG9mZnNldCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSBmZC5zcGFuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJ1Y3R1cmUgPSBTdHJ1Y3R1cmU7XG4vKipcbiAqIEFuIG9iamVjdCB0aGF0IGNhbiBwcm92aWRlIGEge0BsaW5rXG4gKiBVbmlvbiNkaXNjcmltaW5hdG9yfGRpc2NyaW1pbmF0b3J9IEFQSSBmb3Ige0BsaW5rIFVuaW9ufS5cbiAqXG4gKiAqKk5PVEUqKiBUaGlzIGlzIGFuIGFic3RyYWN0IGJhc2UgY2xhc3M7IHlvdSBjYW4gY3JlYXRlIGluc3RhbmNlc1xuICogaWYgaXQgYW11c2VzIHlvdSwgYnV0IHRoZXkgd29uJ3Qgc3VwcG9ydCB0aGUge0BsaW5rXG4gKiBVbmlvbkRpc2NyaW1pbmF0b3IjZW5jb2RlfGVuY29kZX0gb3Ige0BsaW5rXG4gKiBVbmlvbkRpc2NyaW1pbmF0b3IjZGVjb2RlfGRlY29kZX0gZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcGVydHldIC0gRGVmYXVsdCBmb3Ige0BsaW5rXG4gKiBVbmlvbkRpc2NyaW1pbmF0b3IjcHJvcGVydHl8cHJvcGVydHl9LlxuICpcbiAqIEBhYnN0cmFjdFxuICovXG5jbGFzcyBVbmlvbkRpc2NyaW1pbmF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHByb3BlcnR5KSB7XG4gICAgICAgIC8qKiBUaGUge0BsaW5rIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0gdG8gYmUgdXNlZCB3aGVuIHRoZVxuICAgICAgICAgKiBkaXNjcmltaW5hdG9yIGlzIHJlZmVyZW5jZWQgaW4gaXNvbGF0aW9uIChnZW5lcmFsbHkgd2hlbiB7QGxpbmtcbiAgICAgICAgICogVW5pb24jZGVjb2RlfFVuaW9uIGRlY29kZX0gY2Fubm90IGRlbGVnYXRlIHRvIGEgc3BlY2lmaWNcbiAgICAgICAgICogdmFyaWFudCkuICovXG4gICAgICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICB9XG4gICAgLyoqIEFuYWxvZyB0byB7QGxpbmsgTGF5b3V0I2RlY29kZXxMYXlvdXQgZGVjb2RlfSBmb3IgdW5pb24gZGlzY3JpbWluYXRvcnMuXG4gICAgICpcbiAgICAgKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgbmVlZCBub3QgcmVmZXJlbmNlIHRoZSBidWZmZXIgaWZcbiAgICAgKiB2YXJpYW50IGluZm9ybWF0aW9uIGlzIGF2YWlsYWJsZSB0aHJvdWdoIG90aGVyIG1lYW5zLiAqL1xuICAgIGRlY29kZShiLCBvZmZzZXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmlvbkRpc2NyaW1pbmF0b3IgaXMgYWJzdHJhY3QnKTtcbiAgICB9XG4gICAgLyoqIEFuYWxvZyB0byB7QGxpbmsgTGF5b3V0I2RlY29kZXxMYXlvdXQgZW5jb2RlfSBmb3IgdW5pb24gZGlzY3JpbWluYXRvcnMuXG4gICAgICpcbiAgICAgKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgbmVlZCBub3Qgc3RvcmUgdGhlIHZhbHVlIGlmXG4gICAgICogdmFyaWFudCBpbmZvcm1hdGlvbiBpcyBtYWludGFpbmVkIHRocm91Z2ggb3RoZXIgbWVhbnMuICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5pb25EaXNjcmltaW5hdG9yIGlzIGFic3RyYWN0Jyk7XG4gICAgfVxufVxuZXhwb3J0cy5VbmlvbkRpc2NyaW1pbmF0b3IgPSBVbmlvbkRpc2NyaW1pbmF0b3I7XG4vKipcbiAqIEFuIG9iamVjdCB0aGF0IGNhbiBwcm92aWRlIGEge0BsaW5rXG4gKiBVbmlvbkRpc2NyaW1pbmF0b3J8ZGlzY3JpbWluYXRvciBBUEl9IGZvciB7QGxpbmsgVW5pb259IHVzaW5nIGFuXG4gKiB1bnNpZ25lZCBpbnRlZ3JhbCB7QGxpbmsgTGF5b3V0fSBpbnN0YW5jZSBsb2NhdGVkIGVpdGhlciBpbnNpZGUgb3JcbiAqIG91dHNpZGUgdGhlIHVuaW9uLlxuICpcbiAqIEBwYXJhbSB7RXh0ZXJuYWxMYXlvdXR9IGxheW91dCAtIGluaXRpYWxpemVzIHtAbGlua1xuICogVW5pb25MYXlvdXREaXNjcmltaW5hdG9yI2xheW91dHxsYXlvdXR9LiAgTXVzdCBzYXRpc2Z5IHtAbGlua1xuICogRXh0ZXJuYWxMYXlvdXQjaXNDb3VudHxpc0NvdW50KCl9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcGVydHldIC0gRGVmYXVsdCBmb3Ige0BsaW5rXG4gKiBVbmlvbkRpc2NyaW1pbmF0b3IjcHJvcGVydHl8cHJvcGVydHl9LCBzdXBlcnNlZGluZyB0aGUgcHJvcGVydHlcbiAqIGZyb20gYGxheW91dGAsIGJ1dCBkZWZhdWx0aW5nIHRvIGB2YXJpYW50YCBpZiBuZWl0aGVyIGBwcm9wZXJ0eWBcbiAqIG5vciBsYXlvdXQgcHJvdmlkZSBhIHByb3BlcnR5IG5hbWUuXG4gKlxuICogQGF1Z21lbnRzIHtVbmlvbkRpc2NyaW1pbmF0b3J9XG4gKi9cbmNsYXNzIFVuaW9uTGF5b3V0RGlzY3JpbWluYXRvciBleHRlbmRzIFVuaW9uRGlzY3JpbWluYXRvciB7XG4gICAgY29uc3RydWN0b3IobGF5b3V0LCBwcm9wZXJ0eSkge1xuICAgICAgICBpZiAoISgobGF5b3V0IGluc3RhbmNlb2YgRXh0ZXJuYWxMYXlvdXQpXG4gICAgICAgICAgICAmJiBsYXlvdXQuaXNDb3VudCgpKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbGF5b3V0IG11c3QgYmUgYW4gdW5zaWduZWQgaW50ZWdlciBFeHRlcm5hbExheW91dCcpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKHByb3BlcnR5IHx8IGxheW91dC5wcm9wZXJ0eSB8fCAndmFyaWFudCcpO1xuICAgICAgICAvKiogVGhlIHtAbGluayBFeHRlcm5hbExheW91dH0gdXNlZCB0byBhY2Nlc3MgdGhlIGRpc2NyaW1pbmF0b3JcbiAgICAgICAgICogdmFsdWUuICovXG4gICAgICAgIHRoaXMubGF5b3V0ID0gbGF5b3V0O1xuICAgIH1cbiAgICAvKiogRGVsZWdhdGUgZGVjb2RpbmcgdG8ge0BsaW5rIFVuaW9uTGF5b3V0RGlzY3JpbWluYXRvciNsYXlvdXR8bGF5b3V0fS4gKi9cbiAgICBkZWNvZGUoYiwgb2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dC5kZWNvZGUoYiwgb2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqIERlbGVnYXRlIGVuY29kaW5nIHRvIHtAbGluayBVbmlvbkxheW91dERpc2NyaW1pbmF0b3IjbGF5b3V0fGxheW91dH0uICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxheW91dC5lbmNvZGUoc3JjLCBiLCBvZmZzZXQpO1xuICAgIH1cbn1cbmV4cG9ydHMuVW5pb25MYXlvdXREaXNjcmltaW5hdG9yID0gVW5pb25MYXlvdXREaXNjcmltaW5hdG9yO1xuLyoqXG4gKiBSZXByZXNlbnQgYW55IG51bWJlciBvZiBzcGFuLWNvbXBhdGlibGUgbGF5b3V0cy5cbiAqXG4gKiAqRmFjdG9yeSo6IHtAbGluayBtb2R1bGU6TGF5b3V0LnVuaW9ufHVuaW9ufVxuICpcbiAqIElmIHRoZSB1bmlvbiBoYXMgYSB7QGxpbmsgVW5pb24jZGVmYXVsdExheW91dHxkZWZhdWx0IGxheW91dH0gdGhhdFxuICogbGF5b3V0IG11c3QgaGF2ZSBhIG5vbi1uZWdhdGl2ZSB7QGxpbmsgTGF5b3V0I3NwYW58c3Bhbn0uICBUaGUgc3BhblxuICogb2YgYSBmaXhlZC1zcGFuIHVuaW9uIGluY2x1ZGVzIGl0cyB7QGxpbmtcbiAqIFVuaW9uI2Rpc2NyaW1pbmF0b3J8ZGlzY3JpbWluYXRvcn0gaWYgdGhlIHZhcmlhbnQgaXMgYSB7QGxpbmtcbiAqIFVuaW9uI3VzZXNQcmVmaXhEaXNjcmltaW5hdG9yfHByZWZpeCBvZiB0aGUgdW5pb259LCBwbHVzIHRoZSBzcGFuXG4gKiBvZiBpdHMge0BsaW5rIFVuaW9uI2RlZmF1bHRMYXlvdXR8ZGVmYXVsdCBsYXlvdXR9LlxuICpcbiAqIElmIHRoZSB1bmlvbiBkb2VzIG5vdCBoYXZlIGEgZGVmYXVsdCBsYXlvdXQgdGhlbiB0aGUgZW5jb2RlZCBzcGFuXG4gKiBvZiB0aGUgdW5pb24gZGVwZW5kcyBvbiB0aGUgZW5jb2RlZCBzcGFuIG9mIGl0cyB2YXJpYW50ICh3aGljaCBtYXlcbiAqIGJlIGZpeGVkIG9yIHZhcmlhYmxlKS5cbiAqXG4gKiB7QGxpbmsgVmFyaWFudExheW91dCNsYXlvdXR8VmFyaWFudCBsYXlvdXR9cyBhcmUgYWRkZWQgdGhyb3VnaFxuICoge0BsaW5rIFVuaW9uI2FkZFZhcmlhbnR8YWRkVmFyaWFudH0uICBJZiB0aGUgdW5pb24gaGFzIGEgZGVmYXVsdFxuICogbGF5b3V0LCB0aGUgc3BhbiBvZiB0aGUge0BsaW5rIFZhcmlhbnRMYXlvdXQjbGF5b3V0fGxheW91dFxuICogY29udGFpbmVkIGJ5IHRoZSB2YXJpYW50fSBtdXN0IG5vdCBleGNlZWQgdGhlIHNwYW4gb2YgdGhlIHtAbGlua1xuICogVW5pb24jZGVmYXVsdExheW91dHxkZWZhdWx0IGxheW91dH0gKG1pbnVzIHRoZSBzcGFuIG9mIGEge0BsaW5rXG4gKiBVbmlvbiN1c2VzUHJlZml4RGlzY3JpbWluYXRvcnxwcmVmaXggZGlzcmltaW5hdG9yfSwgaWYgdXNlZCkuICBUaGVcbiAqIHNwYW4gb2YgdGhlIHZhcmlhbnQgd2lsbCBlcXVhbCB0aGUgc3BhbiBvZiB0aGUgdW5pb24gaXRzZWxmLlxuICpcbiAqIFRoZSB2YXJpYW50IGZvciBhIGJ1ZmZlciBjYW4gb25seSBiZSBpZGVudGlmaWVkIGZyb20gdGhlIHtAbGlua1xuICogVW5pb24jZGlzY3JpbWluYXRvcnxkaXNjcmltaW5hdG9yfSB7QGxpbmtcbiAqIFVuaW9uRGlzY3JpbWluYXRvciNwcm9wZXJ0eXxwcm9wZXJ0eX0gKGluIHRoZSBjYXNlIG9mIHRoZSB7QGxpbmtcbiAqIFVuaW9uI2RlZmF1bHRMYXlvdXR8ZGVmYXVsdCBsYXlvdXR9KSwgb3IgYnkgdXNpbmcge0BsaW5rXG4gKiBVbmlvbiNnZXRWYXJpYW50fGdldFZhcmlhbnR9IGFuZCBleGFtaW5pbmcgdGhlIHJlc3VsdGluZyB7QGxpbmtcbiAqIFZhcmlhbnRMYXlvdXR9IGluc3RhbmNlLlxuICpcbiAqIEEgdmFyaWFudCBjb21wYXRpYmxlIHdpdGggYSBKYXZhU2NyaXB0IG9iamVjdCBjYW4gYmUgaWRlbnRpZmllZFxuICogdXNpbmcge0BsaW5rIFVuaW9uI2dldFNvdXJjZVZhcmlhbnR8Z2V0U291cmNlVmFyaWFudH0uXG4gKlxuICogQHBhcmFtIHsoVW5pb25EaXNjcmltaW5hdG9yfEV4dGVybmFsTGF5b3V0fExheW91dCl9IGRpc2NyIC0gSG93IHRvXG4gKiBpZGVudGlmeSB0aGUgbGF5b3V0IHVzZWQgdG8gaW50ZXJwcmV0IHRoZSB1bmlvbiBjb250ZW50cy4gIFRoZVxuICogcGFyYW1ldGVyIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFVuaW9uRGlzY3JpbWluYXRvcn0sIGFuXG4gKiB7QGxpbmsgRXh0ZXJuYWxMYXlvdXR9IHRoYXQgc2F0aXNmaWVzIHtAbGlua1xuICogRXh0ZXJuYWxMYXlvdXQjaXNDb3VudHxpc0NvdW50KCl9LCBvciB7QGxpbmsgVUludH0gKG9yIHtAbGlua1xuICogVUludEJFfSkuICBXaGVuIGEgbm9uLWV4dGVybmFsIGxheW91dCBlbGVtZW50IGlzIHBhc3NlZCB0aGUgbGF5b3V0XG4gKiBhcHBlYXJzIGF0IHRoZSBzdGFydCBvZiB0aGUgdW5pb24uICBJbiBhbGwgY2FzZXMgdGhlIChzeW50aGVzaXplZClcbiAqIHtAbGluayBVbmlvbkRpc2NyaW1pbmF0b3J9IGluc3RhbmNlIGlzIHJlY29yZGVkIGFzIHtAbGlua1xuICogVW5pb24jZGlzY3JpbWluYXRvcnxkaXNjcmltaW5hdG9yfS5cbiAqXG4gKiBAcGFyYW0geyhMYXlvdXR8bnVsbCl9IGRlZmF1bHRMYXlvdXQgLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBVbmlvbiNkZWZhdWx0TGF5b3V0fGRlZmF1bHRMYXlvdXR9LiAgSWYgYWJzZW50IGRlZmF1bHRzIHRvIGBudWxsYC5cbiAqIElmIGBudWxsYCB0aGVyZSBpcyBubyBkZWZhdWx0IGxheW91dDogdGhlIHVuaW9uIGhhcyBkYXRhLWRlcGVuZGVudFxuICogbGVuZ3RoIGFuZCBhdHRlbXB0cyB0byBkZWNvZGUgb3IgZW5jb2RlIHVucmVjb2duaXplZCB2YXJpYW50cyB3aWxsXG4gKiB0aHJvdyBhbiBleGNlcHRpb24uICBBIHtAbGluayBMYXlvdXR9IGluc3RhbmNlIG11c3QgaGF2ZSBhXG4gKiBub24tbmVnYXRpdmUge0BsaW5rIExheW91dCNzcGFufHNwYW59LCBhbmQgaWYgaXQgbGFja3MgYSB7QGxpbmtcbiAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0gdGhlIHtAbGlua1xuICogVW5pb24jZGVmYXVsdExheW91dHxkZWZhdWx0TGF5b3V0fSB3aWxsIGJlIGEge0BsaW5rXG4gKiBMYXlvdXQjcmVwbGljYXRlfHJlcGxpY2F9IHdpdGggcHJvcGVydHkgYGNvbnRlbnRgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcGVydHldIC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGlua1xuICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS5cbiAqXG4gKiBAYXVnbWVudHMge0xheW91dH1cbiAqL1xuY2xhc3MgVW5pb24gZXh0ZW5kcyBMYXlvdXQge1xuICAgIGNvbnN0cnVjdG9yKGRpc2NyLCBkZWZhdWx0TGF5b3V0LCBwcm9wZXJ0eSkge1xuICAgICAgICBsZXQgZGlzY3JpbWluYXRvcjtcbiAgICAgICAgaWYgKChkaXNjciBpbnN0YW5jZW9mIFVJbnQpXG4gICAgICAgICAgICB8fCAoZGlzY3IgaW5zdGFuY2VvZiBVSW50QkUpKSB7XG4gICAgICAgICAgICBkaXNjcmltaW5hdG9yID0gbmV3IFVuaW9uTGF5b3V0RGlzY3JpbWluYXRvcihuZXcgT2Zmc2V0TGF5b3V0KGRpc2NyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGRpc2NyIGluc3RhbmNlb2YgRXh0ZXJuYWxMYXlvdXQpXG4gICAgICAgICAgICAmJiBkaXNjci5pc0NvdW50KCkpIHtcbiAgICAgICAgICAgIGRpc2NyaW1pbmF0b3IgPSBuZXcgVW5pb25MYXlvdXREaXNjcmltaW5hdG9yKGRpc2NyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKGRpc2NyIGluc3RhbmNlb2YgVW5pb25EaXNjcmltaW5hdG9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGlzY3IgbXVzdCBiZSBhIFVuaW9uRGlzY3JpbWluYXRvciAnXG4gICAgICAgICAgICAgICAgKyAnb3IgYW4gdW5zaWduZWQgaW50ZWdlciBsYXlvdXQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRpc2NyaW1pbmF0b3IgPSBkaXNjcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodW5kZWZpbmVkID09PSBkZWZhdWx0TGF5b3V0KSB7XG4gICAgICAgICAgICBkZWZhdWx0TGF5b3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISgobnVsbCA9PT0gZGVmYXVsdExheW91dClcbiAgICAgICAgICAgIHx8IChkZWZhdWx0TGF5b3V0IGluc3RhbmNlb2YgTGF5b3V0KSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RlZmF1bHRMYXlvdXQgbXVzdCBiZSBudWxsIG9yIGEgTGF5b3V0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bGwgIT09IGRlZmF1bHRMYXlvdXQpIHtcbiAgICAgICAgICAgIGlmICgwID4gZGVmYXVsdExheW91dC5zcGFuKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZWZhdWx0TGF5b3V0IG11c3QgaGF2ZSBjb25zdGFudCBzcGFuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodW5kZWZpbmVkID09PSBkZWZhdWx0TGF5b3V0LnByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdExheW91dCA9IGRlZmF1bHRMYXlvdXQucmVwbGljYXRlKCdjb250ZW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyogVGhlIHVuaW9uIHNwYW4gY2FuIGJlIGVzdGltYXRlZCBvbmx5IGlmIHRoZXJlJ3MgYSBkZWZhdWx0XG4gICAgICAgICAqIGxheW91dC4gIFRoZSB1bmlvbiBzcGFucyBpdHMgZGVmYXVsdCBsYXlvdXQsIHBsdXMgYW55IHByZWZpeFxuICAgICAgICAgKiB2YXJpYW50IGxheW91dC4gIEJ5IGNvbnN0cnVjdGlvbiBib3RoIGxheW91dHMsIGlmIHByZXNlbnQsIGhhdmVcbiAgICAgICAgICogbm9uLW5lZ2F0aXZlIHNwYW4uICovXG4gICAgICAgIGxldCBzcGFuID0gLTE7XG4gICAgICAgIGlmIChkZWZhdWx0TGF5b3V0KSB7XG4gICAgICAgICAgICBzcGFuID0gZGVmYXVsdExheW91dC5zcGFuO1xuICAgICAgICAgICAgaWYgKCgwIDw9IHNwYW4pICYmICgoZGlzY3IgaW5zdGFuY2VvZiBVSW50KVxuICAgICAgICAgICAgICAgIHx8IChkaXNjciBpbnN0YW5jZW9mIFVJbnRCRSkpKSB7XG4gICAgICAgICAgICAgICAgc3BhbiArPSBkaXNjcmltaW5hdG9yLmxheW91dC5zcGFuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1cGVyKHNwYW4sIHByb3BlcnR5KTtcbiAgICAgICAgLyoqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBkaXNjcmltaW5hdG9yIHZhbHVlIGluIGlzb2xhdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBhIHtAbGluayBVbmlvbkRpc2NyaW1pbmF0b3J9IGVpdGhlciBwYXNzZWQgdG8gdGhlXG4gICAgICAgICAqIGNvbnN0cnVjdG9yIG9yIHN5bnRoZXNpemVkIGZyb20gdGhlIGBkaXNjcmAgY29uc3RydWN0b3JcbiAgICAgICAgICogYXJndW1lbnQuICB7QGxpbmtcbiAgICAgICAgICogVW5pb24jdXNlc1ByZWZpeERpc2NyaW1pbmF0b3J8dXNlc1ByZWZpeERpc2NyaW1pbmF0b3J9IHdpbGwgYmVcbiAgICAgICAgICogYHRydWVgIGlmZiB0aGUgYGRpc2NyYCBwYXJhbWV0ZXIgd2FzIGEgbm9uLW9mZnNldCB7QGxpbmtcbiAgICAgICAgICogTGF5b3V0fSBpbnN0YW5jZS4gKi9cbiAgICAgICAgdGhpcy5kaXNjcmltaW5hdG9yID0gZGlzY3JpbWluYXRvcjtcbiAgICAgICAgLyoqIGB0cnVlYCBpZiB0aGUge0BsaW5rIFVuaW9uI2Rpc2NyaW1pbmF0b3J8ZGlzY3JpbWluYXRvcn0gaXMgdGhlXG4gICAgICAgICAqIGZpcnN0IGZpZWxkIGluIHRoZSB1bmlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgYGZhbHNlYCB0aGUgZGlzY3JpbWluYXRvciBpcyBvYnRhaW5lZCBmcm9tIHNvbWV3aGVyZVxuICAgICAgICAgKiBlbHNlLiAqL1xuICAgICAgICB0aGlzLnVzZXNQcmVmaXhEaXNjcmltaW5hdG9yID0gKGRpc2NyIGluc3RhbmNlb2YgVUludClcbiAgICAgICAgICAgIHx8IChkaXNjciBpbnN0YW5jZW9mIFVJbnRCRSk7XG4gICAgICAgIC8qKiBUaGUgbGF5b3V0IGZvciBub24tZGlzY3JpbWluYXRvciBjb250ZW50IHdoZW4gdGhlIHZhbHVlIG9mIHRoZVxuICAgICAgICAgKiBkaXNjcmltaW5hdG9yIGlzIG5vdCByZWNvZ25pemVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGlzIHRoZSB2YWx1ZSBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLiAgSXQgaXNcbiAgICAgICAgICogc3RydWN0dXJhbGx5IGVxdWl2YWxlbnQgdG8gdGhlIHNlY29uZCBjb21wb25lbnQgb2Yge0BsaW5rXG4gICAgICAgICAqIFVuaW9uI2xheW91dHxsYXlvdXR9IGJ1dCBtYXkgaGF2ZSBhIGRpZmZlcmVudCBwcm9wZXJ0eVxuICAgICAgICAgKiBuYW1lLiAqL1xuICAgICAgICB0aGlzLmRlZmF1bHRMYXlvdXQgPSBkZWZhdWx0TGF5b3V0O1xuICAgICAgICAvKiogQSByZWdpc3RyeSBvZiBhbGxvd2VkIHZhcmlhbnRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUga2V5cyBhcmUgdW5zaWduZWQgaW50ZWdlcnMgd2hpY2ggc2hvdWxkIGJlIGNvbXBhdGlibGUgd2l0aFxuICAgICAgICAgKiB7QGxpbmsgVW5pb24uZGlzY3JpbWluYXRvcnxkaXNjcmltaW5hdG9yfS4gIFRoZSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICAgKiBpcyB0aGUgY29ycmVzcG9uZGluZyB7QGxpbmsgVmFyaWFudExheW91dH0gaW5zdGFuY2VzIGFzc2lnbmVkXG4gICAgICAgICAqIHRvIHRoaXMgdW5pb24gYnkge0BsaW5rIFVuaW9uI2FkZFZhcmlhbnR8YWRkVmFyaWFudH0uXG4gICAgICAgICAqXG4gICAgICAgICAqICoqTk9URSoqIFRoZSByZWdpc3RyeSByZW1haW5zIG11dGFibGUgc28gdGhhdCB2YXJpYW50cyBjYW4gYmVcbiAgICAgICAgICoge0BsaW5rIFVuaW9uI2FkZFZhcmlhbnR8YWRkZWR9IGF0IGFueSB0aW1lLiAgVXNlcnMgc2hvdWxkIG5vdFxuICAgICAgICAgKiBtYW5pcHVsYXRlIHRoZSBjb250ZW50IG9mIHRoaXMgcHJvcGVydHkuICovXG4gICAgICAgIHRoaXMucmVnaXN0cnkgPSB7fTtcbiAgICAgICAgLyogUHJpdmF0ZSB2YXJpYWJsZSB1c2VkIHdoZW4gaW52b2tpbmcgZ2V0U291cmNlVmFyaWFudCAqL1xuICAgICAgICBsZXQgYm91bmRHZXRTb3VyY2VWYXJpYW50ID0gdGhpcy5kZWZhdWx0R2V0U291cmNlVmFyaWFudC5iaW5kKHRoaXMpO1xuICAgICAgICAvKiogRnVuY3Rpb24gdG8gaW5mZXIgdGhlIHZhcmlhbnQgc2VsZWN0ZWQgYnkgYSBzb3VyY2Ugb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBEZWZhdWx0cyB0byB7QGxpbmtcbiAgICAgICAgICogVW5pb24jZGVmYXVsdEdldFNvdXJjZVZhcmlhbnR8ZGVmYXVsdEdldFNvdXJjZVZhcmlhbnR9IGJ1dCBtYXlcbiAgICAgICAgICogYmUgb3ZlcnJpZGRlbiB1c2luZyB7QGxpbmtcbiAgICAgICAgICogVW5pb24jY29uZmlnR2V0U291cmNlVmFyaWFudHxjb25maWdHZXRTb3VyY2VWYXJpYW50fS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHNyYyAtIGFzIHdpdGgge0BsaW5rXG4gICAgICAgICAqIFVuaW9uI2RlZmF1bHRHZXRTb3VyY2VWYXJpYW50fGRlZmF1bHRHZXRTb3VyY2VWYXJpYW50fS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMgeyh1bmRlZmluZWR8VmFyaWFudExheW91dCl9IFRoZSBkZWZhdWx0IHZhcmlhbnRcbiAgICAgICAgICogKGB1bmRlZmluZWRgKSBvciBmaXJzdCByZWdpc3RlcmVkIHZhcmlhbnQgdGhhdCB1c2VzIGEgcHJvcGVydHlcbiAgICAgICAgICogYXZhaWxhYmxlIGluIGBzcmNgLiAqL1xuICAgICAgICB0aGlzLmdldFNvdXJjZVZhcmlhbnQgPSBmdW5jdGlvbiAoc3JjKSB7XG4gICAgICAgICAgICByZXR1cm4gYm91bmRHZXRTb3VyY2VWYXJpYW50KHNyYyk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBGdW5jdGlvbiB0byBvdmVycmlkZSB0aGUgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rXG4gICAgICAgICAqIFVuaW9uI2dldFNvdXJjZVZhcmlhbnR8Z2V0U291cmNlVmFyaWFudH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIFVzZSB0aGlzIGlmIHRoZSBkZXNpcmVkIHZhcmlhbnQgY2Fubm90IGJlIGlkZW50aWZpZWQgdXNpbmcgdGhlXG4gICAgICAgICAqIGFsZ29yaXRobSBvZiB7QGxpbmtcbiAgICAgICAgICogVW5pb24jZGVmYXVsdEdldFNvdXJjZVZhcmlhbnR8ZGVmYXVsdEdldFNvdXJjZVZhcmlhbnR9LlxuICAgICAgICAgKlxuICAgICAgICAgKiAqKk5PVEUqKiBUaGUgcHJvdmlkZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIGJvdW5kIHRvIHRoaXNcbiAgICAgICAgICogVW5pb24gaW5zdGFuY2UsIHByb3ZpZGluZyBsb2NhbCBhY2Nlc3MgdG8ge0BsaW5rXG4gICAgICAgICAqIFVuaW9uI3JlZ2lzdHJ5fHJlZ2lzdHJ5fS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZ3N2IC0gYSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MgdGhlIEFQSSBvZlxuICAgICAgICAgKiB7QGxpbmsgVW5pb24jZGVmYXVsdEdldFNvdXJjZVZhcmlhbnR8ZGVmYXVsdEdldFNvdXJjZVZhcmlhbnR9LiAqL1xuICAgICAgICB0aGlzLmNvbmZpZ0dldFNvdXJjZVZhcmlhbnQgPSBmdW5jdGlvbiAoZ3N2KSB7XG4gICAgICAgICAgICBib3VuZEdldFNvdXJjZVZhcmlhbnQgPSBnc3YuYmluZCh0aGlzKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGdldFNwYW4oYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBpZiAoMCA8PSB0aGlzLnNwYW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNwYW47XG4gICAgICAgIH1cbiAgICAgICAgLyogRGVmYXVsdCBsYXlvdXRzIGFsd2F5cyBoYXZlIG5vbi1uZWdhdGl2ZSBzcGFuLCBzbyB3ZSBkb24ndCBoYXZlXG4gICAgICAgICAqIG9uZSBhbmQgd2UgaGF2ZSB0byByZWNvZ25pemUgdGhlIHZhcmlhbnQgd2hpY2ggd2lsbCBpbiB0dXJuXG4gICAgICAgICAqIGRldGVybWluZSB0aGUgc3Bhbi4gKi9cbiAgICAgICAgY29uc3QgdmxvID0gdGhpcy5nZXRWYXJpYW50KGIsIG9mZnNldCk7XG4gICAgICAgIGlmICghdmxvKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZXRlcm1pbmUgc3BhbiBmb3IgdW5yZWNvZ25pemVkIHZhcmlhbnQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmxvLmdldFNwYW4oYiwgb2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGluZmVyIGEgcmVnaXN0ZXJlZCBVbmlvbiB2YXJpYW50IGNvbXBhdGlibGUgd2l0aCBgc3JjYC5cbiAgICAgKlxuICAgICAqIFRoZSBmaXJzdCBzYXRpc2ZpZWQgcnVsZSBpbiB0aGUgZm9sbG93aW5nIHNlcXVlbmNlIGRlZmluZXMgdGhlXG4gICAgICogcmV0dXJuIHZhbHVlOlxuICAgICAqICogSWYgYHNyY2AgaGFzIHByb3BlcnRpZXMgbWF0Y2hpbmcgdGhlIFVuaW9uIGRpc2NyaW1pbmF0b3IgYW5kXG4gICAgICogICB0aGUgZGVmYXVsdCBsYXlvdXQsIGB1bmRlZmluZWRgIGlzIHJldHVybmVkIHJlZ2FyZGxlc3Mgb2YgdGhlXG4gICAgICogICB2YWx1ZSBvZiB0aGUgZGlzY3JpbWluYXRvciBwcm9wZXJ0eSAodGhpcyBlbnN1cmVzIHRoZSBkZWZhdWx0XG4gICAgICogICBsYXlvdXQgd2lsbCBiZSB1c2VkKTtcbiAgICAgKiAqIElmIGBzcmNgIGhhcyBhIHByb3BlcnR5IG1hdGNoaW5nIHRoZSBVbmlvbiBkaXNjcmltaW5hdG9yLCB0aGVcbiAgICAgKiAgIHZhbHVlIG9mIHRoZSBkaXNjcmltaW5hdG9yIGlkZW50aWZpZXMgYSByZWdpc3RlcmVkIHZhcmlhbnQsIGFuZFxuICAgICAqICAgZWl0aGVyIChhKSB0aGUgdmFyaWFudCBoYXMgbm8gbGF5b3V0LCBvciAoYikgYHNyY2AgaGFzIHRoZVxuICAgICAqICAgdmFyaWFudCdzIHByb3BlcnR5LCB0aGVuIHRoZSB2YXJpYW50IGlzIHJldHVybmVkIChiZWNhdXNlIHRoZVxuICAgICAqICAgc291cmNlIHNhdGlzZmllcyB0aGUgY29uc3RyYWludHMgb2YgdGhlIHZhcmlhbnQgaXQgaWRlbnRpZmllcyk7XG4gICAgICogKiBJZiBgc3JjYCBkb2VzIG5vdCBoYXZlIGEgcHJvcGVydHkgbWF0Y2hpbmcgdGhlIFVuaW9uXG4gICAgICogICBkaXNjcmltaW5hdG9yLCBidXQgZG9lcyBoYXZlIGEgcHJvcGVydHkgbWF0Y2hpbmcgYSByZWdpc3RlcmVkXG4gICAgICogICB2YXJpYW50LCB0aGVuIHRoZSB2YXJpYW50IGlzIHJldHVybmVkIChiZWNhdXNlIHRoZSBzb3VyY2VcbiAgICAgKiAgIG1hdGNoZXMgYSB2YXJpYW50IHdpdGhvdXQgYW4gZXhwbGljaXQgY29uZmxpY3QpO1xuICAgICAqICogQW4gZXJyb3IgaXMgdGhyb3duIChiZWNhdXNlIHdlIGVpdGhlciBjYW4ndCBpZGVudGlmeSBhIHZhcmlhbnQsXG4gICAgICogICBvciB3ZSB3ZXJlIGV4cGxpY2l0bHkgdG9sZCB0aGUgdmFyaWFudCBidXQgY2FuJ3Qgc2F0aXNmeSBpdCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3JjIC0gYW4gb2JqZWN0IHByZXN1bWVkIHRvIGJlIGNvbXBhdGlibGUgd2l0aFxuICAgICAqIHRoZSBjb250ZW50IG9mIHRoZSBVbmlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4geyh1bmRlZmluZWR8VmFyaWFudExheW91dCl9IC0gYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgICAqXG4gICAgICogQHRocm93cyB7RXJyb3J9IC0gaWYgYHNyY2AgY2Fubm90IGJlIGFzc29jaWF0ZWQgd2l0aCBhIGRlZmF1bHQgb3JcbiAgICAgKiByZWdpc3RlcmVkIHZhcmlhbnQuXG4gICAgICovXG4gICAgZGVmYXVsdEdldFNvdXJjZVZhcmlhbnQoc3JjKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3JjLCB0aGlzLmRpc2NyaW1pbmF0b3IucHJvcGVydHkpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWZhdWx0TGF5b3V0ICYmIHRoaXMuZGVmYXVsdExheW91dC5wcm9wZXJ0eVxuICAgICAgICAgICAgICAgICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzcmMsIHRoaXMuZGVmYXVsdExheW91dC5wcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdmxvID0gdGhpcy5yZWdpc3RyeVtzcmNbdGhpcy5kaXNjcmltaW5hdG9yLnByb3BlcnR5XV07XG4gICAgICAgICAgICBpZiAodmxvXG4gICAgICAgICAgICAgICAgJiYgKCghdmxvLmxheW91dClcbiAgICAgICAgICAgICAgICAgICAgfHwgKHZsby5wcm9wZXJ0eSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3JjLCB2bG8ucHJvcGVydHkpKSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmxvO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCB0YWcgaW4gdGhpcy5yZWdpc3RyeSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZsbyA9IHRoaXMucmVnaXN0cnlbdGFnXTtcbiAgICAgICAgICAgICAgICBpZiAodmxvLnByb3BlcnR5ICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzcmMsIHZsby5wcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZsbztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gaW5mZXIgc3JjIHZhcmlhbnQnKTtcbiAgICB9XG4gICAgLyoqIEltcGxlbWVudCB7QGxpbmsgTGF5b3V0I2RlY29kZXxkZWNvZGV9IGZvciB7QGxpbmsgVW5pb259LlxuICAgICAqXG4gICAgICogSWYgdGhlIHZhcmlhbnQgaXMge0BsaW5rIFVuaW9uI2FkZFZhcmlhbnR8cmVnaXN0ZXJlZH0gdGhlIHJldHVyblxuICAgICAqIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIHRoYXQgdmFyaWFudCwgd2l0aCBubyBleHBsaWNpdFxuICAgICAqIGRpc2NyaW1pbmF0b3IuICBPdGhlcndpc2UgdGhlIHtAbGluayBVbmlvbiNkZWZhdWx0TGF5b3V0fGRlZmF1bHRcbiAgICAgKiBsYXlvdXR9IGlzIHVzZWQgdG8gZGVjb2RlIHRoZSBjb250ZW50LiAqL1xuICAgIGRlY29kZShiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGxldCBkZXN0O1xuICAgICAgICBjb25zdCBkbG8gPSB0aGlzLmRpc2NyaW1pbmF0b3I7XG4gICAgICAgIGNvbnN0IGRpc2NyID0gZGxvLmRlY29kZShiLCBvZmZzZXQpO1xuICAgICAgICBjb25zdCBjbG8gPSB0aGlzLnJlZ2lzdHJ5W2Rpc2NyXTtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCA9PT0gY2xvKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0TGF5b3V0ID0gdGhpcy5kZWZhdWx0TGF5b3V0O1xuICAgICAgICAgICAgbGV0IGNvbnRlbnRPZmZzZXQgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMudXNlc1ByZWZpeERpc2NyaW1pbmF0b3IpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50T2Zmc2V0ID0gZGxvLmxheW91dC5zcGFuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzdCA9IHRoaXMubWFrZURlc3RpbmF0aW9uT2JqZWN0KCk7XG4gICAgICAgICAgICBkZXN0W2Rsby5wcm9wZXJ0eV0gPSBkaXNjcjtcbiAgICAgICAgICAgIC8vIGRlZmF1bHRMYXlvdXQucHJvcGVydHkgY2FuIGJlIHVuZGVmaW5lZCwgYnV0IHRoaXMgaXMgYWxsb3dlZCBieSBidWZmZXItbGF5b3V0XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgZGVzdFtkZWZhdWx0TGF5b3V0LnByb3BlcnR5XSA9IGRlZmF1bHRMYXlvdXQuZGVjb2RlKGIsIG9mZnNldCArIGNvbnRlbnRPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVzdCA9IGNsby5kZWNvZGUoYiwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9XG4gICAgLyoqIEltcGxlbWVudCB7QGxpbmsgTGF5b3V0I2VuY29kZXxlbmNvZGV9IGZvciB7QGxpbmsgVW5pb259LlxuICAgICAqXG4gICAgICogVGhpcyBBUEkgYXNzdW1lcyB0aGUgYHNyY2Agb2JqZWN0IGlzIGNvbnNpc3RlbnQgd2l0aCB0aGUgdW5pb24nc1xuICAgICAqIHtAbGluayBVbmlvbiNkZWZhdWx0TGF5b3V0fGRlZmF1bHQgbGF5b3V0fS4gIFRvIGVuY29kZSB2YXJpYW50c1xuICAgICAqIHVzZSB0aGUgYXBwcm9wcmlhdGUgdmFyaWFudC1zcGVjaWZpYyB7QGxpbmsgVmFyaWFudExheW91dCNlbmNvZGV9XG4gICAgICogbWV0aG9kLiAqL1xuICAgIGVuY29kZShzcmMsIGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgY29uc3QgdmxvID0gdGhpcy5nZXRTb3VyY2VWYXJpYW50KHNyYyk7XG4gICAgICAgIGlmICh1bmRlZmluZWQgPT09IHZsbykge1xuICAgICAgICAgICAgY29uc3QgZGxvID0gdGhpcy5kaXNjcmltaW5hdG9yO1xuICAgICAgICAgICAgLy8gdGhpcy5kZWZhdWx0TGF5b3V0IGlzIG5vdCB1bmRlZmluZWQgd2hlbiB2bG8gaXMgdW5kZWZpbmVkXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgY29uc3QgY2xvID0gdGhpcy5kZWZhdWx0TGF5b3V0O1xuICAgICAgICAgICAgbGV0IGNvbnRlbnRPZmZzZXQgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMudXNlc1ByZWZpeERpc2NyaW1pbmF0b3IpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50T2Zmc2V0ID0gZGxvLmxheW91dC5zcGFuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGxvLmVuY29kZShzcmNbZGxvLnByb3BlcnR5XSwgYiwgb2Zmc2V0KTtcbiAgICAgICAgICAgIC8vIGNsby5wcm9wZXJ0eSBpcyBub3QgdW5kZWZpbmVkIHdoZW4gdmxvIGlzIHVuZGVmaW5lZFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIHJldHVybiBjb250ZW50T2Zmc2V0ICsgY2xvLmVuY29kZShzcmNbY2xvLnByb3BlcnR5XSwgYiwgb2Zmc2V0ICsgY29udGVudE9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZsby5lbmNvZGUoc3JjLCBiLCBvZmZzZXQpO1xuICAgIH1cbiAgICAvKiogUmVnaXN0ZXIgYSBuZXcgdmFyaWFudCBzdHJ1Y3R1cmUgd2l0aGluIGEgdW5pb24uICBUaGUgbmV3bHlcbiAgICAgKiBjcmVhdGVkIHZhcmlhbnQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFyaWFudCAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAgICAgKiBWYXJpYW50TGF5b3V0I3ZhcmlhbnR8dmFyaWFudH0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0xheW91dH0gbGF5b3V0IC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGlua1xuICAgICAqIFZhcmlhbnRMYXlvdXQjbGF5b3V0fGxheW91dH0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gICAgICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1ZhcmlhbnRMYXlvdXR9ICovXG4gICAgYWRkVmFyaWFudCh2YXJpYW50LCBsYXlvdXQsIHByb3BlcnR5KSB7XG4gICAgICAgIGNvbnN0IHJ2ID0gbmV3IFZhcmlhbnRMYXlvdXQodGhpcywgdmFyaWFudCwgbGF5b3V0LCBwcm9wZXJ0eSk7XG4gICAgICAgIHRoaXMucmVnaXN0cnlbdmFyaWFudF0gPSBydjtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxheW91dCBhc3NvY2lhdGVkIHdpdGggYSByZWdpc3RlcmVkIHZhcmlhbnQuXG4gICAgICpcbiAgICAgKiBJZiBgdmJgIGRvZXMgbm90IHByb2R1Y2UgYSByZWdpc3RlcmVkIHZhcmlhbnQgdGhlIGZ1bmN0aW9uIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7KE51bWJlcnxVaW50OEFycmF5KX0gdmIgLSBlaXRoZXIgdGhlIHZhcmlhbnQgbnVtYmVyLCBvciBhXG4gICAgICogYnVmZmVyIGZyb20gd2hpY2ggdGhlIGRpc2NyaW1pbmF0b3IgaXMgdG8gYmUgcmVhZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgLSBvZmZzZXQgaW50byBgdmJgIGZvciB0aGUgc3RhcnQgb2YgdGhlXG4gICAgICogdW5pb24uICBVc2VkIG9ubHkgd2hlbiBgdmJgIGlzIGFuIGluc3RhbmNlIG9mIHtVaW50OEFycmF5fS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4geyh7VmFyaWFudExheW91dH18dW5kZWZpbmVkKX1cbiAgICAgKi9cbiAgICBnZXRWYXJpYW50KHZiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGxldCB2YXJpYW50O1xuICAgICAgICBpZiAodmIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICB2YXJpYW50ID0gdGhpcy5kaXNjcmltaW5hdG9yLmRlY29kZSh2Yiwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhcmlhbnQgPSB2YjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeVt2YXJpYW50XTtcbiAgICB9XG59XG5leHBvcnRzLlVuaW9uID0gVW5pb247XG4vKipcbiAqIFJlcHJlc2VudCBhIHNwZWNpZmljIHZhcmlhbnQgd2l0aGluIGEgY29udGFpbmluZyB1bmlvbi5cbiAqXG4gKiAqKk5PVEUqKiBUaGUge0BsaW5rIExheW91dCNzcGFufHNwYW59IG9mIHRoZSB2YXJpYW50IG1heSBpbmNsdWRlXG4gKiB0aGUgc3BhbiBvZiB0aGUge0BsaW5rIFVuaW9uI2Rpc2NyaW1pbmF0b3J8ZGlzY3JpbWluYXRvcn0gdXNlZCB0b1xuICogaWRlbnRpZnkgaXQsIGJ1dCB2YWx1ZXMgcmVhZCBhbmQgd3JpdHRlbiB1c2luZyB0aGUgdmFyaWFudCBzdHJpY3RseVxuICogY29uZm9ybSB0byB0aGUgY29udGVudCBvZiB7QGxpbmsgVmFyaWFudExheW91dCNsYXlvdXR8bGF5b3V0fS5cbiAqXG4gKiAqKk5PVEUqKiBVc2VyIGNvZGUgc2hvdWxkIG5vdCBpbnZva2UgdGhpcyBjb25zdHJ1Y3RvciBkaXJlY3RseS4gIFVzZVxuICogdGhlIHVuaW9uIHtAbGluayBVbmlvbiNhZGRWYXJpYW50fGFkZFZhcmlhbnR9IGhlbHBlciBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtVbmlvbn0gdW5pb24gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBWYXJpYW50TGF5b3V0I3VuaW9ufHVuaW9ufS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gdmFyaWFudCAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIFZhcmlhbnRMYXlvdXQjdmFyaWFudHx2YXJpYW50fS5cbiAqXG4gKiBAcGFyYW0ge0xheW91dH0gW2xheW91dF0gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBWYXJpYW50TGF5b3V0I2xheW91dHxsYXlvdXR9LiAgSWYgYWJzZW50IHRoZSB2YXJpYW50IGNhcnJpZXMgbm9cbiAqIGRhdGEuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0eV0gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBMYXlvdXQjcHJvcGVydHl8cHJvcGVydHl9LiAgVW5saWtlIG1hbnkgb3RoZXIgbGF5b3V0cywgdmFyaWFudFxuICogbGF5b3V0cyBub3JtYWxseSBpbmNsdWRlIGEgcHJvcGVydHkgbmFtZSBzbyB0aGV5IGNhbiBiZSBpZGVudGlmaWVkXG4gKiB3aXRoaW4gdGhlaXIgY29udGFpbmluZyB7QGxpbmsgVW5pb259LiAgVGhlIHByb3BlcnR5IGlkZW50aWZpZXIgbWF5XG4gKiBiZSBhYnNlbnQgb25seSBpZiBgbGF5b3V0YCBpcyBpcyBhYnNlbnQuXG4gKlxuICogQGF1Z21lbnRzIHtMYXlvdXR9XG4gKi9cbmNsYXNzIFZhcmlhbnRMYXlvdXQgZXh0ZW5kcyBMYXlvdXQge1xuICAgIGNvbnN0cnVjdG9yKHVuaW9uLCB2YXJpYW50LCBsYXlvdXQsIHByb3BlcnR5KSB7XG4gICAgICAgIGlmICghKHVuaW9uIGluc3RhbmNlb2YgVW5pb24pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmlvbiBtdXN0IGJlIGEgVW5pb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCFOdW1iZXIuaXNJbnRlZ2VyKHZhcmlhbnQpKSB8fCAoMCA+IHZhcmlhbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YXJpYW50IG11c3QgYmUgYSAobm9uLW5lZ2F0aXZlKSBpbnRlZ2VyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgnc3RyaW5nJyA9PT0gdHlwZW9mIGxheW91dClcbiAgICAgICAgICAgICYmICh1bmRlZmluZWQgPT09IHByb3BlcnR5KSkge1xuICAgICAgICAgICAgcHJvcGVydHkgPSBsYXlvdXQ7XG4gICAgICAgICAgICBsYXlvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsYXlvdXQpIHtcbiAgICAgICAgICAgIGlmICghKGxheW91dCBpbnN0YW5jZW9mIExheW91dCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdsYXlvdXQgbXVzdCBiZSBhIExheW91dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChudWxsICE9PSB1bmlvbi5kZWZhdWx0TGF5b3V0KVxuICAgICAgICAgICAgICAgICYmICgwIDw9IGxheW91dC5zcGFuKVxuICAgICAgICAgICAgICAgICYmIChsYXlvdXQuc3BhbiA+IHVuaW9uLmRlZmF1bHRMYXlvdXQuc3BhbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZhcmlhbnQgc3BhbiBleGNlZWRzIHNwYW4gb2YgY29udGFpbmluZyB1bmlvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YXJpYW50IG11c3QgaGF2ZSBhIFN0cmluZyBwcm9wZXJ0eScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBzcGFuID0gdW5pb24uc3BhbjtcbiAgICAgICAgaWYgKDAgPiB1bmlvbi5zcGFuKSB7XG4gICAgICAgICAgICBzcGFuID0gbGF5b3V0ID8gbGF5b3V0LnNwYW4gOiAwO1xuICAgICAgICAgICAgaWYgKCgwIDw9IHNwYW4pICYmIHVuaW9uLnVzZXNQcmVmaXhEaXNjcmltaW5hdG9yKSB7XG4gICAgICAgICAgICAgICAgc3BhbiArPSB1bmlvbi5kaXNjcmltaW5hdG9yLmxheW91dC5zcGFuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1cGVyKHNwYW4sIHByb3BlcnR5KTtcbiAgICAgICAgLyoqIFRoZSB7QGxpbmsgVW5pb259IHRvIHdoaWNoIHRoaXMgdmFyaWFudCBiZWxvbmdzLiAqL1xuICAgICAgICB0aGlzLnVuaW9uID0gdW5pb247XG4gICAgICAgIC8qKiBUaGUgdW5zaWduZWQgaW50ZWdyYWwgdmFsdWUgaWRlbnRpZnlpbmcgdGhpcyB2YXJpYW50IHdpdGhpblxuICAgICAgICAgKiB0aGUge0BsaW5rIFVuaW9uI2Rpc2NyaW1pbmF0b3J8ZGlzY3JpbWluYXRvcn0gb2YgdGhlIGNvbnRhaW5pbmdcbiAgICAgICAgICogdW5pb24uICovXG4gICAgICAgIHRoaXMudmFyaWFudCA9IHZhcmlhbnQ7XG4gICAgICAgIC8qKiBUaGUge0BsaW5rIExheW91dH0gdG8gYmUgdXNlZCB3aGVuIHJlYWRpbmcvd3JpdGluZyB0aGVcbiAgICAgICAgICogbm9uLWRpc2NyaW1pbmF0b3IgcGFydCBvZiB0aGUge0BsaW5rXG4gICAgICAgICAqIFZhcmlhbnRMYXlvdXQjdW5pb258dW5pb259LiAgSWYgYG51bGxgIHRoZSB2YXJpYW50IGNhcnJpZXMgbm9cbiAgICAgICAgICogZGF0YS4gKi9cbiAgICAgICAgdGhpcy5sYXlvdXQgPSBsYXlvdXQgfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGdldFNwYW4oYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBpZiAoMCA8PSB0aGlzLnNwYW4pIHtcbiAgICAgICAgICAgIC8qIFdpbGwgYmUgZXF1YWwgdG8gdGhlIGNvbnRhaW5pbmcgdW5pb24gc3BhbiBpZiB0aGF0IGlzIG5vdFxuICAgICAgICAgICAgICogdmFyaWFibGUuICovXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zcGFuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb250ZW50T2Zmc2V0ID0gMDtcbiAgICAgICAgaWYgKHRoaXMudW5pb24udXNlc1ByZWZpeERpc2NyaW1pbmF0b3IpIHtcbiAgICAgICAgICAgIGNvbnRlbnRPZmZzZXQgPSB0aGlzLnVuaW9uLmRpc2NyaW1pbmF0b3IubGF5b3V0LnNwYW47XG4gICAgICAgIH1cbiAgICAgICAgLyogU3BhbiBpcyBkZWZpbmVkIHNvbGVseSBieSB0aGUgdmFyaWFudCAoYW5kIHByZWZpeCBkaXNjcmltaW5hdG9yKSAqL1xuICAgICAgICBsZXQgc3BhbiA9IDA7XG4gICAgICAgIGlmICh0aGlzLmxheW91dCkge1xuICAgICAgICAgICAgc3BhbiA9IHRoaXMubGF5b3V0LmdldFNwYW4oYiwgb2Zmc2V0ICsgY29udGVudE9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRlbnRPZmZzZXQgKyBzcGFuO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZGVjb2RlKGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgY29uc3QgZGVzdCA9IHRoaXMubWFrZURlc3RpbmF0aW9uT2JqZWN0KCk7XG4gICAgICAgIGlmICh0aGlzICE9PSB0aGlzLnVuaW9uLmdldFZhcmlhbnQoYiwgb2Zmc2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd2YXJpYW50IG1pc21hdGNoJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbnRlbnRPZmZzZXQgPSAwO1xuICAgICAgICBpZiAodGhpcy51bmlvbi51c2VzUHJlZml4RGlzY3JpbWluYXRvcikge1xuICAgICAgICAgICAgY29udGVudE9mZnNldCA9IHRoaXMudW5pb24uZGlzY3JpbWluYXRvci5sYXlvdXQuc3BhbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXlvdXQpIHtcbiAgICAgICAgICAgIGRlc3RbdGhpcy5wcm9wZXJ0eV0gPSB0aGlzLmxheW91dC5kZWNvZGUoYiwgb2Zmc2V0ICsgY29udGVudE9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wcm9wZXJ0eSkge1xuICAgICAgICAgICAgZGVzdFt0aGlzLnByb3BlcnR5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy51bmlvbi51c2VzUHJlZml4RGlzY3JpbWluYXRvcikge1xuICAgICAgICAgICAgZGVzdFt0aGlzLnVuaW9uLmRpc2NyaW1pbmF0b3IucHJvcGVydHldID0gdGhpcy52YXJpYW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBsZXQgY29udGVudE9mZnNldCA9IDA7XG4gICAgICAgIGlmICh0aGlzLnVuaW9uLnVzZXNQcmVmaXhEaXNjcmltaW5hdG9yKSB7XG4gICAgICAgICAgICBjb250ZW50T2Zmc2V0ID0gdGhpcy51bmlvbi5kaXNjcmltaW5hdG9yLmxheW91dC5zcGFuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxheW91dFxuICAgICAgICAgICAgJiYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3JjLCB0aGlzLnByb3BlcnR5KSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhcmlhbnQgbGFja3MgcHJvcGVydHkgJyArIHRoaXMucHJvcGVydHkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5pb24uZGlzY3JpbWluYXRvci5lbmNvZGUodGhpcy52YXJpYW50LCBiLCBvZmZzZXQpO1xuICAgICAgICBsZXQgc3BhbiA9IGNvbnRlbnRPZmZzZXQ7XG4gICAgICAgIGlmICh0aGlzLmxheW91dCkge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXQuZW5jb2RlKHNyY1t0aGlzLnByb3BlcnR5XSwgYiwgb2Zmc2V0ICsgY29udGVudE9mZnNldCk7XG4gICAgICAgICAgICBzcGFuICs9IHRoaXMubGF5b3V0LmdldFNwYW4oYiwgb2Zmc2V0ICsgY29udGVudE9mZnNldCk7XG4gICAgICAgICAgICBpZiAoKDAgPD0gdGhpcy51bmlvbi5zcGFuKVxuICAgICAgICAgICAgICAgICYmIChzcGFuID4gdGhpcy51bmlvbi5zcGFuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZW5jb2RlZCB2YXJpYW50IG92ZXJydW5zIGNvbnRhaW5pbmcgdW5pb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BhbjtcbiAgICB9XG4gICAgLyoqIERlbGVnYXRlIHtAbGluayBMYXlvdXQjZnJvbUFycmF5fGZyb21BcnJheX0gdG8ge0BsaW5rXG4gICAgICogVmFyaWFudExheW91dCNsYXlvdXR8bGF5b3V0fS4gKi9cbiAgICBmcm9tQXJyYXkodmFsdWVzKSB7XG4gICAgICAgIGlmICh0aGlzLmxheW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGF5b3V0LmZyb21BcnJheSh2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5WYXJpYW50TGF5b3V0ID0gVmFyaWFudExheW91dDtcbi8qKiBKYXZhU2NyaXB0IGNob3NlIHRvIGRlZmluZSBiaXR3aXNlIG9wZXJhdGlvbnMgYXMgb3BlcmF0aW5nIG9uXG4gKiBzaWduZWQgMzItYml0IHZhbHVlcyBpbiAyJ3MgY29tcGxlbWVudCBmb3JtLCBtZWFuaW5nIGFueSBpbnRlZ2VyXG4gKiB3aXRoIGJpdCAzMSBzZXQgaXMgZ29pbmcgdG8gbG9vayBuZWdhdGl2ZS4gIEZvciByaWdodCBzaGlmdHMgdGhhdCdzXG4gKiBub3QgYSBwcm9ibGVtLCBiZWNhdXNlIGA+Pj5gIGlzIGEgbG9naWNhbCBzaGlmdCwgYnV0IGZvciBldmVyeVxuICogb3RoZXIgYml0d2lzZSBvcGVyYXRvciB3ZSBoYXZlIHRvIGNvbXBlbnNhdGUgZm9yIHBvc3NpYmxlIG5lZ2F0aXZlXG4gKiByZXN1bHRzLiAqL1xuZnVuY3Rpb24gZml4Qml0d2lzZVJlc3VsdCh2KSB7XG4gICAgaWYgKDAgPiB2KSB7XG4gICAgICAgIHYgKz0gMHgxMDAwMDAwMDA7XG4gICAgfVxuICAgIHJldHVybiB2O1xufVxuLyoqXG4gKiBDb250YWluIGEgc2VxdWVuY2Ugb2YgYml0IGZpZWxkcyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxuICpcbiAqICpGYWN0b3J5Kjoge0BsaW5rIG1vZHVsZTpMYXlvdXQuYml0c3xiaXRzfVxuICpcbiAqIFRoaXMgaXMgYSBjb250YWluZXIgZWxlbWVudDsgd2l0aGluIGl0IHRoZXJlIGFyZSB7QGxpbmsgQml0RmllbGR9XG4gKiBpbnN0YW5jZXMgdGhhdCBwcm92aWRlIHRoZSBleHRyYWN0ZWQgcHJvcGVydGllcy4gIFRoZSBjb250YWluZXJcbiAqIHNpbXBseSBkZWZpbmVzIHRoZSBhZ2dyZWdhdGUgcmVwcmVzZW50YXRpb24gYW5kIGl0cyBiaXQgb3JkZXJpbmcuXG4gKiBUaGUgcmVwcmVzZW50YXRpb24gaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyB3aXRoIG51bWVyaWNcbiAqIG9yIHtAbGluayBCb29sZWFufSB2YWx1ZXMuXG4gKlxuICoge0BsaW5rIEJpdEZpZWxkfXMgYXJlIGFkZGVkIHdpdGggdGhlIHtAbGlua1xuICogQml0U3RydWN0dXJlI2FkZEZpZWxkfGFkZEZpZWxkfSBhbmQge0BsaW5rXG4gKiBCaXRTdHJ1Y3R1cmUjYWRkQm9vbGVhbnxhZGRCb29sZWFufSBtZXRob2RzLlxuXG4gKiBAcGFyYW0ge0xheW91dH0gd29yZCAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIEJpdFN0cnVjdHVyZSN3b3JkfHdvcmR9LiAgVGhlIHBhcmFtZXRlciBtdXN0IGJlIGFuIGluc3RhbmNlIG9mXG4gKiB7QGxpbmsgVUludH0gKG9yIHtAbGluayBVSW50QkV9KSB0aGF0IGlzIG5vIG1vcmUgdGhhbiA0IGJ5dGVzIHdpZGUuXG4gKlxuICogQHBhcmFtIHtib29sfSBbbXNiXSAtIGB0cnVlYCBpZiB0aGUgYml0IG51bWJlcmluZyBzdGFydHMgYXQgdGhlXG4gKiBtb3N0IHNpZ25pZmljYW50IGJpdCBvZiB0aGUgY29udGFpbmluZyB3b3JkOyBgZmFsc2VgIChkZWZhdWx0KSBpZlxuICogaXQgc3RhcnRzIGF0IHRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQgb2YgdGhlIGNvbnRhaW5pbmcgd29yZC4gIElmXG4gKiB0aGUgcGFyYW1ldGVyIGF0IHRoaXMgcG9zaXRpb24gaXMgYSBzdHJpbmcgYW5kIGBwcm9wZXJ0eWAgaXNcbiAqIGB1bmRlZmluZWRgIHRoZSB2YWx1ZSBvZiB0aGlzIGFyZ3VtZW50IHdpbGwgaW5zdGVhZCBiZSB1c2VkIGFzIHRoZVxuICogdmFsdWUgb2YgYHByb3BlcnR5YC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Byb3BlcnR5XSAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0uXG4gKlxuICogQGF1Z21lbnRzIHtMYXlvdXR9XG4gKi9cbmNsYXNzIEJpdFN0cnVjdHVyZSBleHRlbmRzIExheW91dCB7XG4gICAgY29uc3RydWN0b3Iod29yZCwgbXNiLCBwcm9wZXJ0eSkge1xuICAgICAgICBpZiAoISgod29yZCBpbnN0YW5jZW9mIFVJbnQpXG4gICAgICAgICAgICB8fCAod29yZCBpbnN0YW5jZW9mIFVJbnRCRSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd3b3JkIG11c3QgYmUgYSBVSW50IG9yIFVJbnRCRSBsYXlvdXQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCdzdHJpbmcnID09PSB0eXBlb2YgbXNiKVxuICAgICAgICAgICAgJiYgKHVuZGVmaW5lZCA9PT0gcHJvcGVydHkpKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IG1zYjtcbiAgICAgICAgICAgIG1zYiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICg0IDwgd29yZC5zcGFuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd29yZCBjYW5ub3QgZXhjZWVkIDMyIGJpdHMnKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcih3b3JkLnNwYW4sIHByb3BlcnR5KTtcbiAgICAgICAgLyoqIFRoZSBsYXlvdXQgdXNlZCBmb3IgdGhlIHBhY2tlZCB2YWx1ZS4gIHtAbGluayBCaXRGaWVsZH1cbiAgICAgICAgICogaW5zdGFuY2VzIGFyZSBwYWNrZWQgc2VxdWVudGlhbGx5IGRlcGVuZGluZyBvbiB7QGxpbmtcbiAgICAgICAgICogQml0U3RydWN0dXJlI21zYnxtc2J9LiAqL1xuICAgICAgICB0aGlzLndvcmQgPSB3b3JkO1xuICAgICAgICAvKiogV2hldGhlciB0aGUgYml0IHNlcXVlbmNlcyBhcmUgcGFja2VkIHN0YXJ0aW5nIGF0IHRoZSBtb3N0XG4gICAgICAgICAqIHNpZ25pZmljYW50IGJpdCBncm93aW5nIGRvd24gKGB0cnVlYCksIG9yIHRoZSBsZWFzdCBzaWduaWZpY2FudFxuICAgICAgICAgKiBiaXQgZ3Jvd2luZyB1cCAoYGZhbHNlYCkuXG4gICAgICAgICAqXG4gICAgICAgICAqICoqTk9URSoqIFJlZ2FyZGxlc3Mgb2YgdGhpcyB2YWx1ZSwgdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdCBvZlxuICAgICAgICAgKiBhbnkge0BsaW5rIEJpdEZpZWxkfSB2YWx1ZSBpcyB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0IG9mIHRoZVxuICAgICAgICAgKiBjb3JyZXNwb25kaW5nIHNlY3Rpb24gb2YgdGhlIHBhY2tlZCB2YWx1ZS4gKi9cbiAgICAgICAgdGhpcy5tc2IgPSAhIW1zYjtcbiAgICAgICAgLyoqIFRoZSBzZXF1ZW5jZSBvZiB7QGxpbmsgQml0RmllbGR9IGxheW91dHMgdGhhdCBjb21wcmlzZSB0aGVcbiAgICAgICAgICogcGFja2VkIHN0cnVjdHVyZS5cbiAgICAgICAgICpcbiAgICAgICAgICogKipOT1RFKiogVGhlIGFycmF5IHJlbWFpbnMgbXV0YWJsZSB0byBhbGxvdyBmaWVsZHMgdG8gYmUge0BsaW5rXG4gICAgICAgICAqIEJpdFN0cnVjdHVyZSNhZGRGaWVsZHxhZGRlZH0gYWZ0ZXIgY29uc3RydWN0aW9uLiAgVXNlcnMgc2hvdWxkXG4gICAgICAgICAqIG5vdCBtYW5pcHVsYXRlIHRoZSBjb250ZW50IG9mIHRoaXMgcHJvcGVydHkuKi9cbiAgICAgICAgdGhpcy5maWVsZHMgPSBbXTtcbiAgICAgICAgLyogU3RvcmFnZSBmb3IgdGhlIHZhbHVlLiAgQ2FwdHVyZSBhIHZhcmlhYmxlIGluc3RlYWQgb2YgdXNpbmcgYW5cbiAgICAgICAgICogaW5zdGFuY2UgcHJvcGVydHkgYmVjYXVzZSB3ZSBkb24ndCB3YW50IGFueXRoaW5nIHRvIGNoYW5nZSB0aGVcbiAgICAgICAgICogdmFsdWUgd2l0aG91dCBnb2luZyB0aHJvdWdoIHRoZSBtdXRhdG9yLiAqL1xuICAgICAgICBsZXQgdmFsdWUgPSAwO1xuICAgICAgICB0aGlzLl9wYWNrZWRTZXRWYWx1ZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZpeEJpdHdpc2VSZXN1bHQodik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcGFja2VkR2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBkZWNvZGUoYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCBkZXN0ID0gdGhpcy5tYWtlRGVzdGluYXRpb25PYmplY3QoKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLndvcmQuZGVjb2RlKGIsIG9mZnNldCk7XG4gICAgICAgIHRoaXMuX3BhY2tlZFNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgZm9yIChjb25zdCBmZCBvZiB0aGlzLmZpZWxkcykge1xuICAgICAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gZmQucHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBkZXN0W2ZkLnByb3BlcnR5XSA9IGZkLmRlY29kZShiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9XG4gICAgLyoqIEltcGxlbWVudCB7QGxpbmsgTGF5b3V0I2VuY29kZXxlbmNvZGV9IGZvciB7QGxpbmsgQml0U3RydWN0dXJlfS5cbiAgICAgKlxuICAgICAqIElmIGBzcmNgIGlzIG1pc3NpbmcgYSBwcm9wZXJ0eSBmb3IgYSBtZW1iZXIgd2l0aCBhIGRlZmluZWQge0BsaW5rXG4gICAgICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fSB0aGUgY29ycmVzcG9uZGluZyByZWdpb24gb2YgdGhlIHBhY2tlZFxuICAgICAqIHZhbHVlIGlzIGxlZnQgdW5tb2RpZmllZC4gIFVudXNlZCBiaXRzIGFyZSBhbHNvIGxlZnQgdW5tb2RpZmllZC4gKi9cbiAgICBlbmNvZGUoc3JjLCBiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy53b3JkLmRlY29kZShiLCBvZmZzZXQpO1xuICAgICAgICB0aGlzLl9wYWNrZWRTZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGZvciAoY29uc3QgZmQgb2YgdGhpcy5maWVsZHMpIHtcbiAgICAgICAgICAgIGlmICh1bmRlZmluZWQgIT09IGZkLnByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnYgPSBzcmNbZmQucHJvcGVydHldO1xuICAgICAgICAgICAgICAgIGlmICh1bmRlZmluZWQgIT09IGZ2KSB7XG4gICAgICAgICAgICAgICAgICAgIGZkLmVuY29kZShmdik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLndvcmQuZW5jb2RlKHRoaXMuX3BhY2tlZEdldFZhbHVlKCksIGIsIG9mZnNldCk7XG4gICAgfVxuICAgIC8qKiBSZWdpc3RlciBhIG5ldyBiaXRmaWVsZCB3aXRoIGEgY29udGFpbmluZyBiaXQgc3RydWN0dXJlLiAgVGhlXG4gICAgICogcmVzdWx0aW5nIGJpdGZpZWxkIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGJpdHMgLSBpbml0aWFsaXplciBmb3Ige0BsaW5rIEJpdEZpZWxkI2JpdHN8Yml0c30uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gICAgICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0JpdEZpZWxkfSAqL1xuICAgIGFkZEZpZWxkKGJpdHMsIHByb3BlcnR5KSB7XG4gICAgICAgIGNvbnN0IGJmID0gbmV3IEJpdEZpZWxkKHRoaXMsIGJpdHMsIHByb3BlcnR5KTtcbiAgICAgICAgdGhpcy5maWVsZHMucHVzaChiZik7XG4gICAgICAgIHJldHVybiBiZjtcbiAgICB9XG4gICAgLyoqIEFzIHdpdGgge0BsaW5rIEJpdFN0cnVjdHVyZSNhZGRGaWVsZHxhZGRGaWVsZH0gZm9yIHNpbmdsZS1iaXRcbiAgICAgKiBmaWVsZHMgd2l0aCBgYm9vbGVhbmAgdmFsdWUgcmVwcmVzZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gICAgICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICovXG4gICAgLy8gYEJvb2xlYW5gIGNvbmZsaWN0cyB3aXRoIHRoZSBuYXRpdmUgcHJpbWl0aXZlIHR5cGVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuICAgIGFkZEJvb2xlYW4ocHJvcGVydHkpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBteSBCb29sZWFuLCBub3QgdGhlIEphdmFzY3JpcHQgb25lLlxuICAgICAgICBjb25zdCBiZiA9IG5ldyBCb29sZWFuKHRoaXMsIHByb3BlcnR5KTtcbiAgICAgICAgdGhpcy5maWVsZHMucHVzaChiZik7XG4gICAgICAgIHJldHVybiBiZjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFjY2VzcyB0byB0aGUgYml0IGZpZWxkIGZvciBhIGdpdmVuIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IC0gdGhlIGJpdCBmaWVsZCBvZiBpbnRlcmVzdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0JpdEZpZWxkfSAtIHRoZSBmaWVsZCBhc3NvY2lhdGVkIHdpdGggYHByb3BlcnR5YCwgb3JcbiAgICAgKiB1bmRlZmluZWQgaWYgdGhlcmUgaXMgbm8gc3VjaCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBmaWVsZEZvcihwcm9wZXJ0eSkge1xuICAgICAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJvcGVydHkgbXVzdCBiZSBzdHJpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGZkIG9mIHRoaXMuZmllbGRzKSB7XG4gICAgICAgICAgICBpZiAoZmQucHJvcGVydHkgPT09IHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5CaXRTdHJ1Y3R1cmUgPSBCaXRTdHJ1Y3R1cmU7XG4vKipcbiAqIFJlcHJlc2VudCBhIHNlcXVlbmNlIG9mIGJpdHMgd2l0aGluIGEge0BsaW5rIEJpdFN0cnVjdHVyZX0uXG4gKlxuICogQWxsIGJpdCBmaWVsZCB2YWx1ZXMgYXJlIHJlcHJlc2VudGVkIGFzIHVuc2lnbmVkIGludGVnZXJzLlxuICpcbiAqICoqTk9URSoqIFVzZXIgY29kZSBzaG91bGQgbm90IGludm9rZSB0aGlzIGNvbnN0cnVjdG9yIGRpcmVjdGx5LlxuICogVXNlIHRoZSBjb250YWluZXIge0BsaW5rIEJpdFN0cnVjdHVyZSNhZGRGaWVsZHxhZGRGaWVsZH0gaGVscGVyXG4gKiBtZXRob2QuXG4gKlxuICogKipOT1RFKiogQml0RmllbGQgaW5zdGFuY2VzIGFyZSBub3QgaW5zdGFuY2VzIG9mIHtAbGluayBMYXlvdXR9XG4gKiBzaW5jZSB7QGxpbmsgTGF5b3V0I3NwYW58c3Bhbn0gbWVhc3VyZXMgOC1iaXQgdW5pdHMuXG4gKlxuICogQHBhcmFtIHtCaXRTdHJ1Y3R1cmV9IGNvbnRhaW5lciAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIEJpdEZpZWxkI2NvbnRhaW5lcnxjb250YWluZXJ9LlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBiaXRzIC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGluayBCaXRGaWVsZCNiaXRzfGJpdHN9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcGVydHldIC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGlua1xuICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS5cbiAqL1xuY2xhc3MgQml0RmllbGQge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgYml0cywgcHJvcGVydHkpIHtcbiAgICAgICAgaWYgKCEoY29udGFpbmVyIGluc3RhbmNlb2YgQml0U3RydWN0dXJlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY29udGFpbmVyIG11c3QgYmUgYSBCaXRTdHJ1Y3R1cmUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCFOdW1iZXIuaXNJbnRlZ2VyKGJpdHMpKSB8fCAoMCA+PSBiaXRzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYml0cyBtdXN0IGJlIHBvc2l0aXZlIGludGVnZXInKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b3RhbEJpdHMgPSA4ICogY29udGFpbmVyLnNwYW47XG4gICAgICAgIGNvbnN0IHVzZWRCaXRzID0gY29udGFpbmVyLmZpZWxkcy5yZWR1Y2UoKHN1bSwgZmQpID0+IHN1bSArIGZkLmJpdHMsIDApO1xuICAgICAgICBpZiAoKGJpdHMgKyB1c2VkQml0cykgPiB0b3RhbEJpdHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYml0cyB0b28gbG9uZyBmb3Igc3BhbiByZW1haW5kZXIgKCdcbiAgICAgICAgICAgICAgICArICh0b3RhbEJpdHMgLSB1c2VkQml0cykgKyAnIG9mICdcbiAgICAgICAgICAgICAgICArIHRvdGFsQml0cyArICcgcmVtYWluKScpO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBUaGUge0BsaW5rIEJpdFN0cnVjdHVyZX0gaW5zdGFuY2UgdG8gd2hpY2ggdGhpcyBiaXQgZmllbGRcbiAgICAgICAgICogYmVsb25ncy4gKi9cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIC8qKiBUaGUgc3BhbiBvZiB0aGlzIHZhbHVlIGluIGJpdHMuICovXG4gICAgICAgIHRoaXMuYml0cyA9IGJpdHM7XG4gICAgICAgIC8qKiBBIG1hc2sgb2Yge0BsaW5rIEJpdEZpZWxkI2JpdHN8Yml0c30gYml0cyBpc29sYXRpbmcgdmFsdWUgYml0c1xuICAgICAgICAgKiB0aGF0IGZpdCB3aXRoaW4gdGhlIGZpZWxkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGF0IGlzLCBpdCBtYXNrcyBhIHZhbHVlIHRoYXQgaGFzIG5vdCB5ZXQgYmVlbiBzaGlmdGVkIGludG9cbiAgICAgICAgICogcG9zaXRpb24gd2l0aGluIGl0cyBjb250YWluaW5nIHBhY2tlZCBpbnRlZ2VyLiAqL1xuICAgICAgICB0aGlzLnZhbHVlTWFzayA9ICgxIDw8IGJpdHMpIC0gMTtcbiAgICAgICAgaWYgKDMyID09PSBiaXRzKSB7IC8vIHNoaWZ0ZWQgdmFsdWUgb3V0IG9mIHJhbmdlXG4gICAgICAgICAgICB0aGlzLnZhbHVlTWFzayA9IDB4RkZGRkZGRkY7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIFRoZSBvZmZzZXQgb2YgdGhlIHZhbHVlIHdpdGhpbiB0aGUgY29udGFpbmluZyBwYWNrZWQgdW5zaWduZWRcbiAgICAgICAgICogaW50ZWdlci4gIFRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQgb2YgdGhlIHBhY2tlZCB2YWx1ZSBpcyBhdFxuICAgICAgICAgKiBvZmZzZXQgemVybywgcmVnYXJkbGVzcyBvZiBiaXQgb3JkZXJpbmcgdXNlZC4gKi9cbiAgICAgICAgdGhpcy5zdGFydCA9IHVzZWRCaXRzO1xuICAgICAgICBpZiAodGhpcy5jb250YWluZXIubXNiKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ID0gdG90YWxCaXRzIC0gdXNlZEJpdHMgLSBiaXRzO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBBIG1hc2sgb2Yge0BsaW5rIEJpdEZpZWxkI2JpdHN8Yml0c30gaXNvbGF0aW5nIHRoZSBmaWVsZCB2YWx1ZVxuICAgICAgICAgKiB3aXRoaW4gdGhlIGNvbnRhaW5pbmcgcGFja2VkIHVuc2lnbmVkIGludGVnZXIuICovXG4gICAgICAgIHRoaXMud29yZE1hc2sgPSBmaXhCaXR3aXNlUmVzdWx0KHRoaXMudmFsdWVNYXNrIDw8IHRoaXMuc3RhcnQpO1xuICAgICAgICAvKiogVGhlIHByb3BlcnR5IG5hbWUgdXNlZCB3aGVuIHRoaXMgYml0ZmllbGQgaXMgcmVwcmVzZW50ZWQgaW4gYW5cbiAgICAgICAgICogT2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBJbnRlbmRlZCB0byBiZSBmdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byB7QGxpbmtcbiAgICAgICAgICogTGF5b3V0I3Byb3BlcnR5fS5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgbGVmdCB1bmRlZmluZWQgdGhlIGNvcnJlc3BvbmRpbmcgc3BhbiBvZiBiaXRzIHdpbGwgYmVcbiAgICAgICAgICogdHJlYXRlZCBhcyBwYWRkaW5nOiBpdCB3aWxsIG5vdCBiZSBtdXRhdGVkIGJ5IHtAbGlua1xuICAgICAgICAgKiBMYXlvdXQjZW5jb2RlfGVuY29kZX0gbm9yIHJlcHJlc2VudGVkIGFzIGEgcHJvcGVydHkgaW4gdGhlXG4gICAgICAgICAqIGRlY29kZWQgT2JqZWN0LiAqL1xuICAgICAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgfVxuICAgIC8qKiBTdG9yZSBhIHZhbHVlIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgc3Vic2VxdWVuY2Ugb2YgdGhlIGNvbnRhaW5pbmdcbiAgICAgKiBiaXQgZmllbGQuICovXG4gICAgZGVjb2RlKGIsIG9mZnNldCkge1xuICAgICAgICBjb25zdCB3b3JkID0gdGhpcy5jb250YWluZXIuX3BhY2tlZEdldFZhbHVlKCk7XG4gICAgICAgIGNvbnN0IHdvcmRWYWx1ZSA9IGZpeEJpdHdpc2VSZXN1bHQod29yZCAmIHRoaXMud29yZE1hc2spO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHdvcmRWYWx1ZSA+Pj4gdGhpcy5zdGFydDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICAvKiogU3RvcmUgYSB2YWx1ZSBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIHN1YnNlcXVlbmNlIG9mIHRoZSBjb250YWluaW5nXG4gICAgICogYml0IGZpZWxkLlxuICAgICAqXG4gICAgICogKipOT1RFKiogVGhpcyBpcyBub3QgYSBzcGVjaWFsaXphdGlvbiBvZiB7QGxpbmtcbiAgICAgKiBMYXlvdXQjZW5jb2RlfExheW91dC5lbmNvZGV9IGFuZCB0aGVyZSBpcyBubyByZXR1cm4gdmFsdWUuICovXG4gICAgZW5jb2RlKHZhbHVlKSB7XG4gICAgICAgIGlmICgnbnVtYmVyJyAhPT0gdHlwZW9mIHZhbHVlXG4gICAgICAgICAgICB8fCAhTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSlcbiAgICAgICAgICAgIHx8ICh2YWx1ZSAhPT0gZml4Qml0d2lzZVJlc3VsdCh2YWx1ZSAmIHRoaXMudmFsdWVNYXNrKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IobmFtZVdpdGhQcm9wZXJ0eSgnQml0RmllbGQuZW5jb2RlJywgdGhpcylcbiAgICAgICAgICAgICAgICArICcgdmFsdWUgbXVzdCBiZSBpbnRlZ2VyIG5vdCBleGNlZWRpbmcgJyArIHRoaXMudmFsdWVNYXNrKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3b3JkID0gdGhpcy5jb250YWluZXIuX3BhY2tlZEdldFZhbHVlKCk7XG4gICAgICAgIGNvbnN0IHdvcmRWYWx1ZSA9IGZpeEJpdHdpc2VSZXN1bHQodmFsdWUgPDwgdGhpcy5zdGFydCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLl9wYWNrZWRTZXRWYWx1ZShmaXhCaXR3aXNlUmVzdWx0KHdvcmQgJiB+dGhpcy53b3JkTWFzaylcbiAgICAgICAgICAgIHwgd29yZFZhbHVlKTtcbiAgICB9XG59XG5leHBvcnRzLkJpdEZpZWxkID0gQml0RmllbGQ7XG4vKipcbiAqIFJlcHJlc2VudCBhIHNpbmdsZSBiaXQgd2l0aGluIGEge0BsaW5rIEJpdFN0cnVjdHVyZX0gYXMgYVxuICogSmF2YVNjcmlwdCBib29sZWFuLlxuICpcbiAqICoqTk9URSoqIFVzZXIgY29kZSBzaG91bGQgbm90IGludm9rZSB0aGlzIGNvbnN0cnVjdG9yIGRpcmVjdGx5LlxuICogVXNlIHRoZSBjb250YWluZXIge0BsaW5rIEJpdFN0cnVjdHVyZSNhZGRCb29sZWFufGFkZEJvb2xlYW59IGhlbHBlclxuICogbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7Qml0U3RydWN0dXJlfSBjb250YWluZXIgLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBCaXRGaWVsZCNjb250YWluZXJ8Y29udGFpbmVyfS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Byb3BlcnR5XSAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0uXG4gKlxuICogQGF1Z21lbnRzIHtCaXRGaWVsZH1cbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tZXh0ZW5kLW5hdGl2ZSAqL1xuY2xhc3MgQm9vbGVhbiBleHRlbmRzIEJpdEZpZWxkIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIHByb3BlcnR5KSB7XG4gICAgICAgIHN1cGVyKGNvbnRhaW5lciwgMSwgcHJvcGVydHkpO1xuICAgIH1cbiAgICAvKiogT3ZlcnJpZGUge0BsaW5rIEJpdEZpZWxkI2RlY29kZXxkZWNvZGV9IGZvciB7QGxpbmsgQm9vbGVhbnxCb29sZWFufS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSAqL1xuICAgIGRlY29kZShiLCBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuICEhc3VwZXIuZGVjb2RlKGIsIG9mZnNldCk7XG4gICAgfVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBlbmNvZGUodmFsdWUpIHtcbiAgICAgICAgaWYgKCdib29sZWFuJyA9PT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBCaXRGaWVsZCByZXF1aXJlcyBpbnRlZ2VyIHZhbHVlc1xuICAgICAgICAgICAgdmFsdWUgPSArdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZW5jb2RlKHZhbHVlKTtcbiAgICB9XG59XG5leHBvcnRzLkJvb2xlYW4gPSBCb29sZWFuO1xuLyogZXNsaW50LWVuYWJsZSBuby1leHRlbmQtbmF0aXZlICovXG4vKipcbiAqIENvbnRhaW4gYSBmaXhlZC1sZW5ndGggYmxvY2sgb2YgYXJiaXRyYXJ5IGRhdGEsIHJlcHJlc2VudGVkIGFzIGFcbiAqIFVpbnQ4QXJyYXkuXG4gKlxuICogKkZhY3RvcnkqOiB7QGxpbmsgbW9kdWxlOkxheW91dC5ibG9ifGJsb2J9XG4gKlxuICogQHBhcmFtIHsoTnVtYmVyfEV4dGVybmFsTGF5b3V0KX0gbGVuZ3RoIC0gaW5pdGlhbGl6ZXMge0BsaW5rXG4gKiBCbG9iI2xlbmd0aHxsZW5ndGh9LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcGVydHldIC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGlua1xuICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS5cbiAqXG4gKiBAYXVnbWVudHMge0xheW91dH1cbiAqL1xuY2xhc3MgQmxvYiBleHRlbmRzIExheW91dCB7XG4gICAgY29uc3RydWN0b3IobGVuZ3RoLCBwcm9wZXJ0eSkge1xuICAgICAgICBpZiAoISgoKGxlbmd0aCBpbnN0YW5jZW9mIEV4dGVybmFsTGF5b3V0KSAmJiBsZW5ndGguaXNDb3VudCgpKVxuICAgICAgICAgICAgfHwgKE51bWJlci5pc0ludGVnZXIobGVuZ3RoKSAmJiAoMCA8PSBsZW5ndGgpKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2xlbmd0aCBtdXN0IGJlIHBvc2l0aXZlIGludGVnZXIgJ1xuICAgICAgICAgICAgICAgICsgJ29yIGFuIHVuc2lnbmVkIGludGVnZXIgRXh0ZXJuYWxMYXlvdXQnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3BhbiA9IC0xO1xuICAgICAgICBpZiAoIShsZW5ndGggaW5zdGFuY2VvZiBFeHRlcm5hbExheW91dCkpIHtcbiAgICAgICAgICAgIHNwYW4gPSBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoc3BhbiwgcHJvcGVydHkpO1xuICAgICAgICAvKiogVGhlIG51bWJlciBvZiBieXRlcyBpbiB0aGUgYmxvYi5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtYXkgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlciwgb3IgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rXG4gICAgICAgICAqIEV4dGVybmFsTGF5b3V0fSB0aGF0IHNhdGlzZmllcyB7QGxpbmtcbiAgICAgICAgICogRXh0ZXJuYWxMYXlvdXQjaXNDb3VudHxpc0NvdW50KCl9LiAqL1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGdldFNwYW4oYiwgb2Zmc2V0KSB7XG4gICAgICAgIGxldCBzcGFuID0gdGhpcy5zcGFuO1xuICAgICAgICBpZiAoMCA+IHNwYW4pIHtcbiAgICAgICAgICAgIHNwYW4gPSB0aGlzLmxlbmd0aC5kZWNvZGUoYiwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BhbjtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGRlY29kZShiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGxldCBzcGFuID0gdGhpcy5zcGFuO1xuICAgICAgICBpZiAoMCA+IHNwYW4pIHtcbiAgICAgICAgICAgIHNwYW4gPSB0aGlzLmxlbmd0aC5kZWNvZGUoYiwgb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdWludDhBcnJheVRvQnVmZmVyKGIpLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc3Bhbik7XG4gICAgfVxuICAgIC8qKiBJbXBsZW1lbnQge0BsaW5rIExheW91dCNlbmNvZGV8ZW5jb2RlfSBmb3Ige0BsaW5rIEJsb2J9LlxuICAgICAqXG4gICAgICogKipOT1RFKiogSWYge0BsaW5rIExheW91dCNjb3VudHxjb3VudH0gaXMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rXG4gICAgICogRXh0ZXJuYWxMYXlvdXR9IHRoZW4gdGhlIGxlbmd0aCBvZiBgc3JjYCB3aWxsIGJlIGVuY29kZWQgYXMgdGhlXG4gICAgICogY291bnQgYWZ0ZXIgYHNyY2AgaXMgZW5jb2RlZC4gKi9cbiAgICBlbmNvZGUoc3JjLCBiLCBvZmZzZXQpIHtcbiAgICAgICAgbGV0IHNwYW4gPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoIGluc3RhbmNlb2YgRXh0ZXJuYWxMYXlvdXQpIHtcbiAgICAgICAgICAgIHNwYW4gPSBzcmMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHNyYyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgc3BhbiA9PT0gc3JjLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IobmFtZVdpdGhQcm9wZXJ0eSgnQmxvYi5lbmNvZGUnLCB0aGlzKVxuICAgICAgICAgICAgICAgICsgJyByZXF1aXJlcyAobGVuZ3RoICcgKyBzcGFuICsgJykgVWludDhBcnJheSBhcyBzcmMnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKG9mZnNldCArIHNwYW4pID4gYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdlbmNvZGluZyBvdmVycnVucyBVaW50OEFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3JjQnVmZmVyID0gdWludDhBcnJheVRvQnVmZmVyKHNyYyk7XG4gICAgICAgIHVpbnQ4QXJyYXlUb0J1ZmZlcihiKS53cml0ZShzcmNCdWZmZXIudG9TdHJpbmcoJ2hleCcpLCBvZmZzZXQsIHNwYW4sICdoZXgnKTtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoIGluc3RhbmNlb2YgRXh0ZXJuYWxMYXlvdXQpIHtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoLmVuY29kZShzcGFuLCBiLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGFuO1xuICAgIH1cbn1cbmV4cG9ydHMuQmxvYiA9IEJsb2I7XG4vKipcbiAqIENvbnRhaW4gYSBgTlVMYC10ZXJtaW5hdGVkIFVURjggc3RyaW5nLlxuICpcbiAqICpGYWN0b3J5Kjoge0BsaW5rIG1vZHVsZTpMYXlvdXQuY3N0cnxjc3RyfVxuICpcbiAqICoqTk9URSoqIEFueSBVVEY4IHN0cmluZyB0aGF0IGluY29ycG9yYXRlcyBhIHplcm8tdmFsdWVkIGJ5dGUgd2lsbFxuICogbm90IGJlIGNvcnJlY3RseSBkZWNvZGVkIGJ5IHRoaXMgbGF5b3V0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcGVydHldIC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGlua1xuICogTGF5b3V0I3Byb3BlcnR5fHByb3BlcnR5fS5cbiAqXG4gKiBAYXVnbWVudHMge0xheW91dH1cbiAqL1xuY2xhc3MgQ1N0cmluZyBleHRlbmRzIExheW91dCB7XG4gICAgY29uc3RydWN0b3IocHJvcGVydHkpIHtcbiAgICAgICAgc3VwZXIoLTEsIHByb3BlcnR5KTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGdldFNwYW4oYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjaGVja1VpbnQ4QXJyYXkoYik7XG4gICAgICAgIGxldCBpZHggPSBvZmZzZXQ7XG4gICAgICAgIHdoaWxlICgoaWR4IDwgYi5sZW5ndGgpICYmICgwICE9PSBiW2lkeF0pKSB7XG4gICAgICAgICAgICBpZHggKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMSArIGlkeCAtIG9mZnNldDtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGRlY29kZShiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGNvbnN0IHNwYW4gPSB0aGlzLmdldFNwYW4oYiwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHVpbnQ4QXJyYXlUb0J1ZmZlcihiKS5zbGljZShvZmZzZXQsIG9mZnNldCArIHNwYW4gLSAxKS50b1N0cmluZygndXRmLTgnKTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGVuY29kZShzcmMsIGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgLyogTXVzdCBmb3JjZSB0aGlzIHRvIGEgc3RyaW5nLCBsZXN0IGl0IGJlIGEgbnVtYmVyIGFuZCB0aGVcbiAgICAgICAgICogXCJ1dGY4LWVuY29kaW5nXCIgYmVsb3cgYWN0dWFsbHkgYWxsb2NhdGUgYSBidWZmZXIgb2YgbGVuZ3RoXG4gICAgICAgICAqIHNyYyAqL1xuICAgICAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBzcmMpIHtcbiAgICAgICAgICAgIHNyYyA9IFN0cmluZyhzcmMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNyY2IgPSBidWZmZXJfMS5CdWZmZXIuZnJvbShzcmMsICd1dGY4Jyk7XG4gICAgICAgIGNvbnN0IHNwYW4gPSBzcmNiLmxlbmd0aDtcbiAgICAgICAgaWYgKChvZmZzZXQgKyBzcGFuKSA+IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZW5jb2Rpbmcgb3ZlcnJ1bnMgQnVmZmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnVmZmVyID0gdWludDhBcnJheVRvQnVmZmVyKGIpO1xuICAgICAgICBzcmNiLmNvcHkoYnVmZmVyLCBvZmZzZXQpO1xuICAgICAgICBidWZmZXJbb2Zmc2V0ICsgc3Bhbl0gPSAwO1xuICAgICAgICByZXR1cm4gc3BhbiArIDE7XG4gICAgfVxufVxuZXhwb3J0cy5DU3RyaW5nID0gQ1N0cmluZztcbi8qKlxuICogQ29udGFpbiBhIFVURjggc3RyaW5nIHdpdGggaW1wbGljaXQgbGVuZ3RoLlxuICpcbiAqICpGYWN0b3J5Kjoge0BsaW5rIG1vZHVsZTpMYXlvdXQudXRmOHx1dGY4fVxuICpcbiAqICoqTk9URSoqIEJlY2F1c2UgdGhlIGxlbmd0aCBpcyBpbXBsaWNpdCBpbiB0aGUgc2l6ZSBvZiB0aGUgYnVmZmVyXG4gKiB0aGlzIGxheW91dCBzaG91bGQgYmUgdXNlZCBvbmx5IGluIGlzb2xhdGlvbiwgb3IgaW4gYSBzaXR1YXRpb25cbiAqIHdoZXJlIHRoZSBsZW5ndGggY2FuIGJlIGV4cHJlc3NlZCBieSBvcGVyYXRpbmcgb24gYSBzbGljZSBvZiB0aGVcbiAqIGNvbnRhaW5pbmcgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWF4U3Bhbl0gLSB0aGUgbWF4aW11bSBsZW5ndGggYWxsb3dlZCBmb3IgZW5jb2RlZFxuICogc3RyaW5nIGNvbnRlbnQuICBJZiBub3QgcHJvdmlkZWQgdGhlcmUgaXMgbm8gYm91bmQgb24gdGhlIGFsbG93ZWRcbiAqIGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0eV0gLSBpbml0aWFsaXplciBmb3Ige0BsaW5rXG4gKiBMYXlvdXQjcHJvcGVydHl8cHJvcGVydHl9LlxuICpcbiAqIEBhdWdtZW50cyB7TGF5b3V0fVxuICovXG5jbGFzcyBVVEY4IGV4dGVuZHMgTGF5b3V0IHtcbiAgICBjb25zdHJ1Y3RvcihtYXhTcGFuLCBwcm9wZXJ0eSkge1xuICAgICAgICBpZiAoKCdzdHJpbmcnID09PSB0eXBlb2YgbWF4U3BhbikgJiYgKHVuZGVmaW5lZCA9PT0gcHJvcGVydHkpKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eSA9IG1heFNwYW47XG4gICAgICAgICAgICBtYXhTcGFuID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1bmRlZmluZWQgPT09IG1heFNwYW4pIHtcbiAgICAgICAgICAgIG1heFNwYW4gPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghTnVtYmVyLmlzSW50ZWdlcihtYXhTcGFuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4U3BhbiBtdXN0IGJlIGFuIGludGVnZXInKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcigtMSwgcHJvcGVydHkpO1xuICAgICAgICAvKiogVGhlIG1heGltdW0gc3BhbiBvZiB0aGUgbGF5b3V0IGluIGJ5dGVzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBQb3NpdGl2ZSB2YWx1ZXMgYXJlIGdlbmVyYWxseSBleHBlY3RlZC4gIFplcm8gaXMgYWJub3JtYWwuXG4gICAgICAgICAqIEF0dGVtcHRzIHRvIGVuY29kZSBvciBkZWNvZGUgYSB2YWx1ZSB0aGF0IGV4Y2VlZHMgdGhpcyBsZW5ndGhcbiAgICAgICAgICogd2lsbCB0aHJvdyBhIGBSYW5nZUVycm9yYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQSBuZWdhdGl2ZSB2YWx1ZSBpbmRpY2F0ZXMgdGhhdCB0aGVyZSBpcyBubyBib3VuZCBvbiB0aGUgbGVuZ3RoXG4gICAgICAgICAqIG9mIHRoZSBjb250ZW50LiAqL1xuICAgICAgICB0aGlzLm1heFNwYW4gPSBtYXhTcGFuO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZ2V0U3BhbihiLCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGNoZWNrVWludDhBcnJheShiKTtcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gb2Zmc2V0O1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZGVjb2RlKGIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgY29uc3Qgc3BhbiA9IHRoaXMuZ2V0U3BhbihiLCBvZmZzZXQpO1xuICAgICAgICBpZiAoKDAgPD0gdGhpcy5tYXhTcGFuKVxuICAgICAgICAgICAgJiYgKHRoaXMubWF4U3BhbiA8IHNwYW4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGV4dCBsZW5ndGggZXhjZWVkcyBtYXhTcGFuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVpbnQ4QXJyYXlUb0J1ZmZlcihiKS5zbGljZShvZmZzZXQsIG9mZnNldCArIHNwYW4pLnRvU3RyaW5nKCd1dGYtOCcpO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZW5jb2RlKHNyYywgYiwgb2Zmc2V0ID0gMCkge1xuICAgICAgICAvKiBNdXN0IGZvcmNlIHRoaXMgdG8gYSBzdHJpbmcsIGxlc3QgaXQgYmUgYSBudW1iZXIgYW5kIHRoZVxuICAgICAgICAgKiBcInV0ZjgtZW5jb2RpbmdcIiBiZWxvdyBhY3R1YWxseSBhbGxvY2F0ZSBhIGJ1ZmZlciBvZiBsZW5ndGhcbiAgICAgICAgICogc3JjICovXG4gICAgICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHNyYykge1xuICAgICAgICAgICAgc3JjID0gU3RyaW5nKHNyYyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3JjYiA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKHNyYywgJ3V0ZjgnKTtcbiAgICAgICAgY29uc3Qgc3BhbiA9IHNyY2IubGVuZ3RoO1xuICAgICAgICBpZiAoKDAgPD0gdGhpcy5tYXhTcGFuKVxuICAgICAgICAgICAgJiYgKHRoaXMubWF4U3BhbiA8IHNwYW4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGV4dCBsZW5ndGggZXhjZWVkcyBtYXhTcGFuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChvZmZzZXQgKyBzcGFuKSA+IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZW5jb2Rpbmcgb3ZlcnJ1bnMgQnVmZmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3JjYi5jb3B5KHVpbnQ4QXJyYXlUb0J1ZmZlcihiKSwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfVxufVxuZXhwb3J0cy5VVEY4ID0gVVRGODtcbi8qKlxuICogQ29udGFpbiBhIGNvbnN0YW50IHZhbHVlLlxuICpcbiAqIFRoaXMgbGF5b3V0IG1heSBiZSB1c2VkIGluIGNhc2VzIHdoZXJlIGEgSmF2YVNjcmlwdCB2YWx1ZSBjYW4gYmVcbiAqIGluZmVycmVkIHdpdGhvdXQgYW4gZXhwcmVzc2lvbiBpbiB0aGUgYmluYXJ5IGVuY29kaW5nLiAgQW4gZXhhbXBsZVxuICogd291bGQgYmUgYSB7QGxpbmsgVmFyaWFudExheW91dHx2YXJpYW50IGxheW91dH0gd2hlcmUgdGhlIGNvbnRlbnRcbiAqIGlzIGltcGxpZWQgYnkgdGhlIHVuaW9uIHtAbGluayBVbmlvbiNkaXNjcmltaW5hdG9yfGRpc2NyaW1pbmF0b3J9LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fE51bWJlcnxTdHJpbmd9IHZhbHVlIC0gaW5pdGlhbGl6ZXIgZm9yIHtAbGlua1xuICogQ29uc3RhbnQjdmFsdWV8dmFsdWV9LiAgSWYgdGhlIHZhbHVlIGlzIGFuIG9iamVjdCAob3IgYXJyYXkpIGFuZFxuICogdGhlIGFwcGxpY2F0aW9uIGludGVuZHMgdGhlIG9iamVjdCB0byByZW1haW4gdW5jaGFuZ2VkIHJlZ2FyZGxlc3NcbiAqIG9mIHdoYXQgaXMgZG9uZSB0byB2YWx1ZXMgZGVjb2RlZCBieSB0aGlzIGxheW91dCwgdGhlIHZhbHVlIHNob3VsZFxuICogYmUgZnJvemVuIHByaW9yIHBhc3NpbmcgaXQgdG8gdGhpcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BlcnR5XSAtIGluaXRpYWxpemVyIGZvciB7QGxpbmtcbiAqIExheW91dCNwcm9wZXJ0eXxwcm9wZXJ0eX0uXG4gKlxuICogQGF1Z21lbnRzIHtMYXlvdXR9XG4gKi9cbmNsYXNzIENvbnN0YW50IGV4dGVuZHMgTGF5b3V0IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgcHJvcGVydHkpIHtcbiAgICAgICAgc3VwZXIoMCwgcHJvcGVydHkpO1xuICAgICAgICAvKiogVGhlIHZhbHVlIHByb2R1Y2VkIGJ5IHRoaXMgY29uc3RhbnQgd2hlbiB0aGUgbGF5b3V0IGlzIHtAbGlua1xuICAgICAgICAgKiBDb25zdGFudCNkZWNvZGV8ZGVjb2RlZH0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEFueSBKYXZhU2NyaXB0IHZhbHVlIGluY2x1ZGluZyBgbnVsbGAgYW5kIGB1bmRlZmluZWRgIGlzXG4gICAgICAgICAqIHBlcm1pdHRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogKipXQVJOSU5HKiogSWYgYHZhbHVlYCBwYXNzZWQgaW4gdGhlIGNvbnN0cnVjdG9yIHdhcyBub3RcbiAgICAgICAgICogZnJvemVuLCBpdCBpcyBwb3NzaWJsZSBmb3IgdXNlcnMgb2YgZGVjb2RlZCB2YWx1ZXMgdG8gY2hhbmdlXG4gICAgICAgICAqIHRoZSBjb250ZW50IG9mIHRoZSB2YWx1ZS4gKi9cbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgZGVjb2RlKGIsIG9mZnNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGVuY29kZShzcmMsIGIsIG9mZnNldCkge1xuICAgICAgICAvKiBDb25zdGFudHMgdGFrZSBubyBzcGFjZSAqL1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG5leHBvcnRzLkNvbnN0YW50ID0gQ29uc3RhbnQ7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIEdyZWVkeUNvdW50fS4gKi9cbmV4cG9ydHMuZ3JlZWR5ID0gKChlbGVtZW50U3BhbiwgcHJvcGVydHkpID0+IG5ldyBHcmVlZHlDb3VudChlbGVtZW50U3BhbiwgcHJvcGVydHkpKTtcbi8qKiBGYWN0b3J5IGZvciB7QGxpbmsgT2Zmc2V0TGF5b3V0fS4gKi9cbmV4cG9ydHMub2Zmc2V0ID0gKChsYXlvdXQsIG9mZnNldCwgcHJvcGVydHkpID0+IG5ldyBPZmZzZXRMYXlvdXQobGF5b3V0LCBvZmZzZXQsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIFVJbnR8dW5zaWduZWQgaW50IGxheW91dHN9IHNwYW5uaW5nIG9uZVxuICogYnl0ZS4gKi9cbmV4cG9ydHMudTggPSAoKHByb3BlcnR5KSA9PiBuZXcgVUludCgxLCBwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBVSW50fGxpdHRsZS1lbmRpYW4gdW5zaWduZWQgaW50IGxheW91dHN9XG4gKiBzcGFubmluZyB0d28gYnl0ZXMuICovXG5leHBvcnRzLnUxNiA9ICgocHJvcGVydHkpID0+IG5ldyBVSW50KDIsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIFVJbnR8bGl0dGxlLWVuZGlhbiB1bnNpZ25lZCBpbnQgbGF5b3V0c31cbiAqIHNwYW5uaW5nIHRocmVlIGJ5dGVzLiAqL1xuZXhwb3J0cy51MjQgPSAoKHByb3BlcnR5KSA9PiBuZXcgVUludCgzLCBwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBVSW50fGxpdHRsZS1lbmRpYW4gdW5zaWduZWQgaW50IGxheW91dHN9XG4gKiBzcGFubmluZyBmb3VyIGJ5dGVzLiAqL1xuZXhwb3J0cy51MzIgPSAoKHByb3BlcnR5KSA9PiBuZXcgVUludCg0LCBwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBVSW50fGxpdHRsZS1lbmRpYW4gdW5zaWduZWQgaW50IGxheW91dHN9XG4gKiBzcGFubmluZyBmaXZlIGJ5dGVzLiAqL1xuZXhwb3J0cy51NDAgPSAoKHByb3BlcnR5KSA9PiBuZXcgVUludCg1LCBwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBVSW50fGxpdHRsZS1lbmRpYW4gdW5zaWduZWQgaW50IGxheW91dHN9XG4gKiBzcGFubmluZyBzaXggYnl0ZXMuICovXG5leHBvcnRzLnU0OCA9ICgocHJvcGVydHkpID0+IG5ldyBVSW50KDYsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIE5lYXJVSW50NjR8bGl0dGxlLWVuZGlhbiB1bnNpZ25lZCBpbnRcbiAqIGxheW91dHN9IGludGVycHJldGVkIGFzIE51bWJlcnMuICovXG5leHBvcnRzLm51NjQgPSAoKHByb3BlcnR5KSA9PiBuZXcgTmVhclVJbnQ2NChwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBVSW50fGJpZy1lbmRpYW4gdW5zaWduZWQgaW50IGxheW91dHN9XG4gKiBzcGFubmluZyB0d28gYnl0ZXMuICovXG5leHBvcnRzLnUxNmJlID0gKChwcm9wZXJ0eSkgPT4gbmV3IFVJbnRCRSgyLCBwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBVSW50fGJpZy1lbmRpYW4gdW5zaWduZWQgaW50IGxheW91dHN9XG4gKiBzcGFubmluZyB0aHJlZSBieXRlcy4gKi9cbmV4cG9ydHMudTI0YmUgPSAoKHByb3BlcnR5KSA9PiBuZXcgVUludEJFKDMsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIFVJbnR8YmlnLWVuZGlhbiB1bnNpZ25lZCBpbnQgbGF5b3V0c31cbiAqIHNwYW5uaW5nIGZvdXIgYnl0ZXMuICovXG5leHBvcnRzLnUzMmJlID0gKChwcm9wZXJ0eSkgPT4gbmV3IFVJbnRCRSg0LCBwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBVSW50fGJpZy1lbmRpYW4gdW5zaWduZWQgaW50IGxheW91dHN9XG4gKiBzcGFubmluZyBmaXZlIGJ5dGVzLiAqL1xuZXhwb3J0cy51NDBiZSA9ICgocHJvcGVydHkpID0+IG5ldyBVSW50QkUoNSwgcHJvcGVydHkpKTtcbi8qKiBGYWN0b3J5IGZvciB7QGxpbmsgVUludHxiaWctZW5kaWFuIHVuc2lnbmVkIGludCBsYXlvdXRzfVxuICogc3Bhbm5pbmcgc2l4IGJ5dGVzLiAqL1xuZXhwb3J0cy51NDhiZSA9ICgocHJvcGVydHkpID0+IG5ldyBVSW50QkUoNiwgcHJvcGVydHkpKTtcbi8qKiBGYWN0b3J5IGZvciB7QGxpbmsgTmVhclVJbnQ2NEJFfGJpZy1lbmRpYW4gdW5zaWduZWQgaW50XG4gKiBsYXlvdXRzfSBpbnRlcnByZXRlZCBhcyBOdW1iZXJzLiAqL1xuZXhwb3J0cy5udTY0YmUgPSAoKHByb3BlcnR5KSA9PiBuZXcgTmVhclVJbnQ2NEJFKHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIEludHxzaWduZWQgaW50IGxheW91dHN9IHNwYW5uaW5nIG9uZVxuICogYnl0ZS4gKi9cbmV4cG9ydHMuczggPSAoKHByb3BlcnR5KSA9PiBuZXcgSW50KDEsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIEludHxsaXR0bGUtZW5kaWFuIHNpZ25lZCBpbnQgbGF5b3V0c31cbiAqIHNwYW5uaW5nIHR3byBieXRlcy4gKi9cbmV4cG9ydHMuczE2ID0gKChwcm9wZXJ0eSkgPT4gbmV3IEludCgyLCBwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBJbnR8bGl0dGxlLWVuZGlhbiBzaWduZWQgaW50IGxheW91dHN9XG4gKiBzcGFubmluZyB0aHJlZSBieXRlcy4gKi9cbmV4cG9ydHMuczI0ID0gKChwcm9wZXJ0eSkgPT4gbmV3IEludCgzLCBwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBJbnR8bGl0dGxlLWVuZGlhbiBzaWduZWQgaW50IGxheW91dHN9XG4gKiBzcGFubmluZyBmb3VyIGJ5dGVzLiAqL1xuZXhwb3J0cy5zMzIgPSAoKHByb3BlcnR5KSA9PiBuZXcgSW50KDQsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIEludHxsaXR0bGUtZW5kaWFuIHNpZ25lZCBpbnQgbGF5b3V0c31cbiAqIHNwYW5uaW5nIGZpdmUgYnl0ZXMuICovXG5leHBvcnRzLnM0MCA9ICgocHJvcGVydHkpID0+IG5ldyBJbnQoNSwgcHJvcGVydHkpKTtcbi8qKiBGYWN0b3J5IGZvciB7QGxpbmsgSW50fGxpdHRsZS1lbmRpYW4gc2lnbmVkIGludCBsYXlvdXRzfVxuICogc3Bhbm5pbmcgc2l4IGJ5dGVzLiAqL1xuZXhwb3J0cy5zNDggPSAoKHByb3BlcnR5KSA9PiBuZXcgSW50KDYsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIE5lYXJJbnQ2NHxsaXR0bGUtZW5kaWFuIHNpZ25lZCBpbnQgbGF5b3V0c31cbiAqIGludGVycHJldGVkIGFzIE51bWJlcnMuICovXG5leHBvcnRzLm5zNjQgPSAoKHByb3BlcnR5KSA9PiBuZXcgTmVhckludDY0KHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIEludHxiaWctZW5kaWFuIHNpZ25lZCBpbnQgbGF5b3V0c31cbiAqIHNwYW5uaW5nIHR3byBieXRlcy4gKi9cbmV4cG9ydHMuczE2YmUgPSAoKHByb3BlcnR5KSA9PiBuZXcgSW50QkUoMiwgcHJvcGVydHkpKTtcbi8qKiBGYWN0b3J5IGZvciB7QGxpbmsgSW50fGJpZy1lbmRpYW4gc2lnbmVkIGludCBsYXlvdXRzfVxuICogc3Bhbm5pbmcgdGhyZWUgYnl0ZXMuICovXG5leHBvcnRzLnMyNGJlID0gKChwcm9wZXJ0eSkgPT4gbmV3IEludEJFKDMsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIEludHxiaWctZW5kaWFuIHNpZ25lZCBpbnQgbGF5b3V0c31cbiAqIHNwYW5uaW5nIGZvdXIgYnl0ZXMuICovXG5leHBvcnRzLnMzMmJlID0gKChwcm9wZXJ0eSkgPT4gbmV3IEludEJFKDQsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIEludHxiaWctZW5kaWFuIHNpZ25lZCBpbnQgbGF5b3V0c31cbiAqIHNwYW5uaW5nIGZpdmUgYnl0ZXMuICovXG5leHBvcnRzLnM0MGJlID0gKChwcm9wZXJ0eSkgPT4gbmV3IEludEJFKDUsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIEludHxiaWctZW5kaWFuIHNpZ25lZCBpbnQgbGF5b3V0c31cbiAqIHNwYW5uaW5nIHNpeCBieXRlcy4gKi9cbmV4cG9ydHMuczQ4YmUgPSAoKHByb3BlcnR5KSA9PiBuZXcgSW50QkUoNiwgcHJvcGVydHkpKTtcbi8qKiBGYWN0b3J5IGZvciB7QGxpbmsgTmVhckludDY0QkV8YmlnLWVuZGlhbiBzaWduZWQgaW50IGxheW91dHN9XG4gKiBpbnRlcnByZXRlZCBhcyBOdW1iZXJzLiAqL1xuZXhwb3J0cy5uczY0YmUgPSAoKHByb3BlcnR5KSA9PiBuZXcgTmVhckludDY0QkUocHJvcGVydHkpKTtcbi8qKiBGYWN0b3J5IGZvciB7QGxpbmsgRmxvYXR8bGl0dGxlLWVuZGlhbiAzMi1iaXQgZmxvYXRpbmcgcG9pbnR9IHZhbHVlcy4gKi9cbmV4cG9ydHMuZjMyID0gKChwcm9wZXJ0eSkgPT4gbmV3IEZsb2F0KHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIEZsb2F0QkV8YmlnLWVuZGlhbiAzMi1iaXQgZmxvYXRpbmcgcG9pbnR9IHZhbHVlcy4gKi9cbmV4cG9ydHMuZjMyYmUgPSAoKHByb3BlcnR5KSA9PiBuZXcgRmxvYXRCRShwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBEb3VibGV8bGl0dGxlLWVuZGlhbiA2NC1iaXQgZmxvYXRpbmcgcG9pbnR9IHZhbHVlcy4gKi9cbmV4cG9ydHMuZjY0ID0gKChwcm9wZXJ0eSkgPT4gbmV3IERvdWJsZShwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBEb3VibGVCRXxiaWctZW5kaWFuIDY0LWJpdCBmbG9hdGluZyBwb2ludH0gdmFsdWVzLiAqL1xuZXhwb3J0cy5mNjRiZSA9ICgocHJvcGVydHkpID0+IG5ldyBEb3VibGVCRShwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBTdHJ1Y3R1cmV9IHZhbHVlcy4gKi9cbmV4cG9ydHMuc3RydWN0ID0gKChmaWVsZHMsIHByb3BlcnR5LCBkZWNvZGVQcmVmaXhlcykgPT4gbmV3IFN0cnVjdHVyZShmaWVsZHMsIHByb3BlcnR5LCBkZWNvZGVQcmVmaXhlcykpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBCaXRTdHJ1Y3R1cmV9IHZhbHVlcy4gKi9cbmV4cG9ydHMuYml0cyA9ICgod29yZCwgbXNiLCBwcm9wZXJ0eSkgPT4gbmV3IEJpdFN0cnVjdHVyZSh3b3JkLCBtc2IsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIFNlcXVlbmNlfSB2YWx1ZXMuICovXG5leHBvcnRzLnNlcSA9ICgoZWxlbWVudExheW91dCwgY291bnQsIHByb3BlcnR5KSA9PiBuZXcgU2VxdWVuY2UoZWxlbWVudExheW91dCwgY291bnQsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIFVuaW9ufSB2YWx1ZXMuICovXG5leHBvcnRzLnVuaW9uID0gKChkaXNjciwgZGVmYXVsdExheW91dCwgcHJvcGVydHkpID0+IG5ldyBVbmlvbihkaXNjciwgZGVmYXVsdExheW91dCwgcHJvcGVydHkpKTtcbi8qKiBGYWN0b3J5IGZvciB7QGxpbmsgVW5pb25MYXlvdXREaXNjcmltaW5hdG9yfSB2YWx1ZXMuICovXG5leHBvcnRzLnVuaW9uTGF5b3V0RGlzY3JpbWluYXRvciA9ICgobGF5b3V0LCBwcm9wZXJ0eSkgPT4gbmV3IFVuaW9uTGF5b3V0RGlzY3JpbWluYXRvcihsYXlvdXQsIHByb3BlcnR5KSk7XG4vKiogRmFjdG9yeSBmb3Ige0BsaW5rIEJsb2J9IHZhbHVlcy4gKi9cbmV4cG9ydHMuYmxvYiA9ICgobGVuZ3RoLCBwcm9wZXJ0eSkgPT4gbmV3IEJsb2IobGVuZ3RoLCBwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBDU3RyaW5nfSB2YWx1ZXMuICovXG5leHBvcnRzLmNzdHIgPSAoKHByb3BlcnR5KSA9PiBuZXcgQ1N0cmluZyhwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBVVEY4fSB2YWx1ZXMuICovXG5leHBvcnRzLnV0ZjggPSAoKG1heFNwYW4sIHByb3BlcnR5KSA9PiBuZXcgVVRGOChtYXhTcGFuLCBwcm9wZXJ0eSkpO1xuLyoqIEZhY3RvcnkgZm9yIHtAbGluayBDb25zdGFudH0gdmFsdWVzLiAqL1xuZXhwb3J0cy5jb25zdGFudCA9ICgodmFsdWUsIHByb3BlcnR5KSA9PiBuZXcgQ29uc3RhbnQodmFsdWUsIHByb3BlcnR5KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MYXlvdXQuanMubWFwIiwiJ3VzZSBzdHJpY3QnXG4vLyBiYXNlLXggZW5jb2RpbmcgLyBkZWNvZGluZ1xuLy8gQ29weXJpZ2h0IChjKSAyMDE4IGJhc2UteCBjb250cmlidXRvcnNcbi8vIENvcHlyaWdodCAoYykgMjAxNC0yMDE4IFRoZSBCaXRjb2luIENvcmUgZGV2ZWxvcGVycyAoYmFzZTU4LmNwcClcbi8vIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgc29mdHdhcmUgbGljZW5zZSwgc2VlIHRoZSBhY2NvbXBhbnlpbmdcbi8vIGZpbGUgTElDRU5TRSBvciBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocC5cbi8vIEB0cy1pZ25vcmVcbnZhciBfQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbmZ1bmN0aW9uIGJhc2UgKEFMUEhBQkVUKSB7XG4gIGlmIChBTFBIQUJFVC5sZW5ndGggPj0gMjU1KSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscGhhYmV0IHRvbyBsb25nJykgfVxuICB2YXIgQkFTRV9NQVAgPSBuZXcgVWludDhBcnJheSgyNTYpXG4gIGZvciAodmFyIGogPSAwOyBqIDwgQkFTRV9NQVAubGVuZ3RoOyBqKyspIHtcbiAgICBCQVNFX01BUFtqXSA9IDI1NVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgQUxQSEFCRVQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgeCA9IEFMUEhBQkVULmNoYXJBdChpKVxuICAgIHZhciB4YyA9IHguY2hhckNvZGVBdCgwKVxuICAgIGlmIChCQVNFX01BUFt4Y10gIT09IDI1NSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKHggKyAnIGlzIGFtYmlndW91cycpIH1cbiAgICBCQVNFX01BUFt4Y10gPSBpXG4gIH1cbiAgdmFyIEJBU0UgPSBBTFBIQUJFVC5sZW5ndGhcbiAgdmFyIExFQURFUiA9IEFMUEhBQkVULmNoYXJBdCgwKVxuICB2YXIgRkFDVE9SID0gTWF0aC5sb2coQkFTRSkgLyBNYXRoLmxvZygyNTYpIC8vIGxvZyhCQVNFKSAvIGxvZygyNTYpLCByb3VuZGVkIHVwXG4gIHZhciBpRkFDVE9SID0gTWF0aC5sb2coMjU2KSAvIE1hdGgubG9nKEJBU0UpIC8vIGxvZygyNTYpIC8gbG9nKEJBU0UpLCByb3VuZGVkIHVwXG4gIGZ1bmN0aW9uIGVuY29kZSAoc291cmNlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSB8fCBzb3VyY2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7IHNvdXJjZSA9IF9CdWZmZXIuZnJvbShzb3VyY2UpIH1cbiAgICBpZiAoIV9CdWZmZXIuaXNCdWZmZXIoc291cmNlKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBCdWZmZXInKSB9XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHsgcmV0dXJuICcnIH1cbiAgICAgICAgLy8gU2tpcCAmIGNvdW50IGxlYWRpbmcgemVyb2VzLlxuICAgIHZhciB6ZXJvZXMgPSAwXG4gICAgdmFyIGxlbmd0aCA9IDBcbiAgICB2YXIgcGJlZ2luID0gMFxuICAgIHZhciBwZW5kID0gc291cmNlLmxlbmd0aFxuICAgIHdoaWxlIChwYmVnaW4gIT09IHBlbmQgJiYgc291cmNlW3BiZWdpbl0gPT09IDApIHtcbiAgICAgIHBiZWdpbisrXG4gICAgICB6ZXJvZXMrK1xuICAgIH1cbiAgICAgICAgLy8gQWxsb2NhdGUgZW5vdWdoIHNwYWNlIGluIGJpZy1lbmRpYW4gYmFzZTU4IHJlcHJlc2VudGF0aW9uLlxuICAgIHZhciBzaXplID0gKChwZW5kIC0gcGJlZ2luKSAqIGlGQUNUT1IgKyAxKSA+Pj4gMFxuICAgIHZhciBiNTggPSBuZXcgVWludDhBcnJheShzaXplKVxuICAgICAgICAvLyBQcm9jZXNzIHRoZSBieXRlcy5cbiAgICB3aGlsZSAocGJlZ2luICE9PSBwZW5kKSB7XG4gICAgICB2YXIgY2FycnkgPSBzb3VyY2VbcGJlZ2luXVxuICAgICAgICAgICAgLy8gQXBwbHkgXCJiNTggPSBiNTggKiAyNTYgKyBjaFwiLlxuICAgICAgdmFyIGkgPSAwXG4gICAgICBmb3IgKHZhciBpdDEgPSBzaXplIC0gMTsgKGNhcnJ5ICE9PSAwIHx8IGkgPCBsZW5ndGgpICYmIChpdDEgIT09IC0xKTsgaXQxLS0sIGkrKykge1xuICAgICAgICBjYXJyeSArPSAoMjU2ICogYjU4W2l0MV0pID4+PiAwXG4gICAgICAgIGI1OFtpdDFdID0gKGNhcnJ5ICUgQkFTRSkgPj4+IDBcbiAgICAgICAgY2FycnkgPSAoY2FycnkgLyBCQVNFKSA+Pj4gMFxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7IHRocm93IG5ldyBFcnJvcignTm9uLXplcm8gY2FycnknKSB9XG4gICAgICBsZW5ndGggPSBpXG4gICAgICBwYmVnaW4rK1xuICAgIH1cbiAgICAgICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lcyBpbiBiYXNlNTggcmVzdWx0LlxuICAgIHZhciBpdDIgPSBzaXplIC0gbGVuZ3RoXG4gICAgd2hpbGUgKGl0MiAhPT0gc2l6ZSAmJiBiNThbaXQyXSA9PT0gMCkge1xuICAgICAgaXQyKytcbiAgICB9XG4gICAgICAgIC8vIFRyYW5zbGF0ZSB0aGUgcmVzdWx0IGludG8gYSBzdHJpbmcuXG4gICAgdmFyIHN0ciA9IExFQURFUi5yZXBlYXQoemVyb2VzKVxuICAgIGZvciAoOyBpdDIgPCBzaXplOyArK2l0MikgeyBzdHIgKz0gQUxQSEFCRVQuY2hhckF0KGI1OFtpdDJdKSB9XG4gICAgcmV0dXJuIHN0clxuICB9XG4gIGZ1bmN0aW9uIGRlY29kZVVuc2FmZSAoc291cmNlKSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdzdHJpbmcnKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFN0cmluZycpIH1cbiAgICBpZiAoc291cmNlLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gX0J1ZmZlci5hbGxvYygwKSB9XG4gICAgdmFyIHBzeiA9IDBcbiAgICAgICAgLy8gU2tpcCBhbmQgY291bnQgbGVhZGluZyAnMSdzLlxuICAgIHZhciB6ZXJvZXMgPSAwXG4gICAgdmFyIGxlbmd0aCA9IDBcbiAgICB3aGlsZSAoc291cmNlW3Bzel0gPT09IExFQURFUikge1xuICAgICAgemVyb2VzKytcbiAgICAgIHBzeisrXG4gICAgfVxuICAgICAgICAvLyBBbGxvY2F0ZSBlbm91Z2ggc3BhY2UgaW4gYmlnLWVuZGlhbiBiYXNlMjU2IHJlcHJlc2VudGF0aW9uLlxuICAgIHZhciBzaXplID0gKCgoc291cmNlLmxlbmd0aCAtIHBzeikgKiBGQUNUT1IpICsgMSkgPj4+IDAgLy8gbG9nKDU4KSAvIGxvZygyNTYpLCByb3VuZGVkIHVwLlxuICAgIHZhciBiMjU2ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSlcbiAgICAgICAgLy8gUHJvY2VzcyB0aGUgY2hhcmFjdGVycy5cbiAgICB3aGlsZSAocHN6IDwgc291cmNlLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gRmluZCBjb2RlIG9mIG5leHQgY2hhcmFjdGVyXG4gICAgICB2YXIgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwc3opXG4gICAgICAgICAgICAvLyBCYXNlIG1hcCBjYW4gbm90IGJlIGluZGV4ZWQgdXNpbmcgY2hhciBjb2RlXG4gICAgICBpZiAoY2hhckNvZGUgPiAyNTUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIC8vIERlY29kZSBjaGFyYWN0ZXJcbiAgICAgIHZhciBjYXJyeSA9IEJBU0VfTUFQW2NoYXJDb2RlXVxuICAgICAgICAgICAgLy8gSW52YWxpZCBjaGFyYWN0ZXJcbiAgICAgIGlmIChjYXJyeSA9PT0gMjU1KSB7IHJldHVybiB9XG4gICAgICB2YXIgaSA9IDBcbiAgICAgIGZvciAodmFyIGl0MyA9IHNpemUgLSAxOyAoY2FycnkgIT09IDAgfHwgaSA8IGxlbmd0aCkgJiYgKGl0MyAhPT0gLTEpOyBpdDMtLSwgaSsrKSB7XG4gICAgICAgIGNhcnJ5ICs9IChCQVNFICogYjI1NltpdDNdKSA+Pj4gMFxuICAgICAgICBiMjU2W2l0M10gPSAoY2FycnkgJSAyNTYpID4+PiAwXG4gICAgICAgIGNhcnJ5ID0gKGNhcnJ5IC8gMjU2KSA+Pj4gMFxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7IHRocm93IG5ldyBFcnJvcignTm9uLXplcm8gY2FycnknKSB9XG4gICAgICBsZW5ndGggPSBpXG4gICAgICBwc3orK1xuICAgIH1cbiAgICAgICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lcyBpbiBiMjU2LlxuICAgIHZhciBpdDQgPSBzaXplIC0gbGVuZ3RoXG4gICAgd2hpbGUgKGl0NCAhPT0gc2l6ZSAmJiBiMjU2W2l0NF0gPT09IDApIHtcbiAgICAgIGl0NCsrXG4gICAgfVxuICAgIHZhciB2Y2ggPSBfQnVmZmVyLmFsbG9jVW5zYWZlKHplcm9lcyArIChzaXplIC0gaXQ0KSlcbiAgICB2Y2guZmlsbCgweDAwLCAwLCB6ZXJvZXMpXG4gICAgdmFyIGogPSB6ZXJvZXNcbiAgICB3aGlsZSAoaXQ0ICE9PSBzaXplKSB7XG4gICAgICB2Y2hbaisrXSA9IGIyNTZbaXQ0KytdXG4gICAgfVxuICAgIHJldHVybiB2Y2hcbiAgfVxuICBmdW5jdGlvbiBkZWNvZGUgKHN0cmluZykge1xuICAgIHZhciBidWZmZXIgPSBkZWNvZGVVbnNhZmUoc3RyaW5nKVxuICAgIGlmIChidWZmZXIpIHsgcmV0dXJuIGJ1ZmZlciB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb24tYmFzZScgKyBCQVNFICsgJyBjaGFyYWN0ZXInKVxuICB9XG4gIHJldHVybiB7XG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgZGVjb2RlVW5zYWZlOiBkZWNvZGVVbnNhZmUsXG4gICAgZGVjb2RlOiBkZWNvZGVcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBiYXNlXG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlc2VyaWFsaXplVW5jaGVja2VkID0gZXhwb3J0cy5kZXNlcmlhbGl6ZSA9IGV4cG9ydHMuc2VyaWFsaXplID0gZXhwb3J0cy5CaW5hcnlSZWFkZXIgPSBleHBvcnRzLkJpbmFyeVdyaXRlciA9IGV4cG9ydHMuQm9yc2hFcnJvciA9IGV4cG9ydHMuYmFzZURlY29kZSA9IGV4cG9ydHMuYmFzZUVuY29kZSA9IHZvaWQgMDtcbmNvbnN0IGJuX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJuLmpzXCIpKTtcbmNvbnN0IGJzNThfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYnM1OFwiKSk7XG4vLyBUT0RPOiBNYWtlIHN1cmUgdGhpcyBwb2x5ZmlsbCBub3QgaW5jbHVkZWQgd2hlbiBub3QgcmVxdWlyZWRcbmNvbnN0IGVuY29kaW5nID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJ0ZXh0LWVuY29kaW5nLXV0Zi04XCIpKTtcbmNvbnN0IFJlc29sdmVkVGV4dERlY29kZXIgPSB0eXBlb2YgVGV4dERlY29kZXIgIT09IFwiZnVuY3Rpb25cIiA/IGVuY29kaW5nLlRleHREZWNvZGVyIDogVGV4dERlY29kZXI7XG5jb25zdCB0ZXh0RGVjb2RlciA9IG5ldyBSZXNvbHZlZFRleHREZWNvZGVyKFwidXRmLThcIiwgeyBmYXRhbDogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGJhc2VFbmNvZGUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhbHVlID0gQnVmZmVyLmZyb20odmFsdWUsIFwidXRmOFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGJzNThfMS5kZWZhdWx0LmVuY29kZShCdWZmZXIuZnJvbSh2YWx1ZSkpO1xufVxuZXhwb3J0cy5iYXNlRW5jb2RlID0gYmFzZUVuY29kZTtcbmZ1bmN0aW9uIGJhc2VEZWNvZGUodmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oYnM1OF8xLmRlZmF1bHQuZGVjb2RlKHZhbHVlKSk7XG59XG5leHBvcnRzLmJhc2VEZWNvZGUgPSBiYXNlRGVjb2RlO1xuY29uc3QgSU5JVElBTF9MRU5HVEggPSAxMDI0O1xuY2xhc3MgQm9yc2hFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmZpZWxkUGF0aCA9IFtdO1xuICAgICAgICB0aGlzLm9yaWdpbmFsTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfVxuICAgIGFkZFRvRmllbGRQYXRoKGZpZWxkTmFtZSkge1xuICAgICAgICB0aGlzLmZpZWxkUGF0aC5zcGxpY2UoMCwgMCwgZmllbGROYW1lKTtcbiAgICAgICAgLy8gTk9URTogTW9kaWZ5aW5nIG1lc3NhZ2UgZGlyZWN0bHkgYXMgamVzdCBkb2Vzbid0IHVzZSAudG9TdHJpbmcoKVxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLm9yaWdpbmFsTWVzc2FnZSArIFwiOiBcIiArIHRoaXMuZmllbGRQYXRoLmpvaW4oXCIuXCIpO1xuICAgIH1cbn1cbmV4cG9ydHMuQm9yc2hFcnJvciA9IEJvcnNoRXJyb3I7XG4vLy8gQmluYXJ5IGVuY29kZXIuXG5jbGFzcyBCaW5hcnlXcml0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJ1ZiA9IEJ1ZmZlci5hbGxvYyhJTklUSUFMX0xFTkdUSCk7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgbWF5YmVSZXNpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1Zi5sZW5ndGggPCAxNiArIHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZiA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuYnVmLCBCdWZmZXIuYWxsb2MoSU5JVElBTF9MRU5HVEgpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd3JpdGVVOCh2YWx1ZSkge1xuICAgICAgICB0aGlzLm1heWJlUmVzaXplKCk7XG4gICAgICAgIHRoaXMuYnVmLndyaXRlVUludDgodmFsdWUsIHRoaXMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5sZW5ndGggKz0gMTtcbiAgICB9XG4gICAgd3JpdGVVMTYodmFsdWUpIHtcbiAgICAgICAgdGhpcy5tYXliZVJlc2l6ZSgpO1xuICAgICAgICB0aGlzLmJ1Zi53cml0ZVVJbnQxNkxFKHZhbHVlLCB0aGlzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMubGVuZ3RoICs9IDI7XG4gICAgfVxuICAgIHdyaXRlVTMyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWF5YmVSZXNpemUoKTtcbiAgICAgICAgdGhpcy5idWYud3JpdGVVSW50MzJMRSh2YWx1ZSwgdGhpcy5sZW5ndGgpO1xuICAgICAgICB0aGlzLmxlbmd0aCArPSA0O1xuICAgIH1cbiAgICB3cml0ZVU2NCh2YWx1ZSkge1xuICAgICAgICB0aGlzLm1heWJlUmVzaXplKCk7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIoQnVmZmVyLmZyb20obmV3IGJuX2pzXzEuZGVmYXVsdCh2YWx1ZSkudG9BcnJheShcImxlXCIsIDgpKSk7XG4gICAgfVxuICAgIHdyaXRlVTEyOCh2YWx1ZSkge1xuICAgICAgICB0aGlzLm1heWJlUmVzaXplKCk7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIoQnVmZmVyLmZyb20obmV3IGJuX2pzXzEuZGVmYXVsdCh2YWx1ZSkudG9BcnJheShcImxlXCIsIDE2KSkpO1xuICAgIH1cbiAgICB3cml0ZVUyNTYodmFsdWUpIHtcbiAgICAgICAgdGhpcy5tYXliZVJlc2l6ZSgpO1xuICAgICAgICB0aGlzLndyaXRlQnVmZmVyKEJ1ZmZlci5mcm9tKG5ldyBibl9qc18xLmRlZmF1bHQodmFsdWUpLnRvQXJyYXkoXCJsZVwiLCAzMikpKTtcbiAgICB9XG4gICAgd3JpdGVVNTEyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMubWF5YmVSZXNpemUoKTtcbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlcihCdWZmZXIuZnJvbShuZXcgYm5fanNfMS5kZWZhdWx0KHZhbHVlKS50b0FycmF5KFwibGVcIiwgNjQpKSk7XG4gICAgfVxuICAgIHdyaXRlQnVmZmVyKGJ1ZmZlcikge1xuICAgICAgICAvLyBCdWZmZXIuZnJvbSBpcyBuZWVkZWQgYXMgdGhpcy5idWYuc3ViYXJyYXkgY2FuIHJldHVybiBwbGFpbiBVaW50OEFycmF5IGluIGJyb3dzZXJcbiAgICAgICAgdGhpcy5idWYgPSBCdWZmZXIuY29uY2F0KFtcbiAgICAgICAgICAgIEJ1ZmZlci5mcm9tKHRoaXMuYnVmLnN1YmFycmF5KDAsIHRoaXMubGVuZ3RoKSksXG4gICAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgICBCdWZmZXIuYWxsb2MoSU5JVElBTF9MRU5HVEgpLFxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5sZW5ndGggKz0gYnVmZmVyLmxlbmd0aDtcbiAgICB9XG4gICAgd3JpdGVTdHJpbmcoc3RyKSB7XG4gICAgICAgIHRoaXMubWF5YmVSZXNpemUoKTtcbiAgICAgICAgY29uc3QgYiA9IEJ1ZmZlci5mcm9tKHN0ciwgXCJ1dGY4XCIpO1xuICAgICAgICB0aGlzLndyaXRlVTMyKGIubGVuZ3RoKTtcbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlcihiKTtcbiAgICB9XG4gICAgd3JpdGVGaXhlZEFycmF5KGFycmF5KSB7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIoQnVmZmVyLmZyb20oYXJyYXkpKTtcbiAgICB9XG4gICAgd3JpdGVBcnJheShhcnJheSwgZm4pIHtcbiAgICAgICAgdGhpcy5tYXliZVJlc2l6ZSgpO1xuICAgICAgICB0aGlzLndyaXRlVTMyKGFycmF5Lmxlbmd0aCk7XG4gICAgICAgIGZvciAoY29uc3QgZWxlbSBvZiBhcnJheSkge1xuICAgICAgICAgICAgdGhpcy5tYXliZVJlc2l6ZSgpO1xuICAgICAgICAgICAgZm4oZWxlbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmLnN1YmFycmF5KDAsIHRoaXMubGVuZ3RoKTtcbiAgICB9XG59XG5leHBvcnRzLkJpbmFyeVdyaXRlciA9IEJpbmFyeVdyaXRlcjtcbmZ1bmN0aW9uIGhhbmRsaW5nUmFuZ2VFcnJvcih0YXJnZXQsIHByb3BlcnR5S2V5LCBwcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IHByb3BlcnR5RGVzY3JpcHRvci52YWx1ZTtcbiAgICBwcm9wZXJ0eURlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFJhbmdlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0gZS5jb2RlO1xuICAgICAgICAgICAgICAgIGlmIChbXCJFUlJfQlVGRkVSX09VVF9PRl9CT1VORFNcIiwgXCJFUlJfT1VUX09GX1JBTkdFXCJdLmluZGV4T2YoY29kZSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQm9yc2hFcnJvcihcIlJlYWNoZWQgdGhlIGVuZCBvZiBidWZmZXIgd2hlbiBkZXNlcmlhbGl6aW5nXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICB9O1xufVxuY2xhc3MgQmluYXJ5UmVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihidWYpIHtcbiAgICAgICAgdGhpcy5idWYgPSBidWY7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICB9XG4gICAgcmVhZFU4KCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuYnVmLnJlYWRVSW50OCh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDE7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmVhZFUxNigpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmJ1Zi5yZWFkVUludDE2TEUodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJlYWRVMzIoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5idWYucmVhZFVJbnQzMkxFKHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZWFkVTY0KCkge1xuICAgICAgICBjb25zdCBidWYgPSB0aGlzLnJlYWRCdWZmZXIoOCk7XG4gICAgICAgIHJldHVybiBuZXcgYm5fanNfMS5kZWZhdWx0KGJ1ZiwgXCJsZVwiKTtcbiAgICB9XG4gICAgcmVhZFUxMjgoKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IHRoaXMucmVhZEJ1ZmZlcigxNik7XG4gICAgICAgIHJldHVybiBuZXcgYm5fanNfMS5kZWZhdWx0KGJ1ZiwgXCJsZVwiKTtcbiAgICB9XG4gICAgcmVhZFUyNTYoKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IHRoaXMucmVhZEJ1ZmZlcigzMik7XG4gICAgICAgIHJldHVybiBuZXcgYm5fanNfMS5kZWZhdWx0KGJ1ZiwgXCJsZVwiKTtcbiAgICB9XG4gICAgcmVhZFU1MTIoKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IHRoaXMucmVhZEJ1ZmZlcig2NCk7XG4gICAgICAgIHJldHVybiBuZXcgYm5fanNfMS5kZWZhdWx0KGJ1ZiwgXCJsZVwiKTtcbiAgICB9XG4gICAgcmVhZEJ1ZmZlcihsZW4pIHtcbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0ICsgbGVuID4gdGhpcy5idWYubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQm9yc2hFcnJvcihgRXhwZWN0ZWQgYnVmZmVyIGxlbmd0aCAke2xlbn0gaXNuJ3Qgd2l0aGluIGJvdW5kc2ApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYnVmLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbik7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmVhZFN0cmluZygpIHtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5yZWFkVTMyKCk7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IHRoaXMucmVhZEJ1ZmZlcihsZW4pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gTk9URTogVXNpbmcgVGV4dERlY29kZXIgdG8gZmFpbCBvbiBpbnZhbGlkIFVURi04XG4gICAgICAgICAgICByZXR1cm4gdGV4dERlY29kZXIuZGVjb2RlKGJ1Zik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBCb3JzaEVycm9yKGBFcnJvciBkZWNvZGluZyBVVEYtOCBzdHJpbmc6ICR7ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWFkRml4ZWRBcnJheShsZW4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMucmVhZEJ1ZmZlcihsZW4pKTtcbiAgICB9XG4gICAgcmVhZEFycmF5KGZuKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMucmVhZFUzMigpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBBcnJheSgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChmbigpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbl9fZGVjb3JhdGUoW1xuICAgIGhhbmRsaW5nUmFuZ2VFcnJvclxuXSwgQmluYXJ5UmVhZGVyLnByb3RvdHlwZSwgXCJyZWFkVThcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBoYW5kbGluZ1JhbmdlRXJyb3Jcbl0sIEJpbmFyeVJlYWRlci5wcm90b3R5cGUsIFwicmVhZFUxNlwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIGhhbmRsaW5nUmFuZ2VFcnJvclxuXSwgQmluYXJ5UmVhZGVyLnByb3RvdHlwZSwgXCJyZWFkVTMyXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgaGFuZGxpbmdSYW5nZUVycm9yXG5dLCBCaW5hcnlSZWFkZXIucHJvdG90eXBlLCBcInJlYWRVNjRcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBoYW5kbGluZ1JhbmdlRXJyb3Jcbl0sIEJpbmFyeVJlYWRlci5wcm90b3R5cGUsIFwicmVhZFUxMjhcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBoYW5kbGluZ1JhbmdlRXJyb3Jcbl0sIEJpbmFyeVJlYWRlci5wcm90b3R5cGUsIFwicmVhZFUyNTZcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBoYW5kbGluZ1JhbmdlRXJyb3Jcbl0sIEJpbmFyeVJlYWRlci5wcm90b3R5cGUsIFwicmVhZFU1MTJcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBoYW5kbGluZ1JhbmdlRXJyb3Jcbl0sIEJpbmFyeVJlYWRlci5wcm90b3R5cGUsIFwicmVhZFN0cmluZ1wiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIGhhbmRsaW5nUmFuZ2VFcnJvclxuXSwgQmluYXJ5UmVhZGVyLnByb3RvdHlwZSwgXCJyZWFkRml4ZWRBcnJheVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIGhhbmRsaW5nUmFuZ2VFcnJvclxuXSwgQmluYXJ5UmVhZGVyLnByb3RvdHlwZSwgXCJyZWFkQXJyYXlcIiwgbnVsbCk7XG5leHBvcnRzLkJpbmFyeVJlYWRlciA9IEJpbmFyeVJlYWRlcjtcbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcihzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufVxuZnVuY3Rpb24gc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIHZhbHVlLCBmaWVsZFR5cGUsIHdyaXRlcikge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFRPRE86IEhhbmRsZSBtaXNzaW5nIHZhbHVlcyBwcm9wZXJseSAobWFrZSBzdXJlIHRoZXkgbmV2ZXIgcmVzdWx0IGluIGp1c3Qgc2tpcHBlZCB3cml0ZSlcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZFR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHdyaXRlcltgd3JpdGUke2NhcGl0YWxpemVGaXJzdExldHRlcihmaWVsZFR5cGUpfWBdKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmaWVsZFR5cGUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWVsZFR5cGVbMF0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoICE9PSBmaWVsZFR5cGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJvcnNoRXJyb3IoYEV4cGVjdGluZyBieXRlIGFycmF5IG9mIGxlbmd0aCAke2ZpZWxkVHlwZVswXX0sIGJ1dCBnb3QgJHt2YWx1ZS5sZW5ndGh9IGJ5dGVzYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdyaXRlci53cml0ZUZpeGVkQXJyYXkodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGRUeXBlLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgZmllbGRUeXBlWzFdID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCAhPT0gZmllbGRUeXBlWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBCb3JzaEVycm9yKGBFeHBlY3RpbmcgYnl0ZSBhcnJheSBvZiBsZW5ndGggJHtmaWVsZFR5cGVbMV19LCBidXQgZ290ICR7dmFsdWUubGVuZ3RofSBieXRlc2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkVHlwZVsxXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgbnVsbCwgdmFsdWVbaV0sIGZpZWxkVHlwZVswXSwgd3JpdGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGVBcnJheSh2YWx1ZSwgKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIGl0ZW0sIGZpZWxkVHlwZVswXSwgd3JpdGVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmaWVsZFR5cGUua2luZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpZWxkVHlwZS5raW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm9wdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXIud3JpdGVVOCgwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlci53cml0ZVU4KDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIHZhbHVlLCBmaWVsZFR5cGUudHlwZSwgd3JpdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1hcFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci53cml0ZVUzMih2YWx1ZS5zaXplKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuZm9yRWFjaCgodmFsLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgZmllbGROYW1lLCBrZXksIGZpZWxkVHlwZS5rZXksIHdyaXRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxpemVGaWVsZChzY2hlbWEsIGZpZWxkTmFtZSwgdmFsLCBmaWVsZFR5cGUudmFsdWUsIHdyaXRlcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJvcnNoRXJyb3IoYEZpZWxkVHlwZSAke2ZpZWxkVHlwZX0gdW5yZWNvZ25pemVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXJpYWxpemVTdHJ1Y3Qoc2NoZW1hLCB2YWx1ZSwgd3JpdGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQm9yc2hFcnJvcikge1xuICAgICAgICAgICAgZXJyb3IuYWRkVG9GaWVsZFBhdGgoZmllbGROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXJpYWxpemVTdHJ1Y3Qoc2NoZW1hLCBvYmosIHdyaXRlcikge1xuICAgIGlmICh0eXBlb2Ygb2JqLmJvcnNoU2VyaWFsaXplID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgb2JqLmJvcnNoU2VyaWFsaXplKHdyaXRlcik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3RydWN0U2NoZW1hID0gc2NoZW1hLmdldChvYmouY29uc3RydWN0b3IpO1xuICAgIGlmICghc3RydWN0U2NoZW1hKSB7XG4gICAgICAgIHRocm93IG5ldyBCb3JzaEVycm9yKGBDbGFzcyAke29iai5jb25zdHJ1Y3Rvci5uYW1lfSBpcyBtaXNzaW5nIGluIHNjaGVtYWApO1xuICAgIH1cbiAgICBpZiAoc3RydWN0U2NoZW1hLmtpbmQgPT09IFwic3RydWN0XCIpIHtcbiAgICAgICAgc3RydWN0U2NoZW1hLmZpZWxkcy5tYXAoKFtmaWVsZE5hbWUsIGZpZWxkVHlwZV0pID0+IHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgZmllbGROYW1lLCBvYmpbZmllbGROYW1lXSwgZmllbGRUeXBlLCB3cml0ZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3RydWN0U2NoZW1hLmtpbmQgPT09IFwiZW51bVwiKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBvYmpbc3RydWN0U2NoZW1hLmZpZWxkXTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc3RydWN0U2NoZW1hLnZhbHVlcy5sZW5ndGg7ICsraWR4KSB7XG4gICAgICAgICAgICBjb25zdCBbZmllbGROYW1lLCBmaWVsZFR5cGVdID0gc3RydWN0U2NoZW1hLnZhbHVlc1tpZHhdO1xuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIHdyaXRlci53cml0ZVU4KGlkeCk7XG4gICAgICAgICAgICAgICAgc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIG9ialtmaWVsZE5hbWVdLCBmaWVsZFR5cGUsIHdyaXRlcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBCb3JzaEVycm9yKGBVbmV4cGVjdGVkIHNjaGVtYSBraW5kOiAke3N0cnVjdFNjaGVtYS5raW5kfSBmb3IgJHtvYmouY29uc3RydWN0b3IubmFtZX1gKTtcbiAgICB9XG59XG4vLy8gU2VyaWFsaXplIGdpdmVuIG9iamVjdCB1c2luZyBzY2hlbWEgb2YgdGhlIGZvcm06XG4vLy8geyBjbGFzc19uYW1lIC0+IFsgW2ZpZWxkX25hbWUsIGZpZWxkX3R5cGVdLCAuLiBdLCAuLiB9XG5mdW5jdGlvbiBzZXJpYWxpemUoc2NoZW1hLCBvYmosIFdyaXRlciA9IEJpbmFyeVdyaXRlcikge1xuICAgIGNvbnN0IHdyaXRlciA9IG5ldyBXcml0ZXIoKTtcbiAgICBzZXJpYWxpemVTdHJ1Y3Qoc2NoZW1hLCBvYmosIHdyaXRlcik7XG4gICAgcmV0dXJuIHdyaXRlci50b0FycmF5KCk7XG59XG5leHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTtcbmZ1bmN0aW9uIGRlc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIGZpZWxkVHlwZSwgcmVhZGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZFR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkZXJbYHJlYWQke2NhcGl0YWxpemVGaXJzdExldHRlcihmaWVsZFR5cGUpfWBdKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpZWxkVHlwZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZpZWxkVHlwZVswXSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIucmVhZEZpeGVkQXJyYXkoZmllbGRUeXBlWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBmaWVsZFR5cGVbMV0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnIgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkVHlwZVsxXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGRlc2VyaWFsaXplRmllbGQoc2NoZW1hLCBudWxsLCBmaWVsZFR5cGVbMF0sIHJlYWRlcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkQXJyYXkoKCkgPT4gZGVzZXJpYWxpemVGaWVsZChzY2hlbWEsIGZpZWxkTmFtZSwgZmllbGRUeXBlWzBdLCByZWFkZXIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZmllbGRUeXBlLmtpbmQgPT09IFwib3B0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IHJlYWRlci5yZWFkVTgoKTtcbiAgICAgICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzZXJpYWxpemVGaWVsZChzY2hlbWEsIGZpZWxkTmFtZSwgZmllbGRUeXBlLnR5cGUsIHJlYWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaWVsZFR5cGUua2luZCA9PT0gXCJtYXBcIikge1xuICAgICAgICAgICAgbGV0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHJlYWRlci5yZWFkVTMyKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZGVzZXJpYWxpemVGaWVsZChzY2hlbWEsIGZpZWxkTmFtZSwgZmllbGRUeXBlLmtleSwgcmVhZGVyKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBkZXNlcmlhbGl6ZUZpZWxkKHNjaGVtYSwgZmllbGROYW1lLCBmaWVsZFR5cGUudmFsdWUsIHJlYWRlcik7XG4gICAgICAgICAgICAgICAgbWFwLnNldChrZXksIHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXNlcmlhbGl6ZVN0cnVjdChzY2hlbWEsIGZpZWxkVHlwZSwgcmVhZGVyKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEJvcnNoRXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yLmFkZFRvRmllbGRQYXRoKGZpZWxkTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVzZXJpYWxpemVTdHJ1Y3Qoc2NoZW1hLCBjbGFzc1R5cGUsIHJlYWRlcikge1xuICAgIGlmICh0eXBlb2YgY2xhc3NUeXBlLmJvcnNoRGVzZXJpYWxpemUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gY2xhc3NUeXBlLmJvcnNoRGVzZXJpYWxpemUocmVhZGVyKTtcbiAgICB9XG4gICAgY29uc3Qgc3RydWN0U2NoZW1hID0gc2NoZW1hLmdldChjbGFzc1R5cGUpO1xuICAgIGlmICghc3RydWN0U2NoZW1hKSB7XG4gICAgICAgIHRocm93IG5ldyBCb3JzaEVycm9yKGBDbGFzcyAke2NsYXNzVHlwZS5uYW1lfSBpcyBtaXNzaW5nIGluIHNjaGVtYWApO1xuICAgIH1cbiAgICBpZiAoc3RydWN0U2NoZW1hLmtpbmQgPT09IFwic3RydWN0XCIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAoY29uc3QgW2ZpZWxkTmFtZSwgZmllbGRUeXBlXSBvZiBzY2hlbWEuZ2V0KGNsYXNzVHlwZSkuZmllbGRzKSB7XG4gICAgICAgICAgICByZXN1bHRbZmllbGROYW1lXSA9IGRlc2VyaWFsaXplRmllbGQoc2NoZW1hLCBmaWVsZE5hbWUsIGZpZWxkVHlwZSwgcmVhZGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IGNsYXNzVHlwZShyZXN1bHQpO1xuICAgIH1cbiAgICBpZiAoc3RydWN0U2NoZW1hLmtpbmQgPT09IFwiZW51bVwiKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHJlYWRlci5yZWFkVTgoKTtcbiAgICAgICAgaWYgKGlkeCA+PSBzdHJ1Y3RTY2hlbWEudmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJvcnNoRXJyb3IoYEVudW0gaW5kZXg6ICR7aWR4fSBpcyBvdXQgb2YgcmFuZ2VgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBbZmllbGROYW1lLCBmaWVsZFR5cGVdID0gc3RydWN0U2NoZW1hLnZhbHVlc1tpZHhdO1xuICAgICAgICBjb25zdCBmaWVsZFZhbHVlID0gZGVzZXJpYWxpemVGaWVsZChzY2hlbWEsIGZpZWxkTmFtZSwgZmllbGRUeXBlLCByZWFkZXIpO1xuICAgICAgICByZXR1cm4gbmV3IGNsYXNzVHlwZSh7IFtmaWVsZE5hbWVdOiBmaWVsZFZhbHVlIH0pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgQm9yc2hFcnJvcihgVW5leHBlY3RlZCBzY2hlbWEga2luZDogJHtzdHJ1Y3RTY2hlbWEua2luZH0gZm9yICR7Y2xhc3NUeXBlLmNvbnN0cnVjdG9yLm5hbWV9YCk7XG59XG4vLy8gRGVzZXJpYWxpemVzIG9iamVjdCBmcm9tIGJ5dGVzIHVzaW5nIHNjaGVtYS5cbmZ1bmN0aW9uIGRlc2VyaWFsaXplKHNjaGVtYSwgY2xhc3NUeXBlLCBidWZmZXIsIFJlYWRlciA9IEJpbmFyeVJlYWRlcikge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBSZWFkZXIoYnVmZmVyKTtcbiAgICBjb25zdCByZXN1bHQgPSBkZXNlcmlhbGl6ZVN0cnVjdChzY2hlbWEsIGNsYXNzVHlwZSwgcmVhZGVyKTtcbiAgICBpZiAocmVhZGVyLm9mZnNldCA8IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJvcnNoRXJyb3IoYFVuZXhwZWN0ZWQgJHtidWZmZXIubGVuZ3RoIC0gcmVhZGVyLm9mZnNldH0gYnl0ZXMgYWZ0ZXIgZGVzZXJpYWxpemVkIGRhdGFgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZGVzZXJpYWxpemUgPSBkZXNlcmlhbGl6ZTtcbi8vLyBEZXNlcmlhbGl6ZXMgb2JqZWN0IGZyb20gYnl0ZXMgdXNpbmcgc2NoZW1hLCB3aXRob3V0IGNoZWNraW5nIHRoZSBsZW5ndGggcmVhZFxuZnVuY3Rpb24gZGVzZXJpYWxpemVVbmNoZWNrZWQoc2NoZW1hLCBjbGFzc1R5cGUsIGJ1ZmZlciwgUmVhZGVyID0gQmluYXJ5UmVhZGVyKSB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IFJlYWRlcihidWZmZXIpO1xuICAgIHJldHVybiBkZXNlcmlhbGl6ZVN0cnVjdChzY2hlbWEsIGNsYXNzVHlwZSwgcmVhZGVyKTtcbn1cbmV4cG9ydHMuZGVzZXJpYWxpemVVbmNoZWNrZWQgPSBkZXNlcmlhbGl6ZVVuY2hlY2tlZDtcbiIsIi8qISBzYWZlLWJ1ZmZlci4gTUlUIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyLnByb3RvdHlwZSlcblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJ2YXIgYmFzZXggPSByZXF1aXJlKCdiYXNlLXgnKVxudmFyIEFMUEhBQkVUID0gJzEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXonXG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZXgoQUxQSEFCRVQpXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiaW1wb3J0IHsgZ2V0TmV0d29ya0luZm8sIGdldEFjY291bnRJbmZvLCBnZXRSZWNlbnRUcmFuc2FjdGlvbnMsIGdldEJhbGFuY2UgfSBmcm9tICcuLi9zcmMvd2ViMy5qcyc7XHJcbmNvbnN0IHsgQ29ubmVjdGlvbiwgUHVibGljS2V5IH0gPSByZXF1aXJlKCdAc29sYW5hL3dlYjMuanMnKTtcclxuXHJcbmNvbnN0IHJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCc6cm9vdCcpO1xyXG5sZXQgbmV0UlBDID0gJ2h0dHBzOi8vYXBpLm1haW5uZXQtYmV0YS5zb2xhbmEuY29tJztcclxuXHJcbi8vINGB0LTQtdC70LDRgtGMINCy0LjQtNC40LzQvtC5INGB0LXQutGG0LjRjiBJbmZvIFRhYmxlINC4IFRyYW5zYWN0aW9uc1xyXG5jb25zdCBpbmZvVGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmluZm9cIik7XHJcbmNvbnN0IHRyYW5zYWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudHJhbnNhY3Rpb25zXCIpO1xyXG5jb25zdCBmb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvb3RlclwiKTtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGRpc3BsYXlTZWN0aW9ucyh3YWxsZXRBZGRyZXNzKSB7XHJcbiAgICAvLyDQn9C+0LTQutC70Y7Rh9Cw0LXQvNGB0Y8g0LogU29sYW5hIGRldm5ldFxyXG4gICAgbGV0IGNvbm5lY3Rpb247XHJcbiAgICBcclxuICAgIGNvbm5lY3Rpb24gPSBuZXcgQ29ubmVjdGlvbihuZXRSUEMsICdjb25maXJtZWQnKTtcclxuICAgIFxyXG4gICAgLy8g0KHQvtC30LTQsNC10LwgUHVibGljS2V5INC40Lcg0LDQtNGA0LXRgdCwINC60L7RiNC10LvRjNC60LBcclxuICAgIGNvbnN0IHB1YmxpY0tleSA9IG5ldyBQdWJsaWNLZXkod2FsbGV0QWRkcmVzcyk7XHJcblxyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5mb19faXRlbVwiKS5pbm5lckhUTUwgPSBhd2FpdCBnZXROZXR3b3JrSW5mbyhjb25uZWN0aW9uKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5mb19faXRlbS1hY2NvdW50XCIpLmlubmVySFRNTCA9IGF3YWl0IGdldEFjY291bnRJbmZvKGNvbm5lY3Rpb24sIHB1YmxpY0tleSkgKyAnPGJyPicgKyBhd2FpdCBnZXRCYWxhbmNlKGNvbm5lY3Rpb24sIHB1YmxpY0tleSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHJlY2VudFRyYW5zYWN0aW9ucyA9IGF3YWl0IGdldFJlY2VudFRyYW5zYWN0aW9ucyhjb25uZWN0aW9uLCBwdWJsaWNLZXkpO1xyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpdGVtIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudHJhbnNhY3Rpb25zX19pdGVtXCIpKSB7XHJcbiAgICAgICAgaXRlbS5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVjZW50VHJhbnNhY3Rpb25zLmxlbmd0aCAhPSAwKSB7XHJcbiAgICAgICAgZm9yIChsZXQgYXJyYXlFbGVtZW50IG9mIHJlY2VudFRyYW5zYWN0aW9ucykge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRyYW5zYWN0aW9uc19fYmxvY2tcIikuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYWZ0ZXJiZWdpblwiLCBhcnJheUVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cmFuc2FjdGlvbnMuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgIH1cclxuXHJcbiAgICBpbmZvVGFibGUuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgIGZvb3Rlci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG59XHJcblxyXG5cclxuLy8g0LrQvtGI0LXQu9GR0LpcclxuY29uc3Qgd2FsbGV0SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndhbGxldC1pbnB1dFwiKTtcclxuY29uc3Qgd2FsbGV0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53YWxsZXQtYnRuXCIpO1xyXG5cclxud2FsbGV0QnRuLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICBpZiAod2FsbGV0SW5wdXQudmFsdWUgIT0gXCJcIikge1xyXG4gICAgICAgIC8vINCf0LXRgNC10LzQtdC90L3QsNGPINGB0L4g0LfQvdCw0YfQtdC90LjQtdC8INCy0LLQtdC00ZHQvdC90L7Qs9C+INC60L7RiNC10LvRjNC60LBcclxuICAgICAgICBjb25zdCB3YWxsZXRJbnB1dFZhbHVlID0gd2FsbGV0SW5wdXQudmFsdWU7XHJcblxyXG4gICAgICAgIGRpc3BsYXlTZWN0aW9ucyh3YWxsZXRJbnB1dFZhbHVlKTtcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgZGV2bmV0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oZWFkZXJfX2Rldm5ldC1idG5cIik7XHJcbmxldCBpc0Rldm5ldCA9IGZhbHNlO1xyXG5cclxuZGV2bmV0QnRuLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICBpc0Rldm5ldCA9ICFpc0Rldm5ldDtcclxuICAgIGNvbnNvbGUuZGVidWcoXCJDaGFuZ2UgaXNEZXZuZXQgdG8gXCIgKyBpc0Rldm5ldCk7XHJcbiAgICBcclxuICAgIC8vIGRldm5ldCBjb2xvcnNcclxuICAgIGNvbnN0IGRldm5ldENvbG9yID0gJyNmMmFmZjcnO1xyXG4gICAgY29uc3QgZGV2bmV0Q29sb3JIb3ZlciA9ICcjZjJkMmY0JztcclxuICAgIGNvbnN0IG1haW5uZXRDb2xvciA9ICcjODBlMmRhJztcclxuICAgIGNvbnN0IG1haW5uZXRDb2xvckhvdmVyID0gJyM4MmY2ZWMnO1xyXG5cclxuICAgIGlmIChpc0Rldm5ldClcclxuICAgIHtcclxuICAgICAgICBkZXZuZXRCdG4uaW5uZXJUZXh0ID0gJ0Rldk5FVCc7XHJcbiAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1uZXQtYnRuLWNvbG9yJywgZGV2bmV0Q29sb3IpO1xyXG4gICAgICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkoJy0tbmV0LWJ0bi1ob3Zlci1jb2xvcicsIGRldm5ldENvbG9ySG92ZXIpO1xyXG4gICAgICAgIG5ldFJQQyA9ICdodHRwczovL2FwaS5kZXZuZXQuc29sYW5hLmNvbSc7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgICAgZGV2bmV0QnRuLmlubmVyVGV4dCA9ICdNYWluTkVUJztcclxuICAgICAgICByb290LnN0eWxlLnNldFByb3BlcnR5KCctLW5ldC1idG4tY29sb3InLCBtYWlubmV0Q29sb3IpO1xyXG4gICAgICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkoJy0tbmV0LWJ0bi1ob3Zlci1jb2xvcicsIG1haW5uZXRDb2xvckhvdmVyKTtcclxuICAgICAgICBuZXRSUEMgPSAnaHR0cHM6Ly9hcGkubWFpbm5ldC1iZXRhLnNvbGFuYS5jb20nO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8g0JXRgdC70Lgg0YLRgNCw0L3Qt9Cw0LrRhtC40LkgMCwg0LjRgdC/0L7Qu9GM0LfRg9C5INGN0YLRgyDRhNGD0L3QutGG0LjRjiwg0YfRgtC+0LHRiyDQtNC+0LHQsNCy0LjRgtGMINC90LDQtNC/0LjRgdGMINC90LAg0L/Rg9GB0YLQvtC5INCx0LvQvtC6XHJcbmNvbnN0IHRyYW5zYWN0aW9uc0VtcHR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50cmFuc2FjdGlvbl9fYmxvY2stZW1wdHlcIik7XHJcbmNvbnN0IHRyYW5zYWN0aW9uc0l0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRyYW5zYWN0aW9uc19faXRlbVwiKTtcclxuXHJcbmZ1bmN0aW9uIGRpc3BsYXlUcmFuc2FjdGlvbnNFbXB0eSgpIHtcclxuICAgIHRyYW5zYWN0aW9uc0VtcHR5LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICB0cmFuc2FjdGlvbnNJdGVtLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxufSJdLCJuYW1lcyI6WyJ1dWlkIiwiZ2VuZXJhdGVSZXF1ZXN0IiwiQ2xpZW50QnJvd3NlciIsImNhbGxTZXJ2ZXIiLCJvcHRpb25zIiwidGhpcyIsInJldml2ZXIiLCJyZXBsYWNlciIsImdlbmVyYXRvciIsInZlcnNpb24iLCJub3RpZmljYXRpb25JZE51bGwiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvdG90eXBlIiwicmVxdWVzdCIsIm1ldGhvZCIsInBhcmFtcyIsImlkIiwiY2FsbGJhY2siLCJzZWxmIiwiaXNCYXRjaCIsIkFycmF5IiwiaXNBcnJheSIsIlR5cGVFcnJvciIsInVuZGVmaW5lZCIsImhhc0NhbGxiYWNrIiwiZXJyIiwibWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXNwb25zZSIsIl9wYXJzZVJlc3BvbnNlIiwicmVzcG9uc2VUZXh0IiwicGFyc2UiLCJsZW5ndGgiLCJpc0Vycm9yIiwicmVzIiwiZXJyb3IiLCJpc05vdEVycm9yIiwiZmlsdGVyIiwicmVzdWx0IiwiYnVmIiwicmV2ZXJzZWQiLCJCdWZmZXIiLCJmcm9tIiwicmV2ZXJzZSIsImhleCIsInRvU3RyaW5nIiwiQmlnSW50IiwibnVtIiwid2lkdGgiLCJidWZmZXIiLCJwYWRTdGFydCIsInNsaWNlIiwiaGFzIiwiT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJwcmVmaXgiLCJFdmVudHMiLCJFRSIsImZuIiwiY29udGV4dCIsIm9uY2UiLCJhZGRMaXN0ZW5lciIsImVtaXR0ZXIiLCJldmVudCIsImxpc3RlbmVyIiwiZXZ0IiwiX2V2ZW50cyIsInB1c2giLCJfZXZlbnRzQ291bnQiLCJjbGVhckV2ZW50IiwiRXZlbnRFbWl0dGVyIiwiY3JlYXRlIiwiX19wcm90b19fIiwiZXZlbnROYW1lcyIsImV2ZW50cyIsIm5hbWUiLCJuYW1lcyIsImNhbGwiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJsaXN0ZW5lcnMiLCJoYW5kbGVycyIsImkiLCJsIiwiZWUiLCJsaXN0ZW5lckNvdW50IiwiZW1pdCIsImExIiwiYTIiLCJhMyIsImE0IiwiYTUiLCJhcmdzIiwibGVuIiwiYXJndW1lbnRzIiwicmVtb3ZlTGlzdGVuZXIiLCJhcHBseSIsImoiLCJvbiIsInJlbW92ZUFsbExpc3RlbmVycyIsIm9mZiIsInByZWZpeGVkIiwicmVhZCIsIm9mZnNldCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZSIsIm0iLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJkIiwicyIsIk5hTiIsIkluZmluaXR5IiwiTWF0aCIsInBvdyIsIndyaXRlIiwidmFsdWUiLCJjIiwicnQiLCJhYnMiLCJpc05hTiIsImZsb29yIiwibG9nIiwiTE4yIiwiaW5SYW5nZSIsImEiLCJtaW4iLCJtYXgiLCJUb0RpY3Rpb25hcnkiLCJvIiwiU3RyZWFtIiwidG9rZW5zIiwiZW5kT2ZTdHJlYW0iLCJzaGlmdCIsInByZXBlbmQiLCJ0b2tlbiIsInVuc2hpZnQiLCJwb3AiLCJmaW5pc2hlZCIsImRlY29kZXJFcnJvciIsImZhdGFsIiwib3B0X2NvZGVfcG9pbnQiLCJERUZBVUxUX0VOQ09ESU5HIiwiVGV4dERlY29kZXIiLCJlbmNvZGluZyIsIlN0cmluZyIsInRvTG93ZXJDYXNlIiwiRXJyb3IiLCJfc3RyZWFtaW5nIiwiX0JPTXNlZW4iLCJfZGVjb2RlciIsIl9mYXRhbCIsIkJvb2xlYW4iLCJfaWdub3JlQk9NIiwiZGVmaW5lUHJvcGVydHkiLCJUZXh0RW5jb2RlciIsIl9lbmNvZGVyIiwiX29wdGlvbnMiLCJVVEY4RGVjb2RlciIsInV0ZjhfY29kZV9wb2ludCIsInV0ZjhfYnl0ZXNfc2VlbiIsInV0ZjhfYnl0ZXNfbmVlZGVkIiwidXRmOF9sb3dlcl9ib3VuZGFyeSIsInV0ZjhfdXBwZXJfYm91bmRhcnkiLCJoYW5kbGVyIiwic3RyZWFtIiwiYml0ZSIsImNvZGVfcG9pbnQiLCJVVEY4RW5jb2RlciIsImNvdW50IiwiYnl0ZXMiLCJ0ZW1wIiwiZGVjb2RlIiwiaW5wdXQiLCJBcnJheUJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImlucHV0X3N0cmVhbSIsImNvZGVfcG9pbnRzIiwiaW5kZXhPZiIsImNwIiwiZnJvbUNoYXJDb2RlIiwiY29kZVBvaW50c1RvU3RyaW5nIiwiZW5jb2RlIiwib3B0X3N0cmluZyIsInN0cmluZyIsIm4iLCJ1IiwiY2hhckNvZGVBdCIsImIiLCJzdHJpbmdUb0NvZGVQb2ludHMiLCJiYXNlNjQiLCJpZWVlNzU0IiwiY3VzdG9tSW5zcGVjdFN5bWJvbCIsIlN5bWJvbCIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiS19NQVhfTEVOR1RIIiwiY3JlYXRlQnVmZmVyIiwiUmFuZ2VFcnJvciIsInNldFByb3RvdHlwZU9mIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsImFsbG9jVW5zYWZlIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsImZyb21TdHJpbmciLCJpc1ZpZXciLCJhcnJheVZpZXciLCJpc0luc3RhbmNlIiwiY29weSIsImZyb21BcnJheUJ1ZmZlciIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlWaWV3IiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJ2YWx1ZU9mIiwib2JqIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwibnVtYmVySXNOYU4iLCJ0eXBlIiwiZGF0YSIsImZyb21PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsImFzc2VydFNpemUiLCJzaXplIiwiYXJyYXkiLCJtdXN0TWF0Y2giLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInNsb3dUb1N0cmluZyIsInN0YXJ0IiwiZW5kIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsInZhbCIsImRpciIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJOdW1iZXIiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInN1YnN0ciIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJwcm90byIsImZvbyIsInR5cGVkQXJyYXlTdXBwb3J0IiwiY29uc29sZSIsImVudW1lcmFibGUiLCJnZXQiLCJwb29sU2l6ZSIsImZpbGwiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwieCIsInkiLCJsaXN0IiwicG9zIiwic2V0Iiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJpbnNwZWN0IiwicmVwbGFjZSIsInRyaW0iLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIl9hcnIiLCJyZXQiLCJvdXQiLCJoZXhTbGljZUxvb2t1cFRhYmxlIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIndydEJpZ1VJbnQ2NExFIiwiY2hlY2tJbnRCSSIsIndydEJpZ1VJbnQ2NEJFIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsImxpdHRsZUVuZGlhbiIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzdWJhcnJheSIsInJlYWRVaW50TEUiLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVpbnRCRSIsInJlYWRVSW50QkUiLCJyZWFkVWludDgiLCJyZWFkVUludDgiLCJyZWFkVWludDE2TEUiLCJyZWFkVUludDE2TEUiLCJyZWFkVWludDE2QkUiLCJyZWFkVWludDMyTEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVWludDMyQkUiLCJyZWFkVUludDMyQkUiLCJyZWFkQmlnVUludDY0TEUiLCJkZWZpbmVCaWdJbnRNZXRob2QiLCJ2YWxpZGF0ZU51bWJlciIsImZpcnN0IiwibGFzdCIsImJvdW5kc0Vycm9yIiwicmVhZEJpZ1VJbnQ2NEJFIiwicmVhZEludExFIiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRCaWdJbnQ2NExFIiwicmVhZEJpZ0ludDY0QkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVaW50TEUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVWludEJFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVpbnQ4Iiwid3JpdGVVSW50OCIsIndyaXRlVWludDE2TEUiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVaW50MTZCRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVpbnQzMkxFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVWludDMyQkUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVCaWdVSW50NjRMRSIsIndyaXRlQmlnVUludDY0QkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVCaWdJbnQ2NExFIiwid3JpdGVCaWdJbnQ2NEJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsImNvcHlXaXRoaW4iLCJjb2RlIiwiZXJyb3JzIiwiRSIsInN5bSIsImdldE1lc3NhZ2UiLCJCYXNlIiwiY29uc3RydWN0b3IiLCJzdXBlciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwic3RhY2siLCJhZGROdW1lcmljYWxTZXBhcmF0b3IiLCJyYW5nZSIsIkVSUl9PVVRfT0ZfUkFOR0UiLCJjaGVja0JvdW5kcyIsIkVSUl9JTlZBTElEX0FSR19UWVBFIiwiRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTIiwibXNnIiwicmVjZWl2ZWQiLCJpc0ludGVnZXIiLCJJTlZBTElEX0JBU0U2NF9SRSIsImxlYWRTdXJyb2dhdGUiLCJ0b0J5dGVBcnJheSIsInNwbGl0IiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJhbHBoYWJldCIsInRhYmxlIiwiaTE2IiwiQnVmZmVyQmlnSW50Tm90RGVmaW5lZCIsImpzb25ycGMiLCJDb25uZWN0aW9uIiwiUHVibGljS2V5IiwiS2V5cGFpciIsIkxBTVBPUlRTX1BFUl9TT0wiLCJnZXRCYWxhbmNlIiwiYXN5bmMiLCJjb25uZWN0aW9uIiwicHVibGljS2V5IiwiZ2V0QWNjb3VudEluZm8iLCJhY2NvdW50SW5mbyIsIm91dHB1dERhdGEiLCJvd25lciIsImV4ZWN1dGFibGUiLCJnZXRSZWNlbnRUcmFuc2FjdGlvbnMiLCJzaWduYXR1cmVzIiwiZ2V0U2lnbmF0dXJlc0ZvckFkZHJlc3MiLCJ0cmFuc2FjdGlvbnNJbmZvIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsInNpZ25hdHVyZUluZm8iLCJ0eEluZm8iLCJnZXRUcmFuc2FjdGlvbiIsInNpZ25hdHVyZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJibG9ja1RpbWUiLCJzdWNjZXNzZnVsIiwiY29uZmlybWF0aW9uU3RhdHVzIiwiZGV0YWlscyIsInRyYW5zYWN0aW9uc0FycmF5IiwiZm9yRWFjaCIsInR4IiwiaW5kZXgiLCJ0cmFuc2FjdGlvbkJsb2NrIiwiZ2V0TmV0d29ya0luZm8iLCJnZXRWZXJzaW9uIiwiYmxvY2tIZWlnaHQiLCJnZXRCbG9ja0hlaWdodCIsInNsb3QiLCJnZXRTbG90IiwiYmxvY2toYXNoIiwiZ2V0TGF0ZXN0QmxvY2toYXNoIiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJybmciLCJjcnlwdG8iLCJiaW5kIiwibXNDcnlwdG8iLCJieXRlVG9IZXgiLCJ0ZXN0Iiwicm5kcyIsInJhbmRvbSIsImFudW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwibGVuZ3RocyIsImFleGlzdHMiLCJpbnN0YW5jZSIsImNoZWNrRmluaXNoZWQiLCJkZXN0cm95ZWQiLCJhb3V0cHV0Iiwib3V0cHV0TGVuIiwiZ2xvYmFsVGhpcyIsImNyZWF0ZVZpZXciLCJEYXRhVmlldyIsInJvdHIiLCJ3b3JkIiwiVWludDMyQXJyYXkiLCJieXRlU3dhcDMyIiwidG9CeXRlcyIsIkhhc2giLCJjbG9uZSIsIl9jbG9uZUludG8iLCJoYXNoQ29ucyIsImhhc2hDIiwidXBkYXRlIiwiZGlnZXN0IiwidG1wIiwiYmxvY2tMZW4iLCJieXRlc0xlbmd0aCIsInJhbmRvbUJ5dGVzIiwiTWFqIiwiSGFzaE1EIiwicGFkT2Zmc2V0IiwidmlldyIsInRha2UiLCJwcm9jZXNzIiwiZGF0YVZpZXciLCJyb3VuZENsZWFuIiwiZGlnZXN0SW50byIsInNldEJpZ1VpbnQ2NCIsIl8zMm4iLCJfdTMyX21heCIsIndoIiwid2wiLCJoIiwic2V0VWludDMyIiwib3ZpZXciLCJvdXRMZW4iLCJzdGF0ZSIsImRlc3Ryb3kiLCJ0byIsIlUzMl9NQVNLNjQiLCJmcm9tQmlnIiwibGUiLCJsc3QiLCJBaCIsIkFsIiwicm90bFNIIiwicm90bFNMIiwicm90bEJIIiwicm90bEJMIiwidG9CaWciLCJzaHJTSCIsIl9sIiwic2hyU0wiLCJyb3RyU0giLCJyb3RyU0wiLCJyb3RyQkgiLCJyb3RyQkwiLCJyb3RyMzJIIiwiX2giLCJyb3RyMzJMIiwiYWRkIiwiQmgiLCJCbCIsImFkZDNMIiwiQ2wiLCJhZGQzSCIsImxvdyIsIkNoIiwiYWRkNEwiLCJEbCIsImFkZDRIIiwiRGgiLCJhZGQ1SCIsIkVoIiwiYWRkNUwiLCJFbCIsIlNIQTUxMl9LaCIsIlNIQTUxMl9LbCIsIlNIQTUxMl9XX0giLCJTSEE1MTJfV19MIiwiU0hBNTEyIiwiRmgiLCJGbCIsIkdoIiwiR2wiLCJIaCIsIkhsIiwiZ2V0VWludDMyIiwiVzE1aCIsIlcxNWwiLCJzMGgiLCJzMGwiLCJXMmgiLCJXMmwiLCJzMWgiLCJzMWwiLCJTVU1sIiwiU1VNaCIsInNpZ21hMWgiLCJzaWdtYTFsIiwiQ0hJaCIsIkNISWwiLCJUMWxsIiwiVDFoIiwiVDFsIiwic2lnbWEwaCIsInNpZ21hMGwiLCJNQUpoIiwiTUFKbCIsIkFsbCIsIl8wbiIsIl8xbiIsIl8ybiIsIml0ZW0iLCJhYm9vbCIsInRpdGxlIiwiXyIsIm51bWJlclRvSGV4VW5wYWRkZWQiLCJoZXhUb051bWJlciIsIl8wIiwiXzkiLCJBIiwiRiIsImYiLCJjaCIsImhsIiwiYWwiLCJhaSIsIm4xIiwibjIiLCJjaGFyIiwiZXhwZWN0ZWRMZW5ndGgiLCJhcnJheXMiLCJzdW0iLCJwYWQiLCJpc1Bvc0JpZyIsImJpdExlbiIsImJpdE1hc2siLCJ1OG4iLCJ1OGZyIiwiY3JlYXRlSG1hY0RyYmciLCJoYXNoTGVuIiwicUJ5dGVMZW4iLCJobWFjRm4iLCJ2IiwiayIsInJlc2V0IiwicmVzZWVkIiwic2VlZCIsImdlbiIsInNsIiwicHJlZCIsInZhbGlkYXRvckZucyIsImJpZ2ludCIsImZ1bmN0aW9uIiwiYm9vbGVhbiIsInN0cmluZ09yVWludDhBcnJheSIsImZpZWxkIiwib2JqZWN0IiwiRnAiLCJpc1ZhbGlkIiwiaGFzaCIsInZhbGlkYXRlT2JqZWN0IiwidmFsaWRhdG9ycyIsIm9wdFZhbGlkYXRvcnMiLCJjaGVja0ZpZWxkIiwiZmllbGROYW1lIiwiaXNPcHRpb25hbCIsImNoZWNrVmFsIiwiZW50cmllcyIsIm1lbW9pemVkIiwiV2Vha01hcCIsImNvbXB1dGVkIiwiXzNuIiwiXzRuIiwiXzVuIiwiXzhuIiwicG93ZXIiLCJtb2R1bG8iLCJpbnZlcnQiLCJudW1iZXIiLCJxIiwiciIsIkZJRUxEX0ZJRUxEUyIsIm5MZW5ndGgiLCJuQml0TGVuZ3RoIiwiX25CaXRMZW5ndGgiLCJuQnl0ZUxlbmd0aCIsImNlaWwiLCJPUkRFUiIsInJlZGVmIiwiQklUUyIsIkJZVEVTIiwic3FydFAiLCJmcmVlemUiLCJNQVNLIiwiWkVSTyIsIk9ORSIsImlzMCIsImlzT2RkIiwibmVnIiwiZXFsIiwibGhzIiwicmhzIiwic3FyIiwicCIsIkZwUG93IiwiZGl2Iiwic3FyTiIsImFkZE4iLCJzdWJOIiwibXVsTiIsImludiIsInNxcnQiLCJQIiwicDFkaXY0Iiwicm9vdCIsImMxIiwibnYiLCJsZWdlbmRyZUMiLCJRIiwiUyIsIloiLCJRMWRpdjIiLCJnIiwidDIiLCJnZSIsInRvbmVsbGlTaGFua3MiLCJGcFNxcnQiLCJpbnZlcnRCYXRjaCIsIm51bXMiLCJsYXN0TXVsdGlwbGllZCIsInJlZHVjZSIsImFjYyIsImludmVydGVkIiwicmVkdWNlUmlnaHQiLCJGcEludmVydEJhdGNoIiwiY21vdiIsImZyb21CeXRlcyIsImdldEZpZWxkQnl0ZXNMZW5ndGgiLCJmaWVsZE9yZGVyIiwiYml0TGVuZ3RoIiwiZ2V0TWluSGFzaExlbmd0aCIsImNvbnN0VGltZU5lZ2F0ZSIsImNvbmRpdGlvbiIsIm5lZ2F0ZSIsInZhbGlkYXRlVyIsIlciLCJiaXRzIiwiY2FsY1dPcHRzIiwid2luZG93cyIsIndpbmRvd1NpemUiLCJwb2ludFByZWNvbXB1dGVzIiwicG9pbnRXaW5kb3dTaXplcyIsImdldFciLCJ3TkFGIiwiaGFzUHJlY29tcHV0ZXMiLCJlbG0iLCJ1bnNhZmVMYWRkZXIiLCJkb3VibGUiLCJwcmVjb21wdXRlV2luZG93IiwicG9pbnRzIiwiYmFzZSIsIndpbmRvdyIsInByZWNvbXB1dGVzIiwiQkFTRSIsIm1hc2siLCJtYXhOdW1iZXIiLCJzaGlmdEJ5Iiwid2JpdHMiLCJvZmZzZXQxIiwib2Zmc2V0MiIsImNvbmQxIiwiY29uZDIiLCJ3TkFGVW5zYWZlIiwiY3VyciIsImdldFByZWNvbXB1dGVzIiwidHJhbnNmb3JtIiwiY29tcCIsIndOQUZDYWNoZWQiLCJ3TkFGQ2FjaGVkVW5zYWZlIiwicHJldiIsInNldFdpbmRvd1NpemUiLCJkZWxldGUiLCJmaWVsZE4iLCJzY2FsYXJzIiwidmFsaWRhdGVNU01Qb2ludHMiLCJ2YWxpZGF0ZU1TTVNjYWxhcnMiLCJ6ZXJvIiwiYnVja2V0cyIsInNjYWxhciIsInJlc0kiLCJzdW1JIiwidmFsaWRhdGVCYXNpYyIsImN1cnZlIiwiR3giLCJHeSIsIlZFUklGWV9ERUZBVUxUIiwiemlwMjE1IiwiRUQyNTUxOV9QIiwiRUQyNTUxOV9TUVJUX00xIiwiYWRqdXN0U2NhbGFyQnl0ZXMiLCJ1dlJhdGlvIiwidjMiLCJ2NyIsIl8xMG4iLCJfMjBuIiwiXzQwbiIsIl84MG4iLCJiMiIsImI0IiwiYjUiLCJiMTAiLCJiMjAiLCJiNDAiLCJiODAiLCJiMTYwIiwiYjI0MCIsImIyNTAiLCJwb3dfcF81XzgiLCJlZDI1NTE5X3Bvd18yXzI1Ml8zIiwidngyIiwicm9vdDEiLCJyb290MiIsInVzZVJvb3QxIiwidXNlUm9vdDIiLCJub1Jvb3QiLCJlZDI1NTE5RGVmYXVsdHMiLCJlZDI1NTE5IiwiY3VydmVEZWYiLCJDVVJWRSIsIm9wdHMiLCJkb21haW4iLCJtYXBUb0N1cnZlIiwidmFsaWRhdGVPcHRzIiwicHJlaGFzaCIsImNIYXNoIiwiY29mYWN0b3IiLCJtb2RQIiwiRm4iLCJjdHgiLCJwaGZsYWciLCJhQ29vcmRpbmF0ZSIsImFzc2VydFBvaW50Iiwib3RoZXIiLCJQb2ludCIsInRvQWZmaW5lTWVtbyIsIml6IiwiZXgiLCJleSIsImV6IiwieiIsImF4IiwiYXkiLCJ6eiIsImFzc2VydFZhbGlkTWVtbyIsIlgiLCJZIiwiZXQiLCJUIiwiWDIiLCJZMiIsIloyIiwiWjQiLCJhWDIiLCJ0b0FmZmluZSIsImZyb21BZmZpbmUiLCJub3JtYWxpemVaIiwidG9JbnYiLCJtc20iLCJfc2V0V2luZG93U2l6ZSIsInduYWYiLCJhc3NlcnRWYWxpZGl0eSIsIlgxIiwiWTEiLCJaMSIsIlgxWjIiLCJYMloxIiwiWTFaMiIsIlkyWjEiLCJCIiwiQyIsIkQiLCJ4MXkxIiwiRyIsIkgiLCJYMyIsIlkzIiwiVDMiLCJaMyIsIlQxIiwiVDIiLCJzdWJ0cmFjdCIsIm11bHRpcGx5IiwiQ1VSVkVfT1JERVIiLCJtdWx0aXBseVVuc2FmZSIsIkkiLCJpc1NtYWxsT3JkZXIiLCJpc1RvcnNpb25GcmVlIiwiY2xlYXJDb2ZhY3RvciIsImZyb21IZXgiLCJub3JtZWQiLCJsYXN0Qnl0ZSIsInkyIiwiaXNYT2RkIiwiaXNMYXN0Qnl0ZU9kZCIsImZyb21Qcml2YXRlS2V5IiwicHJpdktleSIsImdldEV4dGVuZGVkUHVibGljS2V5IiwicG9pbnQiLCJ0b1Jhd0J5dGVzIiwidG9IZXgiLCJtb2ROIiwibW9kTl9MRSIsImtleSIsImhhc2hlZCIsImhlYWQiLCJwb2ludEJ5dGVzIiwiaGFzaERvbWFpblRvU2NhbGFyIiwibXNncyIsInZlcmlmeU9wdHMiLCJnZXRQdWJsaWNLZXkiLCJzaWduIiwiUiIsInZlcmlmeSIsInNpZyIsIlNCIiwiRXh0ZW5kZWRQb2ludCIsInV0aWxzIiwicmFuZG9tUHJpdmF0ZUtleSIsInByZWNvbXB1dGUiLCJTSEEyNTZfSyIsIlNIQTI1Nl9JViIsIlNIQTI1Nl9XIiwiU0hBMjU2IiwiVzE1IiwiVzIiLCJzMCIsInMxIiwiU3RydWN0RXJyb3IiLCJmYWlsdXJlIiwiZmFpbHVyZXMiLCJjYWNoZWQiLCJleHBsYW5hdGlvbiIsInJlc3QiLCJwYXRoIiwiam9pbiIsImNhdXNlIiwiYXNzaWduIiwiaXNPYmplY3QiLCJpc05vbkFycmF5T2JqZWN0IiwicHJpbnQiLCJ0b0ZhaWx1cmUiLCJzdHJ1Y3QiLCJicmFuY2giLCJyZWZpbmVtZW50IiwidG9GYWlsdXJlcyIsIml0ZXJhdG9yIiwicnVuIiwiY29lcmNlIiwiY29lcmNlciIsInN0YXR1cyIsInZhbGlkYXRvciIsInRzIiwidCIsIk1hcCIsIlNldCIsInJlZmluZXIiLCJTdHJ1Y3QiLCJwcm9wcyIsInNjaGVtYSIsImFzc2VydCIsImlzIiwidmFsaWRhdGUiLCJ0dXBsZXMiLCJ0dXBsZSIsImRvbmUiLCJuZXh0Iiwic2hpZnRJdGVyYXRvciIsIkVsZW1lbnQiLCJDbGFzcyIsImxpdGVyYWwiLCJjb25zdGFudCIsImRlc2NyaXB0aW9uIiwibnVsbGFibGUiLCJvcHRpb25hbCIsInJlY29yZCIsIktleSIsIlZhbHVlIiwiU3RydWN0cyIsIk5ldmVyIiwia2V5cyIsInVuaW9uIiwiY29lcmNlZCIsInVua25vd24iLCJXZWJTb2NrZXRCcm93c2VySW1wbCIsInNvY2tldCIsImFkZHJlc3MiLCJwcm90b2NvbHMiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbm1lc3NhZ2UiLCJvbmVycm9yIiwib25jbG9zZSIsInJlYXNvbiIsInNlbmQiLCJvcHRpb25zT3JDYWxsYmFjayIsImNiIiwiY2xvc2UiLCJhZGRFdmVudExpc3RlbmVyIiwiRGVmYXVsdERhdGFQYWNrIiwiQ29tbW9uQ2xpZW50IiwicnBjX2lkIiwicXVldWUiLCJhdXRvY29ubmVjdCIsInJlYWR5IiwicmVjb25uZWN0IiwicmVjb25uZWN0X3RpbWVyX2lkIiwicmVjb25uZWN0X2ludGVydmFsIiwibWF4X3JlY29ubmVjdHMiLCJyZXN0X29wdGlvbnMiLCJjdXJyZW50X3JlY29ubmVjdHMiLCJnZW5lcmF0ZV9yZXF1ZXN0X2lkIiwid2ViU29ja2V0RmFjdG9yeSIsImRhdGFQYWNrIiwiX2Nvbm5lY3QiLCJjb25uZWN0IiwidGltZW91dCIsIndzX29wdHMiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvbWlzZSIsInNldFRpbWVvdXQiLCJsb2dpbiIsInJlc3AiLCJsaXN0TWV0aG9kcyIsIm5vdGlmeSIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwic2V0QXV0b1JlY29ubmVjdCIsInNldFJlY29ubmVjdEludGVydmFsIiwiaW50ZXJ2YWwiLCJzZXRNYXhSZWNvbm5lY3RzIiwiY2xlYXJUaW1lb3V0Iiwibm90aWZpY2F0aW9uIiwidGhlbiIsIlNIQTNfUEkiLCJTSEEzX1JPVEwiLCJfU0hBM19JT1RBIiwiXzduIiwiXzI1Nm4iLCJfMHg3MW4iLCJyb3VuZCIsIlNIQTNfSU9UQV9IIiwiU0hBM19JT1RBX0wiLCJyb3RsSCIsInJvdGxMIiwiS2VjY2FrIiwic3VmZml4IiwiZW5hYmxlWE9GIiwicm91bmRzIiwicG9zT3V0Iiwic3RhdGUzMiIsImtlY2NhayIsImlkeDEiLCJpZHgwIiwiQjAiLCJCMSIsIlRoIiwiVGwiLCJjdXJIIiwiY3VyTCIsIlBJIiwia2VjY2FrUCIsImZpbmlzaCIsIndyaXRlSW50byIsImJ1ZmZlck91dCIsInhvZkludG8iLCJ4b2YiLCJrZWNjYWtfMjU2IiwiSE1BQyIsIl9rZXkiLCJhaGFzaCIsImlIYXNoIiwib0hhc2giLCJnZXRQcm90b3R5cGVPZiIsImhtYWMiLCJ2YWxpZGF0ZVNpZ1Zlck9wdHMiLCJsb3dTIiwiYjJuIiwiaDJiIiwiREVSRXJyIiwiREVSIiwiRXJyIiwiX3RsdiIsInRhZyIsImRhdGFMZW4iLCJsZW5MZW4iLCJsZW5ndGhCeXRlcyIsIl9pbnQiLCJ0b1NpZyIsImludCIsInRsdiIsInNlcUJ5dGVzIiwic2VxTGVmdEJ5dGVzIiwickJ5dGVzIiwickxlZnRCeXRlcyIsInNCeXRlcyIsInNMZWZ0Qnl0ZXMiLCJoZXhGcm9tU2lnIiwic2VxIiwid2VpZXJzdHJhc3MiLCJiaXRzMmludCIsImJpdHMyaW50X21vZE4iLCJjb21wcmVzc2VkTGVuIiwidW5jb21wcmVzc2VkTGVuIiwiaW52TiIsIlByb2plY3RpdmVQb2ludCIsIm5vcm1Qcml2YXRlS2V5VG9TY2FsYXIiLCJ3ZWllcnN0cmFzc0VxdWF0aW9uIiwiaXNXaXRoaW5DdXJ2ZU9yZGVyIiwiYWxsb3dlZFByaXZhdGVLZXlMZW5ndGhzIiwid3JhcFByaXZhdGVLZXkiLCJhbGxvd0luZmluaXR5UG9pbnQiLCJlbmRvIiwiYmV0YSIsInNwbGl0U2NhbGFyIiwidmFsaWRhdGVQb2ludE9wdHMiLCJfYyIsIl9pc0NvbXByZXNzZWQiLCJ0YWlsIiwieDIiLCJ4MyIsIk4iLCJhc3NlcnRQcmpQb2ludCIsInB4IiwicHkiLCJweiIsImxlZnQiLCJyaWdodCIsInByaXZhdGVLZXkiLCJoYXNFdmVuWSIsIlUxIiwiVTIiLCJiMyIsInQwIiwidDEiLCJ0MyIsInQ0IiwidDUiLCJzYyIsImsxbmVnIiwiazEiLCJrMm5lZyIsImsyIiwiazFwIiwiazJwIiwiZmFrZSIsImYxcCIsImYycCIsIm11bHRpcGx5QW5kQWRkVW5zYWZlIiwiaXNDb21wcmVzc2VkIiwiX2JpdHMiLCJ3ZWllcnN0cmFzc1BvaW50cyIsImNhdCIsInNxcnRFcnJvciIsIm51bVRvTkJ5dGVTdHIiLCJpc0JpZ2dlclRoYW5IYWxmT3JkZXIiLCJzbGNOdW0iLCJTaWduYXR1cmUiLCJyZWNvdmVyeSIsImZyb21Db21wYWN0IiwiZnJvbURFUiIsImFkZFJlY292ZXJ5Qml0IiwicmVjb3ZlclB1YmxpY0tleSIsIm1zZ0hhc2giLCJyZWMiLCJyYWRqIiwiaXIiLCJ1MSIsInUyIiwiaGFzSGlnaFMiLCJub3JtYWxpemVTIiwidG9ERVJSYXdCeXRlcyIsInRvREVSSGV4IiwidG9Db21wYWN0UmF3Qnl0ZXMiLCJ0b0NvbXBhY3RIZXgiLCJpc1ZhbGlkUHJpdmF0ZUtleSIsImZpZWxkTGVuIiwibWluTGVuIiwicmVkdWNlZCIsIm1hcEhhc2hUb0ZpZWxkIiwiaXNQcm9iUHViIiwiZGVsdGEiLCJPUkRFUl9NQVNLIiwiaW50Mm9jdGV0cyIsImRlZmF1bHRTaWdPcHRzIiwiZGVmYXVsdFZlck9wdHMiLCJnZXRTaGFyZWRTZWNyZXQiLCJwcml2YXRlQSIsInB1YmxpY0IiLCJrMnNpZyIsInNvbWUiLCJleHRyYUVudHJvcHkiLCJlbnQiLCJoMWludCIsInNlZWRBcmdzIiwia0J5dGVzIiwiaWsiLCJub3JtUyIsInByZXBTaWciLCJkcmJnIiwic2ciLCJmb3JtYXQiLCJpc0hleCIsImlzT2JqIiwiX3NpZyIsImRlckVycm9yIiwiZ2V0SGFzaCIsInNlY3AyNTZrMVAiLCJzZWNwMjU2azFOIiwiZGl2TmVhcmVzdCIsIkZwazEiLCJfNm4iLCJfMTFuIiwiXzIybiIsIl8yM24iLCJfNDRuIiwiXzg4biIsImI2IiwiYjkiLCJiMTEiLCJiMjIiLCJiNDQiLCJiODgiLCJiMTc2IiwiYjIyMCIsImIyMjMiLCJzZWNwMjU2azEiLCJkZWZIYXNoIiwiY3JlYXRlQ3VydmUiLCJiMSIsIlBPV18yXzEyOCIsImMyIiwiZ2VuZXJhdGVQcml2YXRlS2V5IiwiZ2VuZXJhdGVLZXlwYWlyIiwicHJpdmF0ZVNjYWxhciIsInNlY3JldEtleSIsImlzT25DdXJ2ZSIsInRvQnVmZmVyIiwicHJvcGVydGllcyIsInNlcmlhbGl6ZSIsIlNPTEFOQV9TQ0hFTUEiLCJkZXNlcmlhbGl6ZSIsImRlY29kZVVuY2hlY2tlZCIsImRlc2VyaWFsaXplVW5jaGVja2VkIiwiRW51bSIsImVudW0iLCJfUHVibGljS2V5IiwiTUFYX1NFRURfTEVOR1RIIiwiUFVCTElDX0tFWV9MRU5HVEgiLCJ1bmlxdWVQdWJsaWNLZXlDb3VudGVyIiwiX2JuIiwiaXNQdWJsaWNLZXlEYXRhIiwiZGVjb2RlZCIsInVuaXF1ZSIsImVxIiwidG9CYXNlNTgiLCJ0b0FycmF5TGlrZSIsInplcm9QYWQiLCJ0b1N0cmluZ1RhZyIsImNyZWF0ZVdpdGhTZWVkIiwiZnJvbVB1YmxpY0tleSIsInByb2dyYW1JZCIsInB1YmxpY0tleUJ5dGVzIiwiY3JlYXRlUHJvZ3JhbUFkZHJlc3NTeW5jIiwic2VlZHMiLCJjcmVhdGVQcm9ncmFtQWRkcmVzcyIsImZpbmRQcm9ncmFtQWRkcmVzc1N5bmMiLCJub25jZSIsInNlZWRzV2l0aE5vbmNlIiwiZmluZFByb2dyYW1BZGRyZXNzIiwicHVia2V5RGF0YSIsImRlZmF1bHQiLCJraW5kIiwiZmllbGRzIiwiQWNjb3VudCIsIl9wdWJsaWNLZXkiLCJfc2VjcmV0S2V5Iiwic2VjcmV0S2V5QnVmZmVyIiwiQlBGX0xPQURFUl9ERVBSRUNBVEVEX1BST0dSQU1fSUQiLCJQQUNLRVRfREFUQV9TSVpFIiwiVkVSU0lPTl9QUkVGSVhfTUFTSyIsIlNJR05BVFVSRV9MRU5HVEhfSU5fQllURVMiLCJUcmFuc2FjdGlvbkV4cGlyZWRCbG9ja2hlaWdodEV4Y2VlZGVkRXJyb3IiLCJUcmFuc2FjdGlvbkV4cGlyZWRUaW1lb3V0RXJyb3IiLCJ0aW1lb3V0U2Vjb25kcyIsInRvRml4ZWQiLCJUcmFuc2FjdGlvbkV4cGlyZWROb25jZUludmFsaWRFcnJvciIsIk1lc3NhZ2VBY2NvdW50S2V5cyIsInN0YXRpY0FjY291bnRLZXlzIiwiYWNjb3VudEtleXNGcm9tTG9va3VwcyIsImtleVNlZ21lbnRzIiwicmVhZG9ubHkiLCJrZXlTZWdtZW50IiwiZmxhdCIsImNvbXBpbGVJbnN0cnVjdGlvbnMiLCJpbnN0cnVjdGlvbnMiLCJVOF9NQVgiLCJrZXlJbmRleE1hcCIsImZpbmRLZXlJbmRleCIsImtleUluZGV4IiwiaW5zdHJ1Y3Rpb24iLCJwcm9ncmFtSWRJbmRleCIsImFjY291bnRLZXlJbmRleGVzIiwibWV0YSIsInB1YmtleSIsInByb3BlcnR5IiwicnVzdFN0cmluZyIsInJzbCIsIl9kZWNvZGUiLCJfZW5jb2RlIiwicnNsU2hpbSIsImNoYXJzIiwic3BhbiIsImdldEFsbG9jIiwiZ2V0SXRlbUFsbG9jIiwiZWxlbWVudExheW91dCIsImxheW91dCIsImRlY29kZUxlbmd0aCIsImVsZW0iLCJlbmNvZGVMZW5ndGgiLCJyZW1fbGVuIiwiQ29tcGlsZWRLZXlzIiwicGF5ZXIiLCJrZXlNZXRhTWFwIiwiY29tcGlsZSIsImdldE9ySW5zZXJ0RGVmYXVsdCIsImtleU1ldGEiLCJpc1NpZ25lciIsImlzV3JpdGFibGUiLCJpc0ludm9rZWQiLCJwYXllcktleU1ldGEiLCJpeCIsImFjY291bnRNZXRhIiwiZ2V0TWVzc2FnZUNvbXBvbmVudHMiLCJtYXBFbnRyaWVzIiwid3JpdGFibGVTaWduZXJzIiwicmVhZG9ubHlTaWduZXJzIiwid3JpdGFibGVOb25TaWduZXJzIiwicmVhZG9ubHlOb25TaWduZXJzIiwiaGVhZGVyIiwibnVtUmVxdWlyZWRTaWduYXR1cmVzIiwibnVtUmVhZG9ubHlTaWduZWRBY2NvdW50cyIsIm51bVJlYWRvbmx5VW5zaWduZWRBY2NvdW50cyIsInBheWVyQWRkcmVzcyIsImV4dHJhY3RUYWJsZUxvb2t1cCIsImxvb2t1cFRhYmxlIiwid3JpdGFibGVJbmRleGVzIiwiZHJhaW5lZFdyaXRhYmxlS2V5cyIsImRyYWluS2V5c0ZvdW5kSW5Mb29rdXBUYWJsZSIsImFkZHJlc3NlcyIsInJlYWRvbmx5SW5kZXhlcyIsImRyYWluZWRSZWFkb25seUtleXMiLCJhY2NvdW50S2V5IiwibG9va3VwVGFibGVFbnRyaWVzIiwia2V5TWV0YUZpbHRlciIsImxvb2t1cFRhYmxlSW5kZXhlcyIsImRyYWluZWRLZXlzIiwibG9va3VwVGFibGVJbmRleCIsImZpbmRJbmRleCIsImVudHJ5IiwiRU5EX09GX0JVRkZFUl9FUlJPUl9NRVNTQUdFIiwiZ3VhcmRlZFNoaWZ0IiwiZ3VhcmRlZFNwbGljZSIsInNwbGljZSIsIk1lc3NhZ2UiLCJhY2NvdW50S2V5cyIsInJlY2VudEJsb2NraGFzaCIsImluZGV4VG9Qcm9ncmFtSWRzIiwiYWNjb3VudCIsImNvbXBpbGVkSW5zdHJ1Y3Rpb25zIiwiYWNjb3VudHMiLCJhZGRyZXNzVGFibGVMb29rdXBzIiwiZ2V0QWNjb3VudEtleXMiLCJjb21waWxlZEtleXMiLCJwYXllcktleSIsImlzQWNjb3VudFNpZ25lciIsImlzQWNjb3VudFdyaXRhYmxlIiwibnVtU2lnbmVkQWNjb3VudHMiLCJpc1Byb2dyYW1JZCIsInByb2dyYW1JZHMiLCJ2YWx1ZXMiLCJub25Qcm9ncmFtSWRzIiwibnVtS2V5cyIsImtleUNvdW50Iiwia2V5SW5kaWNlc0NvdW50IiwiZGF0YUNvdW50Iiwia2V5SW5kaWNlcyIsImRhdGFMZW5ndGgiLCJpbnN0cnVjdGlvbkNvdW50IiwiaW5zdHJ1Y3Rpb25CdWZmZXIiLCJpbnN0cnVjdGlvbkJ1ZmZlckxlbmd0aCIsInNpZ25EYXRhTGF5b3V0IiwidHJhbnNhY3Rpb24iLCJzaWduRGF0YSIsImFjY291bnRDb3VudCIsImRhdGFTbGljZSIsIm1lc3NhZ2VBcmdzIiwiTWVzc2FnZVYwIiwibnVtQWNjb3VudEtleXNGcm9tTG9va3VwcyIsImxvb2t1cCIsImFkZHJlc3NMb29rdXBUYWJsZUFjY291bnRzIiwicmVzb2x2ZUFkZHJlc3NUYWJsZUxvb2t1cHMiLCJudW1TdGF0aWNBY2NvdW50S2V5cyIsInRhYmxlTG9va3VwIiwidGFibGVBY2NvdW50IiwiZmluZCIsImxvb2t1cFRhYmxlQWNjb3VudHMiLCJleHRyYWN0UmVzdWx0IiwiYWRkcmVzc1RhYmxlTG9va3VwIiwiZW5jb2RlZFN0YXRpY0FjY291bnRLZXlzTGVuZ3RoIiwic2VyaWFsaXplZEluc3RydWN0aW9ucyIsInNlcmlhbGl6ZUluc3RydWN0aW9ucyIsImVuY29kZWRJbnN0cnVjdGlvbnNMZW5ndGgiLCJzZXJpYWxpemVkQWRkcmVzc1RhYmxlTG9va3VwcyIsInNlcmlhbGl6ZUFkZHJlc3NUYWJsZUxvb2t1cHMiLCJlbmNvZGVkQWRkcmVzc1RhYmxlTG9va3Vwc0xlbmd0aCIsIm1lc3NhZ2VMYXlvdXQiLCJzZXJpYWxpemVkTWVzc2FnZSIsInNlcmlhbGl6ZWRNZXNzYWdlTGVuZ3RoIiwic3RhdGljQWNjb3VudEtleXNMZW5ndGgiLCJpbnN0cnVjdGlvbnNMZW5ndGgiLCJhZGRyZXNzVGFibGVMb29rdXBzTGVuZ3RoIiwic2VyaWFsaXplZExlbmd0aCIsImVuY29kZWRBY2NvdW50S2V5SW5kZXhlc0xlbmd0aCIsImVuY29kZWREYXRhTGVuZ3RoIiwiZW5jb2RlZFdyaXRhYmxlSW5kZXhlc0xlbmd0aCIsImVuY29kZWRSZWFkb25seUluZGV4ZXNMZW5ndGgiLCJtYXNrZWRQcmVmaXgiLCJhZGRyZXNzVGFibGVMb29rdXBzQ291bnQiLCJWZXJzaW9uZWRNZXNzYWdlIiwiZGVzZXJpYWxpemVNZXNzYWdlVmVyc2lvbiIsIlRyYW5zYWN0aW9uU3RhdHVzIiwiREVGQVVMVF9TSUdOQVRVUkUiLCJUcmFuc2FjdGlvbkluc3RydWN0aW9uIiwiVHJhbnNhY3Rpb24iLCJmZWVQYXllciIsImxhc3RWYWxpZEJsb2NrSGVpZ2h0Iiwibm9uY2VJbmZvIiwibWluTm9uY2VDb250ZXh0U2xvdCIsIl9tZXNzYWdlIiwiX2pzb24iLCJtaW5Db250ZXh0U2xvdCIsIm5vbmNlSW5zdHJ1Y3Rpb24iLCJzaWduZXJzIiwiaXRlbXMiLCJjb21waWxlTWVzc2FnZSIsIndhcm4iLCJhY2NvdW50TWV0YXMiLCJ1bmlxdWVNZXRhcyIsInB1YmtleVN0cmluZyIsInVuaXF1ZUluZGV4Iiwic29ydCIsImxvY2FsZUNvbXBhcmUiLCJsb2NhbGVNYXRjaGVyIiwidXNhZ2UiLCJzZW5zaXRpdml0eSIsImlnbm9yZVB1bmN0dWF0aW9uIiwibnVtZXJpYyIsImNhc2VGaXJzdCIsImZlZVBheWVySW5kZXgiLCJwYXllck1ldGEiLCJzaWduZWRLZXlzIiwidW5zaWduZWRLZXlzIiwiX2NvbXBpbGUiLCJldmVyeSIsInBhaXIiLCJzZXJpYWxpemVNZXNzYWdlIiwiZ2V0RXN0aW1hdGVkRmVlIiwiZ2V0RmVlRm9yTWVzc2FnZSIsInNldFNpZ25lcnMiLCJzZWVuIiwidW5pcXVlU2lnbmVycyIsInNpZ25lciIsIl9wYXJ0aWFsU2lnbiIsInBhcnRpYWxTaWduIiwiX2FkZFNpZ25hdHVyZSIsImFkZFNpZ25hdHVyZSIsInNpZ3BhaXIiLCJ2ZXJpZnlTaWduYXR1cmVzIiwicmVxdWlyZUFsbFNpZ25hdHVyZXMiLCJfZ2V0TWVzc2FnZVNpZ25lZG5lc3NFcnJvcnMiLCJtaXNzaW5nIiwiaW52YWxpZCIsImNvbmZpZyIsInNpZ0Vycm9ycyIsImVycm9yTWVzc2FnZSIsIl9zZXJpYWxpemUiLCJzaWduYXR1cmVDb3VudCIsInRyYW5zYWN0aW9uTGVuZ3RoIiwid2lyZVRyYW5zYWN0aW9uIiwia2V5T2JqIiwicG9wdWxhdGUiLCJzaWdQdWJrZXlQYWlyIiwiVHJhbnNhY3Rpb25NZXNzYWdlIiwiZGVjb21waWxlIiwibnVtV3JpdGFibGVTaWduZWRBY2NvdW50cyIsIm51bVdyaXRhYmxlVW5zaWduZWRBY2NvdW50cyIsImNvbXBpbGVkSXgiLCJjb21waWxlVG9MZWdhY3lNZXNzYWdlIiwiY29tcGlsZVRvVjBNZXNzYWdlIiwiVmVyc2lvbmVkVHJhbnNhY3Rpb24iLCJkZWZhdWx0U2lnbmF0dXJlcyIsImVuY29kZWRTaWduYXR1cmVzTGVuZ3RoIiwidHJhbnNhY3Rpb25MYXlvdXQiLCJzZXJpYWxpemVkVHJhbnNhY3Rpb24iLCJzZXJpYWxpemVkVHJhbnNhY3Rpb25MZW5ndGgiLCJzaWduYXR1cmVzTGVuZ3RoIiwibWVzc2FnZURhdGEiLCJzaWduZXJQdWJrZXlzIiwic2lnbmVySW5kZXgiLCJTWVNWQVJfQ0xPQ0tfUFVCS0VZIiwiU1lTVkFSX0VQT0NIX1NDSEVEVUxFX1BVQktFWSIsIlNZU1ZBUl9JTlNUUlVDVElPTlNfUFVCS0VZIiwiU1lTVkFSX1JFQ0VOVF9CTE9DS0hBU0hFU19QVUJLRVkiLCJTWVNWQVJfUkVOVF9QVUJLRVkiLCJTWVNWQVJfUkVXQVJEU19QVUJLRVkiLCJTWVNWQVJfU0xPVF9IQVNIRVNfUFVCS0VZIiwiU1lTVkFSX1NMT1RfSElTVE9SWV9QVUJLRVkiLCJTWVNWQVJfU1RBS0VfSElTVE9SWV9QVUJLRVkiLCJTZW5kVHJhbnNhY3Rpb25FcnJvciIsImFjdGlvbiIsInRyYW5zYWN0aW9uTWVzc2FnZSIsImxvZ3MiLCJtYXliZUxvZ3NPdXRwdXQiLCJndWlkZVRleHQiLCJ0cmFuc2FjdGlvbkxvZ3MiLCJ0cmFuc2FjdGlvbkVycm9yIiwiY2FjaGVkTG9ncyIsImdldExvZ3MiLCJsb2dNZXNzYWdlcyIsImNhdGNoIiwiU29sYW5hSlNPTlJQQ0Vycm9yQ29kZSIsIkpTT05fUlBDX1NFUlZFUl9FUlJPUl9CTE9DS19DTEVBTkVEX1VQIiwiSlNPTl9SUENfU0VSVkVSX0VSUk9SX1NFTkRfVFJBTlNBQ1RJT05fUFJFRkxJR0hUX0ZBSUxVUkUiLCJKU09OX1JQQ19TRVJWRVJfRVJST1JfVFJBTlNBQ1RJT05fU0lHTkFUVVJFX1ZFUklGSUNBVElPTl9GQUlMVVJFIiwiSlNPTl9SUENfU0VSVkVSX0VSUk9SX0JMT0NLX05PVF9BVkFJTEFCTEUiLCJKU09OX1JQQ19TRVJWRVJfRVJST1JfTk9ERV9VTkhFQUxUSFkiLCJKU09OX1JQQ19TRVJWRVJfRVJST1JfVFJBTlNBQ1RJT05fUFJFQ09NUElMRV9WRVJJRklDQVRJT05fRkFJTFVSRSIsIkpTT05fUlBDX1NFUlZFUl9FUlJPUl9TTE9UX1NLSVBQRUQiLCJKU09OX1JQQ19TRVJWRVJfRVJST1JfTk9fU05BUFNIT1QiLCJKU09OX1JQQ19TRVJWRVJfRVJST1JfTE9OR19URVJNX1NUT1JBR0VfU0xPVF9TS0lQUEVEIiwiSlNPTl9SUENfU0VSVkVSX0VSUk9SX0tFWV9FWENMVURFRF9GUk9NX1NFQ09OREFSWV9JTkRFWCIsIkpTT05fUlBDX1NFUlZFUl9FUlJPUl9UUkFOU0FDVElPTl9ISVNUT1JZX05PVF9BVkFJTEFCTEUiLCJKU09OX1JQQ19TQ0FOX0VSUk9SIiwiSlNPTl9SUENfU0VSVkVSX0VSUk9SX1RSQU5TQUNUSU9OX1NJR05BVFVSRV9MRU5fTUlTTUFUQ0giLCJKU09OX1JQQ19TRVJWRVJfRVJST1JfQkxPQ0tfU1RBVFVTX05PVF9BVkFJTEFCTEVfWUVUIiwiSlNPTl9SUENfU0VSVkVSX0VSUk9SX1VOU1VQUE9SVEVEX1RSQU5TQUNUSU9OX1ZFUlNJT04iLCJKU09OX1JQQ19TRVJWRVJfRVJST1JfTUlOX0NPTlRFWFRfU0xPVF9OT1RfUkVBQ0hFRCIsIlNvbGFuYUpTT05SUENFcnJvciIsImN1c3RvbU1lc3NhZ2UiLCJzZW5kQW5kQ29uZmlybVRyYW5zYWN0aW9uIiwic2VuZE9wdGlvbnMiLCJza2lwUHJlZmxpZ2h0IiwicHJlZmxpZ2h0Q29tbWl0bWVudCIsImNvbW1pdG1lbnQiLCJtYXhSZXRyaWVzIiwic2VuZFRyYW5zYWN0aW9uIiwiY29uZmlybVRyYW5zYWN0aW9uIiwiYWJvcnRTaWduYWwiLCJub25jZUFjY291bnRQdWJrZXkiLCJub25jZVZhbHVlIiwic2xlZXAiLCJtcyIsImVuY29kZURhdGEiLCJhbGxvY0xlbmd0aCIsImxheW91dEZpZWxkcyIsImRlY29kZURhdGEkMSIsIkZlZUNhbGN1bGF0b3JMYXlvdXQiLCJOb25jZUFjY291bnRMYXlvdXQiLCJOT05DRV9BQ0NPVU5UX0xFTkdUSCIsIk5vbmNlQWNjb3VudCIsImF1dGhvcml6ZWRQdWJrZXkiLCJmZWVDYWxjdWxhdG9yIiwiZnJvbUFjY291bnREYXRhIiwibm9uY2VBY2NvdW50IiwiZW5jb2RlRGVjb2RlIiwiYmlnSW50TGF5b3V0IiwiYmlnSW50IiwiU3lzdGVtSW5zdHJ1Y3Rpb24iLCJkZWNvZGVJbnN0cnVjdGlvblR5cGUiLCJjaGVja1Byb2dyYW1JZCIsInR5cGVJbmRleCIsIml4VHlwZSIsIlNZU1RFTV9JTlNUUlVDVElPTl9MQVlPVVRTIiwiZGVjb2RlQ3JlYXRlQWNjb3VudCIsImNoZWNrS2V5TGVuZ3RoIiwibGFtcG9ydHMiLCJzcGFjZSIsIkNyZWF0ZSIsImZyb21QdWJrZXkiLCJuZXdBY2NvdW50UHVia2V5IiwiZGVjb2RlVHJhbnNmZXIiLCJUcmFuc2ZlciIsInRvUHVia2V5IiwiZGVjb2RlVHJhbnNmZXJXaXRoU2VlZCIsIlRyYW5zZmVyV2l0aFNlZWQiLCJiYXNlUHVia2V5IiwiZGVjb2RlQWxsb2NhdGUiLCJBbGxvY2F0ZSIsImFjY291bnRQdWJrZXkiLCJkZWNvZGVBbGxvY2F0ZVdpdGhTZWVkIiwiQWxsb2NhdGVXaXRoU2VlZCIsImRlY29kZUFzc2lnbiIsIkFzc2lnbiIsImRlY29kZUFzc2lnbldpdGhTZWVkIiwiQXNzaWduV2l0aFNlZWQiLCJkZWNvZGVDcmVhdGVXaXRoU2VlZCIsIkNyZWF0ZVdpdGhTZWVkIiwiZGVjb2RlTm9uY2VJbml0aWFsaXplIiwiYXV0aG9yaXplZCIsIkluaXRpYWxpemVOb25jZUFjY291bnQiLCJub25jZVB1YmtleSIsImRlY29kZU5vbmNlQWR2YW5jZSIsIkFkdmFuY2VOb25jZUFjY291bnQiLCJkZWNvZGVOb25jZVdpdGhkcmF3IiwiV2l0aGRyYXdOb25jZUFjY291bnQiLCJkZWNvZGVOb25jZUF1dGhvcml6ZSIsIkF1dGhvcml6ZU5vbmNlQWNjb3VudCIsIm5ld0F1dGhvcml6ZWRQdWJrZXkiLCJTeXN0ZW1Qcm9ncmFtIiwiVXBncmFkZU5vbmNlQWNjb3VudCIsImNyZWF0ZUFjY291bnQiLCJ0cmFuc2ZlciIsImNyZWF0ZUFjY291bnRXaXRoU2VlZCIsImNyZWF0ZU5vbmNlQWNjb3VudCIsImluaXRQYXJhbXMiLCJub25jZUluaXRpYWxpemUiLCJpbnN0cnVjdGlvbkRhdGEiLCJub25jZUFkdmFuY2UiLCJub25jZVdpdGhkcmF3Iiwibm9uY2VBdXRob3JpemUiLCJhbGxvY2F0ZSIsIkNIVU5LX1NJWkUiLCJMb2FkZXIiLCJnZXRNaW5OdW1TaWduYXR1cmVzIiwiY2h1bmtTaXplIiwibG9hZCIsInByb2dyYW0iLCJiYWxhbmNlTmVlZGVkIiwiZ2V0TWluaW11bUJhbGFuY2VGb3JSZW50RXhlbXB0aW9uIiwicHJvZ3JhbUluZm8iLCJkYXRhTGF5b3V0IiwidHJhbnNhY3Rpb25zIiwiYnl0ZXNMZW5ndGhQYWRkaW5nIiwiX3JwY0VuZHBvaW50IiwiUkVRVUVTVFNfUEVSX1NFQ09ORCIsImRlcGxveUNvbW1pdG1lbnQiLCJmaW5hbGl6ZVNpZ25hdHVyZSIsIk1TX1BFUl9TTE9UIiwiQlBGX0xPQURFUl9QUk9HUkFNX0lEIiwiQnBmTG9hZGVyIiwiZWxmIiwibG9hZGVyUHJvZ3JhbUlkIiwiZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMiLCJfX2VzTW9kdWxlIiwiZmFzdFN0YWJsZVN0cmluZ2lmeSQxIiwiaGFzUmVxdWlyZWRGYXN0U3RhYmxlU3RyaW5naWZ5IiwicmVxdWlyZUZhc3RTdGFibGVTdHJpbmdpZnkiLCJvYmpUb1N0cmluZyIsIm9iaktleXMiLCJpc0FycmF5UHJvcCIsInByb3BWYWwiLCJ0b1N0ciIsInJldHVyblZhbCIsImZhc3RTdGFibGVTdHJpbmdpZnkiLCJ0cmFpbGluZ1plcm9zIiwiRXBvY2hTY2hlZHVsZSIsInNsb3RzUGVyRXBvY2giLCJsZWFkZXJTY2hlZHVsZVNsb3RPZmZzZXQiLCJ3YXJtdXAiLCJmaXJzdE5vcm1hbEVwb2NoIiwiZmlyc3ROb3JtYWxTbG90IiwiZ2V0RXBvY2giLCJnZXRFcG9jaEFuZFNsb3RJbmRleCIsImVwb2NoIiwiZ2V0U2xvdHNJbkVwb2NoIiwibm9ybWFsU2xvdEluZGV4Iiwibm9ybWFsRXBvY2hJbmRleCIsImdldEZpcnN0U2xvdEluRXBvY2giLCJnZXRMYXN0U2xvdEluRXBvY2giLCJmZXRjaEltcGwiLCJmZXRjaCIsIlJwY1dlYlNvY2tldENsaWVudCIsInVybCIsInJwYyIsInVuZGVybHlpbmdTb2NrZXQiLCJyZWFkeVN0YXRlIiwiQWRkcmVzc0xvb2t1cFRhYmxlQWNjb3VudCIsImlzQWN0aXZlIiwiVTY0X01BWCIsImRlYWN0aXZhdGlvblNsb3QiLCJhY2NvdW50RGF0YSIsImRlY29kZURhdGEiLCJMb29rdXBUYWJsZU1ldGFMYXlvdXQiLCJzZXJpYWxpemVkQWRkcmVzc2VzTGVuIiwibnVtU2VyaWFsaXplZEFkZHJlc3NlcyIsImxhc3RFeHRlbmRlZFNsb3QiLCJsYXN0RXh0ZW5kZWRTbG90U3RhcnRJbmRleCIsImxhc3RFeHRlbmRlZFN0YXJ0SW5kZXgiLCJhdXRob3JpdHkiLCJVUkxfUkUiLCJQdWJsaWNLZXlGcm9tU3RyaW5nIiwiUmF3QWNjb3VudERhdGFSZXN1bHQiLCJCdWZmZXJGcm9tUmF3QWNjb3VudERhdGEiLCJCTE9DS0hBU0hfQ0FDSEVfVElNRU9VVF9NUyIsImV4dHJhY3RDb21taXRtZW50RnJvbUNvbmZpZyIsImNvbW1pdG1lbnRPckNvbmZpZyIsInNwZWNpZmllZENvbW1pdG1lbnQiLCJzcGVjaWZpZWRDb25maWciLCJhcHBseURlZmF1bHRNZW1jbXBFbmNvZGluZ1RvRmlsdGVycyIsImZpbHRlcnMiLCJtZW1jbXAiLCJjcmVhdGVScGNSZXN1bHQiLCJVbmtub3duUnBjUmVzdWx0IiwianNvblJwY1Jlc3VsdCIsImpzb25ScGNSZXN1bHRBbmRDb250ZXh0Iiwibm90aWZpY2F0aW9uUmVzdWx0QW5kQ29udGV4dCIsInZlcnNpb25lZE1lc3NhZ2VGcm9tUmVzcG9uc2UiLCJHZXRJbmZsYXRpb25Hb3Zlcm5vclJlc3VsdCIsImZvdW5kYXRpb24iLCJmb3VuZGF0aW9uVGVybSIsImluaXRpYWwiLCJ0YXBlciIsInRlcm1pbmFsIiwiR2V0SW5mbGF0aW9uUmV3YXJkUmVzdWx0IiwiZWZmZWN0aXZlU2xvdCIsImFtb3VudCIsInBvc3RCYWxhbmNlIiwiY29tbWlzc2lvbiIsIkdldFJlY2VudFByaW9yaXRpemF0aW9uRmVlc1Jlc3VsdCIsInByaW9yaXRpemF0aW9uRmVlIiwiR2V0SW5mbGF0aW9uUmF0ZVJlc3VsdCIsInRvdGFsIiwiR2V0RXBvY2hJbmZvUmVzdWx0Iiwic2xvdEluZGV4Iiwic2xvdHNJbkVwb2NoIiwiYWJzb2x1dGVTbG90IiwidHJhbnNhY3Rpb25Db3VudCIsIkdldEVwb2NoU2NoZWR1bGVSZXN1bHQiLCJHZXRMZWFkZXJTY2hlZHVsZVJlc3VsdCIsIlRyYW5zYWN0aW9uRXJyb3JSZXN1bHQiLCJTaWduYXR1cmVTdGF0dXNSZXN1bHQiLCJTaWduYXR1cmVSZWNlaXZlZFJlc3VsdCIsIlZlcnNpb25SZXN1bHQiLCJQYXJzZWRJbnN0cnVjdGlvblN0cnVjdCIsIlBhcnRpYWxseURlY29kZWRJbnN0cnVjdGlvblN0cnVjdCIsIlNpbXVsYXRlZFRyYW5zYWN0aW9uUmVzcG9uc2VTdHJ1Y3QiLCJyZW50RXBvY2giLCJ1bml0c0NvbnN1bWVkIiwicmV0dXJuRGF0YSIsImlubmVySW5zdHJ1Y3Rpb25zIiwiQmxvY2tQcm9kdWN0aW9uUmVzcG9uc2VTdHJ1Y3QiLCJieUlkZW50aXR5IiwiZmlyc3RTbG90IiwibGFzdFNsb3QiLCJHZXRJbmZsYXRpb25Hb3Zlcm5vclJwY1Jlc3VsdCIsIkdldEluZmxhdGlvblJhdGVScGNSZXN1bHQiLCJHZXRSZWNlbnRQcmlvcml0aXphdGlvbkZlZXNScGNSZXN1bHQiLCJHZXRFcG9jaEluZm9ScGNSZXN1bHQiLCJHZXRFcG9jaFNjaGVkdWxlUnBjUmVzdWx0IiwiR2V0TGVhZGVyU2NoZWR1bGVScGNSZXN1bHQiLCJTbG90UnBjUmVzdWx0IiwiR2V0U3VwcGx5UnBjUmVzdWx0IiwiY2lyY3VsYXRpbmciLCJub25DaXJjdWxhdGluZyIsIm5vbkNpcmN1bGF0aW5nQWNjb3VudHMiLCJUb2tlbkFtb3VudFJlc3VsdCIsInVpQW1vdW50IiwiZGVjaW1hbHMiLCJ1aUFtb3VudFN0cmluZyIsIkdldFRva2VuTGFyZ2VzdEFjY291bnRzUmVzdWx0IiwiR2V0VG9rZW5BY2NvdW50c0J5T3duZXIiLCJQYXJzZWRBY2NvdW50RGF0YVJlc3VsdCIsIkdldFBhcnNlZFRva2VuQWNjb3VudHNCeU93bmVyIiwiR2V0TGFyZ2VzdEFjY291bnRzUnBjUmVzdWx0IiwiQWNjb3VudEluZm9SZXN1bHQiLCJLZXllZEFjY291bnRJbmZvUmVzdWx0IiwiUGFyc2VkT3JSYXdBY2NvdW50RGF0YSIsIlBhcnNlZEFjY291bnRJbmZvUmVzdWx0IiwiS2V5ZWRQYXJzZWRBY2NvdW50SW5mb1Jlc3VsdCIsIlN0YWtlQWN0aXZhdGlvblJlc3VsdCIsImFjdGl2ZSIsImluYWN0aXZlIiwiR2V0Q29uZmlybWVkU2lnbmF0dXJlc0ZvckFkZHJlc3MyUnBjUmVzdWx0IiwibWVtbyIsIkdldFNpZ25hdHVyZXNGb3JBZGRyZXNzUnBjUmVzdWx0IiwiQWNjb3VudE5vdGlmaWNhdGlvblJlc3VsdCIsInN1YnNjcmlwdGlvbiIsIlByb2dyYW1BY2NvdW50SW5mb1Jlc3VsdCIsIlByb2dyYW1BY2NvdW50Tm90aWZpY2F0aW9uUmVzdWx0IiwiU2xvdEluZm9SZXN1bHQiLCJwYXJlbnQiLCJTbG90Tm90aWZpY2F0aW9uUmVzdWx0IiwiU2xvdFVwZGF0ZVJlc3VsdCIsInN0YXRzIiwibnVtVHJhbnNhY3Rpb25FbnRyaWVzIiwibnVtU3VjY2Vzc2Z1bFRyYW5zYWN0aW9ucyIsIm51bUZhaWxlZFRyYW5zYWN0aW9ucyIsIm1heFRyYW5zYWN0aW9uc1BlckVudHJ5IiwiU2xvdFVwZGF0ZU5vdGlmaWNhdGlvblJlc3VsdCIsIlNpZ25hdHVyZU5vdGlmaWNhdGlvblJlc3VsdCIsIlJvb3ROb3RpZmljYXRpb25SZXN1bHQiLCJDb250YWN0SW5mb1Jlc3VsdCIsImdvc3NpcCIsInRwdSIsIlZvdGVBY2NvdW50SW5mb1Jlc3VsdCIsInZvdGVQdWJrZXkiLCJub2RlUHVia2V5IiwiYWN0aXZhdGVkU3Rha2UiLCJlcG9jaFZvdGVBY2NvdW50IiwiZXBvY2hDcmVkaXRzIiwibGFzdFZvdGUiLCJyb290U2xvdCIsIkdldFZvdGVBY2NvdW50cyIsImN1cnJlbnQiLCJkZWxpbnF1ZW50IiwiQ29uZmlybWF0aW9uU3RhdHVzIiwiU2lnbmF0dXJlU3RhdHVzUmVzcG9uc2UiLCJjb25maXJtYXRpb25zIiwiR2V0U2lnbmF0dXJlU3RhdHVzZXNScGNSZXN1bHQiLCJHZXRNaW5pbXVtQmFsYW5jZUZvclJlbnRFeGVtcHRpb25ScGNSZXN1bHQiLCJBZGRyZXNzVGFibGVMb29rdXBTdHJ1Y3QiLCJDb25maXJtZWRUcmFuc2FjdGlvblJlc3VsdCIsIkFubm90YXRlZEFjY291bnRLZXkiLCJzb3VyY2UiLCJDb25maXJtZWRUcmFuc2FjdGlvbkFjY291bnRzTW9kZVJlc3VsdCIsIlBhcnNlZEluc3RydWN0aW9uUmVzdWx0IiwiUmF3SW5zdHJ1Y3Rpb25SZXN1bHQiLCJQYXJzZWRPclJhd0luc3RydWN0aW9uIiwiUGFyc2VkQ29uZmlybWVkVHJhbnNhY3Rpb25SZXN1bHQiLCJUb2tlbkJhbGFuY2VSZXN1bHQiLCJhY2NvdW50SW5kZXgiLCJtaW50IiwidWlUb2tlbkFtb3VudCIsIkxvYWRlZEFkZHJlc3Nlc1Jlc3VsdCIsIkNvbmZpcm1lZFRyYW5zYWN0aW9uTWV0YVJlc3VsdCIsImZlZSIsInByZUJhbGFuY2VzIiwicG9zdEJhbGFuY2VzIiwicHJlVG9rZW5CYWxhbmNlcyIsInBvc3RUb2tlbkJhbGFuY2VzIiwibG9hZGVkQWRkcmVzc2VzIiwiY29tcHV0ZVVuaXRzQ29uc3VtZWQiLCJQYXJzZWRDb25maXJtZWRUcmFuc2FjdGlvbk1ldGFSZXN1bHQiLCJUcmFuc2FjdGlvblZlcnNpb25TdHJ1Y3QiLCJSZXdhcmRzUmVzdWx0IiwicmV3YXJkVHlwZSIsIkdldEJsb2NrUnBjUmVzdWx0IiwicHJldmlvdXNCbG9ja2hhc2giLCJwYXJlbnRTbG90IiwicmV3YXJkcyIsIkdldE5vbmVNb2RlQmxvY2tScGNSZXN1bHQiLCJHZXRBY2NvdW50c01vZGVCbG9ja1JwY1Jlc3VsdCIsIkdldFBhcnNlZEJsb2NrUnBjUmVzdWx0IiwiR2V0UGFyc2VkQWNjb3VudHNNb2RlQmxvY2tScGNSZXN1bHQiLCJHZXRQYXJzZWROb25lTW9kZUJsb2NrUnBjUmVzdWx0IiwiR2V0Q29uZmlybWVkQmxvY2tScGNSZXN1bHQiLCJHZXRCbG9ja1NpZ25hdHVyZXNScGNSZXN1bHQiLCJHZXRUcmFuc2FjdGlvblJwY1Jlc3VsdCIsIkdldFBhcnNlZFRyYW5zYWN0aW9uUnBjUmVzdWx0IiwiR2V0TGF0ZXN0QmxvY2toYXNoUnBjUmVzdWx0IiwiSXNCbG9ja2hhc2hWYWxpZFJwY1Jlc3VsdCIsIkdldFJlY2VudFBlcmZvcm1hbmNlU2FtcGxlc1JwY1Jlc3VsdCIsIm51bVRyYW5zYWN0aW9ucyIsIm51bVNsb3RzIiwic2FtcGxlUGVyaW9kU2VjcyIsIkdldEZlZUNhbGN1bGF0b3JScGNSZXN1bHQiLCJsYW1wb3J0c1BlclNpZ25hdHVyZSIsIlJlcXVlc3RBaXJkcm9wUnBjUmVzdWx0IiwiU2VuZFRyYW5zYWN0aW9uUnBjUmVzdWx0IiwiTG9nc1Jlc3VsdCIsIkxvZ3NOb3RpZmljYXRpb25SZXN1bHQiLCJDT01NT05fSFRUUF9IRUFERVJTIiwiZW5kcG9pbnQiLCJfY29tbWl0bWVudE9yQ29uZmlnIiwid3NFbmRwb2ludCIsImh0dHBIZWFkZXJzIiwiZmV0Y2hNaWRkbGV3YXJlIiwiZGlzYWJsZVJldHJ5T25SYXRlTGltaXQiLCJodHRwQWdlbnQiLCJjbGllbnQiLCJfY29tbWl0bWVudCIsIl9jb25maXJtVHJhbnNhY3Rpb25Jbml0aWFsVGltZW91dCIsIl9ycGNXc0VuZHBvaW50IiwiX3JwY0NsaWVudCIsIl9ycGNSZXF1ZXN0IiwiX3JwY0JhdGNoUmVxdWVzdCIsIl9ycGNXZWJTb2NrZXQiLCJfcnBjV2ViU29ja2V0Q29ubmVjdGVkIiwiX3JwY1dlYlNvY2tldEhlYXJ0YmVhdCIsIl9ycGNXZWJTb2NrZXRJZGxlVGltZW91dCIsIl9ycGNXZWJTb2NrZXRHZW5lcmF0aW9uIiwiX2Rpc2FibGVCbG9ja2hhc2hDYWNoaW5nIiwiX3BvbGxpbmdCbG9ja2hhc2giLCJfYmxvY2toYXNoSW5mbyIsImxhdGVzdEJsb2NraGFzaCIsImxhc3RGZXRjaCIsInRyYW5zYWN0aW9uU2lnbmF0dXJlcyIsInNpbXVsYXRlZFNpZ25hdHVyZXMiLCJfbmV4dENsaWVudFN1YnNjcmlwdGlvbklkIiwiX3N1YnNjcmlwdGlvbkRpc3Bvc2VGdW5jdGlvbnNCeUNsaWVudFN1YnNjcmlwdGlvbklkIiwiX3N1YnNjcmlwdGlvbkhhc2hCeUNsaWVudFN1YnNjcmlwdGlvbklkIiwiX3N1YnNjcmlwdGlvblN0YXRlQ2hhbmdlQ2FsbGJhY2tzQnlIYXNoIiwiX3N1YnNjcmlwdGlvbkNhbGxiYWNrc0J5U2VydmVyU3Vic2NyaXB0aW9uSWQiLCJfc3Vic2NyaXB0aW9uc0J5SGFzaCIsIl9zdWJzY3JpcHRpb25zQXV0b0Rpc3Bvc2VkQnlScGMiLCJyZXF1ZXN0UHJvbWlzZXMiLCJfYnVpbGRBcmdzIiwicmVxdWVzdEhhc2giLCJjb25maXJtVHJhbnNhY3Rpb25Jbml0aWFsVGltZW91dCIsInB1dGF0aXZlVXJsIiwiYXNzZXJ0RW5kcG9pbnRVcmwiLCJtYXRjaGVzIiwibWF0Y2giLCJob3N0aXNoIiwicG9ydFdpdGhDb2xvbiIsInByb3RvY29sIiwic3RhcnRzV2l0aCIsInN0YXJ0UG9ydCIsIm1ha2VXZWJzb2NrZXRVcmwiLCJjdXN0b21GZXRjaCIsImZldGNoV2l0aE1pZGRsZXdhcmUiLCJpbmZvIiwiaW5pdCIsIm1vZGlmaWVkRmV0Y2hBcmdzIiwibW9kaWZpZWRJbmZvIiwibW9kaWZpZWRJbml0IiwiYm9keSIsImFnZW50IiwiaGVhZGVycyIsInRvb19tYW55X3JlcXVlc3RzX3JldHJpZXMiLCJ3YWl0VGltZSIsInN0YXR1c1RleHQiLCJ0ZXh0Iiwib2siLCJjcmVhdGVScGNDbGllbnQiLCJyZXF1ZXN0cyIsImJhdGNoIiwibWV0aG9kTmFtZSIsImNyZWF0ZVJwY0JhdGNoUmVxdWVzdCIsIl93c09uT3BlbiIsIl93c09uRXJyb3IiLCJfd3NPbkNsb3NlIiwiX3dzT25BY2NvdW50Tm90aWZpY2F0aW9uIiwiX3dzT25Qcm9ncmFtQWNjb3VudE5vdGlmaWNhdGlvbiIsIl93c09uU2xvdE5vdGlmaWNhdGlvbiIsIl93c09uU2xvdFVwZGF0ZXNOb3RpZmljYXRpb24iLCJfd3NPblNpZ25hdHVyZU5vdGlmaWNhdGlvbiIsIl93c09uUm9vdE5vdGlmaWNhdGlvbiIsIl93c09uTG9nc05vdGlmaWNhdGlvbiIsInJwY0VuZHBvaW50IiwiZ2V0QmFsYW5jZUFuZENvbnRleHQiLCJnZXRCbG9ja1RpbWUiLCJnZXRNaW5pbXVtTGVkZ2VyU2xvdCIsImdldEZpcnN0QXZhaWxhYmxlQmxvY2siLCJnZXRTdXBwbHkiLCJjb25maWdBcmciLCJnZXRUb2tlblN1cHBseSIsInRva2VuTWludEFkZHJlc3MiLCJnZXRUb2tlbkFjY291bnRCYWxhbmNlIiwidG9rZW5BZGRyZXNzIiwiZ2V0VG9rZW5BY2NvdW50c0J5T3duZXIiLCJvd25lckFkZHJlc3MiLCJfYXJncyIsImdldFBhcnNlZFRva2VuQWNjb3VudHNCeU93bmVyIiwiZ2V0TGFyZ2VzdEFjY291bnRzIiwiZ2V0VG9rZW5MYXJnZXN0QWNjb3VudHMiLCJtaW50QWRkcmVzcyIsImdldEFjY291bnRJbmZvQW5kQ29udGV4dCIsImdldFBhcnNlZEFjY291bnRJbmZvIiwiZ2V0TXVsdGlwbGVQYXJzZWRBY2NvdW50cyIsInB1YmxpY0tleXMiLCJyYXdDb25maWciLCJnZXRNdWx0aXBsZUFjY291bnRzSW5mb0FuZENvbnRleHQiLCJnZXRNdWx0aXBsZUFjY291bnRzSW5mbyIsImdldFN0YWtlQWN0aXZhdGlvbiIsImdldFByb2dyYW1BY2NvdW50cyIsImNvbmZpZ09yQ29tbWl0bWVudCIsImNvbmZpZ1dpdGhvdXRFbmNvZGluZyIsInVuc2FmZVJlcyIsImJhc2VTY2hlbWEiLCJ3aXRoQ29udGV4dCIsImdldFBhcnNlZFByb2dyYW1BY2NvdW50cyIsInN0cmF0ZWd5IiwicmF3U2lnbmF0dXJlIiwiZGVjb2RlZFNpZ25hdHVyZSIsImFib3J0ZWQiLCJjb25maXJtVHJhbnNhY3Rpb25Vc2luZ0xlZ2FjeVRpbWVvdXRTdHJhdGVneSIsImNvbmZpcm1UcmFuc2FjdGlvblVzaW5nQmxvY2tIZWlnaHRFeGNlZWRhbmNlU3RyYXRlZ3kiLCJjb25maXJtVHJhbnNhY3Rpb25Vc2luZ0R1cmFibGVOb25jZVN0cmF0ZWd5IiwiZ2V0Q2FuY2VsbGF0aW9uUHJvbWlzZSIsInNpZ25hbCIsImdldFRyYW5zYWN0aW9uQ29uZmlybWF0aW9uUHJvbWlzZSIsInNpZ25hdHVyZVN1YnNjcmlwdGlvbklkIiwiZGlzcG9zZVNpZ25hdHVyZVN1YnNjcmlwdGlvblN0YXRlQ2hhbmdlT2JzZXJ2ZXIiLCJhYm9ydENvbmZpcm1hdGlvbiIsInJlbW92ZVNpZ25hdHVyZUxpc3RlbmVyIiwiY29uZmlybWF0aW9uUHJvbWlzZSIsIm9uU2lnbmF0dXJlIiwiX190eXBlIiwiUFJPQ0VTU0VEIiwic3Vic2NyaXB0aW9uU2V0dXBQcm9taXNlIiwicmVzb2x2ZVN1YnNjcmlwdGlvblNldHVwIiwiX29uU3Vic2NyaXB0aW9uU3RhdGVDaGFuZ2UiLCJuZXh0U3RhdGUiLCJnZXRTaWduYXR1cmVTdGF0dXMiLCJleHBpcnlQcm9taXNlIiwiY2hlY2tCbG9ja0hlaWdodCIsIl9lIiwiY3VycmVudEJsb2NrSGVpZ2h0IiwiQkxPQ0tIRUlHSFRfRVhDRUVERUQiLCJjYW5jZWxsYXRpb25Qcm9taXNlIiwib3V0Y29tZSIsInJhY2UiLCJjdXJyZW50Tm9uY2VWYWx1ZSIsImxhc3RDaGVja2VkU2xvdCIsImdldEN1cnJlbnROb25jZVZhbHVlIiwiZ2V0Tm9uY2VBbmRDb250ZXh0IiwiTk9OQ0VfSU5WQUxJRCIsInNsb3RJbldoaWNoTm9uY2VEaWRBZHZhbmNlIiwic2lnbmF0dXJlU3RhdHVzIiwiY29tbWl0bWVudEZvclN0YXR1cyIsInRpbWVvdXRJZCIsInRpbWVvdXRNcyIsIlRJTUVEX09VVCIsImdldENsdXN0ZXJOb2RlcyIsImdldFZvdGVBY2NvdW50cyIsImdldFNsb3RMZWFkZXIiLCJnZXRTbG90TGVhZGVycyIsInN0YXJ0U2xvdCIsImdldFNpZ25hdHVyZVN0YXR1c2VzIiwiZ2V0VHJhbnNhY3Rpb25Db3VudCIsImdldFRvdGFsU3VwcGx5IiwiZXhjbHVkZU5vbkNpcmN1bGF0aW5nQWNjb3VudHNMaXN0IiwiZ2V0SW5mbGF0aW9uR292ZXJub3IiLCJnZXRJbmZsYXRpb25SZXdhcmQiLCJnZXRJbmZsYXRpb25SYXRlIiwiZ2V0RXBvY2hJbmZvIiwiZ2V0RXBvY2hTY2hlZHVsZSIsImVwb2NoU2NoZWR1bGUiLCJnZXRMZWFkZXJTY2hlZHVsZSIsImdldFJlY2VudEJsb2NraGFzaEFuZENvbnRleHQiLCJnZXRMYXRlc3RCbG9ja2hhc2hBbmRDb250ZXh0IiwiZ2V0UmVjZW50UGVyZm9ybWFuY2VTYW1wbGVzIiwiZ2V0RmVlQ2FsY3VsYXRvckZvckJsb2NraGFzaCIsIndpcmVNZXNzYWdlIiwiZ2V0UmVjZW50UHJpb3JpdGl6YXRpb25GZWVzIiwibG9ja2VkV3JpdGFibGVBY2NvdW50cyIsImdldFJlY2VudEJsb2NraGFzaCIsImlzQmxvY2toYXNoVmFsaWQiLCJnZXRHZW5lc2lzSGFzaCIsImdldEJsb2NrIiwiX2J1aWxkQXJnc0F0TGVhc3RDb25maXJtZWQiLCJ0cmFuc2FjdGlvbkRldGFpbHMiLCJnZXRQYXJzZWRCbG9jayIsImdldEJsb2NrUHJvZHVjdGlvbiIsImV4dHJhIiwiZ2V0UGFyc2VkVHJhbnNhY3Rpb24iLCJnZXRQYXJzZWRUcmFuc2FjdGlvbnMiLCJnZXRUcmFuc2FjdGlvbnMiLCJnZXRDb25maXJtZWRCbG9jayIsImJsb2NrIiwiZ2V0QmxvY2tzIiwiZW5kU2xvdCIsImdldEJsb2NrU2lnbmF0dXJlcyIsImdldENvbmZpcm1lZEJsb2NrU2lnbmF0dXJlcyIsImdldENvbmZpcm1lZFRyYW5zYWN0aW9uIiwiZ2V0UGFyc2VkQ29uZmlybWVkVHJhbnNhY3Rpb24iLCJnZXRQYXJzZWRDb25maXJtZWRUcmFuc2FjdGlvbnMiLCJnZXRDb25maXJtZWRTaWduYXR1cmVzRm9yQWRkcmVzcyIsImZpcnN0QXZhaWxhYmxlQmxvY2siLCJ1bnRpbCIsImhpZ2hlc3RDb25maXJtZWRSb290IiwiYmVmb3JlIiwiZ2V0Q29uZmlybWVkU2lnbmF0dXJlc0ZvckFkZHJlc3MyIiwiZ2V0QWRkcmVzc0xvb2t1cFRhYmxlIiwiZ2V0Tm9uY2UiLCJyZXF1ZXN0QWlyZHJvcCIsIl9ibG9ja2hhc2hXaXRoRXhwaXJ5QmxvY2tIZWlnaHQiLCJkaXNhYmxlQ2FjaGUiLCJleHBpcmVkIiwibm93IiwiX3BvbGxOZXdCbG9ja2hhc2giLCJzdGFydFRpbWUiLCJjYWNoZWRMYXRlc3RCbG9ja2hhc2giLCJjYWNoZWRCbG9ja2hhc2giLCJnZXRTdGFrZU1pbmltdW1EZWxlZ2F0aW9uIiwic2ltdWxhdGVUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uT3JNZXNzYWdlIiwiY29uZmlnT3JTaWduZXJzIiwiaW5jbHVkZUFjY291bnRzIiwiZW5jb2RlZFRyYW5zYWN0aW9uIiwib3JpZ2luYWxUeCIsInNpZ1ZlcmlmeSIsInRyYWNlSW5kZW50IiwibG9nVHJhY2UiLCJzaWduZXJzT3JPcHRpb25zIiwic2VuZFJhd1RyYW5zYWN0aW9uIiwicmF3VHJhbnNhY3Rpb24iLCJzZW5kRW5jb2RlZFRyYW5zYWN0aW9uIiwic2V0SW50ZXJ2YWwiLCJfdXBkYXRlU3Vic2NyaXB0aW9ucyIsIk1BWF9TQUZFX0lOVEVHRVIiLCJjbGVhckludGVydmFsIiwiX3NldFN1YnNjcmlwdGlvbiIsIm5leHRTdWJzY3JpcHRpb24iLCJwcmV2U3RhdGUiLCJzdGF0ZUNoYW5nZUNhbGxiYWNrcyIsImNsaWVudFN1YnNjcmlwdGlvbklkIiwiYWN0aXZlV2ViU29ja2V0R2VuZXJhdGlvbiIsImlzQ3VycmVudENvbm5lY3Rpb25TdGlsbEFjdGl2ZSIsImNhbGxiYWNrcyIsInNlcnZlclN1YnNjcmlwdGlvbklkIiwidW5zdWJzY3JpYmVNZXRob2QiLCJfaGFuZGxlU2VydmVyTm90aWZpY2F0aW9uIiwiY2FsbGJhY2tBcmdzIiwiX21ha2VTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb25Db25maWciLCJleGlzdGluZ1N1YnNjcmlwdGlvbiIsIm9uQWNjb3VudENoYW5nZSIsInJlbW92ZUFjY291bnRDaGFuZ2VMaXN0ZW5lciIsIl91bnN1YnNjcmliZUNsaWVudFN1YnNjcmlwdGlvbiIsImFjY291bnRJZCIsIm9uUHJvZ3JhbUFjY291bnRDaGFuZ2UiLCJtYXliZUZpbHRlcnMiLCJyZW1vdmVQcm9ncmFtQWNjb3VudENoYW5nZUxpc3RlbmVyIiwib25Mb2dzIiwibWVudGlvbnMiLCJyZW1vdmVPbkxvZ3NMaXN0ZW5lciIsIm9uU2xvdENoYW5nZSIsInJlbW92ZVNsb3RDaGFuZ2VMaXN0ZW5lciIsIm9uU2xvdFVwZGF0ZSIsInJlbW92ZVNsb3RVcGRhdGVMaXN0ZW5lciIsInN1YnNjcmlwdGlvbk5hbWUiLCJkaXNwb3NlIiwib3ZlcnJpZGUiLCJfZXJyIiwib25TaWduYXR1cmVXaXRoT3B0aW9ucyIsIm9uUm9vdENoYW5nZSIsInJlbW92ZVJvb3RDaGFuZ2VMaXN0ZW5lciIsImtleXBhaXIiLCJfa2V5cGFpciIsImdlbmVyYXRlIiwiZnJvbVNlY3JldEtleSIsInNraXBWYWxpZGF0aW9uIiwiY29tcHV0ZWRQdWJsaWNLZXkiLCJpaSIsImZyb21TZWVkIiwiTE9PS1VQX1RBQkxFX0lOU1RSVUNUSU9OX0xBWU9VVFMiLCJDcmVhdGVMb29rdXBUYWJsZSIsIkZyZWV6ZUxvb2t1cFRhYmxlIiwiRXh0ZW5kTG9va3VwVGFibGUiLCJEZWFjdGl2YXRlTG9va3VwVGFibGUiLCJDbG9zZUxvb2t1cFRhYmxlIiwiQWRkcmVzc0xvb2t1cFRhYmxlSW5zdHJ1Y3Rpb24iLCJsYXlvdXRUeXBlIiwiZGVjb2RlQ3JlYXRlTG9va3VwVGFibGUiLCJjaGVja0tleXNMZW5ndGgiLCJyZWNlbnRTbG90IiwiZGVjb2RlRXh0ZW5kTG9va3VwVGFibGUiLCJkZWNvZGVDbG9zZUxvb2t1cFRhYmxlIiwicmVjaXBpZW50IiwiZGVjb2RlRnJlZXplTG9va3VwVGFibGUiLCJkZWNvZGVEZWFjdGl2YXRlTG9va3VwVGFibGUiLCJBZGRyZXNzTG9va3VwVGFibGVQcm9ncmFtIiwiY3JlYXRlTG9va3VwVGFibGUiLCJsb29rdXBUYWJsZUFkZHJlc3MiLCJidW1wU2VlZCIsImZyZWV6ZUxvb2t1cFRhYmxlIiwiZXh0ZW5kTG9va3VwVGFibGUiLCJhZGRyIiwiZGVhY3RpdmF0ZUxvb2t1cFRhYmxlIiwiY2xvc2VMb29rdXBUYWJsZSIsIkNvbXB1dGVCdWRnZXRJbnN0cnVjdGlvbiIsIkNPTVBVVEVfQlVER0VUX0lOU1RSVUNUSU9OX0xBWU9VVFMiLCJkZWNvZGVSZXF1ZXN0VW5pdHMiLCJhZGRpdGlvbmFsRmVlIiwiUmVxdWVzdFVuaXRzIiwiZGVjb2RlUmVxdWVzdEhlYXBGcmFtZSIsIlJlcXVlc3RIZWFwRnJhbWUiLCJkZWNvZGVTZXRDb21wdXRlVW5pdExpbWl0IiwiU2V0Q29tcHV0ZVVuaXRMaW1pdCIsImRlY29kZVNldENvbXB1dGVVbml0UHJpY2UiLCJtaWNyb0xhbXBvcnRzIiwiU2V0Q29tcHV0ZVVuaXRQcmljZSIsIkNvbXB1dGVCdWRnZXRQcm9ncmFtIiwicmVxdWVzdFVuaXRzIiwicmVxdWVzdEhlYXBGcmFtZSIsInNldENvbXB1dGVVbml0TGltaXQiLCJzZXRDb21wdXRlVW5pdFByaWNlIiwiRUQyNTUxOV9JTlNUUlVDVElPTl9MQVlPVVQiLCJFZDI1NTE5UHJvZ3JhbSIsImNyZWF0ZUluc3RydWN0aW9uV2l0aFB1YmxpY0tleSIsImluc3RydWN0aW9uSW5kZXgiLCJwdWJsaWNLZXlPZmZzZXQiLCJzaWduYXR1cmVPZmZzZXQiLCJtZXNzYWdlRGF0YU9mZnNldCIsIm51bVNpZ25hdHVyZXMiLCJwYWRkaW5nIiwic2lnbmF0dXJlSW5zdHJ1Y3Rpb25JbmRleCIsInB1YmxpY0tleUluc3RydWN0aW9uSW5kZXgiLCJtZXNzYWdlRGF0YVNpemUiLCJtZXNzYWdlSW5zdHJ1Y3Rpb25JbmRleCIsImNyZWF0ZUluc3RydWN0aW9uV2l0aFByaXZhdGVLZXkiLCJwdWJsaWNLZXlDcmVhdGUiLCJTRUNQMjU2SzFfSU5TVFJVQ1RJT05fTEFZT1VUIiwiU2VjcDI1NmsxUHJvZ3JhbSIsInB1YmxpY0tleVRvRXRoQWRkcmVzcyIsInJlY292ZXJ5SWQiLCJjcmVhdGVJbnN0cnVjdGlvbldpdGhFdGhBZGRyZXNzIiwiZXRoQWRkcmVzcyIsInJhd0FkZHJlc3MiLCJldGhBZGRyZXNzT2Zmc2V0IiwiZXRoQWRkcmVzc0luc3RydWN0aW9uSW5kZXgiLCJwa2V5IiwibWVzc2FnZUhhc2giLCJlY2RzYVNpZ24iLCJfTG9ja3VwIiwiU1RBS0VfQ09ORklHX0lEIiwiQXV0aG9yaXplZCIsInN0YWtlciIsIndpdGhkcmF3ZXIiLCJMb2NrdXAiLCJ1bml4VGltZXN0YW1wIiwiY3VzdG9kaWFuIiwiU3Rha2VJbnN0cnVjdGlvbiIsIlNUQUtFX0lOU1RSVUNUSU9OX0xBWU9VVFMiLCJkZWNvZGVJbml0aWFsaXplIiwibG9ja3VwIiwiSW5pdGlhbGl6ZSIsInN0YWtlUHVia2V5IiwiZGVjb2RlRGVsZWdhdGUiLCJEZWxlZ2F0ZSIsImRlY29kZUF1dGhvcml6ZSIsIm5ld0F1dGhvcml6ZWQiLCJzdGFrZUF1dGhvcml6YXRpb25UeXBlIiwiQXV0aG9yaXplIiwiY3VzdG9kaWFuUHVia2V5IiwiZGVjb2RlQXV0aG9yaXplV2l0aFNlZWQiLCJhdXRob3JpdHlTZWVkIiwiYXV0aG9yaXR5T3duZXIiLCJBdXRob3JpemVXaXRoU2VlZCIsImF1dGhvcml0eUJhc2UiLCJkZWNvZGVTcGxpdCIsIlNwbGl0Iiwic3BsaXRTdGFrZVB1YmtleSIsImRlY29kZU1lcmdlIiwiTWVyZ2UiLCJzb3VyY2VTdGFrZVB1YktleSIsImRlY29kZVdpdGhkcmF3IiwiV2l0aGRyYXciLCJkZWNvZGVEZWFjdGl2YXRlIiwiRGVhY3RpdmF0ZSIsIlN0YWtlUHJvZ3JhbSIsIlN0YWtlQXV0aG9yaXphdGlvbkxheW91dCIsIlN0YWtlciIsIldpdGhkcmF3ZXIiLCJpbml0aWFsaXplIiwibWF5YmVMb2NrdXAiLCJkZWxlZ2F0ZSIsImF1dGhvcml6ZSIsImF1dGhvcml6ZVdpdGhTZWVkIiwic3BsaXRJbnN0cnVjdGlvbiIsInJlbnRFeGVtcHRSZXNlcnZlIiwic3BsaXRXaXRoU2VlZCIsIm1lcmdlIiwid2l0aGRyYXciLCJkZWFjdGl2YXRlIiwiVm90ZUluaXQiLCJhdXRob3JpemVkVm90ZXIiLCJhdXRob3JpemVkV2l0aGRyYXdlciIsIlZvdGVJbnN0cnVjdGlvbiIsIlZPVEVfSU5TVFJVQ1RJT05fTEFZT1VUUyIsImRlY29kZUluaXRpYWxpemVBY2NvdW50Iiwidm90ZUluaXQiLCJJbml0aWFsaXplQWNjb3VudCIsInZvdGVBdXRob3JpemF0aW9uVHlwZSIsInZvdGVBdXRob3JpemVXaXRoU2VlZEFyZ3MiLCJjdXJyZW50QXV0aG9yaXR5RGVyaXZlZEtleU93bmVyUHVia2V5IiwiY3VycmVudEF1dGhvcml0eURlcml2ZWRLZXlTZWVkIiwiY3VycmVudEF1dGhvcml0eURlcml2ZWRLZXlCYXNlUHVia2V5IiwiYXV0aG9yaXplZFdpdGhkcmF3ZXJQdWJrZXkiLCJWb3RlUHJvZ3JhbSIsIlVwZGF0ZVZhbGlkYXRvcklkZW50aXR5IiwiVm90ZUF1dGhvcml6YXRpb25MYXlvdXQiLCJWb3RlciIsImluaXRpYWxpemVBY2NvdW50Iiwic2FmZVdpdGhkcmF3IiwiY3VycmVudFZvdGVBY2NvdW50QmFsYW5jZSIsInJlbnRFeGVtcHRNaW5pbXVtIiwidXBkYXRlVmFsaWRhdG9ySWRlbnRpdHkiLCJWQUxJREFUT1JfSU5GT19LRVkiLCJJbmZvU3RyaW5nIiwid2Vic2l0ZSIsImljb25VcmwiLCJrZXliYXNlVXNlcm5hbWUiLCJWYWxpZGF0b3JJbmZvIiwiZnJvbUNvbmZpZ0RhdGEiLCJjb25maWdLZXlzIiwicmF3SW5mbyIsIlZPVEVfUFJPR1JBTV9JRCIsIlZvdGVBY2NvdW50TGF5b3V0IiwiVm90ZUFjY291bnQiLCJ2b3RlcyIsImF1dGhvcml6ZWRWb3RlcnMiLCJwcmlvclZvdGVycyIsImxhc3RUaW1lc3RhbXAiLCJ2YSIsInJvb3RTbG90VmFsaWQiLCJwYXJzZUF1dGhvcml6ZWRWb3RlciIsImdldFByaW9yVm90ZXJzIiwicGFyc2VQcmlvclZvdGVycyIsImVwb2NoT2ZMYXN0QXV0aG9yaXplZFN3aXRjaCIsInRhcmdldEVwb2NoIiwiaWR4IiwiaXNFbXB0eSIsImh0dHAiLCJkZXZuZXQiLCJ0ZXN0bmV0IiwiaHR0cHMiLCJjbHVzdGVyQXBpVXJsIiwiY2x1c3RlciIsInRscyIsInNlbmRBbmRDb25maXJtUmF3VHJhbnNhY3Rpb24iLCJjb25maXJtYXRpb25TdHJhdGVneU9yQ29uZmlybU9wdGlvbnMiLCJtYXliZUNvbmZpcm1PcHRpb25zIiwiY29uZmlybWF0aW9uU3RyYXRlZ3kiLCJpbmhlcml0cyIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJUZW1wQ3RvciIsIkJOIiwiZW5kaWFuIiwiaXNCTiIsIm5lZ2F0aXZlIiwid29yZHMiLCJyZWQiLCJfaW5pdCIsIndvcmRTaXplIiwicGFyc2VIZXg0Qml0cyIsInBhcnNlSGV4Qnl0ZSIsImxvd2VyQm91bmQiLCJwYXJzZUJhc2UiLCJtb3ZlIiwiZGVzdCIsImNtcCIsIl9pbml0TnVtYmVyIiwiX2luaXRBcnJheSIsIl9wYXJzZUhleCIsIl9wYXJzZUJhc2UiLCJ0b0FycmF5IiwidyIsIl9zdHJpcCIsImxpbWJMZW4iLCJsaW1iUG93IiwibW9kIiwiaW11bG4iLCJfaWFkZG4iLCJfbW92ZSIsIl9leHBhbmQiLCJfbm9ybVNpZ24iLCJmb3IiLCJ6ZXJvcyIsImdyb3VwU2l6ZXMiLCJncm91cEJhc2VzIiwic21hbGxNdWxUbyIsImNhcnJ5IiwibmNhcnJ5IiwicndvcmQiLCJtYXhKIiwiZ3JvdXBTaXplIiwiZ3JvdXBCYXNlIiwiaXNaZXJvIiwibW9kcm4iLCJpZGl2biIsInRvTnVtYmVyIiwiQXJyYXlUeXBlIiwicmVxTGVuZ3RoIiwiX3RvQXJyYXlMaWtlTEUiLCJwb3NpdGlvbiIsIl90b0FycmF5TGlrZUJFIiwiY2x6MzIiLCJfY291bnRCaXRzIiwiX3plcm9CaXRzIiwiemVyb0JpdHMiLCJ0b1R3b3MiLCJpbm90biIsImlhZGRuIiwiZnJvbVR3b3MiLCJ0ZXN0biIsIm5vdG4iLCJpbmVnIiwiaXNOZWciLCJpdW9yIiwiaW9yIiwib3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwieG9yIiwidXhvciIsImJ5dGVzTmVlZGVkIiwiYml0c0xlZnQiLCJzZXRuIiwiYml0Iiwid2JpdCIsImlhZGQiLCJpc3ViIiwiY29tYjEwTXVsVG8iLCJtaWQiLCJhMCIsImFsMCIsImFoMCIsImFsMSIsImFoMSIsImFsMiIsImFoMiIsImFsMyIsImFoMyIsImFsNCIsImFoNCIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYjAiLCJibDAiLCJiaDAiLCJibDEiLCJiaDEiLCJibDIiLCJiaDIiLCJibDMiLCJiaDMiLCJibDQiLCJiaDQiLCJibDUiLCJiaDUiLCJibDYiLCJiaDYiLCJiNyIsImJsNyIsImJoNyIsImI4IiwiYmw4IiwiYmg4IiwiYmw5IiwiYmg5IiwidzAiLCJpbXVsIiwidzEiLCJ3MiIsInczIiwidzQiLCJ3NSIsInc2IiwidzciLCJ3OCIsInc5IiwidzEwIiwidzExIiwidzEyIiwidzEzIiwidzE0IiwidzE1IiwidzE2IiwidzE3IiwidzE4IiwiYmlnTXVsVG8iLCJobmNhcnJ5IiwianVtYm9NdWxUbyIsIkZGVE0iLCJtdWxUbyIsIm1ha2VSQlQiLCJyZXZCaW4iLCJyYiIsInBlcm11dGUiLCJyYnQiLCJyd3MiLCJpd3MiLCJydHdzIiwiaXR3cyIsInJ0d2RmIiwiY29zIiwiaXR3ZGYiLCJzaW4iLCJydHdkZl8iLCJpdHdkZl8iLCJyZSIsImllIiwicm8iLCJpbyIsInJ4IiwiZ3Vlc3NMZW4xM2IiLCJvZGQiLCJjb25qdWdhdGUiLCJub3JtYWxpemUxM2IiLCJ3cyIsImNvbnZlcnQxM2IiLCJzdHViIiwicGgiLCJtdWxwIiwicndzdCIsIml3c3QiLCJucndzIiwibnJ3c3QiLCJuaXdzdCIsInJtd3MiLCJtdWxmIiwiaXNOZWdOdW0iLCJtdWxuIiwiaXNxciIsInRvQml0QXJyYXkiLCJpdXNobG4iLCJjYXJyeU1hc2siLCJuZXdDYXJyeSIsImlzaGxuIiwiaXVzaHJuIiwiaGludCIsImV4dGVuZGVkIiwibWFza2VkV29yZHMiLCJpc2hybiIsInNobG4iLCJ1c2hsbiIsInNocm4iLCJ1c2hybiIsImltYXNrbiIsIm1hc2tuIiwiaXN1Ym4iLCJhZGRuIiwic3VibiIsImlhYnMiLCJfaXNobG5zdWJtdWwiLCJfd29yZERpdiIsIm1vZGUiLCJiaGkiLCJkaWZmIiwicWoiLCJkaXZtb2QiLCJwb3NpdGl2ZSIsImRpdm4iLCJ1bW9kIiwiZGl2Um91bmQiLCJkbSIsImhhbGYiLCJyMiIsImFuZGxuIiwibW9kbiIsImVnY2QiLCJpc0V2ZW4iLCJ5cCIsInhwIiwiaW0iLCJqbSIsImdjZCIsIl9pbnZtcCIsIngxIiwiY21wbiIsImludm0iLCJiaW5jbiIsInVjbXAiLCJndG4iLCJndCIsImd0ZW4iLCJndGUiLCJsdG4iLCJsdCIsImx0ZW4iLCJsdGUiLCJlcW4iLCJSZWQiLCJ0b1JlZCIsImNvbnZlcnRUbyIsIl9mb3JjZVJlZCIsImZyb21SZWQiLCJjb252ZXJ0RnJvbSIsImZvcmNlUmVkIiwicmVkQWRkIiwicmVkSUFkZCIsInJlZFN1YiIsInJlZElTdWIiLCJyZWRTaGwiLCJzaGwiLCJyZWRNdWwiLCJfdmVyaWZ5MiIsInJlZElNdWwiLCJyZWRTcXIiLCJfdmVyaWZ5MSIsInJlZElTcXIiLCJyZWRTcXJ0IiwicmVkSW52bSIsInJlZE5lZyIsInJlZFBvdyIsInByaW1lcyIsImsyNTYiLCJwMjI0IiwicDE5MiIsInAyNTUxOSIsIk1QcmltZSIsIl90bXAiLCJLMjU2IiwiUDIyNCIsIlAxOTIiLCJQMjU1MTkiLCJwcmltZSIsIl9wcmltZSIsIk1vbnQiLCJpbW9kIiwicmludiIsIm1pbnYiLCJpcmVkdWNlIiwicmxlbiIsImltdWxLIiwic3RyaXAiLCJvdXRwdXQiLCJtb2QzIiwib25lIiwibk9uZSIsImxwb3ciLCJ3bmQiLCJjdXJyZW50TGVuIiwibW9udCIsIl9CdWZmZXIiLCJBTFBIQUJFVCIsIkJBU0VfTUFQIiwiY2hhckF0IiwieGMiLCJMRUFERVIiLCJGQUNUT1IiLCJpRkFDVE9SIiwiZGVjb2RlVW5zYWZlIiwicHN6IiwiemVyb2VzIiwiYjI1NiIsImNoYXJDb2RlIiwiaXQzIiwiaXQ0IiwidmNoIiwicGJlZ2luIiwicGVuZCIsImI1OCIsIml0MSIsIml0MiIsInJlcGVhdCIsImJhc2V4IiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibWF4Q2h1bmtMZW5ndGgiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJ1OCIsImJ1ZmZlcl8xIiwiY2hlY2tVaW50OEFycmF5IiwidWludDhBcnJheVRvQnVmZmVyIiwiTGF5b3V0IiwibWFrZURlc3RpbmF0aW9uT2JqZWN0IiwiZ2V0U3BhbiIsInJlcGxpY2F0ZSIsInJ2IiwiZnJvbUFycmF5IiwibmFtZVdpdGhQcm9wZXJ0eSIsIkV4dGVybmFsTGF5b3V0IiwiaXNDb3VudCIsIk9mZnNldExheW91dCIsIlVJbnQiLCJVSW50QkUiLCJWMkUzMiIsImRpdm1vZEludDY0IiwiaGkzMiIsImxvMzIiLCJyb3VuZGVkSW50NjQiLCJOZWFyVUludDY0IiwiTmVhckludDY0IiwiU2VxdWVuY2UiLCJlbG8iLCJTdHJ1Y3R1cmUiLCJkZWNvZGVQcmVmaXhlcyIsImZkIiwiZnNwIiwiZmlyc3RPZmZzZXQiLCJsYXN0T2Zmc2V0IiwibGFzdFdyb3RlIiwiZnYiLCJsYXlvdXRGb3IiLCJvZmZzZXRPZiIsIkJsb2IiLCJzcmNCdWZmZXIiLCJfX2NyZWF0ZUJpbmRpbmciLCJfX3NldE1vZHVsZURlZmF1bHQiLCJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJfX2ltcG9ydFN0YXIiLCJfX2ltcG9ydERlZmF1bHQiLCJCaW5hcnlSZWFkZXIiLCJCaW5hcnlXcml0ZXIiLCJCb3JzaEVycm9yIiwiYmFzZURlY29kZSIsImJhc2VFbmNvZGUiLCJibl9qc18xIiwiYnM1OF8xIiwidGV4dERlY29kZXIiLCJJTklUSUFMX0xFTkdUSCIsImZpZWxkUGF0aCIsIm9yaWdpbmFsTWVzc2FnZSIsImFkZFRvRmllbGRQYXRoIiwibWF5YmVSZXNpemUiLCJ3cml0ZVU4Iiwid3JpdGVVMTYiLCJ3cml0ZVUzMiIsIndyaXRlVTY0Iiwid3JpdGVCdWZmZXIiLCJ3cml0ZVUxMjgiLCJ3cml0ZVUyNTYiLCJ3cml0ZVU1MTIiLCJ3cml0ZVN0cmluZyIsIndyaXRlRml4ZWRBcnJheSIsIndyaXRlQXJyYXkiLCJoYW5kbGluZ1JhbmdlRXJyb3IiLCJwcm9wZXJ0eUtleSIsInByb3BlcnR5RGVzY3JpcHRvciIsIm9yaWdpbmFsTWV0aG9kIiwicmVhZFU4IiwicmVhZFUxNiIsInJlYWRVMzIiLCJyZWFkVTY0IiwicmVhZEJ1ZmZlciIsInJlYWRVMTI4IiwicmVhZFUyNTYiLCJyZWFkVTUxMiIsInJlYWRTdHJpbmciLCJyZWFkRml4ZWRBcnJheSIsInJlYWRBcnJheSIsImNhcGl0YWxpemVGaXJzdExldHRlciIsInRvVXBwZXJDYXNlIiwic2VyaWFsaXplRmllbGQiLCJmaWVsZFR5cGUiLCJ3cml0ZXIiLCJzZXJpYWxpemVTdHJ1Y3QiLCJib3JzaFNlcmlhbGl6ZSIsInN0cnVjdFNjaGVtYSIsImRlc2VyaWFsaXplRmllbGQiLCJyZWFkZXIiLCJkZXNlcmlhbGl6ZVN0cnVjdCIsImNsYXNzVHlwZSIsImJvcnNoRGVzZXJpYWxpemUiLCJmaWVsZFZhbHVlIiwiV3JpdGVyIiwiUmVhZGVyIiwiY29weVByb3BzIiwiU2FmZUJ1ZmZlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkZWZpbml0aW9uIiwicHJvcCIsIm5tZCIsInBhdGhzIiwiY2hpbGRyZW4iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJuZXRSUEMiLCJpbmZvVGFibGUiLCJmb290ZXIiLCJ3YWxsZXRJbnB1dCIsIm9uY2xpY2siLCJ3YWxsZXRBZGRyZXNzIiwiaW5uZXJIVE1MIiwicmVjZW50VHJhbnNhY3Rpb25zIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZSIsImFycmF5RWxlbWVudCIsImluc2VydEFkamFjZW50SFRNTCIsInN0eWxlIiwiZGlzcGxheSIsImRpc3BsYXlTZWN0aW9ucyIsImRldm5ldEJ0biIsImlzRGV2bmV0IiwiZGVidWciLCJpbm5lclRleHQiLCJzZXRQcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=